
cv04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2f0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  0800a4b0  0800a4b0  0000b4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a584  0800a584  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a584  0800a584  0000b584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a58c  0800a58c  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a58c  0800a58c  0000b58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a590  0800a590  0000b590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20040000  0800a594  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000227c  20040060  0800a5f4  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200422dc  0800a5f4  0000c2dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028555  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bf2  00000000  00000000  000345e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002028  00000000  00000000  000391d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000018f1  00000000  00000000  0003b200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004aad  00000000  00000000  0003caf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024749  00000000  00000000  0004159e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001270fc  00000000  00000000  00065ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018cde3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d8c  00000000  00000000  0018ce28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00195bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040060 	.word	0x20040060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a498 	.word	0x0800a498

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040064 	.word	0x20040064
 80001fc:	0800a498 	.word	0x0800a498

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 ff15 	bl	8001322 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f848 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fa86 	bl	8000a0c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000500:	f000 f936 	bl	8000770 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f982 	bl	800080c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000508:	f000 fa52 	bl	80009b0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 800050c:	f000 fa18 	bl	8000940 <MX_TIM7_Init>
  MX_ADC1_Init();
 8000510:	f000 f890 	bl	8000634 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000514:	f000 f9c6 	bl	80008a4 <MX_TIM3_Init>
  MX_DAC1_Init();
 8000518:	f000 f8f6 	bl	8000708 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 800051c:	4813      	ldr	r0, [pc, #76]	@ (800056c <main+0x7c>)
 800051e:	f004 fe75 	bl	800520c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000522:	4813      	ldr	r0, [pc, #76]	@ (8000570 <main+0x80>)
 8000524:	f001 fab4 	bl	8001a90 <HAL_ADC_Start_IT>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000528:	2100      	movs	r1, #0
 800052a:	4812      	ldr	r0, [pc, #72]	@ (8000574 <main+0x84>)
 800052c:	f002 fbde 	bl	8002cec <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000530:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000534:	2200      	movs	r2, #0
 8000536:	2100      	movs	r1, #0
 8000538:	480e      	ldr	r0, [pc, #56]	@ (8000574 <main+0x84>)
 800053a:	f002 fc83 	bl	8002e44 <HAL_DAC_SetValue>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800053e:	f006 fc11 	bl	8006d64 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore1 */
  Semaphore1Handle = osSemaphoreNew(1, 0, &Semaphore1_attributes);
 8000542:	4a0d      	ldr	r2, [pc, #52]	@ (8000578 <main+0x88>)
 8000544:	2100      	movs	r1, #0
 8000546:	2001      	movs	r0, #1
 8000548:	f006 fce8 	bl	8006f1c <osSemaphoreNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a0b      	ldr	r2, [pc, #44]	@ (800057c <main+0x8c>)
 8000550:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Filtrace */
  FiltraceHandle = osThreadNew(StartFiltrace, NULL, &Filtrace_attributes);
 8000552:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <main+0x90>)
 8000554:	2100      	movs	r1, #0
 8000556:	480b      	ldr	r0, [pc, #44]	@ (8000584 <main+0x94>)
 8000558:	f006 fc4e 	bl	8006df8 <osThreadNew>
 800055c:	4603      	mov	r3, r0
 800055e:	4a0a      	ldr	r2, [pc, #40]	@ (8000588 <main+0x98>)
 8000560:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000562:	f006 fc23 	bl	8006dac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000566:	bf00      	nop
 8000568:	e7fd      	b.n	8000566 <main+0x76>
 800056a:	bf00      	nop
 800056c:	20040228 	.word	0x20040228
 8000570:	20040084 	.word	0x20040084
 8000574:	200400ec 	.word	0x200400ec
 8000578:	0800a504 	.word	0x0800a504
 800057c:	200407a8 	.word	0x200407a8
 8000580:	0800a4e0 	.word	0x0800a4e0
 8000584:	08000b85 	.word	0x08000b85
 8000588:	200407a4 	.word	0x200407a4

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b096      	sub	sp, #88	@ 0x58
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	2244      	movs	r2, #68	@ 0x44
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f009 fe94 	bl	800a2c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	463b      	mov	r3, r7
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005ae:	2000      	movs	r0, #0
 80005b0:	f003 f8ee 	bl	8003790 <HAL_PWREx_ControlVoltageScaling>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005ba:	f000 fb55 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80005be:	2322      	movs	r3, #34	@ 0x22
 80005c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	2340      	movs	r3, #64	@ 0x40
 80005ce:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d0:	2302      	movs	r3, #2
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80005dc:	231e      	movs	r3, #30
 80005de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 f991 	bl	8003918 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005fc:	f000 fb34 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2303      	movs	r3, #3
 8000606:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	2105      	movs	r1, #5
 800061a:	4618      	mov	r0, r3
 800061c:	f003 fd96 	bl	800414c <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000626:	f000 fb1f 	bl	8000c68 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3758      	adds	r7, #88	@ 0x58
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	463b      	mov	r3, r7
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800064a:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <MX_ADC1_Init+0xc8>)
 800064c:	4a2c      	ldr	r2, [pc, #176]	@ (8000700 <MX_ADC1_Init+0xcc>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <MX_ADC1_Init+0xc8>)
 8000652:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000656:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000658:	4b28      	ldr	r3, [pc, #160]	@ (80006fc <MX_ADC1_Init+0xc8>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065e:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <MX_ADC1_Init+0xc8>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000664:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <MX_ADC1_Init+0xc8>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066a:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <MX_ADC1_Init+0xc8>)
 800066c:	2204      	movs	r2, #4
 800066e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000670:	4b22      	ldr	r3, [pc, #136]	@ (80006fc <MX_ADC1_Init+0xc8>)
 8000672:	2200      	movs	r2, #0
 8000674:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000676:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <MX_ADC1_Init+0xc8>)
 8000678:	2200      	movs	r2, #0
 800067a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800067c:	4b1f      	ldr	r3, [pc, #124]	@ (80006fc <MX_ADC1_Init+0xc8>)
 800067e:	2201      	movs	r2, #1
 8000680:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000682:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <MX_ADC1_Init+0xc8>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <MX_ADC1_Init+0xc8>)
 800068c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <MX_ADC1_Init+0xc8>)
 8000694:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000698:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800069a:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <MX_ADC1_Init+0xc8>)
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_ADC1_Init+0xc8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_ADC1_Init+0xc8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b0:	4812      	ldr	r0, [pc, #72]	@ (80006fc <MX_ADC1_Init+0xc8>)
 80006b2:	f001 f8a7 	bl	8001804 <HAL_ADC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80006bc:	f000 fad4 	bl	8000c68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006c0:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <MX_ADC1_Init+0xd0>)
 80006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c4:	2306      	movs	r3, #6
 80006c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006cc:	237f      	movs	r3, #127	@ 0x7f
 80006ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d0:	2304      	movs	r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4807      	ldr	r0, [pc, #28]	@ (80006fc <MX_ADC1_Init+0xc8>)
 80006de:	f001 fc61 	bl	8001fa4 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80006e8:	f000 fabe 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80006ec:	217f      	movs	r1, #127	@ 0x7f
 80006ee:	4803      	ldr	r0, [pc, #12]	@ (80006fc <MX_ADC1_Init+0xc8>)
 80006f0:	f002 f966 	bl	80029c0 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END ADC1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20040084 	.word	0x20040084
 8000700:	50040000 	.word	0x50040000
 8000704:	21800100 	.word	0x21800100

08000708 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2228      	movs	r2, #40	@ 0x28
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f009 fdd7 	bl	800a2c8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800071a:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_DAC1_Init+0x60>)
 800071c:	4a13      	ldr	r2, [pc, #76]	@ (800076c <MX_DAC1_Init+0x64>)
 800071e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000720:	4811      	ldr	r0, [pc, #68]	@ (8000768 <MX_DAC1_Init+0x60>)
 8000722:	f002 fac1 	bl	8002ca8 <HAL_DAC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800072c:	f000 fa9c 	bl	8000c68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000734:	2300      	movs	r3, #0
 8000736:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_DAC1_Init+0x60>)
 8000750:	f002 fba8 	bl	8002ea4 <HAL_DAC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800075a:	f000 fa85 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	@ 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200400ec 	.word	0x200400ec
 800076c:	40007400 	.word	0x40007400

08000770 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000774:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 8000776:	4a23      	ldr	r2, [pc, #140]	@ (8000804 <MX_LPUART1_UART_Init+0x94>)
 8000778:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800077a:	4b21      	ldr	r3, [pc, #132]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 800077c:	4a22      	ldr	r2, [pc, #136]	@ (8000808 <MX_LPUART1_UART_Init+0x98>)
 800077e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000780:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 8000782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000786:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007a6:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007b8:	4811      	ldr	r0, [pc, #68]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 80007ba:	f005 f975 	bl	8005aa8 <HAL_UART_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 fa50 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 80007cc:	f005 ff10 	bl	80065f0 <HAL_UARTEx_SetTxFifoThreshold>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007d6:	f000 fa47 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4808      	ldr	r0, [pc, #32]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 80007de:	f005 ff45 	bl	800666c <HAL_UARTEx_SetRxFifoThreshold>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007e8:	f000 fa3e 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_LPUART1_UART_Init+0x90>)
 80007ee:	f005 fec6 	bl	800657e <HAL_UARTEx_DisableFifoMode>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 fa36 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20040100 	.word	0x20040100
 8000804:	40008000 	.word	0x40008000
 8000808:	00033324 	.word	0x00033324

0800080c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000810:	4b22      	ldr	r3, [pc, #136]	@ (800089c <MX_USART3_UART_Init+0x90>)
 8000812:	4a23      	ldr	r2, [pc, #140]	@ (80008a0 <MX_USART3_UART_Init+0x94>)
 8000814:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000816:	4b21      	ldr	r3, [pc, #132]	@ (800089c <MX_USART3_UART_Init+0x90>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b1f      	ldr	r3, [pc, #124]	@ (800089c <MX_USART3_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <MX_USART3_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082a:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <MX_USART3_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <MX_USART3_UART_Init+0x90>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b19      	ldr	r3, [pc, #100]	@ (800089c <MX_USART3_UART_Init+0x90>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_USART3_UART_Init+0x90>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_USART3_UART_Init+0x90>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_USART3_UART_Init+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_USART3_UART_Init+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000854:	4811      	ldr	r0, [pc, #68]	@ (800089c <MX_USART3_UART_Init+0x90>)
 8000856:	f005 f927 	bl	8005aa8 <HAL_UART_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000860:	f000 fa02 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000864:	2100      	movs	r1, #0
 8000866:	480d      	ldr	r0, [pc, #52]	@ (800089c <MX_USART3_UART_Init+0x90>)
 8000868:	f005 fec2 	bl	80065f0 <HAL_UARTEx_SetTxFifoThreshold>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000872:	f000 f9f9 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000876:	2100      	movs	r1, #0
 8000878:	4808      	ldr	r0, [pc, #32]	@ (800089c <MX_USART3_UART_Init+0x90>)
 800087a:	f005 fef7 	bl	800666c <HAL_UARTEx_SetRxFifoThreshold>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000884:	f000 f9f0 	bl	8000c68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_USART3_UART_Init+0x90>)
 800088a:	f005 fe78 	bl	800657e <HAL_UARTEx_DisableFifoMode>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000894:	f000 f9e8 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20040194 	.word	0x20040194
 80008a0:	40004800 	.word	0x40004800

080008a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000938 <MX_TIM3_Init+0x94>)
 80008c4:	4a1d      	ldr	r2, [pc, #116]	@ (800093c <MX_TIM3_Init+0x98>)
 80008c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_TIM3_Init+0x94>)
 80008ca:	220b      	movs	r2, #11
 80008cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_TIM3_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_TIM3_Init+0x94>)
 80008d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_TIM3_Init+0x94>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_TIM3_Init+0x94>)
 80008e4:	2280      	movs	r2, #128	@ 0x80
 80008e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008e8:	4813      	ldr	r0, [pc, #76]	@ (8000938 <MX_TIM3_Init+0x94>)
 80008ea:	f004 fc37 	bl	800515c <HAL_TIM_Base_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008f4:	f000 f9b8 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4619      	mov	r1, r3
 8000904:	480c      	ldr	r0, [pc, #48]	@ (8000938 <MX_TIM3_Init+0x94>)
 8000906:	f004 fdf8 	bl	80054fa <HAL_TIM_ConfigClockSource>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000910:	f000 f9aa 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000914:	2320      	movs	r3, #32
 8000916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_TIM3_Init+0x94>)
 8000922:	f005 f81b 	bl	800595c <HAL_TIMEx_MasterConfigSynchronization>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800092c:	f000 f99c 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20040228 	.word	0x20040228
 800093c:	40000400 	.word	0x40000400

08000940 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000950:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <MX_TIM7_Init+0x68>)
 8000952:	4a16      	ldr	r2, [pc, #88]	@ (80009ac <MX_TIM7_Init+0x6c>)
 8000954:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6000-1;
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_TIM7_Init+0x68>)
 8000958:	f241 726f 	movw	r2, #5999	@ 0x176f
 800095c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_TIM7_Init+0x68>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8000964:	4b10      	ldr	r3, [pc, #64]	@ (80009a8 <MX_TIM7_Init+0x68>)
 8000966:	f242 720f 	movw	r2, #9999	@ 0x270f
 800096a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800096c:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_TIM7_Init+0x68>)
 800096e:	2280      	movs	r2, #128	@ 0x80
 8000970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000972:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <MX_TIM7_Init+0x68>)
 8000974:	f004 fbf2 	bl	800515c <HAL_TIM_Base_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800097e:	f000 f973 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000982:	2320      	movs	r3, #32
 8000984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <MX_TIM7_Init+0x68>)
 8000990:	f004 ffe4 	bl	800595c <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800099a:	f000 f965 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20040274 	.word	0x20040274
 80009ac:	40001400 	.word	0x40001400

080009b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80009ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2206      	movs	r2, #6
 80009c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2202      	movs	r2, #2
 80009cc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009f4:	f002 fd79 	bl	80034ea <HAL_PCD_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009fe:	f000 f933 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200402c0 	.word	0x200402c0

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	@ 0x30
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b4c      	ldr	r3, [pc, #304]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a26:	4a4b      	ldr	r2, [pc, #300]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2e:	4b49      	ldr	r3, [pc, #292]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	61bb      	str	r3, [r7, #24]
 8000a38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	4b46      	ldr	r3, [pc, #280]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3e:	4a45      	ldr	r2, [pc, #276]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a46:	4b43      	ldr	r3, [pc, #268]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b40      	ldr	r3, [pc, #256]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a56:	4a3f      	ldr	r2, [pc, #252]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a6e:	4a39      	ldr	r2, [pc, #228]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a76:	4b37      	ldr	r3, [pc, #220]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b34      	ldr	r3, [pc, #208]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	4a33      	ldr	r2, [pc, #204]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a88:	f043 0308 	orr.w	r3, r3, #8
 8000a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8e:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	f003 0308 	and.w	r3, r3, #8
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b54 <MX_GPIO_Init+0x148>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000ab2:	f002 ff21 	bl	80038f8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000abc:	4826      	ldr	r0, [pc, #152]	@ (8000b58 <MX_GPIO_Init+0x14c>)
 8000abe:	f002 fcd9 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2140      	movs	r1, #64	@ 0x40
 8000ac6:	4825      	ldr	r0, [pc, #148]	@ (8000b5c <MX_GPIO_Init+0x150>)
 8000ac8:	f002 fcd4 	bl	8003474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000acc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481f      	ldr	r0, [pc, #124]	@ (8000b60 <MX_GPIO_Init+0x154>)
 8000ae4:	f002 fb34 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000ae8:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4815      	ldr	r0, [pc, #84]	@ (8000b58 <MX_GPIO_Init+0x14c>)
 8000b02:	f002 fb25 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b06:	2320      	movs	r3, #32
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4810      	ldr	r0, [pc, #64]	@ (8000b5c <MX_GPIO_Init+0x150>)
 8000b1a:	f002 fb19 	bl	8003150 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b1e:	2340      	movs	r3, #64	@ 0x40
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <MX_GPIO_Init+0x150>)
 8000b36:	f002 fb0b 	bl	8003150 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	2028      	movs	r0, #40	@ 0x28
 8000b40:	f002 f888 	bl	8002c54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b44:	2028      	movs	r0, #40	@ 0x28
 8000b46:	f002 f8a1 	bl	8002c8c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3730      	adds	r7, #48	@ 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40021000 	.word	0x40021000
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48001800 	.word	0x48001800
 8000b60:	48000800 	.word	0x48000800

08000b64 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(Semaphore1Handle);
 8000b6c:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4618      	mov	r0, r3
 8000b72:	f006 faaf 	bl	80070d4 <osSemaphoreRelease>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200407a8 	.word	0x200407a8

08000b84 <StartFiltrace>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFiltrace */
void StartFiltrace(void *argument)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0a2      	sub	sp, #136	@ 0x88
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
   // Proměnná pro aktuální vzorek
  uint32_t buffer[N] = {0}; // Kruhový buffer pro N vzorků, inicializován na 0
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	2278      	movs	r2, #120	@ 0x78
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f009 fb97 	bl	800a2c8 <memset>
  int index = 0; // Index pro přístup do bufferu
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sum = 0; // Součet všech prvků v bufferu
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

  /* Infinite loop */
  for (;;)
  {
    // Získání nového ADC vzorku
    ADCInput = HAL_ADC_GetValue(&hadc1);
 8000ba6:	4822      	ldr	r0, [pc, #136]	@ (8000c30 <StartFiltrace+0xac>)
 8000ba8:	f001 f826 	bl	8001bf8 <HAL_ADC_GetValue>
 8000bac:	4603      	mov	r3, r0
 8000bae:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <StartFiltrace+0xb0>)
 8000bb0:	6013      	str	r3, [r2, #0]

    // Aktualizace bufferu
    sum -= buffer[index]; // Odečti starý prvek z celkového součtu
 8000bb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	3388      	adds	r3, #136	@ 0x88
 8000bba:	443b      	add	r3, r7
 8000bbc:	f853 3c80 	ldr.w	r3, [r3, #-128]
 8000bc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    buffer[index] = ADCInput; // Přepiš aktuální prvek novým vzorkem
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <StartFiltrace+0xb0>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	3388      	adds	r3, #136	@ 0x88
 8000bd6:	443b      	add	r3, r7
 8000bd8:	f843 2c80 	str.w	r2, [r3, #-128]
    sum += ADCInput; // Přičti nový prvek do celkového součtu
 8000bdc:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <StartFiltrace+0xb0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000be4:	4413      	add	r3, r2
 8000be6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    // Posun indexu v kruhovém bufferu
    index = (index + 1) % N;
 8000bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <StartFiltrace+0xb4>)
 8000bf2:	fb83 1302 	smull	r1, r3, r3, r2
 8000bf6:	4413      	add	r3, r2
 8000bf8:	1119      	asrs	r1, r3, #4
 8000bfa:	17d3      	asrs	r3, r2, #31
 8000bfc:	1ac9      	subs	r1, r1, r3
 8000bfe:	460b      	mov	r3, r1
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	1a5b      	subs	r3, r3, r1
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    // Výpočet klouzavého průměru
    FilterOutput = sum / N;
 8000c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c10:	4a09      	ldr	r2, [pc, #36]	@ (8000c38 <StartFiltrace+0xb4>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	091b      	lsrs	r3, r3, #4
 8000c18:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <StartFiltrace+0xb8>)
 8000c1a:	6013      	str	r3, [r2, #0]
    //HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, DACOut);
    // Synchronizace s dalšími úkoly (pokud je potřeba)
    osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <StartFiltrace+0xbc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f04f 31ff 	mov.w	r1, #4294967295
 8000c24:	4618      	mov	r0, r3
 8000c26:	f006 fa03 	bl	8007030 <osSemaphoreAcquire>
    ADCInput = HAL_ADC_GetValue(&hadc1);
 8000c2a:	bf00      	nop
 8000c2c:	e7bb      	b.n	8000ba6 <StartFiltrace+0x22>
 8000c2e:	bf00      	nop
 8000c30:	20040084 	.word	0x20040084
 8000c34:	20040080 	.word	0x20040080
 8000c38:	88888889 	.word	0x88888889
 8000c3c:	2004007c 	.word	0x2004007c
 8000c40:	200407a8 	.word	0x200407a8

08000c44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c56:	f000 fb7d 	bl	8001354 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim==&htim3){
	}
  /* USER CODE END Callback 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40001000 	.word	0x40001000

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <Error_Handler+0x8>

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c7e:	4a10      	ldr	r2, [pc, #64]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c86:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c96:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <HAL_MspInit+0x4c>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	210f      	movs	r1, #15
 8000cae:	f06f 0001 	mvn.w	r0, #1
 8000cb2:	f001 ffcf 	bl	8002c54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000

08000cc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0ae      	sub	sp, #184	@ 0xb8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	2294      	movs	r2, #148	@ 0x94
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f009 faef 	bl	800a2c8 <memset>
  if(hadc->Instance==ADC1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a2b      	ldr	r2, [pc, #172]	@ (8000d9c <HAL_ADC_MspInit+0xd8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d14f      	bne.n	8000d94 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cf4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000cf8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cfa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000d02:	2302      	movs	r3, #2
 8000d04:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 fd01 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000d30:	f7ff ff9a 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <HAL_ADC_MspInit+0xdc>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d38:	4a19      	ldr	r2, [pc, #100]	@ (8000da0 <HAL_ADC_MspInit+0xdc>)
 8000d3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d40:	4b17      	ldr	r3, [pc, #92]	@ (8000da0 <HAL_ADC_MspInit+0xdc>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <HAL_ADC_MspInit+0xdc>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d50:	4a13      	ldr	r2, [pc, #76]	@ (8000da0 <HAL_ADC_MspInit+0xdc>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <HAL_ADC_MspInit+0xdc>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d64:	2308      	movs	r3, #8
 8000d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d6a:	230b      	movs	r3, #11
 8000d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d80:	f002 f9e6 	bl	8003150 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	2105      	movs	r1, #5
 8000d88:	2012      	movs	r0, #18
 8000d8a:	f001 ff63 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000d8e:	2012      	movs	r0, #18
 8000d90:	f001 ff7c 	bl	8002c8c <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d94:	bf00      	nop
 8000d96:	37b8      	adds	r7, #184	@ 0xb8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	50040000 	.word	0x50040000
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	@ 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a19      	ldr	r2, [pc, #100]	@ (8000e28 <HAL_DAC_MspInit+0x84>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d12c      	bne.n	8000e20 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000dc6:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <HAL_DAC_MspInit+0x88>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dca:	4a18      	ldr	r2, [pc, #96]	@ (8000e2c <HAL_DAC_MspInit+0x88>)
 8000dcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dd2:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <HAL_DAC_MspInit+0x88>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <HAL_DAC_MspInit+0x88>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <HAL_DAC_MspInit+0x88>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <HAL_DAC_MspInit+0x88>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000df6:	2310      	movs	r3, #16
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0c:	f002 f9a0 	bl	8003150 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000e10:	2200      	movs	r2, #0
 8000e12:	2105      	movs	r1, #5
 8000e14:	2036      	movs	r0, #54	@ 0x36
 8000e16:	f001 ff1d 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e1a:	2036      	movs	r0, #54	@ 0x36
 8000e1c:	f001 ff36 	bl	8002c8c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	@ 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40007400 	.word	0x40007400
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0b0      	sub	sp, #192	@ 0xc0
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	2294      	movs	r2, #148	@ 0x94
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f009 fa39 	bl	800a2c8 <memset>
  if(huart->Instance==LPUART1)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a43      	ldr	r2, [pc, #268]	@ (8000f68 <HAL_UART_MspInit+0x138>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d13e      	bne.n	8000ede <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e60:	2320      	movs	r3, #32
 8000e62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e68:	f107 0318 	add.w	r3, r7, #24
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 fc5d 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e78:	f7ff fef6 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e80:	4a3a      	ldr	r2, [pc, #232]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000e88:	4b38      	ldr	r3, [pc, #224]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e94:	4b35      	ldr	r3, [pc, #212]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e98:	4a34      	ldr	r2, [pc, #208]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea0:	4b32      	ldr	r3, [pc, #200]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000eac:	f002 fd24 	bl	80038f8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000eb0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4826      	ldr	r0, [pc, #152]	@ (8000f70 <HAL_UART_MspInit+0x140>)
 8000ed8:	f002 f93a 	bl	8003150 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000edc:	e040      	b.n	8000f60 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a24      	ldr	r2, [pc, #144]	@ (8000f74 <HAL_UART_MspInit+0x144>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d13b      	bne.n	8000f60 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee8:	2304      	movs	r3, #4
 8000eea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef0:	f107 0318 	add.w	r3, r7, #24
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f003 fc19 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000f00:	f7ff feb2 	bl	8000c68 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f08:	4a18      	ldr	r2, [pc, #96]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000f0a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f10:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f20:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000f22:	f043 0308 	orr.w	r3, r3, #8
 8000f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f28:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <HAL_UART_MspInit+0x13c>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f54:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <HAL_UART_MspInit+0x148>)
 8000f5c:	f002 f8f8 	bl	8003150 <HAL_GPIO_Init>
}
 8000f60:	bf00      	nop
 8000f62:	37c0      	adds	r7, #192	@ 0xc0
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40008000 	.word	0x40008000
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	48001800 	.word	0x48001800
 8000f74:	40004800 	.word	0x40004800
 8000f78:	48000c00 	.word	0x48000c00

08000f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1a      	ldr	r2, [pc, #104]	@ (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d114      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f92:	4a19      	ldr	r2, [pc, #100]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2105      	movs	r1, #5
 8000faa:	201d      	movs	r0, #29
 8000fac:	f001 fe52 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fb0:	201d      	movs	r0, #29
 8000fb2:	f001 fe6b 	bl	8002c8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000fb6:	e018      	b.n	8000fea <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8000ffc <HAL_TIM_Base_MspInit+0x80>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d113      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fc8:	f043 0320 	orr.w	r3, r3, #32
 8000fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fce:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd2:	f003 0320 	and.w	r3, r3, #32
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2105      	movs	r1, #5
 8000fde:	2037      	movs	r0, #55	@ 0x37
 8000fe0:	f001 fe38 	bl	8002c54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000fe4:	2037      	movs	r0, #55	@ 0x37
 8000fe6:	f001 fe51 	bl	8002c8c <HAL_NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40000400 	.word	0x40000400
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40001400 	.word	0x40001400

08001000 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0b0      	sub	sp, #192	@ 0xc0
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	2294      	movs	r2, #148	@ 0x94
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f009 f951 	bl	800a2c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800102e:	d16c      	bne.n	800110a <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001034:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fb73 	bl	800472c <HAL_RCCEx_PeriphCLKConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800104c:	f7ff fe0c 	bl	8000c68 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001050:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	4a2f      	ldr	r2, [pc, #188]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105c:	4b2d      	ldr	r3, [pc, #180]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001068:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800106c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001082:	230a      	movs	r3, #10
 8001084:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001092:	f002 f85d 	bl	8003150 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800109a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b4:	f002 f84c 	bl	8003150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010b8:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010bc:	4a15      	ldr	r2, [pc, #84]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 80010be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 80010c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d0:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d114      	bne.n	8001106 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 80010de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 80010ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80010f4:	f002 fbf0 	bl	80038d8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 80010fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fc:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <HAL_PCD_MspInit+0x114>)
 80010fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001102:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001104:	e001      	b.n	800110a <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001106:	f002 fbe7 	bl	80038d8 <HAL_PWREx_EnableVddUSB>
}
 800110a:	bf00      	nop
 800110c:	37c0      	adds	r7, #192	@ 0xc0
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08e      	sub	sp, #56	@ 0x38
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001126:	4b34      	ldr	r3, [pc, #208]	@ (80011f8 <HAL_InitTick+0xe0>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	4a33      	ldr	r2, [pc, #204]	@ (80011f8 <HAL_InitTick+0xe0>)
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	6593      	str	r3, [r2, #88]	@ 0x58
 8001132:	4b31      	ldr	r3, [pc, #196]	@ (80011f8 <HAL_InitTick+0xe0>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001136:	f003 0310 	and.w	r3, r3, #16
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800113e:	f107 0210 	add.w	r2, r7, #16
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f003 f9fd 	bl	8004548 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001154:	2b00      	cmp	r3, #0
 8001156:	d103      	bne.n	8001160 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001158:	f003 f9ca 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 800115c:	6378      	str	r0, [r7, #52]	@ 0x34
 800115e:	e004      	b.n	800116a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001160:	f003 f9c6 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8001164:	4603      	mov	r3, r0
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800116a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800116c:	4a23      	ldr	r2, [pc, #140]	@ (80011fc <HAL_InitTick+0xe4>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0c9b      	lsrs	r3, r3, #18
 8001174:	3b01      	subs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <HAL_InitTick+0xe8>)
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <HAL_InitTick+0xec>)
 800117c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <HAL_InitTick+0xe8>)
 8001180:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001184:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001186:	4a1e      	ldr	r2, [pc, #120]	@ (8001200 <HAL_InitTick+0xe8>)
 8001188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <HAL_InitTick+0xe8>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_InitTick+0xe8>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_InitTick+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800119e:	4818      	ldr	r0, [pc, #96]	@ (8001200 <HAL_InitTick+0xe8>)
 80011a0:	f003 ffdc 	bl	800515c <HAL_TIM_Base_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80011aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d11b      	bne.n	80011ea <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80011b2:	4813      	ldr	r0, [pc, #76]	@ (8001200 <HAL_InitTick+0xe8>)
 80011b4:	f004 f82a 	bl	800520c <HAL_TIM_Base_Start_IT>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80011be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d111      	bne.n	80011ea <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011c6:	2036      	movs	r0, #54	@ 0x36
 80011c8:	f001 fd60 	bl	8002c8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	d808      	bhi.n	80011e4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011d2:	2200      	movs	r2, #0
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	2036      	movs	r0, #54	@ 0x36
 80011d8:	f001 fd3c 	bl	8002c54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <HAL_InitTick+0xf0>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e002      	b.n	80011ea <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3738      	adds	r7, #56	@ 0x38
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	431bde83 	.word	0x431bde83
 8001200:	200407ac 	.word	0x200407ac
 8001204:	40001000 	.word	0x40001000
 8001208:	20040004 	.word	0x20040004

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <NMI_Handler+0x4>

08001214 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <BusFault_Handler+0x4>

0800122c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <UsageFault_Handler+0x4>

08001234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <ADC1_IRQHandler+0x10>)
 800124a:	f000 fce2 	bl	8001c12 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20040084 	.word	0x20040084

08001258 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <TIM3_IRQHandler+0x10>)
 800125e:	f004 f845 	bl	80052ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20040228 	.word	0x20040228

0800126c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001270:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001274:	f002 f916 	bl	80034a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001280:	4803      	ldr	r0, [pc, #12]	@ (8001290 <TIM6_DAC_IRQHandler+0x14>)
 8001282:	f004 f833 	bl	80052ec <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001286:	4803      	ldr	r0, [pc, #12]	@ (8001294 <TIM6_DAC_IRQHandler+0x18>)
 8001288:	f001 fd82 	bl	8002d90 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200407ac 	.word	0x200407ac
 8001294:	200400ec 	.word	0x200400ec

08001298 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <TIM7_IRQHandler+0x10>)
 800129e:	f004 f825 	bl	80052ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20040274 	.word	0x20040274

080012ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <SystemInit+0x20>)
 80012b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b6:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <SystemInit+0x20>)
 80012b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001308 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d4:	f7ff ffea 	bl	80012ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d8:	480c      	ldr	r0, [pc, #48]	@ (800130c <LoopForever+0x6>)
  ldr r1, =_edata
 80012da:	490d      	ldr	r1, [pc, #52]	@ (8001310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001314 <LoopForever+0xe>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e0:	e002      	b.n	80012e8 <LoopCopyDataInit>

080012e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012e6:	3304      	adds	r3, #4

080012e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ec:	d3f9      	bcc.n	80012e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f0:	4c0a      	ldr	r4, [pc, #40]	@ (800131c <LoopForever+0x16>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f4:	e001      	b.n	80012fa <LoopFillZerobss>

080012f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f8:	3204      	adds	r2, #4

080012fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012fc:	d3fb      	bcc.n	80012f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012fe:	f009 f841 	bl	800a384 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001302:	f7ff f8f5 	bl	80004f0 <main>

08001306 <LoopForever>:

LoopForever:
    b LoopForever
 8001306:	e7fe      	b.n	8001306 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001308:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800130c:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001310:	20040060 	.word	0x20040060
  ldr r2, =_sidata
 8001314:	0800a594 	.word	0x0800a594
  ldr r2, =_sbss
 8001318:	20040060 	.word	0x20040060
  ldr r4, =_ebss
 800131c:	200422dc 	.word	0x200422dc

08001320 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001320:	e7fe      	b.n	8001320 <CAN1_RX0_IRQHandler>

08001322 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f001 fc86 	bl	8002c3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001332:	2005      	movs	r0, #5
 8001334:	f7ff fef0 	bl	8001118 <HAL_InitTick>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	e001      	b.n	8001348 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001344:	f7ff fc96 	bl	8000c74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001348:	79fb      	ldrb	r3, [r7, #7]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20040008 	.word	0x20040008
 8001378:	200407f8 	.word	0x200407f8

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200407f8 	.word	0x200407f8

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20040008 	.word	0x20040008

080013dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	609a      	str	r2, [r3, #8]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	431a      	orrs	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001444:	b480      	push	{r7}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	3360      	adds	r3, #96	@ 0x60
 8001456:	461a      	mov	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <LL_ADC_SetOffset+0x44>)
 8001466:	4013      	ands	r3, r2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	4313      	orrs	r3, r2
 8001474:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800147c:	bf00      	nop
 800147e:	371c      	adds	r7, #28
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	03fff000 	.word	0x03fff000

0800148c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3360      	adds	r3, #96	@ 0x60
 800149a:	461a      	mov	r2, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3360      	adds	r3, #96	@ 0x60
 80014c8:	461a      	mov	r2, r3
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	431a      	orrs	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	695b      	ldr	r3, [r3, #20]
 80014fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	615a      	str	r2, [r3, #20]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800153a:	b480      	push	{r7}
 800153c:	b087      	sub	sp, #28
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	3330      	adds	r3, #48	@ 0x30
 800154a:	461a      	mov	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	0a1b      	lsrs	r3, r3, #8
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	4413      	add	r3, r2
 8001558:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	211f      	movs	r1, #31
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	401a      	ands	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	0e9b      	lsrs	r3, r3, #26
 8001572:	f003 011f 	and.w	r1, r3, #31
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	f003 031f 	and.w	r3, r3, #31
 800157c:	fa01 f303 	lsl.w	r3, r1, r3
 8001580:	431a      	orrs	r2, r3
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001586:	bf00      	nop
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	3314      	adds	r3, #20
 80015c8:	461a      	mov	r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	0e5b      	lsrs	r3, r3, #25
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	0d1b      	lsrs	r3, r3, #20
 80015e0:	f003 031f 	and.w	r3, r3, #31
 80015e4:	2107      	movs	r1, #7
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	401a      	ands	r2, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	0d1b      	lsrs	r3, r3, #20
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	431a      	orrs	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001602:	bf00      	nop
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001628:	43db      	mvns	r3, r3
 800162a:	401a      	ands	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0318 	and.w	r3, r3, #24
 8001632:	4908      	ldr	r1, [pc, #32]	@ (8001654 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001634:	40d9      	lsrs	r1, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	400b      	ands	r3, r1
 800163a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163e:	431a      	orrs	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	0007ffff 	.word	0x0007ffff

08001658 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001668:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6093      	str	r3, [r2, #8]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800168c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001690:	d101      	bne.n	8001696 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001692:	2301      	movs	r3, #1
 8001694:	e000      	b.n	8001698 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80016b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016e0:	d101      	bne.n	80016e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016e2:	2301      	movs	r3, #1
 80016e4:	e000      	b.n	80016e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001704:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001708:	f043 0201 	orr.w	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800172c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001730:	f043 0202 	orr.w	r2, r3, #2
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <LL_ADC_IsEnabled+0x18>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <LL_ADC_IsEnabled+0x1a>
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b02      	cmp	r3, #2
 800177c:	d101      	bne.n	8001782 <LL_ADC_IsDisableOngoing+0x18>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_ADC_IsDisableOngoing+0x1a>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017a4:	f043 0204 	orr.w	r2, r3, #4
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d101      	bne.n	80017d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017cc:	2301      	movs	r3, #1
 80017ce:	e000      	b.n	80017d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d101      	bne.n	80017f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800180c:	2300      	movs	r3, #0
 800180e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e129      	b.n	8001a72 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff fa49 	bl	8000cc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff19 	bl	800167c <LL_ADC_IsDeepPowerDownEnabled>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff feff 	bl	8001658 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff34 	bl	80016cc <LL_ADC_IsInternalRegulatorEnabled>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d115      	bne.n	8001896 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff18 	bl	80016a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001874:	4b81      	ldr	r3, [pc, #516]	@ (8001a7c <HAL_ADC_Init+0x278>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	099b      	lsrs	r3, r3, #6
 800187a:	4a81      	ldr	r2, [pc, #516]	@ (8001a80 <HAL_ADC_Init+0x27c>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	099b      	lsrs	r3, r3, #6
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001888:	e002      	b.n	8001890 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	3b01      	subs	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f9      	bne.n	800188a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff16 	bl	80016cc <LL_ADC_IsInternalRegulatorEnabled>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10d      	bne.n	80018c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018aa:	f043 0210 	orr.w	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff76 	bl	80017b8 <LL_ADC_REG_IsConversionOngoing>
 80018cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d2:	f003 0310 	and.w	r3, r3, #16
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 80c2 	bne.w	8001a60 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f040 80be 	bne.w	8001a60 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018ec:	f043 0202 	orr.w	r2, r3, #2
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff23 	bl	8001744 <LL_ADC_IsEnabled>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10b      	bne.n	800191c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001904:	485f      	ldr	r0, [pc, #380]	@ (8001a84 <HAL_ADC_Init+0x280>)
 8001906:	f7ff ff1d 	bl	8001744 <LL_ADC_IsEnabled>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d105      	bne.n	800191c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	4619      	mov	r1, r3
 8001916:	485c      	ldr	r0, [pc, #368]	@ (8001a88 <HAL_ADC_Init+0x284>)
 8001918:	f7ff fd60 	bl	80013dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e5b      	ldrb	r3, [r3, #25]
 8001920:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001926:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800192c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001932:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800193a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d106      	bne.n	8001958 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194e:	3b01      	subs	r3, #1
 8001950:	045b      	lsls	r3, r3, #17
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195c:	2b00      	cmp	r3, #0
 800195e:	d009      	beq.n	8001974 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001964:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	4b44      	ldr	r3, [pc, #272]	@ (8001a8c <HAL_ADC_Init+0x288>)
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	430b      	orrs	r3, r1
 8001986:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff26 	bl	80017de <LL_ADC_INJ_IsConversionOngoing>
 8001992:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d140      	bne.n	8001a1c <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d13d      	bne.n	8001a1c <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7e1b      	ldrb	r3, [r3, #24]
 80019a8:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019aa:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019b2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019c2:	f023 0306 	bic.w	r3, r3, #6
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	430b      	orrs	r3, r1
 80019ce:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d118      	bne.n	8001a0c <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019fc:	430a      	orrs	r2, r1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	e007      	b.n	8001a1c <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d10c      	bne.n	8001a3e <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f023 010f 	bic.w	r1, r3, #15
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	1e5a      	subs	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a3c:	e007      	b.n	8001a4e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 020f 	bic.w	r2, r2, #15
 8001a4c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a52:	f023 0303 	bic.w	r3, r3, #3
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a5e:	e007      	b.n	8001a70 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a70:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20040000 	.word	0x20040000
 8001a80:	053e2d63 	.word	0x053e2d63
 8001a84:	50040000 	.word	0x50040000
 8001a88:	50040300 	.word	0x50040300
 8001a8c:	fff0c007 	.word	0xfff0c007

08001a90 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fe8b 	bl	80017b8 <LL_ADC_REG_IsConversionOngoing>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f040 80a0 	bne.w	8001bea <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_ADC_Start_IT+0x28>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e09b      	b.n	8001bf0 <HAL_ADC_Start_IT+0x160>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 fe6b 	bl	800279c <ADC_Enable>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f040 8087 	bne.w	8001be0 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af6:	f023 0206 	bic.w	r2, r3, #6
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001afe:	e002      	b.n	8001b06 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	221c      	movs	r2, #28
 8001b0c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 021c 	bic.w	r2, r2, #28
 8001b24:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d108      	bne.n	8001b40 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0208 	orr.w	r2, r2, #8
 8001b3c:	605a      	str	r2, [r3, #4]
          break;
 8001b3e:	e008      	b.n	8001b52 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0204 	orr.w	r2, r2, #4
 8001b4e:	605a      	str	r2, [r3, #4]
          break;
 8001b50:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d107      	bne.n	8001b6a <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0210 	orr.w	r2, r2, #16
 8001b68:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d02d      	beq.n	8001bd4 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d110      	bne.n	8001bb2 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	685a      	ldr	r2, [r3, #4]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 0220 	bic.w	r2, r2, #32
 8001b9e:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001bae:	605a      	str	r2, [r3, #4]
            break;
 8001bb0:	e010      	b.n	8001bd4 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bc0:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f042 0220 	orr.w	r2, r2, #32
 8001bd0:	605a      	str	r2, [r3, #4]
            break;
 8001bd2:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fdd9 	bl	8001790 <LL_ADC_REG_StartConversion>
 8001bde:	e006      	b.n	8001bee <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001be8:	e001      	b.n	8001bee <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bea:	2302      	movs	r3, #2
 8001bec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b088      	sub	sp, #32
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d017      	beq.n	8001c68 <HAL_ADC_IRQHandler+0x56>
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d012      	beq.n	8001c68 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	f003 0310 	and.w	r3, r3, #16
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d105      	bne.n	8001c5a <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c52:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 ff38 	bl	8002ad0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2202      	movs	r2, #2
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d004      	beq.n	8001c7c <HAL_ADC_IRQHandler+0x6a>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d109      	bne.n	8001c90 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d05e      	beq.n	8001d44 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d059      	beq.n	8001d44 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d105      	bne.n	8001ca8 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fc31 	bl	8001514 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d03e      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d135      	bne.n	8001d36 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0308 	and.w	r3, r3, #8
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d12e      	bne.n	8001d36 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fd6b 	bl	80017b8 <LL_ADC_REG_IsConversionOngoing>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d11a      	bne.n	8001d1e <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 020c 	bic.w	r2, r2, #12
 8001cf6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d112      	bne.n	8001d36 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d1c:	e00b      	b.n	8001d36 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	f043 0210 	orr.w	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2e:	f043 0201 	orr.w	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe ff14 	bl	8000b64 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	220c      	movs	r2, #12
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	f003 0320 	and.w	r3, r3, #32
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d004      	beq.n	8001d58 <HAL_ADC_IRQHandler+0x146>
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d072      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d06d      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fc02 	bl	8001592 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001d8e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fbbd 	bl	8001514 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d9a:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d047      	beq.n	8001e3a <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_ADC_IRQHandler+0x1b2>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d03f      	beq.n	8001e3a <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d13a      	bne.n	8001e3a <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dce:	2b40      	cmp	r3, #64	@ 0x40
 8001dd0:	d133      	bne.n	8001e3a <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d12e      	bne.n	8001e3a <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fcfc 	bl	80017de <LL_ADC_INJ_IsConversionOngoing>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d11a      	bne.n	8001e22 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001dfa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d112      	bne.n	8001e3a <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e18:	f043 0201 	orr.w	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e20:	e00b      	b.n	8001e3a <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	f043 0210 	orr.w	r2, r3, #16
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fe20 	bl	8002a80 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2260      	movs	r2, #96	@ 0x60
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d011      	beq.n	8001e76 <HAL_ADC_IRQHandler+0x264>
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00c      	beq.n	8001e76 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f886 	bl	8001f7a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2280      	movs	r2, #128	@ 0x80
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d012      	beq.n	8001ea6 <HAL_ADC_IRQHandler+0x294>
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00d      	beq.n	8001ea6 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fe06 	bl	8002aa8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d012      	beq.n	8001ed6 <HAL_ADC_IRQHandler+0x2c4>
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fdf8 	bl	8002abc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d02a      	beq.n	8001f36 <HAL_ADC_IRQHandler+0x324>
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d025      	beq.n	8001f36 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	e008      	b.n	8001f0a <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001f06:	2301      	movs	r3, #1
 8001f08:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d10e      	bne.n	8001f2e <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f14:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f20:	f043 0202 	orr.w	r2, r3, #2
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f830 	bl	8001f8e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2210      	movs	r2, #16
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d018      	beq.n	8001f72 <HAL_ADC_IRQHandler+0x360>
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d013      	beq.n	8001f72 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5a:	f043 0208 	orr.w	r2, r3, #8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fd91 	bl	8002a94 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001f72:	bf00      	nop
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b0b6      	sub	sp, #216	@ 0xd8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x22>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e3d5      	b.n	8002772 <HAL_ADC_ConfigChannel+0x7ce>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff fbf0 	bl	80017b8 <LL_ADC_REG_IsConversionOngoing>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 83ba 	bne.w	8002754 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b05      	cmp	r3, #5
 8001fee:	d824      	bhi.n	800203a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	3b02      	subs	r3, #2
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d81b      	bhi.n	8002032 <HAL_ADC_ConfigChannel+0x8e>
 8001ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8002000 <HAL_ADC_ConfigChannel+0x5c>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	08002011 	.word	0x08002011
 8002004:	08002019 	.word	0x08002019
 8002008:	08002021 	.word	0x08002021
 800200c:	08002029 	.word	0x08002029
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002010:	230c      	movs	r3, #12
 8002012:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002016:	e010      	b.n	800203a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002018:	2312      	movs	r3, #18
 800201a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800201e:	e00c      	b.n	800203a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002020:	2318      	movs	r3, #24
 8002022:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002026:	e008      	b.n	800203a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800202c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002030:	e003      	b.n	800203a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002032:	2306      	movs	r3, #6
 8002034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002038:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002048:	f7ff fa77 	bl	800153a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fbb1 	bl	80017b8 <LL_ADC_REG_IsConversionOngoing>
 8002056:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fbbd 	bl	80017de <LL_ADC_INJ_IsConversionOngoing>
 8002064:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 81bf 	bne.w	80023f0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002072:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002076:	2b00      	cmp	r3, #0
 8002078:	f040 81ba 	bne.w	80023f0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002084:	d10f      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	4619      	mov	r1, r3
 8002092:	f7ff fa91 	bl	80015b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fa25 	bl	80014ee <LL_ADC_SetSamplingTimeCommonConfig>
 80020a4:	e00e      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	6819      	ldr	r1, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	461a      	mov	r2, r3
 80020b4:	f7ff fa80 	bl	80015b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fa15 	bl	80014ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	08db      	lsrs	r3, r3, #3
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d00a      	beq.n	80020fc <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6919      	ldr	r1, [r3, #16]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020f6:	f7ff f9a5 	bl	8001444 <LL_ADC_SetOffset>
 80020fa:	e179      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2100      	movs	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f9c2 	bl	800148c <LL_ADC_GetOffsetChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10a      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x184>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff f9b7 	bl	800148c <LL_ADC_GetOffsetChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	f003 021f 	and.w	r2, r3, #31
 8002126:	e01e      	b.n	8002166 <HAL_ADC_ConfigChannel+0x1c2>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f9ac 	bl	800148c <LL_ADC_GetOffsetChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002146:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800214a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800214e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002156:	2320      	movs	r3, #32
 8002158:	e004      	b.n	8002164 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800215a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <HAL_ADC_ConfigChannel+0x1da>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	0e9b      	lsrs	r3, r3, #26
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	e018      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x20c>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002192:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002196:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800219a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e004      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80021a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d106      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff f97b 	bl	80014b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2101      	movs	r1, #1
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff f95f 	bl	800148c <LL_ADC_GetOffsetChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10a      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x24a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2101      	movs	r1, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f954 	bl	800148c <LL_ADC_GetOffsetChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	0e9b      	lsrs	r3, r3, #26
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	e01e      	b.n	800222c <HAL_ADC_ConfigChannel+0x288>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2101      	movs	r1, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f949 	bl	800148c <LL_ADC_GetOffsetChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800220c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002210:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002214:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e004      	b.n	800222a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002220:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002224:	fab3 f383 	clz	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x2a0>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	e018      	b.n	8002276 <HAL_ADC_ConfigChannel+0x2d2>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800225c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002268:	2320      	movs	r3, #32
 800226a:	e004      	b.n	8002276 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800226c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002276:	429a      	cmp	r2, r3
 8002278:	d106      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2200      	movs	r2, #0
 8002280:	2101      	movs	r1, #1
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f918 	bl	80014b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2102      	movs	r1, #2
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff f8fc 	bl	800148c <LL_ADC_GetOffsetChannel>
 8002294:	4603      	mov	r3, r0
 8002296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10a      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x310>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2102      	movs	r1, #2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff f8f1 	bl	800148c <LL_ADC_GetOffsetChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	0e9b      	lsrs	r3, r3, #26
 80022ae:	f003 021f 	and.w	r2, r3, #31
 80022b2:	e01e      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x34e>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2102      	movs	r1, #2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f8e6 	bl	800148c <LL_ADC_GetOffsetChannel>
 80022c0:	4603      	mov	r3, r0
 80022c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80022d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80022da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80022e2:	2320      	movs	r3, #32
 80022e4:	e004      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80022e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <HAL_ADC_ConfigChannel+0x366>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0e9b      	lsrs	r3, r3, #26
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	e014      	b.n	8002334 <HAL_ADC_ConfigChannel+0x390>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800231a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800231e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002326:	2320      	movs	r3, #32
 8002328:	e004      	b.n	8002334 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800232a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800232e:	fab3 f383 	clz	r3, r3
 8002332:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002334:	429a      	cmp	r2, r3
 8002336:	d106      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2200      	movs	r2, #0
 800233e:	2102      	movs	r1, #2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff f8b9 	bl	80014b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2103      	movs	r1, #3
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff f89d 	bl	800148c <LL_ADC_GetOffsetChannel>
 8002352:	4603      	mov	r3, r0
 8002354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_ADC_ConfigChannel+0x3ce>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2103      	movs	r1, #3
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff f892 	bl	800148c <LL_ADC_GetOffsetChannel>
 8002368:	4603      	mov	r3, r0
 800236a:	0e9b      	lsrs	r3, r3, #26
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	e017      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x3fe>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2103      	movs	r1, #3
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff f887 	bl	800148c <LL_ADC_GetOffsetChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800238a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800238c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800238e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002394:	2320      	movs	r3, #32
 8002396:	e003      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002398:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x416>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	e011      	b.n	80023de <HAL_ADC_ConfigChannel+0x43a>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80023c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023ca:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80023cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80023d2:	2320      	movs	r3, #32
 80023d4:	e003      	b.n	80023de <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80023d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023de:	429a      	cmp	r2, r3
 80023e0:	d106      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2103      	movs	r1, #3
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff f864 	bl	80014b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff f9a5 	bl	8001744 <LL_ADC_IsEnabled>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 813f 	bne.w	8002680 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	461a      	mov	r2, r3
 8002410:	f7ff f8fe 	bl	8001610 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a8e      	ldr	r2, [pc, #568]	@ (8002654 <HAL_ADC_ConfigChannel+0x6b0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	f040 8130 	bne.w	8002680 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x4a4>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	3301      	adds	r3, #1
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2b09      	cmp	r3, #9
 800243e:	bf94      	ite	ls
 8002440:	2301      	movls	r3, #1
 8002442:	2300      	movhi	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	e019      	b.n	800247c <HAL_ADC_ConfigChannel+0x4d8>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002458:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800245a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e003      	b.n	800246c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	2b09      	cmp	r3, #9
 8002474:	bf94      	ite	ls
 8002476:	2301      	movls	r3, #1
 8002478:	2300      	movhi	r3, #0
 800247a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800247c:	2b00      	cmp	r3, #0
 800247e:	d079      	beq.n	8002574 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002488:	2b00      	cmp	r3, #0
 800248a:	d107      	bne.n	800249c <HAL_ADC_ConfigChannel+0x4f8>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	3301      	adds	r3, #1
 8002494:	069b      	lsls	r3, r3, #26
 8002496:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800249a:	e015      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x524>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024a4:	fa93 f3a3 	rbit	r3, r3
 80024a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80024aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024ac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80024ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80024b4:	2320      	movs	r3, #32
 80024b6:	e003      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80024b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3301      	adds	r3, #1
 80024c2:	069b      	lsls	r3, r3, #26
 80024c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x544>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	0e9b      	lsrs	r3, r3, #26
 80024da:	3301      	adds	r3, #1
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	2101      	movs	r1, #1
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	e017      	b.n	8002518 <HAL_ADC_ConfigChannel+0x574>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002500:	2320      	movs	r3, #32
 8002502:	e003      	b.n	800250c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	3301      	adds	r3, #1
 800250e:	f003 031f 	and.w	r3, r3, #31
 8002512:	2101      	movs	r1, #1
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	ea42 0103 	orr.w	r1, r2, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <HAL_ADC_ConfigChannel+0x59a>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0e9b      	lsrs	r3, r3, #26
 800252e:	3301      	adds	r3, #1
 8002530:	f003 021f 	and.w	r2, r3, #31
 8002534:	4613      	mov	r3, r2
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	4413      	add	r3, r2
 800253a:	051b      	lsls	r3, r3, #20
 800253c:	e018      	b.n	8002570 <HAL_ADC_ConfigChannel+0x5cc>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002546:	fa93 f3a3 	rbit	r3, r3
 800254a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800254c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002556:	2320      	movs	r3, #32
 8002558:	e003      	b.n	8002562 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3301      	adds	r3, #1
 8002564:	f003 021f 	and.w	r2, r3, #31
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002570:	430b      	orrs	r3, r1
 8002572:	e080      	b.n	8002676 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	2b00      	cmp	r3, #0
 800257e:	d107      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x5ec>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	3301      	adds	r3, #1
 8002588:	069b      	lsls	r3, r3, #26
 800258a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800258e:	e015      	b.n	80025bc <HAL_ADC_ConfigChannel+0x618>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002598:	fa93 f3a3 	rbit	r3, r3
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80025a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80025a8:	2320      	movs	r3, #32
 80025aa:	e003      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80025ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ae:	fab3 f383 	clz	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	3301      	adds	r3, #1
 80025b6:	069b      	lsls	r3, r3, #26
 80025b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x638>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	0e9b      	lsrs	r3, r3, #26
 80025ce:	3301      	adds	r3, #1
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	e017      	b.n	800260c <HAL_ADC_ConfigChannel+0x668>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	61bb      	str	r3, [r7, #24]
  return result;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80025f4:	2320      	movs	r3, #32
 80025f6:	e003      	b.n	8002600 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	3301      	adds	r3, #1
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	2101      	movs	r1, #1
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	ea42 0103 	orr.w	r1, r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10d      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x694>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	3301      	adds	r3, #1
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	3b1e      	subs	r3, #30
 8002630:	051b      	lsls	r3, r3, #20
 8002632:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002636:	e01d      	b.n	8002674 <HAL_ADC_ConfigChannel+0x6d0>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	fa93 f3a3 	rbit	r3, r3
 8002644:	60fb      	str	r3, [r7, #12]
  return result;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d103      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002650:	2320      	movs	r3, #32
 8002652:	e005      	b.n	8002660 <HAL_ADC_ConfigChannel+0x6bc>
 8002654:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	3301      	adds	r3, #1
 8002662:	f003 021f 	and.w	r2, r3, #31
 8002666:	4613      	mov	r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	3b1e      	subs	r3, #30
 800266e:	051b      	lsls	r3, r3, #20
 8002670:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002674:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800267a:	4619      	mov	r1, r3
 800267c:	f7fe ff9c 	bl	80015b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b3d      	ldr	r3, [pc, #244]	@ (800277c <HAL_ADC_ConfigChannel+0x7d8>)
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d06c      	beq.n	8002766 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800268c:	483c      	ldr	r0, [pc, #240]	@ (8002780 <HAL_ADC_ConfigChannel+0x7dc>)
 800268e:	f7fe fecb 	bl	8001428 <LL_ADC_GetCommonPathInternalCh>
 8002692:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a3a      	ldr	r2, [pc, #232]	@ (8002784 <HAL_ADC_ConfigChannel+0x7e0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d127      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d121      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a35      	ldr	r2, [pc, #212]	@ (8002788 <HAL_ADC_ConfigChannel+0x7e4>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d157      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026be:	4619      	mov	r1, r3
 80026c0:	482f      	ldr	r0, [pc, #188]	@ (8002780 <HAL_ADC_ConfigChannel+0x7dc>)
 80026c2:	f7fe fe9e 	bl	8001402 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026c6:	4b31      	ldr	r3, [pc, #196]	@ (800278c <HAL_ADC_ConfigChannel+0x7e8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	099b      	lsrs	r3, r3, #6
 80026cc:	4a30      	ldr	r2, [pc, #192]	@ (8002790 <HAL_ADC_ConfigChannel+0x7ec>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026e0:	e002      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f9      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ee:	e03a      	b.n	8002766 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a27      	ldr	r2, [pc, #156]	@ (8002794 <HAL_ADC_ConfigChannel+0x7f0>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d113      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10d      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1f      	ldr	r2, [pc, #124]	@ (8002788 <HAL_ADC_ConfigChannel+0x7e4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d12a      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002714:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002718:	4619      	mov	r1, r3
 800271a:	4819      	ldr	r0, [pc, #100]	@ (8002780 <HAL_ADC_ConfigChannel+0x7dc>)
 800271c:	f7fe fe71 	bl	8001402 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002720:	e021      	b.n	8002766 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <HAL_ADC_ConfigChannel+0x7f4>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d11c      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800272c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002730:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d116      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a12      	ldr	r2, [pc, #72]	@ (8002788 <HAL_ADC_ConfigChannel+0x7e4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d111      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002746:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800274a:	4619      	mov	r1, r3
 800274c:	480c      	ldr	r0, [pc, #48]	@ (8002780 <HAL_ADC_ConfigChannel+0x7dc>)
 800274e:	f7fe fe58 	bl	8001402 <LL_ADC_SetCommonPathInternalCh>
 8002752:	e008      	b.n	8002766 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	f043 0220 	orr.w	r2, r3, #32
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800276e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002772:	4618      	mov	r0, r3
 8002774:	37d8      	adds	r7, #216	@ 0xd8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	80080000 	.word	0x80080000
 8002780:	50040300 	.word	0x50040300
 8002784:	c7520000 	.word	0xc7520000
 8002788:	50040000 	.word	0x50040000
 800278c:	20040000 	.word	0x20040000
 8002790:	053e2d63 	.word	0x053e2d63
 8002794:	cb840000 	.word	0xcb840000
 8002798:	80000001 	.word	0x80000001

0800279c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe ffc9 	bl	8001744 <LL_ADC_IsEnabled>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d169      	bne.n	800288c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	4b36      	ldr	r3, [pc, #216]	@ (8002898 <ADC_Enable+0xfc>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00d      	beq.n	80027e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ca:	f043 0210 	orr.w	r2, r3, #16
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d6:	f043 0201 	orr.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e055      	b.n	800288e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe ff84 	bl	80016f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027ec:	482b      	ldr	r0, [pc, #172]	@ (800289c <ADC_Enable+0x100>)
 80027ee:	f7fe fe1b 	bl	8001428 <LL_ADC_GetCommonPathInternalCh>
 80027f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027fc:	4b28      	ldr	r3, [pc, #160]	@ (80028a0 <ADC_Enable+0x104>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	4a28      	ldr	r2, [pc, #160]	@ (80028a4 <ADC_Enable+0x108>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002816:	e002      	b.n	800281e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	3b01      	subs	r3, #1
 800281c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f9      	bne.n	8002818 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002824:	f7fe fdaa 	bl	800137c <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800282a:	e028      	b.n	800287e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe ff87 	bl	8001744 <LL_ADC_IsEnabled>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe ff57 	bl	80016f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002846:	f7fe fd99 	bl	800137c <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d914      	bls.n	800287e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d00d      	beq.n	800287e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002866:	f043 0210 	orr.w	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002872:	f043 0201 	orr.w	r2, r3, #1
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e007      	b.n	800288e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	d1cf      	bne.n	800282c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	8000003f 	.word	0x8000003f
 800289c:	50040300 	.word	0x50040300
 80028a0:	20040000 	.word	0x20040000
 80028a4:	053e2d63 	.word	0x053e2d63

080028a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fe ff58 	bl	800176a <LL_ADC_IsDisableOngoing>
 80028ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe ff3f 	bl	8001744 <LL_ADC_IsEnabled>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d047      	beq.n	800295c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d144      	bne.n	800295c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030d 	and.w	r3, r3, #13
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10c      	bne.n	80028fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe ff19 	bl	800171c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2203      	movs	r2, #3
 80028f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028f2:	f7fe fd43 	bl	800137c <HAL_GetTick>
 80028f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028f8:	e029      	b.n	800294e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fe:	f043 0210 	orr.w	r2, r3, #16
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290a:	f043 0201 	orr.w	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e023      	b.n	800295e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002916:	f7fe fd31 	bl	800137c <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d914      	bls.n	800294e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002936:	f043 0210 	orr.w	r2, r3, #16
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e007      	b.n	800295e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1dc      	bne.n	8002916 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <LL_ADC_StartCalibration>:
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
 800296e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002978:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002982:	4313      	orrs	r3, r2
 8002984:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_ADC_IsCalibrationOnGoing>:
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029ac:	d101      	bne.n	80029b2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_ADCEx_Calibration_Start+0x1c>
 80029d8:	2302      	movs	r3, #2
 80029da:	e04d      	b.n	8002a78 <HAL_ADCEx_Calibration_Start+0xb8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff5f 	bl	80028a8 <ADC_Disable>
 80029ea:	4603      	mov	r3, r0
 80029ec:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d136      	bne.n	8002a62 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029fc:	f023 0302 	bic.w	r3, r3, #2
 8002a00:	f043 0202 	orr.w	r2, r3, #2
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6839      	ldr	r1, [r7, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff ffa9 	bl	8002966 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a14:	e014      	b.n	8002a40 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002a22:	d30d      	bcc.n	8002a40 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a28:	f023 0312 	bic.w	r3, r3, #18
 8002a2c:	f043 0210 	orr.w	r2, r3, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e01b      	b.n	8002a78 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ffa7 	bl	8002998 <LL_ADC_IsCalibrationOnGoing>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e2      	bne.n	8002a16 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a54:	f023 0303 	bic.w	r3, r3, #3
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a60:	e005      	b.n	8002a6e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a66:	f043 0210 	orr.w	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	@ (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4907      	ldr	r1, [pc, #28]	@ (8002b80 <__NVIC_EnableIRQ+0x38>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000e100 	.word	0xe000e100

08002b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db0a      	blt.n	8002bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	490c      	ldr	r1, [pc, #48]	@ (8002bd0 <__NVIC_SetPriority+0x4c>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bac:	e00a      	b.n	8002bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4908      	ldr	r1, [pc, #32]	@ (8002bd4 <__NVIC_SetPriority+0x50>)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	761a      	strb	r2, [r3, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	@ 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	bf28      	it	cs
 8002bf6:	2304      	movcs	r3, #4
 8002bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d902      	bls.n	8002c08 <NVIC_EncodePriority+0x30>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3b03      	subs	r3, #3
 8002c06:	e000      	b.n	8002c0a <NVIC_EncodePriority+0x32>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43d9      	mvns	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	4313      	orrs	r3, r2
         );
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	@ 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ff4c 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c4c:	bf00      	nop
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c66:	f7ff ff61 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002c6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	6978      	ldr	r0, [r7, #20]
 8002c72:	f7ff ffb1 	bl	8002bd8 <NVIC_EncodePriority>
 8002c76:	4602      	mov	r2, r0
 8002c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ff80 	bl	8002b84 <__NVIC_SetPriority>
}
 8002c84:	bf00      	nop
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff54 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e014      	b.n	8002ce4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	791b      	ldrb	r3, [r3, #4]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe f86a 	bl	8000da4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	795b      	ldrb	r3, [r3, #5]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_DAC_Start+0x16>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e040      	b.n	8002d84 <HAL_DAC_Start+0x98>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10f      	bne.n	8002d4c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d11d      	bne.n	8002d76 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	e014      	b.n	8002d76 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d107      	bne.n	8002d76 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0202 	orr.w	r2, r2, #2
 8002d74:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da6:	d120      	bne.n	8002dea <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002db2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002db6:	d118      	bne.n	8002dea <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2204      	movs	r2, #4
 8002dbc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f043 0201 	orr.w	r2, r3, #1
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002de2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f852 	bl	8002e8e <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002df8:	d120      	bne.n	8002e3c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e08:	d118      	bne.n	8002e3c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f043 0202 	orr.w	r2, r3, #2
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002e24:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002e34:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f980 	bl	800313c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d105      	bne.n	8002e6e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	3308      	adds	r3, #8
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	e004      	b.n	8002e78 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	3314      	adds	r3, #20
 8002e76:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	795b      	ldrb	r3, [r3, #5]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_DAC_ConfigChannel+0x1c>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e137      	b.n	8003130 <HAL_DAC_ConfigChannel+0x28c>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	f040 8081 	bne.w	8002fd8 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ed6:	f7fe fa51 	bl	800137c <HAL_GetTick>
 8002eda:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d140      	bne.n	8002f64 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ee2:	e018      	b.n	8002f16 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ee4:	f7fe fa4a 	bl	800137c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d911      	bls.n	8002f16 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f043 0208 	orr.w	r2, r3, #8
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e10c      	b.n	8003130 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1df      	bne.n	8002ee4 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002f24:	2001      	movs	r0, #1
 8002f26:	f7fe fa35 	bl	8001394 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	69d2      	ldr	r2, [r2, #28]
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f34:	e023      	b.n	8002f7e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f36:	f7fe fa21 	bl	800137c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d90f      	bls.n	8002f64 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da0a      	bge.n	8002f64 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f043 0208 	orr.w	r2, r3, #8
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2203      	movs	r2, #3
 8002f5e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0e5      	b.n	8003130 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	dbe3      	blt.n	8002f36 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002f6e:	2001      	movs	r0, #1
 8002f70:	f7fe fa10 	bl	8001394 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	69d2      	ldr	r2, [r2, #28]
 8002f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	ea02 0103 	and.w	r1, r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	6a1a      	ldr	r2, [r3, #32]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	21ff      	movs	r1, #255	@ 0xff
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	ea02 0103 	and.w	r1, r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d11d      	bne.n	800301c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	221f      	movs	r2, #31
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	4313      	orrs	r3, r2
 8003012:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003022:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2207      	movs	r2, #7
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	4013      	ands	r3, r2
 8003036:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	431a      	orrs	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f003 0310 	and.w	r3, r3, #16
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	4313      	orrs	r3, r2
 800305a:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43da      	mvns	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	400a      	ands	r2, r1
 8003080:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	4013      	ands	r3, r2
 800309e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030c0:	d104      	bne.n	80030cc <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e018      	b.n	80030fe <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d104      	bne.n	80030de <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	e00f      	b.n	80030fe <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80030de:	f001 f9fb 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80030e2:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4a14      	ldr	r2, [pc, #80]	@ (8003138 <HAL_DAC_ConfigChannel+0x294>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d904      	bls.n	80030f6 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	e003      	b.n	80030fe <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80030fc:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	22c0      	movs	r2, #192	@ 0xc0
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43da      	mvns	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	400a      	ands	r2, r1
 8003120:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	04c4b400 	.word	0x04c4b400

0800313c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800315a:	2300      	movs	r3, #0
 800315c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315e:	e166      	b.n	800342e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	2101      	movs	r1, #1
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	4013      	ands	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 8158 	beq.w	8003428 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d005      	beq.n	8003190 <HAL_GPIO_Init+0x40>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0303 	and.w	r3, r3, #3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d130      	bne.n	80031f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4013      	ands	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031c6:	2201      	movs	r2, #1
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4013      	ands	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	f003 0201 	and.w	r2, r3, #1
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d017      	beq.n	800322e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	2203      	movs	r2, #3
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b02      	cmp	r3, #2
 8003238:	d123      	bne.n	8003282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	08da      	lsrs	r2, r3, #3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3208      	adds	r2, #8
 8003242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	220f      	movs	r2, #15
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	08da      	lsrs	r2, r3, #3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3208      	adds	r2, #8
 800327c:	6939      	ldr	r1, [r7, #16]
 800327e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	2203      	movs	r2, #3
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0203 	and.w	r2, r3, #3
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80b2 	beq.w	8003428 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c4:	4b61      	ldr	r3, [pc, #388]	@ (800344c <HAL_GPIO_Init+0x2fc>)
 80032c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c8:	4a60      	ldr	r2, [pc, #384]	@ (800344c <HAL_GPIO_Init+0x2fc>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6613      	str	r3, [r2, #96]	@ 0x60
 80032d0:	4b5e      	ldr	r3, [pc, #376]	@ (800344c <HAL_GPIO_Init+0x2fc>)
 80032d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032dc:	4a5c      	ldr	r2, [pc, #368]	@ (8003450 <HAL_GPIO_Init+0x300>)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	089b      	lsrs	r3, r3, #2
 80032e2:	3302      	adds	r3, #2
 80032e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	220f      	movs	r2, #15
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4013      	ands	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003306:	d02b      	beq.n	8003360 <HAL_GPIO_Init+0x210>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a52      	ldr	r2, [pc, #328]	@ (8003454 <HAL_GPIO_Init+0x304>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d025      	beq.n	800335c <HAL_GPIO_Init+0x20c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a51      	ldr	r2, [pc, #324]	@ (8003458 <HAL_GPIO_Init+0x308>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d01f      	beq.n	8003358 <HAL_GPIO_Init+0x208>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a50      	ldr	r2, [pc, #320]	@ (800345c <HAL_GPIO_Init+0x30c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d019      	beq.n	8003354 <HAL_GPIO_Init+0x204>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a4f      	ldr	r2, [pc, #316]	@ (8003460 <HAL_GPIO_Init+0x310>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d013      	beq.n	8003350 <HAL_GPIO_Init+0x200>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a4e      	ldr	r2, [pc, #312]	@ (8003464 <HAL_GPIO_Init+0x314>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d00d      	beq.n	800334c <HAL_GPIO_Init+0x1fc>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a4d      	ldr	r2, [pc, #308]	@ (8003468 <HAL_GPIO_Init+0x318>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d007      	beq.n	8003348 <HAL_GPIO_Init+0x1f8>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a4c      	ldr	r2, [pc, #304]	@ (800346c <HAL_GPIO_Init+0x31c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d101      	bne.n	8003344 <HAL_GPIO_Init+0x1f4>
 8003340:	2307      	movs	r3, #7
 8003342:	e00e      	b.n	8003362 <HAL_GPIO_Init+0x212>
 8003344:	2308      	movs	r3, #8
 8003346:	e00c      	b.n	8003362 <HAL_GPIO_Init+0x212>
 8003348:	2306      	movs	r3, #6
 800334a:	e00a      	b.n	8003362 <HAL_GPIO_Init+0x212>
 800334c:	2305      	movs	r3, #5
 800334e:	e008      	b.n	8003362 <HAL_GPIO_Init+0x212>
 8003350:	2304      	movs	r3, #4
 8003352:	e006      	b.n	8003362 <HAL_GPIO_Init+0x212>
 8003354:	2303      	movs	r3, #3
 8003356:	e004      	b.n	8003362 <HAL_GPIO_Init+0x212>
 8003358:	2302      	movs	r3, #2
 800335a:	e002      	b.n	8003362 <HAL_GPIO_Init+0x212>
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <HAL_GPIO_Init+0x212>
 8003360:	2300      	movs	r3, #0
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	f002 0203 	and.w	r2, r2, #3
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	4093      	lsls	r3, r2
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003372:	4937      	ldr	r1, [pc, #220]	@ (8003450 <HAL_GPIO_Init+0x300>)
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	3302      	adds	r3, #2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003380:	4b3b      	ldr	r3, [pc, #236]	@ (8003470 <HAL_GPIO_Init+0x320>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033a4:	4a32      	ldr	r2, [pc, #200]	@ (8003470 <HAL_GPIO_Init+0x320>)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033aa:	4b31      	ldr	r3, [pc, #196]	@ (8003470 <HAL_GPIO_Init+0x320>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033ce:	4a28      	ldr	r2, [pc, #160]	@ (8003470 <HAL_GPIO_Init+0x320>)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80033d4:	4b26      	ldr	r3, [pc, #152]	@ (8003470 <HAL_GPIO_Init+0x320>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	43db      	mvns	r3, r3
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003470 <HAL_GPIO_Init+0x320>)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80033fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003470 <HAL_GPIO_Init+0x320>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	43db      	mvns	r3, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003422:	4a13      	ldr	r2, [pc, #76]	@ (8003470 <HAL_GPIO_Init+0x320>)
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	3301      	adds	r3, #1
 800342c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	f47f ae91 	bne.w	8003160 <HAL_GPIO_Init+0x10>
  }
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40021000 	.word	0x40021000
 8003450:	40010000 	.word	0x40010000
 8003454:	48000400 	.word	0x48000400
 8003458:	48000800 	.word	0x48000800
 800345c:	48000c00 	.word	0x48000c00
 8003460:	48001000 	.word	0x48001000
 8003464:	48001400 	.word	0x48001400
 8003468:	48001800 	.word	0x48001800
 800346c:	48001c00 	.word	0x48001c00
 8003470:	40010400 	.word	0x40010400

08003474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
 8003480:	4613      	mov	r3, r2
 8003482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003484:	787b      	ldrb	r3, [r7, #1]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003490:	e002      	b.n	8003498 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003492:	887a      	ldrh	r2, [r7, #2]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034ae:	4b08      	ldr	r3, [pc, #32]	@ (80034d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	4013      	ands	r3, r2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034ba:	4a05      	ldr	r2, [pc, #20]	@ (80034d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f806 	bl	80034d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40010400 	.word	0x40010400

080034d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af02      	add	r7, sp, #8
 80034f0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e101      	b.n	8003700 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d106      	bne.n	8003516 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fd fd75 	bl	8001000 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2203      	movs	r2, #3
 800351a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f003 f958 	bl	80067de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	7c1a      	ldrb	r2, [r3, #16]
 8003536:	f88d 2000 	strb.w	r2, [sp]
 800353a:	3304      	adds	r3, #4
 800353c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800353e:	f003 f921 	bl	8006784 <USB_CoreInit>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0d5      	b.n	8003700 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2100      	movs	r1, #0
 800355a:	4618      	mov	r0, r3
 800355c:	f003 f950 	bl	8006800 <USB_SetCurrentMode>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d005      	beq.n	8003572 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e0c6      	b.n	8003700 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
 8003576:	e04a      	b.n	800360e <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3315      	adds	r3, #21
 8003588:	2201      	movs	r2, #1
 800358a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3314      	adds	r3, #20
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	b298      	uxth	r0, r3
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	332e      	adds	r3, #46	@ 0x2e
 80035b4:	4602      	mov	r2, r0
 80035b6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	3318      	adds	r3, #24
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	331c      	adds	r3, #28
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3320      	adds	r3, #32
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3324      	adds	r3, #36	@ 0x24
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	3301      	adds	r3, #1
 800360c:	73fb      	strb	r3, [r7, #15]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	791b      	ldrb	r3, [r3, #4]
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	429a      	cmp	r2, r3
 8003616:	d3af      	bcc.n	8003578 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
 800361c:	e044      	b.n	80036a8 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800361e:	7bfa      	ldrb	r2, [r7, #15]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4413      	add	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003660:	7bfa      	ldrb	r2, [r7, #15]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003676:	7bfa      	ldrb	r2, [r7, #15]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800368c:	7bfa      	ldrb	r2, [r7, #15]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	3301      	adds	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	791b      	ldrb	r3, [r3, #4]
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d3b5      	bcc.n	800361e <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	7c1a      	ldrb	r2, [r3, #16]
 80036ba:	f88d 2000 	strb.w	r2, [sp]
 80036be:	3304      	adds	r3, #4
 80036c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036c2:	f003 f8e9 	bl	8006898 <USB_DevInit>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e013      	b.n	8003700 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	7b1b      	ldrb	r3, [r3, #12]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d102      	bne.n	80036f4 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f80a 	bl	8003708 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 fa8e 	bl	8006c1a <USB_DevDisconnect>

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373a:	f043 0303 	orr.w	r3, r3, #3
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003754:	4b0d      	ldr	r3, [pc, #52]	@ (800378c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800375c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003760:	d102      	bne.n	8003768 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003762:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003766:	e00b      	b.n	8003780 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003768:	4b08      	ldr	r3, [pc, #32]	@ (800378c <HAL_PWREx_GetVoltageRange+0x3c>)
 800376a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800376e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003776:	d102      	bne.n	800377e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800377c:	e000      	b.n	8003780 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800377e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003780:	4618      	mov	r0, r3
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40007000 	.word	0x40007000

08003790 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d141      	bne.n	8003822 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800379e:	4b4b      	ldr	r3, [pc, #300]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037aa:	d131      	bne.n	8003810 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037ac:	4b47      	ldr	r3, [pc, #284]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037b2:	4a46      	ldr	r2, [pc, #280]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037bc:	4b43      	ldr	r3, [pc, #268]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037c4:	4a41      	ldr	r2, [pc, #260]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80037cc:	4b40      	ldr	r3, [pc, #256]	@ (80038d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2232      	movs	r2, #50	@ 0x32
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	4a3f      	ldr	r2, [pc, #252]	@ (80038d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	0c9b      	lsrs	r3, r3, #18
 80037de:	3301      	adds	r3, #1
 80037e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037e2:	e002      	b.n	80037ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037ea:	4b38      	ldr	r3, [pc, #224]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f6:	d102      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f2      	bne.n	80037e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80037fe:	4b33      	ldr	r3, [pc, #204]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800380a:	d158      	bne.n	80038be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e057      	b.n	80038c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003810:	4b2e      	ldr	r3, [pc, #184]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003816:	4a2d      	ldr	r2, [pc, #180]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800381c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003820:	e04d      	b.n	80038be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003828:	d141      	bne.n	80038ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800382a:	4b28      	ldr	r3, [pc, #160]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003836:	d131      	bne.n	800389c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003838:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800383e:	4a23      	ldr	r2, [pc, #140]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003844:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003848:	4b20      	ldr	r3, [pc, #128]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003850:	4a1e      	ldr	r2, [pc, #120]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003852:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003856:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003858:	4b1d      	ldr	r3, [pc, #116]	@ (80038d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2232      	movs	r2, #50	@ 0x32
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	4a1c      	ldr	r2, [pc, #112]	@ (80038d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	0c9b      	lsrs	r3, r3, #18
 800386a:	3301      	adds	r3, #1
 800386c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800386e:	e002      	b.n	8003876 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	3b01      	subs	r3, #1
 8003874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003876:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003882:	d102      	bne.n	800388a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f2      	bne.n	8003870 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800388a:	4b10      	ldr	r3, [pc, #64]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003896:	d112      	bne.n	80038be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e011      	b.n	80038c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800389c:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038a2:	4a0a      	ldr	r2, [pc, #40]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038ac:	e007      	b.n	80038be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038ae:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038b6:	4a05      	ldr	r2, [pc, #20]	@ (80038cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038bc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40007000 	.word	0x40007000
 80038d0:	20040000 	.word	0x20040000
 80038d4:	431bde83 	.word	0x431bde83

080038d8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80038dc:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a04      	ldr	r2, [pc, #16]	@ (80038f4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80038e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038e6:	6053      	str	r3, [r2, #4]
}
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40007000 	.word	0x40007000

080038f8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80038fc:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <HAL_PWREx_EnableVddIO2+0x1c>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	4a04      	ldr	r2, [pc, #16]	@ (8003914 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003906:	6053      	str	r3, [r2, #4]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40007000 	.word	0x40007000

08003918 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f000 bc08 	b.w	800413c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800392c:	4b96      	ldr	r3, [pc, #600]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003936:	4b94      	ldr	r3, [pc, #592]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	f003 0303 	and.w	r3, r3, #3
 800393e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0310 	and.w	r3, r3, #16
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80e4 	beq.w	8003b16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <HAL_RCC_OscConfig+0x4c>
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	2b0c      	cmp	r3, #12
 8003958:	f040 808b 	bne.w	8003a72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b01      	cmp	r3, #1
 8003960:	f040 8087 	bne.w	8003a72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003964:	4b88      	ldr	r3, [pc, #544]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_OscConfig+0x64>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e3df      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1a      	ldr	r2, [r3, #32]
 8003980:	4b81      	ldr	r3, [pc, #516]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_RCC_OscConfig+0x7e>
 800398c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003994:	e005      	b.n	80039a2 <HAL_RCC_OscConfig+0x8a>
 8003996:	4b7c      	ldr	r3, [pc, #496]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003998:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d223      	bcs.n	80039ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fdfe 	bl	80045ac <RCC_SetFlashLatencyFromMSIRange>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e3c0      	b.n	800413c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ba:	4b73      	ldr	r3, [pc, #460]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a72      	ldr	r2, [pc, #456]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039c0:	f043 0308 	orr.w	r3, r3, #8
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b70      	ldr	r3, [pc, #448]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	496d      	ldr	r1, [pc, #436]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039d8:	4b6b      	ldr	r3, [pc, #428]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	4968      	ldr	r1, [pc, #416]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
 80039ec:	e025      	b.n	8003a3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ee:	4b66      	ldr	r3, [pc, #408]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a65      	ldr	r2, [pc, #404]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039f4:	f043 0308 	orr.w	r3, r3, #8
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4b63      	ldr	r3, [pc, #396]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4960      	ldr	r1, [pc, #384]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	495b      	ldr	r1, [pc, #364]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 fdbe 	bl	80045ac <RCC_SetFlashLatencyFromMSIRange>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e380      	b.n	800413c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a3a:	f000 fcc1 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b51      	ldr	r3, [pc, #324]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	4950      	ldr	r1, [pc, #320]	@ (8003b8c <HAL_RCC_OscConfig+0x274>)
 8003a4c:	5ccb      	ldrb	r3, [r1, r3]
 8003a4e:	f003 031f 	and.w	r3, r3, #31
 8003a52:	fa22 f303 	lsr.w	r3, r2, r3
 8003a56:	4a4e      	ldr	r2, [pc, #312]	@ (8003b90 <HAL_RCC_OscConfig+0x278>)
 8003a58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003b94 <HAL_RCC_OscConfig+0x27c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd fb5a 	bl	8001118 <HAL_InitTick>
 8003a64:	4603      	mov	r3, r0
 8003a66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d052      	beq.n	8003b14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	e364      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d032      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a7a:	4b43      	ldr	r3, [pc, #268]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a42      	ldr	r2, [pc, #264]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a86:	f7fd fc79 	bl	800137c <HAL_GetTick>
 8003a8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a8e:	f7fd fc75 	bl	800137c <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e34d      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aa0:	4b39      	ldr	r3, [pc, #228]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f0      	beq.n	8003a8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aac:	4b36      	ldr	r3, [pc, #216]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a35      	ldr	r2, [pc, #212]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003ab2:	f043 0308 	orr.w	r3, r3, #8
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	4b33      	ldr	r3, [pc, #204]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4930      	ldr	r1, [pc, #192]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aca:	4b2f      	ldr	r3, [pc, #188]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	492b      	ldr	r1, [pc, #172]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	604b      	str	r3, [r1, #4]
 8003ade:	e01a      	b.n	8003b16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ae0:	4b29      	ldr	r3, [pc, #164]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a28      	ldr	r2, [pc, #160]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aec:	f7fd fc46 	bl	800137c <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003af4:	f7fd fc42 	bl	800137c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e31a      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b06:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f0      	bne.n	8003af4 <HAL_RCC_OscConfig+0x1dc>
 8003b12:	e000      	b.n	8003b16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d073      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_OscConfig+0x21c>
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d10e      	bne.n	8003b4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	d10b      	bne.n	8003b4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d063      	beq.n	8003c08 <HAL_RCC_OscConfig+0x2f0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d15f      	bne.n	8003c08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e2f7      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x24c>
 8003b56:	4b0c      	ldr	r3, [pc, #48]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a0b      	ldr	r2, [pc, #44]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e025      	b.n	8003bb0 <HAL_RCC_OscConfig+0x298>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b6c:	d114      	bne.n	8003b98 <HAL_RCC_OscConfig+0x280>
 8003b6e:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a05      	ldr	r2, [pc, #20]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b03      	ldr	r3, [pc, #12]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a02      	ldr	r2, [pc, #8]	@ (8003b88 <HAL_RCC_OscConfig+0x270>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e013      	b.n	8003bb0 <HAL_RCC_OscConfig+0x298>
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	0800a514 	.word	0x0800a514
 8003b90:	20040000 	.word	0x20040000
 8003b94:	20040004 	.word	0x20040004
 8003b98:	4ba0      	ldr	r3, [pc, #640]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a9f      	ldr	r2, [pc, #636]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b9d      	ldr	r3, [pc, #628]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a9c      	ldr	r2, [pc, #624]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d013      	beq.n	8003be0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fd fbe0 	bl	800137c <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fd fbdc 	bl	800137c <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	@ 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e2b4      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd2:	4b92      	ldr	r3, [pc, #584]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f0      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x2a8>
 8003bde:	e014      	b.n	8003c0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fd fbcc 	bl	800137c <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7fd fbc8 	bl	800137c <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	@ 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e2a0      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bfa:	4b88      	ldr	r3, [pc, #544]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2d0>
 8003c06:	e000      	b.n	8003c0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d060      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d005      	beq.n	8003c28 <HAL_RCC_OscConfig+0x310>
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b0c      	cmp	r3, #12
 8003c20:	d119      	bne.n	8003c56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d116      	bne.n	8003c56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c28:	4b7c      	ldr	r3, [pc, #496]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCC_OscConfig+0x328>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e27d      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4b76      	ldr	r3, [pc, #472]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	4973      	ldr	r1, [pc, #460]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c54:	e040      	b.n	8003cd8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d023      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c5e:	4b6f      	ldr	r3, [pc, #444]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a6e      	ldr	r2, [pc, #440]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6a:	f7fd fb87 	bl	800137c <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c72:	f7fd fb83 	bl	800137c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e25b      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c84:	4b65      	ldr	r3, [pc, #404]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0f0      	beq.n	8003c72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c90:	4b62      	ldr	r3, [pc, #392]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	495f      	ldr	r1, [pc, #380]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
 8003ca4:	e018      	b.n	8003cd8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a5c      	ldr	r2, [pc, #368]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003cac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7fd fb63 	bl	800137c <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cba:	f7fd fb5f 	bl	800137c <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e237      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ccc:	4b53      	ldr	r3, [pc, #332]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d03c      	beq.n	8003d5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01c      	beq.n	8003d26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cec:	4b4b      	ldr	r3, [pc, #300]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf2:	4a4a      	ldr	r2, [pc, #296]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cfc:	f7fd fb3e 	bl	800137c <HAL_GetTick>
 8003d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d02:	e008      	b.n	8003d16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d04:	f7fd fb3a 	bl	800137c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e212      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d16:	4b41      	ldr	r3, [pc, #260]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ef      	beq.n	8003d04 <HAL_RCC_OscConfig+0x3ec>
 8003d24:	e01b      	b.n	8003d5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d26:	4b3d      	ldr	r3, [pc, #244]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d2e:	f023 0301 	bic.w	r3, r3, #1
 8003d32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7fd fb21 	bl	800137c <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3e:	f7fd fb1d 	bl	800137c <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e1f5      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d50:	4b32      	ldr	r3, [pc, #200]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1ef      	bne.n	8003d3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0304 	and.w	r3, r3, #4
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80a6 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d70:	4b2a      	ldr	r3, [pc, #168]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10d      	bne.n	8003d98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7c:	4b27      	ldr	r3, [pc, #156]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d80:	4a26      	ldr	r2, [pc, #152]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d88:	4b24      	ldr	r3, [pc, #144]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d98:	4b21      	ldr	r3, [pc, #132]	@ (8003e20 <HAL_RCC_OscConfig+0x508>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d118      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003da4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e20 <HAL_RCC_OscConfig+0x508>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e20 <HAL_RCC_OscConfig+0x508>)
 8003daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db0:	f7fd fae4 	bl	800137c <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db8:	f7fd fae0 	bl	800137c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e1b8      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dca:	4b15      	ldr	r3, [pc, #84]	@ (8003e20 <HAL_RCC_OscConfig+0x508>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d108      	bne.n	8003df0 <HAL_RCC_OscConfig+0x4d8>
 8003dde:	4b0f      	ldr	r3, [pc, #60]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dee:	e029      	b.n	8003e44 <HAL_RCC_OscConfig+0x52c>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	d115      	bne.n	8003e24 <HAL_RCC_OscConfig+0x50c>
 8003df8:	4b08      	ldr	r3, [pc, #32]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfe:	4a07      	ldr	r2, [pc, #28]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003e00:	f043 0304 	orr.w	r3, r3, #4
 8003e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e08:	4b04      	ldr	r3, [pc, #16]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0e:	4a03      	ldr	r2, [pc, #12]	@ (8003e1c <HAL_RCC_OscConfig+0x504>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e18:	e014      	b.n	8003e44 <HAL_RCC_OscConfig+0x52c>
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40007000 	.word	0x40007000
 8003e24:	4b9d      	ldr	r3, [pc, #628]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2a:	4a9c      	ldr	r2, [pc, #624]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e34:	4b99      	ldr	r3, [pc, #612]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3a:	4a98      	ldr	r2, [pc, #608]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d016      	beq.n	8003e7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fd fa96 	bl	800137c <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fd fa92 	bl	800137c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e168      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	4b8c      	ldr	r3, [pc, #560]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ed      	beq.n	8003e54 <HAL_RCC_OscConfig+0x53c>
 8003e78:	e015      	b.n	8003ea6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7a:	f7fd fa7f 	bl	800137c <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fd fa7b 	bl	800137c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e151      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e98:	4b80      	ldr	r3, [pc, #512]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1ed      	bne.n	8003e82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea6:	7ffb      	ldrb	r3, [r7, #31]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eac:	4b7b      	ldr	r3, [pc, #492]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb0:	4a7a      	ldr	r2, [pc, #488]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eb6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d03c      	beq.n	8003f3e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01c      	beq.n	8003f06 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ecc:	4b73      	ldr	r3, [pc, #460]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ed2:	4a72      	ldr	r2, [pc, #456]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fd fa4e 	bl	800137c <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee4:	f7fd fa4a 	bl	800137c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e122      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ef6:	4b69      	ldr	r3, [pc, #420]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003ef8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ef      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x5cc>
 8003f04:	e01b      	b.n	8003f3e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f06:	4b65      	ldr	r3, [pc, #404]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f0c:	4a63      	ldr	r2, [pc, #396]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003f0e:	f023 0301 	bic.w	r3, r3, #1
 8003f12:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fd fa31 	bl	800137c <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f1e:	f7fd fa2d 	bl	800137c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e105      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f30:	4b5a      	ldr	r3, [pc, #360]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ef      	bne.n	8003f1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80f9 	beq.w	800413a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	f040 80cf 	bne.w	80040f0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f52:	4b52      	ldr	r3, [pc, #328]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0203 	and.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d12c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f70:	3b01      	subs	r3, #1
 8003f72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d123      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d11b      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f92:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d113      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	3b01      	subs	r3, #1
 8003fa6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d109      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d071      	beq.n	80040a4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d068      	beq.n	8004098 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fc6:	4b35      	ldr	r3, [pc, #212]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d105      	bne.n	8003fde <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fd2:	4b32      	ldr	r3, [pc, #200]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e0ac      	b.n	800413c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a2d      	ldr	r2, [pc, #180]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8003fe8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fee:	f7fd f9c5 	bl	800137c <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff6:	f7fd f9c1 	bl	800137c <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e099      	b.n	800413c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004008:	4b24      	ldr	r3, [pc, #144]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1f0      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004014:	4b21      	ldr	r3, [pc, #132]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	4b21      	ldr	r3, [pc, #132]	@ (80040a0 <HAL_RCC_OscConfig+0x788>)
 800401a:	4013      	ands	r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004024:	3a01      	subs	r2, #1
 8004026:	0112      	lsls	r2, r2, #4
 8004028:	4311      	orrs	r1, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800402e:	0212      	lsls	r2, r2, #8
 8004030:	4311      	orrs	r1, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004036:	0852      	lsrs	r2, r2, #1
 8004038:	3a01      	subs	r2, #1
 800403a:	0552      	lsls	r2, r2, #21
 800403c:	4311      	orrs	r1, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004042:	0852      	lsrs	r2, r2, #1
 8004044:	3a01      	subs	r2, #1
 8004046:	0652      	lsls	r2, r2, #25
 8004048:	4311      	orrs	r1, r2
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800404e:	06d2      	lsls	r2, r2, #27
 8004050:	430a      	orrs	r2, r1
 8004052:	4912      	ldr	r1, [pc, #72]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8004054:	4313      	orrs	r3, r2
 8004056:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004058:	4b10      	ldr	r3, [pc, #64]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a0f      	ldr	r2, [pc, #60]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 800405e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004062:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004064:	4b0d      	ldr	r3, [pc, #52]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a0c      	ldr	r2, [pc, #48]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 800406a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800406e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004070:	f7fd f984 	bl	800137c <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004078:	f7fd f980 	bl	800137c <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e058      	b.n	800413c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408a:	4b04      	ldr	r3, [pc, #16]	@ (800409c <HAL_RCC_OscConfig+0x784>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004096:	e050      	b.n	800413a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e04f      	b.n	800413c <HAL_RCC_OscConfig+0x824>
 800409c:	40021000 	.word	0x40021000
 80040a0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a4:	4b27      	ldr	r3, [pc, #156]	@ (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d144      	bne.n	800413a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040b0:	4b24      	ldr	r3, [pc, #144]	@ (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a23      	ldr	r2, [pc, #140]	@ (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040bc:	4b21      	ldr	r3, [pc, #132]	@ (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4a20      	ldr	r2, [pc, #128]	@ (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040c8:	f7fd f958 	bl	800137c <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d0:	f7fd f954 	bl	800137c <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e02c      	b.n	800413c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e2:	4b18      	ldr	r3, [pc, #96]	@ (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x7b8>
 80040ee:	e024      	b.n	800413a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b0c      	cmp	r3, #12
 80040f4:	d01f      	beq.n	8004136 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a12      	ldr	r2, [pc, #72]	@ (8004144 <HAL_RCC_OscConfig+0x82c>)
 80040fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004102:	f7fd f93b 	bl	800137c <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410a:	f7fd f937 	bl	800137c <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e00f      	b.n	800413c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411c:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <HAL_RCC_OscConfig+0x82c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004128:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_RCC_OscConfig+0x82c>)
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	4905      	ldr	r1, [pc, #20]	@ (8004144 <HAL_RCC_OscConfig+0x82c>)
 800412e:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <HAL_RCC_OscConfig+0x830>)
 8004130:	4013      	ands	r3, r2
 8004132:	60cb      	str	r3, [r1, #12]
 8004134:	e001      	b.n	800413a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3720      	adds	r7, #32
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	feeefffc 	.word	0xfeeefffc

0800414c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e11d      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b90      	ldr	r3, [pc, #576]	@ (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d910      	bls.n	8004194 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b8d      	ldr	r3, [pc, #564]	@ (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 020f 	bic.w	r2, r3, #15
 800417a:	498b      	ldr	r1, [pc, #556]	@ (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b89      	ldr	r3, [pc, #548]	@ (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e105      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d010      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	4b81      	ldr	r3, [pc, #516]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d908      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b0:	4b7e      	ldr	r3, [pc, #504]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	497b      	ldr	r1, [pc, #492]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d079      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d11e      	bne.n	8004214 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d6:	4b75      	ldr	r3, [pc, #468]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0dc      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80041e6:	f000 fa3b 	bl	8004660 <RCC_GetSysClockFreqFromPLLSource>
 80041ea:	4603      	mov	r3, r0
 80041ec:	4a70      	ldr	r2, [pc, #448]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d946      	bls.n	8004280 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80041f2:	4b6e      	ldr	r3, [pc, #440]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d140      	bne.n	8004280 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80041fe:	4b6b      	ldr	r3, [pc, #428]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004206:	4a69      	ldr	r2, [pc, #420]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800420c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800420e:	2380      	movs	r3, #128	@ 0x80
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e035      	b.n	8004280 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d107      	bne.n	800422c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421c:	4b63      	ldr	r3, [pc, #396]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d115      	bne.n	8004254 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0b9      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004234:	4b5d      	ldr	r3, [pc, #372]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0ad      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004244:	4b59      	ldr	r3, [pc, #356]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0a5      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004254:	f000 f8b4 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8004258:	4603      	mov	r3, r0
 800425a:	4a55      	ldr	r2, [pc, #340]	@ (80043b0 <HAL_RCC_ClockConfig+0x264>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d90f      	bls.n	8004280 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004260:	4b52      	ldr	r3, [pc, #328]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800426c:	4b4f      	ldr	r3, [pc, #316]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004274:	4a4d      	ldr	r2, [pc, #308]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800427a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800427c:	2380      	movs	r3, #128	@ 0x80
 800427e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004280:	4b4a      	ldr	r3, [pc, #296]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f023 0203 	bic.w	r2, r3, #3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4947      	ldr	r1, [pc, #284]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004292:	f7fd f873 	bl	800137c <HAL_GetTick>
 8004296:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004298:	e00a      	b.n	80042b0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429a:	f7fd f86f 	bl	800137c <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e077      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b0:	4b3e      	ldr	r3, [pc, #248]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 020c 	and.w	r2, r3, #12
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	429a      	cmp	r2, r3
 80042c0:	d1eb      	bne.n	800429a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b80      	cmp	r3, #128	@ 0x80
 80042c6:	d105      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042c8:	4b38      	ldr	r3, [pc, #224]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4a37      	ldr	r2, [pc, #220]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d010      	beq.n	8004302 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	4b31      	ldr	r3, [pc, #196]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d208      	bcs.n	8004302 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f0:	4b2e      	ldr	r3, [pc, #184]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	492b      	ldr	r1, [pc, #172]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004302:	4b29      	ldr	r3, [pc, #164]	@ (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d210      	bcs.n	8004332 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004310:	4b25      	ldr	r3, [pc, #148]	@ (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f023 020f 	bic.w	r2, r3, #15
 8004318:	4923      	ldr	r1, [pc, #140]	@ (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004320:	4b21      	ldr	r3, [pc, #132]	@ (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 030f 	and.w	r3, r3, #15
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d001      	beq.n	8004332 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e036      	b.n	80043a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800433e:	4b1b      	ldr	r3, [pc, #108]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	4918      	ldr	r1, [pc, #96]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 800434c:	4313      	orrs	r3, r2
 800434e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d009      	beq.n	8004370 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800435c:	4b13      	ldr	r3, [pc, #76]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4910      	ldr	r1, [pc, #64]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 800436c:	4313      	orrs	r3, r2
 800436e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004370:	f000 f826 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8004374:	4602      	mov	r2, r0
 8004376:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	490c      	ldr	r1, [pc, #48]	@ (80043b4 <HAL_RCC_ClockConfig+0x268>)
 8004382:	5ccb      	ldrb	r3, [r1, r3]
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
 800438c:	4a0a      	ldr	r2, [pc, #40]	@ (80043b8 <HAL_RCC_ClockConfig+0x26c>)
 800438e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004390:	4b0a      	ldr	r3, [pc, #40]	@ (80043bc <HAL_RCC_ClockConfig+0x270>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7fc febf 	bl	8001118 <HAL_InitTick>
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]

  return status;
 800439e:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40022000 	.word	0x40022000
 80043ac:	40021000 	.word	0x40021000
 80043b0:	04c4b400 	.word	0x04c4b400
 80043b4:	0800a514 	.word	0x0800a514
 80043b8:	20040000 	.word	0x20040000
 80043bc:	20040004 	.word	0x20040004

080043c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b089      	sub	sp, #36	@ 0x24
 80043c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
 80043ca:	2300      	movs	r3, #0
 80043cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ce:	4b3e      	ldr	r3, [pc, #248]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d8:	4b3b      	ldr	r3, [pc, #236]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <HAL_RCC_GetSysClockFreq+0x34>
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d121      	bne.n	8004432 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d11e      	bne.n	8004432 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043f4:	4b34      	ldr	r3, [pc, #208]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004400:	4b31      	ldr	r3, [pc, #196]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004402:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	e005      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004410:	4b2d      	ldr	r3, [pc, #180]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800441c:	4a2b      	ldr	r2, [pc, #172]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004424:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10d      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004430:	e00a      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b04      	cmp	r3, #4
 8004436:	d102      	bne.n	800443e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004438:	4b25      	ldr	r3, [pc, #148]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	e004      	b.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d101      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004444:	4b23      	ldr	r3, [pc, #140]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004446:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b0c      	cmp	r3, #12
 800444c:	d134      	bne.n	80044b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800444e:	4b1e      	ldr	r3, [pc, #120]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d003      	beq.n	8004466 <HAL_RCC_GetSysClockFreq+0xa6>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d003      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0xac>
 8004464:	e005      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004466:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004468:	617b      	str	r3, [r7, #20]
      break;
 800446a:	e005      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800446c:	4b19      	ldr	r3, [pc, #100]	@ (80044d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800446e:	617b      	str	r3, [r7, #20]
      break;
 8004470:	e002      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	617b      	str	r3, [r7, #20]
      break;
 8004476:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004478:	4b13      	ldr	r3, [pc, #76]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	091b      	lsrs	r3, r3, #4
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	3301      	adds	r3, #1
 8004484:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004486:	4b10      	ldr	r3, [pc, #64]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	fb03 f202 	mul.w	r2, r3, r2
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800449e:	4b0a      	ldr	r3, [pc, #40]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	0e5b      	lsrs	r3, r3, #25
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	3301      	adds	r3, #1
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044b8:	69bb      	ldr	r3, [r7, #24]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3724      	adds	r7, #36	@ 0x24
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40021000 	.word	0x40021000
 80044cc:	0800a52c 	.word	0x0800a52c
 80044d0:	00f42400 	.word	0x00f42400
 80044d4:	007a1200 	.word	0x007a1200

080044d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044dc:	4b03      	ldr	r3, [pc, #12]	@ (80044ec <HAL_RCC_GetHCLKFreq+0x14>)
 80044de:	681b      	ldr	r3, [r3, #0]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20040000 	.word	0x20040000

080044f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044f4:	f7ff fff0 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4904      	ldr	r1, [pc, #16]	@ (8004518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	0800a524 	.word	0x0800a524

0800451c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004520:	f7ff ffda 	bl	80044d8 <HAL_RCC_GetHCLKFreq>
 8004524:	4602      	mov	r2, r0
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	0adb      	lsrs	r3, r3, #11
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	4904      	ldr	r1, [pc, #16]	@ (8004544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004532:	5ccb      	ldrb	r3, [r1, r3]
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	0800a524 	.word	0x0800a524

08004548 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	220f      	movs	r2, #15
 8004556:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004558:	4b12      	ldr	r3, [pc, #72]	@ (80045a4 <HAL_RCC_GetClockConfig+0x5c>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0203 	and.w	r2, r3, #3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004564:	4b0f      	ldr	r3, [pc, #60]	@ (80045a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004570:	4b0c      	ldr	r3, [pc, #48]	@ (80045a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800457c:	4b09      	ldr	r3, [pc, #36]	@ (80045a4 <HAL_RCC_GetClockConfig+0x5c>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	08db      	lsrs	r3, r3, #3
 8004582:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800458a:	4b07      	ldr	r3, [pc, #28]	@ (80045a8 <HAL_RCC_GetClockConfig+0x60>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 020f 	and.w	r2, r3, #15
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	601a      	str	r2, [r3, #0]
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40022000 	.word	0x40022000

080045ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045b4:	2300      	movs	r3, #0
 80045b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045b8:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045c4:	f7ff f8c4 	bl	8003750 <HAL_PWREx_GetVoltageRange>
 80045c8:	6178      	str	r0, [r7, #20]
 80045ca:	e014      	b.n	80045f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045cc:	4b22      	ldr	r3, [pc, #136]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d0:	4a21      	ldr	r2, [pc, #132]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80045d8:	4b1f      	ldr	r3, [pc, #124]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045e4:	f7ff f8b4 	bl	8003750 <HAL_PWREx_GetVoltageRange>
 80045e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004658 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045fc:	d10b      	bne.n	8004616 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b80      	cmp	r3, #128	@ 0x80
 8004602:	d913      	bls.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2ba0      	cmp	r3, #160	@ 0xa0
 8004608:	d902      	bls.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800460a:	2302      	movs	r3, #2
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	e00d      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004610:	2301      	movs	r3, #1
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	e00a      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b7f      	cmp	r3, #127	@ 0x7f
 800461a:	d902      	bls.n	8004622 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800461c:	2302      	movs	r3, #2
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	e004      	b.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b70      	cmp	r3, #112	@ 0x70
 8004626:	d101      	bne.n	800462c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004628:	2301      	movs	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800462c:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 020f 	bic.w	r2, r3, #15
 8004634:	4909      	ldr	r1, [pc, #36]	@ (800465c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800463c:	4b07      	ldr	r3, [pc, #28]	@ (800465c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	429a      	cmp	r2, r3
 8004648:	d001      	beq.n	800464e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	40022000 	.word	0x40022000

08004660 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004666:	4b2d      	ldr	r3, [pc, #180]	@ (800471c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f003 0303 	and.w	r3, r3, #3
 800466e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b03      	cmp	r3, #3
 8004674:	d00b      	beq.n	800468e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b03      	cmp	r3, #3
 800467a:	d825      	bhi.n	80046c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d008      	beq.n	8004694 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d11f      	bne.n	80046c8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004688:	4b25      	ldr	r3, [pc, #148]	@ (8004720 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800468a:	613b      	str	r3, [r7, #16]
    break;
 800468c:	e01f      	b.n	80046ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800468e:	4b25      	ldr	r3, [pc, #148]	@ (8004724 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004690:	613b      	str	r3, [r7, #16]
    break;
 8004692:	e01c      	b.n	80046ce <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004694:	4b21      	ldr	r3, [pc, #132]	@ (800471c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046a0:	4b1e      	ldr	r3, [pc, #120]	@ (800471c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	e005      	b.n	80046bc <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046b0:	4b1a      	ldr	r3, [pc, #104]	@ (800471c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80046bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004728 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c4:	613b      	str	r3, [r7, #16]
    break;
 80046c6:	e002      	b.n	80046ce <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
    break;
 80046cc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046ce:	4b13      	ldr	r3, [pc, #76]	@ (800471c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	f003 030f 	and.w	r3, r3, #15
 80046d8:	3301      	adds	r3, #1
 80046da:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80046dc:	4b0f      	ldr	r3, [pc, #60]	@ (800471c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	0a1b      	lsrs	r3, r3, #8
 80046e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	fb03 f202 	mul.w	r2, r3, r2
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046f4:	4b09      	ldr	r3, [pc, #36]	@ (800471c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	0e5b      	lsrs	r3, r3, #25
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	3301      	adds	r3, #1
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800470e:	683b      	ldr	r3, [r7, #0]
}
 8004710:	4618      	mov	r0, r3
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	40021000 	.word	0x40021000
 8004720:	00f42400 	.word	0x00f42400
 8004724:	007a1200 	.word	0x007a1200
 8004728:	0800a52c 	.word	0x0800a52c

0800472c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004734:	2300      	movs	r3, #0
 8004736:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004738:	2300      	movs	r3, #0
 800473a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004744:	2b00      	cmp	r3, #0
 8004746:	d040      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800474c:	2b80      	cmp	r3, #128	@ 0x80
 800474e:	d02a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004750:	2b80      	cmp	r3, #128	@ 0x80
 8004752:	d825      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004754:	2b60      	cmp	r3, #96	@ 0x60
 8004756:	d026      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004758:	2b60      	cmp	r3, #96	@ 0x60
 800475a:	d821      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800475c:	2b40      	cmp	r3, #64	@ 0x40
 800475e:	d006      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004760:	2b40      	cmp	r3, #64	@ 0x40
 8004762:	d81d      	bhi.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d010      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800476c:	e018      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800476e:	4b89      	ldr	r3, [pc, #548]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	4a88      	ldr	r2, [pc, #544]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004778:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800477a:	e015      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fb02 	bl	8004d8c <RCCEx_PLLSAI1_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800478c:	e00c      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3320      	adds	r3, #32
 8004792:	2100      	movs	r1, #0
 8004794:	4618      	mov	r0, r3
 8004796:	f000 fbed 	bl	8004f74 <RCCEx_PLLSAI2_Config>
 800479a:	4603      	mov	r3, r0
 800479c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	74fb      	strb	r3, [r7, #19]
      break;
 80047a4:	e000      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80047a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a8:	7cfb      	ldrb	r3, [r7, #19]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10b      	bne.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047ae:	4b79      	ldr	r3, [pc, #484]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047b4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047bc:	4975      	ldr	r1, [pc, #468]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80047c4:	e001      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c6:	7cfb      	ldrb	r3, [r7, #19]
 80047c8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d047      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047de:	d030      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e4:	d82a      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047ea:	d02a      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047f0:	d824      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047f6:	d008      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80047f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047fc:	d81e      	bhi.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004806:	d010      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004808:	e018      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800480a:	4b62      	ldr	r3, [pc, #392]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	4a61      	ldr	r2, [pc, #388]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004814:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004816:	e015      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	3304      	adds	r3, #4
 800481c:	2100      	movs	r1, #0
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fab4 	bl	8004d8c <RCCEx_PLLSAI1_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004828:	e00c      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3320      	adds	r3, #32
 800482e:	2100      	movs	r1, #0
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fb9f 	bl	8004f74 <RCCEx_PLLSAI2_Config>
 8004836:	4603      	mov	r3, r0
 8004838:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800483a:	e003      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	74fb      	strb	r3, [r7, #19]
      break;
 8004840:	e000      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800484a:	4b52      	ldr	r3, [pc, #328]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800484c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004850:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004858:	494e      	ldr	r1, [pc, #312]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004860:	e001      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004862:	7cfb      	ldrb	r3, [r7, #19]
 8004864:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 809f 	beq.w	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004874:	2300      	movs	r3, #0
 8004876:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004878:	4b46      	ldr	r3, [pc, #280]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800487a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004888:	2300      	movs	r3, #0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00d      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800488e:	4b41      	ldr	r3, [pc, #260]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004892:	4a40      	ldr	r2, [pc, #256]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004898:	6593      	str	r3, [r2, #88]	@ 0x58
 800489a:	4b3e      	ldr	r3, [pc, #248]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800489c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a6:	2301      	movs	r3, #1
 80048a8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a3a      	ldr	r2, [pc, #232]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048b6:	f7fc fd61 	bl	800137c <HAL_GetTick>
 80048ba:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048bc:	e009      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048be:	f7fc fd5d 	bl	800137c <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d902      	bls.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	74fb      	strb	r3, [r7, #19]
        break;
 80048d0:	e005      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048d2:	4b31      	ldr	r3, [pc, #196]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0ef      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80048de:	7cfb      	ldrb	r3, [r7, #19]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d15b      	bne.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ee:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01f      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d019      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004902:	4b24      	ldr	r3, [pc, #144]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800490c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800490e:	4b21      	ldr	r3, [pc, #132]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004914:	4a1f      	ldr	r2, [pc, #124]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800491a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800491e:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004924:	4a1b      	ldr	r2, [pc, #108]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004926:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800492e:	4a19      	ldr	r2, [pc, #100]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b00      	cmp	r3, #0
 800493e:	d016      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fc fd1c 	bl	800137c <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004946:	e00b      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004948:	f7fc fd18 	bl	800137c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004956:	4293      	cmp	r3, r2
 8004958:	d902      	bls.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	74fb      	strb	r3, [r7, #19]
            break;
 800495e:	e006      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004960:	4b0c      	ldr	r3, [pc, #48]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0ec      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800496e:	7cfb      	ldrb	r3, [r7, #19]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10c      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004974:	4b07      	ldr	r3, [pc, #28]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004984:	4903      	ldr	r1, [pc, #12]	@ (8004994 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800498c:	e008      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800498e:	7cfb      	ldrb	r3, [r7, #19]
 8004990:	74bb      	strb	r3, [r7, #18]
 8004992:	e005      	b.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004994:	40021000 	.word	0x40021000
 8004998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499c:	7cfb      	ldrb	r3, [r7, #19]
 800499e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a0:	7c7b      	ldrb	r3, [r7, #17]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d105      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a6:	4ba0      	ldr	r3, [pc, #640]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049aa:	4a9f      	ldr	r2, [pc, #636]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049be:	4b9a      	ldr	r3, [pc, #616]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c4:	f023 0203 	bic.w	r2, r3, #3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049cc:	4996      	ldr	r1, [pc, #600]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e0:	4b91      	ldr	r3, [pc, #580]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e6:	f023 020c 	bic.w	r2, r3, #12
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	498e      	ldr	r1, [pc, #568]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0304 	and.w	r3, r3, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a02:	4b89      	ldr	r3, [pc, #548]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a10:	4985      	ldr	r1, [pc, #532]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00a      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a24:	4b80      	ldr	r3, [pc, #512]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a32:	497d      	ldr	r1, [pc, #500]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00a      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a46:	4b78      	ldr	r3, [pc, #480]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a54:	4974      	ldr	r1, [pc, #464]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00a      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a68:	4b6f      	ldr	r3, [pc, #444]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a76:	496c      	ldr	r1, [pc, #432]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00a      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a8a:	4b67      	ldr	r3, [pc, #412]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a90:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a98:	4963      	ldr	r1, [pc, #396]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aac:	4b5e      	ldr	r3, [pc, #376]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004aba:	495b      	ldr	r1, [pc, #364]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ace:	4b56      	ldr	r3, [pc, #344]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004adc:	4952      	ldr	r1, [pc, #328]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00a      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004af0:	4b4d      	ldr	r3, [pc, #308]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afe:	494a      	ldr	r1, [pc, #296]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b12:	4b45      	ldr	r3, [pc, #276]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b20:	4941      	ldr	r1, [pc, #260]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b34:	4b3c      	ldr	r3, [pc, #240]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b3a:	f023 0203 	bic.w	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b42:	4939      	ldr	r1, [pc, #228]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d028      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b56:	4b34      	ldr	r3, [pc, #208]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b64:	4930      	ldr	r1, [pc, #192]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b74:	d106      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b76:	4b2c      	ldr	r3, [pc, #176]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b80:	60d3      	str	r3, [r2, #12]
 8004b82:	e011      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b8c:	d10c      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	3304      	adds	r3, #4
 8004b92:	2101      	movs	r1, #1
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 f8f9 	bl	8004d8c <RCCEx_PLLSAI1_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004ba4:	7cfb      	ldrb	r3, [r7, #19]
 8004ba6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d04d      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bbc:	d108      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bc4:	4a18      	ldr	r2, [pc, #96]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bca:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004bce:	e012      	b.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004bd0:	4b15      	ldr	r3, [pc, #84]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bd6:	4a14      	ldr	r2, [pc, #80]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bdc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004be0:	4b11      	ldr	r3, [pc, #68]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bee:	490e      	ldr	r1, [pc, #56]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bfe:	d106      	bne.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b09      	ldr	r3, [pc, #36]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a08      	ldr	r2, [pc, #32]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
 8004c0c:	e020      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c16:	d109      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c18:	4b03      	ldr	r3, [pc, #12]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a02      	ldr	r2, [pc, #8]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c22:	60d3      	str	r3, [r2, #12]
 8004c24:	e014      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c30:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c34:	d10c      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f8a5 	bl	8004d8c <RCCEx_PLLSAI1_Config>
 8004c42:	4603      	mov	r3, r0
 8004c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004c4c:	7cfb      	ldrb	r3, [r7, #19]
 8004c4e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d028      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c6a:	4947      	ldr	r1, [pc, #284]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c7c:	4b42      	ldr	r3, [pc, #264]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4a41      	ldr	r2, [pc, #260]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c86:	60d3      	str	r3, [r2, #12]
 8004c88:	e011      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c8e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c92:	d10c      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 f876 	bl	8004d8c <RCCEx_PLLSAI1_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004caa:	7cfb      	ldrb	r3, [r7, #19]
 8004cac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01e      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cba:	4b33      	ldr	r3, [pc, #204]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cca:	492f      	ldr	r1, [pc, #188]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 f851 	bl	8004d8c <RCCEx_PLLSAI1_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cee:	7cfb      	ldrb	r3, [r7, #19]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004cf4:	7cfb      	ldrb	r3, [r7, #19]
 8004cf6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00b      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d04:	4b20      	ldr	r3, [pc, #128]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d0a:	f023 0204 	bic.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d14:	491c      	ldr	r1, [pc, #112]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00b      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004d28:	4b17      	ldr	r3, [pc, #92]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d2e:	f023 0218 	bic.w	r2, r3, #24
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d38:	4913      	ldr	r1, [pc, #76]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d017      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d5c:	490a      	ldr	r1, [pc, #40]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d6e:	d105      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d70:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4a04      	ldr	r2, [pc, #16]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40021000 	.word	0x40021000

08004d8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d9a:	4b72      	ldr	r3, [pc, #456]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00e      	beq.n	8004dc4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004da6:	4b6f      	ldr	r3, [pc, #444]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0203 	and.w	r2, r3, #3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d103      	bne.n	8004dbe <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
       ||
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d142      	bne.n	8004e44 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
 8004dc2:	e03f      	b.n	8004e44 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d018      	beq.n	8004dfe <RCCEx_PLLSAI1_Config+0x72>
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d825      	bhi.n	8004e1c <RCCEx_PLLSAI1_Config+0x90>
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d002      	beq.n	8004dda <RCCEx_PLLSAI1_Config+0x4e>
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d009      	beq.n	8004dec <RCCEx_PLLSAI1_Config+0x60>
 8004dd8:	e020      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dda:	4b62      	ldr	r3, [pc, #392]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d11d      	bne.n	8004e22 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dea:	e01a      	b.n	8004e22 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dec:	4b5d      	ldr	r3, [pc, #372]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d116      	bne.n	8004e26 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dfc:	e013      	b.n	8004e26 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dfe:	4b59      	ldr	r3, [pc, #356]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10f      	bne.n	8004e2a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e0a:	4b56      	ldr	r3, [pc, #344]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e1a:	e006      	b.n	8004e2a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e20:	e004      	b.n	8004e2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e22:	bf00      	nop
 8004e24:	e002      	b.n	8004e2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e26:	bf00      	nop
 8004e28:	e000      	b.n	8004e2c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004e2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d108      	bne.n	8004e44 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004e32:	4b4c      	ldr	r3, [pc, #304]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f023 0203 	bic.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4949      	ldr	r1, [pc, #292]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f040 8086 	bne.w	8004f58 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e4c:	4b45      	ldr	r3, [pc, #276]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a44      	ldr	r2, [pc, #272]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e58:	f7fc fa90 	bl	800137c <HAL_GetTick>
 8004e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e5e:	e009      	b.n	8004e74 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e60:	f7fc fa8c 	bl	800137c <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d902      	bls.n	8004e74 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	73fb      	strb	r3, [r7, #15]
        break;
 8004e72:	e005      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e74:	4b3b      	ldr	r3, [pc, #236]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ef      	bne.n	8004e60 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d168      	bne.n	8004f58 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d113      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e8c:	4b35      	ldr	r3, [pc, #212]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	4b35      	ldr	r3, [pc, #212]	@ (8004f68 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6892      	ldr	r2, [r2, #8]
 8004e98:	0211      	lsls	r1, r2, #8
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68d2      	ldr	r2, [r2, #12]
 8004e9e:	06d2      	lsls	r2, r2, #27
 8004ea0:	4311      	orrs	r1, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6852      	ldr	r2, [r2, #4]
 8004ea6:	3a01      	subs	r2, #1
 8004ea8:	0112      	lsls	r2, r2, #4
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	492d      	ldr	r1, [pc, #180]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	610b      	str	r3, [r1, #16]
 8004eb2:	e02d      	b.n	8004f10 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d115      	bne.n	8004ee6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eba:	4b2a      	ldr	r3, [pc, #168]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8004f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6892      	ldr	r2, [r2, #8]
 8004ec6:	0211      	lsls	r1, r2, #8
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6912      	ldr	r2, [r2, #16]
 8004ecc:	0852      	lsrs	r2, r2, #1
 8004ece:	3a01      	subs	r2, #1
 8004ed0:	0552      	lsls	r2, r2, #21
 8004ed2:	4311      	orrs	r1, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6852      	ldr	r2, [r2, #4]
 8004ed8:	3a01      	subs	r2, #1
 8004eda:	0112      	lsls	r2, r2, #4
 8004edc:	430a      	orrs	r2, r1
 8004ede:	4921      	ldr	r1, [pc, #132]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	610b      	str	r3, [r1, #16]
 8004ee4:	e014      	b.n	8004f10 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	4b21      	ldr	r3, [pc, #132]	@ (8004f70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6892      	ldr	r2, [r2, #8]
 8004ef2:	0211      	lsls	r1, r2, #8
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	6952      	ldr	r2, [r2, #20]
 8004ef8:	0852      	lsrs	r2, r2, #1
 8004efa:	3a01      	subs	r2, #1
 8004efc:	0652      	lsls	r2, r2, #25
 8004efe:	4311      	orrs	r1, r2
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6852      	ldr	r2, [r2, #4]
 8004f04:	3a01      	subs	r2, #1
 8004f06:	0112      	lsls	r2, r2, #4
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	4916      	ldr	r1, [pc, #88]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f10:	4b14      	ldr	r3, [pc, #80]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a13      	ldr	r2, [pc, #76]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f16:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1c:	f7fc fa2e 	bl	800137c <HAL_GetTick>
 8004f20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f22:	e009      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f24:	f7fc fa2a 	bl	800137c <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d902      	bls.n	8004f38 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	73fb      	strb	r3, [r7, #15]
          break;
 8004f36:	e005      	b.n	8004f44 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f38:	4b0a      	ldr	r3, [pc, #40]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0ef      	beq.n	8004f24 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f4a:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	4904      	ldr	r1, [pc, #16]	@ (8004f64 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	07ff800f 	.word	0x07ff800f
 8004f6c:	ff9f800f 	.word	0xff9f800f
 8004f70:	f9ff800f 	.word	0xf9ff800f

08004f74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f82:	4b72      	ldr	r3, [pc, #456]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00e      	beq.n	8004fac <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0203 	and.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d103      	bne.n	8004fa6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
       ||
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d142      	bne.n	800502c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	e03f      	b.n	800502c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d018      	beq.n	8004fe6 <RCCEx_PLLSAI2_Config+0x72>
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d825      	bhi.n	8005004 <RCCEx_PLLSAI2_Config+0x90>
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d002      	beq.n	8004fc2 <RCCEx_PLLSAI2_Config+0x4e>
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d009      	beq.n	8004fd4 <RCCEx_PLLSAI2_Config+0x60>
 8004fc0:	e020      	b.n	8005004 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fc2:	4b62      	ldr	r3, [pc, #392]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d11d      	bne.n	800500a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd2:	e01a      	b.n	800500a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fd4:	4b5d      	ldr	r3, [pc, #372]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d116      	bne.n	800500e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe4:	e013      	b.n	800500e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fe6:	4b59      	ldr	r3, [pc, #356]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ff2:	4b56      	ldr	r3, [pc, #344]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005002:	e006      	b.n	8005012 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
      break;
 8005008:	e004      	b.n	8005014 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800500a:	bf00      	nop
 800500c:	e002      	b.n	8005014 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800500e:	bf00      	nop
 8005010:	e000      	b.n	8005014 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005012:	bf00      	nop
    }

    if(status == HAL_OK)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d108      	bne.n	800502c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800501a:	4b4c      	ldr	r3, [pc, #304]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f023 0203 	bic.w	r2, r3, #3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4949      	ldr	r1, [pc, #292]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005028:	4313      	orrs	r3, r2
 800502a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	f040 8086 	bne.w	8005140 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005034:	4b45      	ldr	r3, [pc, #276]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a44      	ldr	r2, [pc, #272]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 800503a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800503e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005040:	f7fc f99c 	bl	800137c <HAL_GetTick>
 8005044:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005046:	e009      	b.n	800505c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005048:	f7fc f998 	bl	800137c <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d902      	bls.n	800505c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	73fb      	strb	r3, [r7, #15]
        break;
 800505a:	e005      	b.n	8005068 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800505c:	4b3b      	ldr	r3, [pc, #236]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1ef      	bne.n	8005048 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d168      	bne.n	8005140 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d113      	bne.n	800509c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005074:	4b35      	ldr	r3, [pc, #212]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	4b35      	ldr	r3, [pc, #212]	@ (8005150 <RCCEx_PLLSAI2_Config+0x1dc>)
 800507a:	4013      	ands	r3, r2
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6892      	ldr	r2, [r2, #8]
 8005080:	0211      	lsls	r1, r2, #8
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68d2      	ldr	r2, [r2, #12]
 8005086:	06d2      	lsls	r2, r2, #27
 8005088:	4311      	orrs	r1, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6852      	ldr	r2, [r2, #4]
 800508e:	3a01      	subs	r2, #1
 8005090:	0112      	lsls	r2, r2, #4
 8005092:	430a      	orrs	r2, r1
 8005094:	492d      	ldr	r1, [pc, #180]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005096:	4313      	orrs	r3, r2
 8005098:	614b      	str	r3, [r1, #20]
 800509a:	e02d      	b.n	80050f8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d115      	bne.n	80050ce <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050a2:	4b2a      	ldr	r3, [pc, #168]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050a4:	695a      	ldr	r2, [r3, #20]
 80050a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005154 <RCCEx_PLLSAI2_Config+0x1e0>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6892      	ldr	r2, [r2, #8]
 80050ae:	0211      	lsls	r1, r2, #8
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6912      	ldr	r2, [r2, #16]
 80050b4:	0852      	lsrs	r2, r2, #1
 80050b6:	3a01      	subs	r2, #1
 80050b8:	0552      	lsls	r2, r2, #21
 80050ba:	4311      	orrs	r1, r2
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6852      	ldr	r2, [r2, #4]
 80050c0:	3a01      	subs	r2, #1
 80050c2:	0112      	lsls	r2, r2, #4
 80050c4:	430a      	orrs	r2, r1
 80050c6:	4921      	ldr	r1, [pc, #132]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	614b      	str	r3, [r1, #20]
 80050cc:	e014      	b.n	80050f8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050ce:	4b1f      	ldr	r3, [pc, #124]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	4b21      	ldr	r3, [pc, #132]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1e4>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6892      	ldr	r2, [r2, #8]
 80050da:	0211      	lsls	r1, r2, #8
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6952      	ldr	r2, [r2, #20]
 80050e0:	0852      	lsrs	r2, r2, #1
 80050e2:	3a01      	subs	r2, #1
 80050e4:	0652      	lsls	r2, r2, #25
 80050e6:	4311      	orrs	r1, r2
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6852      	ldr	r2, [r2, #4]
 80050ec:	3a01      	subs	r2, #1
 80050ee:	0112      	lsls	r2, r2, #4
 80050f0:	430a      	orrs	r2, r1
 80050f2:	4916      	ldr	r1, [pc, #88]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050f8:	4b14      	ldr	r3, [pc, #80]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a13      	ldr	r2, [pc, #76]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005102:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005104:	f7fc f93a 	bl	800137c <HAL_GetTick>
 8005108:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800510a:	e009      	b.n	8005120 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800510c:	f7fc f936 	bl	800137c <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d902      	bls.n	8005120 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	73fb      	strb	r3, [r7, #15]
          break;
 800511e:	e005      	b.n	800512c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005120:	4b0a      	ldr	r3, [pc, #40]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0ef      	beq.n	800510c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800512c:	7bfb      	ldrb	r3, [r7, #15]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005132:	4b06      	ldr	r3, [pc, #24]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	4904      	ldr	r1, [pc, #16]	@ (800514c <RCCEx_PLLSAI2_Config+0x1d8>)
 800513c:	4313      	orrs	r3, r2
 800513e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000
 8005150:	07ff800f 	.word	0x07ff800f
 8005154:	ff9f800f 	.word	0xff9f800f
 8005158:	f9ff800f 	.word	0xf9ff800f

0800515c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e049      	b.n	8005202 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fb fefa 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3304      	adds	r3, #4
 8005198:	4619      	mov	r1, r3
 800519a:	4610      	mov	r0, r2
 800519c:	f000 fa9e 	bl	80056dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	d001      	beq.n	8005224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e04f      	b.n	80052c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f042 0201 	orr.w	r2, r2, #1
 800523a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a23      	ldr	r2, [pc, #140]	@ (80052d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01d      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800524e:	d018      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1f      	ldr	r2, [pc, #124]	@ (80052d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a1e      	ldr	r2, [pc, #120]	@ (80052d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d00e      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a1c      	ldr	r2, [pc, #112]	@ (80052dc <HAL_TIM_Base_Start_IT+0xd0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a1b      	ldr	r2, [pc, #108]	@ (80052e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d004      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0x76>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a19      	ldr	r2, [pc, #100]	@ (80052e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d115      	bne.n	80052ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	4b17      	ldr	r3, [pc, #92]	@ (80052e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800528a:	4013      	ands	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b06      	cmp	r3, #6
 8005292:	d015      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0xb4>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800529a:	d011      	beq.n	80052c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	e008      	b.n	80052c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e000      	b.n	80052c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3714      	adds	r7, #20
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	40012c00 	.word	0x40012c00
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40013400 	.word	0x40013400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	00010007 	.word	0x00010007

080052ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d020      	beq.n	8005350 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01b      	beq.n	8005350 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0202 	mvn.w	r2, #2
 8005320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f9b2 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 800533c:	e005      	b.n	800534a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f9a4 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f9b5 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	d020      	beq.n	800539c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01b      	beq.n	800539c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0204 	mvn.w	r2, #4
 800536c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f98c 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f97e 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f98f 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d020      	beq.n	80053e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01b      	beq.n	80053e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0208 	mvn.w	r2, #8
 80053b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2204      	movs	r2, #4
 80053be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f966 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 80053d4:	e005      	b.n	80053e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f958 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f969 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f003 0310 	and.w	r3, r3, #16
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d020      	beq.n	8005434 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01b      	beq.n	8005434 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0210 	mvn.w	r2, #16
 8005404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2208      	movs	r2, #8
 800540a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f940 	bl	80056a0 <HAL_TIM_IC_CaptureCallback>
 8005420:	e005      	b.n	800542e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f932 	bl	800568c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f943 	bl	80056b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00c      	beq.n	8005458 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d007      	beq.n	8005458 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0201 	mvn.w	r2, #1
 8005450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fb fbf6 	bl	8000c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00c      	beq.n	8005486 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800547e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fafd 	bl	8005a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00c      	beq.n	80054aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005496:	2b00      	cmp	r3, #0
 8005498:	d007      	beq.n	80054aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 faf5 	bl	8005a94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00c      	beq.n	80054ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f8fd 	bl	80056c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00c      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f06f 0220 	mvn.w	r2, #32
 80054ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fabd 	bl	8005a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f2:	bf00      	nop
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_TIM_ConfigClockSource+0x1c>
 8005512:	2302      	movs	r3, #2
 8005514:	e0b6      	b.n	8005684 <HAL_TIM_ConfigClockSource+0x18a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005534:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005538:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005540:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005552:	d03e      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0xd8>
 8005554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005558:	f200 8087 	bhi.w	800566a <HAL_TIM_ConfigClockSource+0x170>
 800555c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005560:	f000 8086 	beq.w	8005670 <HAL_TIM_ConfigClockSource+0x176>
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005568:	d87f      	bhi.n	800566a <HAL_TIM_ConfigClockSource+0x170>
 800556a:	2b70      	cmp	r3, #112	@ 0x70
 800556c:	d01a      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0xaa>
 800556e:	2b70      	cmp	r3, #112	@ 0x70
 8005570:	d87b      	bhi.n	800566a <HAL_TIM_ConfigClockSource+0x170>
 8005572:	2b60      	cmp	r3, #96	@ 0x60
 8005574:	d050      	beq.n	8005618 <HAL_TIM_ConfigClockSource+0x11e>
 8005576:	2b60      	cmp	r3, #96	@ 0x60
 8005578:	d877      	bhi.n	800566a <HAL_TIM_ConfigClockSource+0x170>
 800557a:	2b50      	cmp	r3, #80	@ 0x50
 800557c:	d03c      	beq.n	80055f8 <HAL_TIM_ConfigClockSource+0xfe>
 800557e:	2b50      	cmp	r3, #80	@ 0x50
 8005580:	d873      	bhi.n	800566a <HAL_TIM_ConfigClockSource+0x170>
 8005582:	2b40      	cmp	r3, #64	@ 0x40
 8005584:	d058      	beq.n	8005638 <HAL_TIM_ConfigClockSource+0x13e>
 8005586:	2b40      	cmp	r3, #64	@ 0x40
 8005588:	d86f      	bhi.n	800566a <HAL_TIM_ConfigClockSource+0x170>
 800558a:	2b30      	cmp	r3, #48	@ 0x30
 800558c:	d064      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0x15e>
 800558e:	2b30      	cmp	r3, #48	@ 0x30
 8005590:	d86b      	bhi.n	800566a <HAL_TIM_ConfigClockSource+0x170>
 8005592:	2b20      	cmp	r3, #32
 8005594:	d060      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0x15e>
 8005596:	2b20      	cmp	r3, #32
 8005598:	d867      	bhi.n	800566a <HAL_TIM_ConfigClockSource+0x170>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d05c      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0x15e>
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d05a      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0x15e>
 80055a2:	e062      	b.n	800566a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055b4:	f000 f9b2 	bl	800591c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055c6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	609a      	str	r2, [r3, #8]
      break;
 80055d0:	e04f      	b.n	8005672 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055e2:	f000 f99b 	bl	800591c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055f4:	609a      	str	r2, [r3, #8]
      break;
 80055f6:	e03c      	b.n	8005672 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005604:	461a      	mov	r2, r3
 8005606:	f000 f90f 	bl	8005828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2150      	movs	r1, #80	@ 0x50
 8005610:	4618      	mov	r0, r3
 8005612:	f000 f968 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 8005616:	e02c      	b.n	8005672 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005624:	461a      	mov	r2, r3
 8005626:	f000 f92e 	bl	8005886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2160      	movs	r1, #96	@ 0x60
 8005630:	4618      	mov	r0, r3
 8005632:	f000 f958 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 8005636:	e01c      	b.n	8005672 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005644:	461a      	mov	r2, r3
 8005646:	f000 f8ef 	bl	8005828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2140      	movs	r1, #64	@ 0x40
 8005650:	4618      	mov	r0, r3
 8005652:	f000 f948 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 8005656:	e00c      	b.n	8005672 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 f93f 	bl	80058e6 <TIM_ITRx_SetConfig>
      break;
 8005668:	e003      	b.n	8005672 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	73fb      	strb	r3, [r7, #15]
      break;
 800566e:	e000      	b.n	8005672 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005670:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005682:	7bfb      	ldrb	r3, [r7, #15]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a46      	ldr	r2, [pc, #280]	@ (8005808 <TIM_Base_SetConfig+0x12c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d013      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056fa:	d00f      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a43      	ldr	r2, [pc, #268]	@ (800580c <TIM_Base_SetConfig+0x130>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00b      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a42      	ldr	r2, [pc, #264]	@ (8005810 <TIM_Base_SetConfig+0x134>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a41      	ldr	r2, [pc, #260]	@ (8005814 <TIM_Base_SetConfig+0x138>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a40      	ldr	r2, [pc, #256]	@ (8005818 <TIM_Base_SetConfig+0x13c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d108      	bne.n	800572e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a35      	ldr	r2, [pc, #212]	@ (8005808 <TIM_Base_SetConfig+0x12c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01f      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800573c:	d01b      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a32      	ldr	r2, [pc, #200]	@ (800580c <TIM_Base_SetConfig+0x130>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d017      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a31      	ldr	r2, [pc, #196]	@ (8005810 <TIM_Base_SetConfig+0x134>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a30      	ldr	r2, [pc, #192]	@ (8005814 <TIM_Base_SetConfig+0x138>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00f      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2f      	ldr	r2, [pc, #188]	@ (8005818 <TIM_Base_SetConfig+0x13c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00b      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2e      	ldr	r2, [pc, #184]	@ (800581c <TIM_Base_SetConfig+0x140>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d007      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2d      	ldr	r2, [pc, #180]	@ (8005820 <TIM_Base_SetConfig+0x144>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d003      	beq.n	8005776 <TIM_Base_SetConfig+0x9a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2c      	ldr	r2, [pc, #176]	@ (8005824 <TIM_Base_SetConfig+0x148>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d108      	bne.n	8005788 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800577c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a16      	ldr	r2, [pc, #88]	@ (8005808 <TIM_Base_SetConfig+0x12c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00f      	beq.n	80057d4 <TIM_Base_SetConfig+0xf8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a18      	ldr	r2, [pc, #96]	@ (8005818 <TIM_Base_SetConfig+0x13c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00b      	beq.n	80057d4 <TIM_Base_SetConfig+0xf8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a17      	ldr	r2, [pc, #92]	@ (800581c <TIM_Base_SetConfig+0x140>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d007      	beq.n	80057d4 <TIM_Base_SetConfig+0xf8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a16      	ldr	r2, [pc, #88]	@ (8005820 <TIM_Base_SetConfig+0x144>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_Base_SetConfig+0xf8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a15      	ldr	r2, [pc, #84]	@ (8005824 <TIM_Base_SetConfig+0x148>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d103      	bne.n	80057dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d105      	bne.n	80057fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f023 0201 	bic.w	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	611a      	str	r2, [r3, #16]
  }
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40014000 	.word	0x40014000
 8005820:	40014400 	.word	0x40014400
 8005824:	40014800 	.word	0x40014800

08005828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	f023 0201 	bic.w	r2, r3, #1
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f023 030a 	bic.w	r3, r3, #10
 8005864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005886:	b480      	push	{r7}
 8005888:	b087      	sub	sp, #28
 800588a:	af00      	add	r7, sp, #0
 800588c:	60f8      	str	r0, [r7, #12]
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	f023 0210 	bic.w	r2, r3, #16
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	031b      	lsls	r3, r3, #12
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80058c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	f043 0307 	orr.w	r3, r3, #7
 8005908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	609a      	str	r2, [r3, #8]
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	021a      	lsls	r2, r3, #8
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	431a      	orrs	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	4313      	orrs	r3, r2
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	609a      	str	r2, [r3, #8]
}
 8005950:	bf00      	nop
 8005952:	371c      	adds	r7, #28
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005970:	2302      	movs	r3, #2
 8005972:	e068      	b.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a2e      	ldr	r2, [pc, #184]	@ (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d004      	beq.n	80059a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d108      	bne.n	80059ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80059ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1e      	ldr	r2, [pc, #120]	@ (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d01d      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e6:	d018      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1b      	ldr	r2, [pc, #108]	@ (8005a5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d013      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00e      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a18      	ldr	r2, [pc, #96]	@ (8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d009      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a13      	ldr	r2, [pc, #76]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d004      	beq.n	8005a1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a14      	ldr	r2, [pc, #80]	@ (8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d10c      	bne.n	8005a34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	40012c00 	.word	0x40012c00
 8005a58:	40013400 	.word	0x40013400
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40000c00 	.word	0x40000c00
 8005a68:	40014000 	.word	0x40014000

08005a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e042      	b.n	8005b40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d106      	bne.n	8005ad2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7fb f9af 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2224      	movs	r2, #36	@ 0x24
 8005ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0201 	bic.w	r2, r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fb24 	bl	8006140 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f825 	bl	8005b48 <UART_SetConfig>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e01b      	b.n	8005b40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fba3 	bl	8006284 <UART_CheckIdleState>
 8005b3e:	4603      	mov	r3, r0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b4c:	b08c      	sub	sp, #48	@ 0x30
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	431a      	orrs	r2, r3
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4baa      	ldr	r3, [pc, #680]	@ (8005e20 <UART_SetConfig+0x2d8>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	6812      	ldr	r2, [r2, #0]
 8005b7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b80:	430b      	orrs	r3, r1
 8005b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a9f      	ldr	r2, [pc, #636]	@ (8005e24 <UART_SetConfig+0x2dc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d004      	beq.n	8005bb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005bbe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	6812      	ldr	r2, [r2, #0]
 8005bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd2:	f023 010f 	bic.w	r1, r3, #15
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a90      	ldr	r2, [pc, #576]	@ (8005e28 <UART_SetConfig+0x2e0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d125      	bne.n	8005c38 <UART_SetConfig+0xf0>
 8005bec:	4b8f      	ldr	r3, [pc, #572]	@ (8005e2c <UART_SetConfig+0x2e4>)
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d81a      	bhi.n	8005c30 <UART_SetConfig+0xe8>
 8005bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005c00 <UART_SetConfig+0xb8>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c11 	.word	0x08005c11
 8005c04:	08005c21 	.word	0x08005c21
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005c29 	.word	0x08005c29
 8005c10:	2301      	movs	r3, #1
 8005c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c16:	e116      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c1e:	e112      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005c20:	2304      	movs	r3, #4
 8005c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c26:	e10e      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c2e:	e10a      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005c30:	2310      	movs	r3, #16
 8005c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c36:	e106      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a7c      	ldr	r2, [pc, #496]	@ (8005e30 <UART_SetConfig+0x2e8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d138      	bne.n	8005cb4 <UART_SetConfig+0x16c>
 8005c42:	4b7a      	ldr	r3, [pc, #488]	@ (8005e2c <UART_SetConfig+0x2e4>)
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c48:	f003 030c 	and.w	r3, r3, #12
 8005c4c:	2b0c      	cmp	r3, #12
 8005c4e:	d82d      	bhi.n	8005cac <UART_SetConfig+0x164>
 8005c50:	a201      	add	r2, pc, #4	@ (adr r2, 8005c58 <UART_SetConfig+0x110>)
 8005c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c56:	bf00      	nop
 8005c58:	08005c8d 	.word	0x08005c8d
 8005c5c:	08005cad 	.word	0x08005cad
 8005c60:	08005cad 	.word	0x08005cad
 8005c64:	08005cad 	.word	0x08005cad
 8005c68:	08005c9d 	.word	0x08005c9d
 8005c6c:	08005cad 	.word	0x08005cad
 8005c70:	08005cad 	.word	0x08005cad
 8005c74:	08005cad 	.word	0x08005cad
 8005c78:	08005c95 	.word	0x08005c95
 8005c7c:	08005cad 	.word	0x08005cad
 8005c80:	08005cad 	.word	0x08005cad
 8005c84:	08005cad 	.word	0x08005cad
 8005c88:	08005ca5 	.word	0x08005ca5
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c92:	e0d8      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005c94:	2302      	movs	r3, #2
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c9a:	e0d4      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca2:	e0d0      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005caa:	e0cc      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005cac:	2310      	movs	r3, #16
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cb2:	e0c8      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a5e      	ldr	r2, [pc, #376]	@ (8005e34 <UART_SetConfig+0x2ec>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d125      	bne.n	8005d0a <UART_SetConfig+0x1c2>
 8005cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8005e2c <UART_SetConfig+0x2e4>)
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005cc8:	2b30      	cmp	r3, #48	@ 0x30
 8005cca:	d016      	beq.n	8005cfa <UART_SetConfig+0x1b2>
 8005ccc:	2b30      	cmp	r3, #48	@ 0x30
 8005cce:	d818      	bhi.n	8005d02 <UART_SetConfig+0x1ba>
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d00a      	beq.n	8005cea <UART_SetConfig+0x1a2>
 8005cd4:	2b20      	cmp	r3, #32
 8005cd6:	d814      	bhi.n	8005d02 <UART_SetConfig+0x1ba>
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <UART_SetConfig+0x19a>
 8005cdc:	2b10      	cmp	r3, #16
 8005cde:	d008      	beq.n	8005cf2 <UART_SetConfig+0x1aa>
 8005ce0:	e00f      	b.n	8005d02 <UART_SetConfig+0x1ba>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce8:	e0ad      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005cea:	2302      	movs	r3, #2
 8005cec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf0:	e0a9      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005cf2:	2304      	movs	r3, #4
 8005cf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf8:	e0a5      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005cfa:	2308      	movs	r3, #8
 8005cfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d00:	e0a1      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005d02:	2310      	movs	r3, #16
 8005d04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d08:	e09d      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8005e38 <UART_SetConfig+0x2f0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d125      	bne.n	8005d60 <UART_SetConfig+0x218>
 8005d14:	4b45      	ldr	r3, [pc, #276]	@ (8005e2c <UART_SetConfig+0x2e4>)
 8005d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d20:	d016      	beq.n	8005d50 <UART_SetConfig+0x208>
 8005d22:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d24:	d818      	bhi.n	8005d58 <UART_SetConfig+0x210>
 8005d26:	2b80      	cmp	r3, #128	@ 0x80
 8005d28:	d00a      	beq.n	8005d40 <UART_SetConfig+0x1f8>
 8005d2a:	2b80      	cmp	r3, #128	@ 0x80
 8005d2c:	d814      	bhi.n	8005d58 <UART_SetConfig+0x210>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <UART_SetConfig+0x1f0>
 8005d32:	2b40      	cmp	r3, #64	@ 0x40
 8005d34:	d008      	beq.n	8005d48 <UART_SetConfig+0x200>
 8005d36:	e00f      	b.n	8005d58 <UART_SetConfig+0x210>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d3e:	e082      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005d40:	2302      	movs	r3, #2
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d46:	e07e      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d4e:	e07a      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005d50:	2308      	movs	r3, #8
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d56:	e076      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d5e:	e072      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a35      	ldr	r2, [pc, #212]	@ (8005e3c <UART_SetConfig+0x2f4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d12a      	bne.n	8005dc0 <UART_SetConfig+0x278>
 8005d6a:	4b30      	ldr	r3, [pc, #192]	@ (8005e2c <UART_SetConfig+0x2e4>)
 8005d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d78:	d01a      	beq.n	8005db0 <UART_SetConfig+0x268>
 8005d7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d7e:	d81b      	bhi.n	8005db8 <UART_SetConfig+0x270>
 8005d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d84:	d00c      	beq.n	8005da0 <UART_SetConfig+0x258>
 8005d86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d8a:	d815      	bhi.n	8005db8 <UART_SetConfig+0x270>
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <UART_SetConfig+0x250>
 8005d90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d94:	d008      	beq.n	8005da8 <UART_SetConfig+0x260>
 8005d96:	e00f      	b.n	8005db8 <UART_SetConfig+0x270>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d9e:	e052      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005da0:	2302      	movs	r3, #2
 8005da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005da6:	e04e      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005da8:	2304      	movs	r3, #4
 8005daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dae:	e04a      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005db0:	2308      	movs	r3, #8
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005db6:	e046      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005db8:	2310      	movs	r3, #16
 8005dba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dbe:	e042      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a17      	ldr	r2, [pc, #92]	@ (8005e24 <UART_SetConfig+0x2dc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d13a      	bne.n	8005e40 <UART_SetConfig+0x2f8>
 8005dca:	4b18      	ldr	r3, [pc, #96]	@ (8005e2c <UART_SetConfig+0x2e4>)
 8005dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005dd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dd8:	d01a      	beq.n	8005e10 <UART_SetConfig+0x2c8>
 8005dda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dde:	d81b      	bhi.n	8005e18 <UART_SetConfig+0x2d0>
 8005de0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005de4:	d00c      	beq.n	8005e00 <UART_SetConfig+0x2b8>
 8005de6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dea:	d815      	bhi.n	8005e18 <UART_SetConfig+0x2d0>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <UART_SetConfig+0x2b0>
 8005df0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005df4:	d008      	beq.n	8005e08 <UART_SetConfig+0x2c0>
 8005df6:	e00f      	b.n	8005e18 <UART_SetConfig+0x2d0>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dfe:	e022      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005e00:	2302      	movs	r3, #2
 8005e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e06:	e01e      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e0e:	e01a      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005e10:	2308      	movs	r3, #8
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e16:	e016      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e1e:	e012      	b.n	8005e46 <UART_SetConfig+0x2fe>
 8005e20:	cfff69f3 	.word	0xcfff69f3
 8005e24:	40008000 	.word	0x40008000
 8005e28:	40013800 	.word	0x40013800
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	40004400 	.word	0x40004400
 8005e34:	40004800 	.word	0x40004800
 8005e38:	40004c00 	.word	0x40004c00
 8005e3c:	40005000 	.word	0x40005000
 8005e40:	2310      	movs	r3, #16
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4aae      	ldr	r2, [pc, #696]	@ (8006104 <UART_SetConfig+0x5bc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	f040 8097 	bne.w	8005f80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d823      	bhi.n	8005ea2 <UART_SetConfig+0x35a>
 8005e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e60 <UART_SetConfig+0x318>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005ea3 	.word	0x08005ea3
 8005e68:	08005e8d 	.word	0x08005e8d
 8005e6c:	08005ea3 	.word	0x08005ea3
 8005e70:	08005e93 	.word	0x08005e93
 8005e74:	08005ea3 	.word	0x08005ea3
 8005e78:	08005ea3 	.word	0x08005ea3
 8005e7c:	08005ea3 	.word	0x08005ea3
 8005e80:	08005e9b 	.word	0x08005e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e84:	f7fe fb34 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8005e88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e8a:	e010      	b.n	8005eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e8c:	4b9e      	ldr	r3, [pc, #632]	@ (8006108 <UART_SetConfig+0x5c0>)
 8005e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005e90:	e00d      	b.n	8005eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e92:	f7fe fa95 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8005e96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005e98:	e009      	b.n	8005eae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ea0:	e005      	b.n	8005eae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005eac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8130 	beq.w	8006116 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	4a94      	ldr	r2, [pc, #592]	@ (800610c <UART_SetConfig+0x5c4>)
 8005ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	4413      	add	r3, r2
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d305      	bcc.n	8005ee6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d903      	bls.n	8005eee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005eec:	e113      	b.n	8006116 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	60bb      	str	r3, [r7, #8]
 8005ef4:	60fa      	str	r2, [r7, #12]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efa:	4a84      	ldr	r2, [pc, #528]	@ (800610c <UART_SetConfig+0x5c4>)
 8005efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2200      	movs	r2, #0
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f10:	f7fa f976 	bl	8000200 <__aeabi_uldivmod>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	020b      	lsls	r3, r1, #8
 8005f26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f2a:	0202      	lsls	r2, r0, #8
 8005f2c:	6979      	ldr	r1, [r7, #20]
 8005f2e:	6849      	ldr	r1, [r1, #4]
 8005f30:	0849      	lsrs	r1, r1, #1
 8005f32:	2000      	movs	r0, #0
 8005f34:	460c      	mov	r4, r1
 8005f36:	4605      	mov	r5, r0
 8005f38:	eb12 0804 	adds.w	r8, r2, r4
 8005f3c:	eb43 0905 	adc.w	r9, r3, r5
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	469a      	mov	sl, r3
 8005f48:	4693      	mov	fp, r2
 8005f4a:	4652      	mov	r2, sl
 8005f4c:	465b      	mov	r3, fp
 8005f4e:	4640      	mov	r0, r8
 8005f50:	4649      	mov	r1, r9
 8005f52:	f7fa f955 	bl	8000200 <__aeabi_uldivmod>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f64:	d308      	bcc.n	8005f78 <UART_SetConfig+0x430>
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f6c:	d204      	bcs.n	8005f78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	6a3a      	ldr	r2, [r7, #32]
 8005f74:	60da      	str	r2, [r3, #12]
 8005f76:	e0ce      	b.n	8006116 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f7e:	e0ca      	b.n	8006116 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	69db      	ldr	r3, [r3, #28]
 8005f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f88:	d166      	bne.n	8006058 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d827      	bhi.n	8005fe2 <UART_SetConfig+0x49a>
 8005f92:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <UART_SetConfig+0x450>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fbd 	.word	0x08005fbd
 8005f9c:	08005fc5 	.word	0x08005fc5
 8005fa0:	08005fcd 	.word	0x08005fcd
 8005fa4:	08005fe3 	.word	0x08005fe3
 8005fa8:	08005fd3 	.word	0x08005fd3
 8005fac:	08005fe3 	.word	0x08005fe3
 8005fb0:	08005fe3 	.word	0x08005fe3
 8005fb4:	08005fe3 	.word	0x08005fe3
 8005fb8:	08005fdb 	.word	0x08005fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fbc:	f7fe fa98 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8005fc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fc2:	e014      	b.n	8005fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fc4:	f7fe faaa 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8005fc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fca:	e010      	b.n	8005fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8006108 <UART_SetConfig+0x5c0>)
 8005fce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fd0:	e00d      	b.n	8005fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd2:	f7fe f9f5 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 8005fd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fd8:	e009      	b.n	8005fee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fe0:	e005      	b.n	8005fee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005fec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 8090 	beq.w	8006116 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffa:	4a44      	ldr	r2, [pc, #272]	@ (800610c <UART_SetConfig+0x5c4>)
 8005ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006000:	461a      	mov	r2, r3
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	fbb3 f3f2 	udiv	r3, r3, r2
 8006008:	005a      	lsls	r2, r3, #1
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	085b      	lsrs	r3, r3, #1
 8006010:	441a      	add	r2, r3
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	fbb2 f3f3 	udiv	r3, r2, r3
 800601a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800601c:	6a3b      	ldr	r3, [r7, #32]
 800601e:	2b0f      	cmp	r3, #15
 8006020:	d916      	bls.n	8006050 <UART_SetConfig+0x508>
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006028:	d212      	bcs.n	8006050 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	b29b      	uxth	r3, r3
 800602e:	f023 030f 	bic.w	r3, r3, #15
 8006032:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006034:	6a3b      	ldr	r3, [r7, #32]
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	b29b      	uxth	r3, r3
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	b29a      	uxth	r2, r3
 8006040:	8bfb      	ldrh	r3, [r7, #30]
 8006042:	4313      	orrs	r3, r2
 8006044:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	8bfa      	ldrh	r2, [r7, #30]
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	e062      	b.n	8006116 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006056:	e05e      	b.n	8006116 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006058:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800605c:	2b08      	cmp	r3, #8
 800605e:	d828      	bhi.n	80060b2 <UART_SetConfig+0x56a>
 8006060:	a201      	add	r2, pc, #4	@ (adr r2, 8006068 <UART_SetConfig+0x520>)
 8006062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006066:	bf00      	nop
 8006068:	0800608d 	.word	0x0800608d
 800606c:	08006095 	.word	0x08006095
 8006070:	0800609d 	.word	0x0800609d
 8006074:	080060b3 	.word	0x080060b3
 8006078:	080060a3 	.word	0x080060a3
 800607c:	080060b3 	.word	0x080060b3
 8006080:	080060b3 	.word	0x080060b3
 8006084:	080060b3 	.word	0x080060b3
 8006088:	080060ab 	.word	0x080060ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800608c:	f7fe fa30 	bl	80044f0 <HAL_RCC_GetPCLK1Freq>
 8006090:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006092:	e014      	b.n	80060be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006094:	f7fe fa42 	bl	800451c <HAL_RCC_GetPCLK2Freq>
 8006098:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800609a:	e010      	b.n	80060be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800609c:	4b1a      	ldr	r3, [pc, #104]	@ (8006108 <UART_SetConfig+0x5c0>)
 800609e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060a0:	e00d      	b.n	80060be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060a2:	f7fe f98d 	bl	80043c0 <HAL_RCC_GetSysClockFreq>
 80060a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80060a8:	e009      	b.n	80060be <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80060b0:	e005      	b.n	80060be <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80060bc:	bf00      	nop
    }

    if (pclk != 0U)
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d028      	beq.n	8006116 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c8:	4a10      	ldr	r2, [pc, #64]	@ (800610c <UART_SetConfig+0x5c4>)
 80060ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ce:	461a      	mov	r2, r3
 80060d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	085b      	lsrs	r3, r3, #1
 80060dc:	441a      	add	r2, r3
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	2b0f      	cmp	r3, #15
 80060ec:	d910      	bls.n	8006110 <UART_SetConfig+0x5c8>
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f4:	d20c      	bcs.n	8006110 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60da      	str	r2, [r3, #12]
 8006100:	e009      	b.n	8006116 <UART_SetConfig+0x5ce>
 8006102:	bf00      	nop
 8006104:	40008000 	.word	0x40008000
 8006108:	00f42400 	.word	0x00f42400
 800610c:	0800a55c 	.word	0x0800a55c
      }
      else
      {
        ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2201      	movs	r2, #1
 800611a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2201      	movs	r2, #1
 8006122:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2200      	movs	r2, #0
 800612a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2200      	movs	r2, #0
 8006130:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006132:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006136:	4618      	mov	r0, r3
 8006138:	3730      	adds	r7, #48	@ 0x30
 800613a:	46bd      	mov	sp, r7
 800613c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00a      	beq.n	800616a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	430a      	orrs	r2, r1
 8006168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00a      	beq.n	800618c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	430a      	orrs	r2, r1
 800618a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00a      	beq.n	80061ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b2:	f003 0304 	and.w	r3, r3, #4
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f6:	f003 0320 	and.w	r3, r3, #32
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01a      	beq.n	8006256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800623e:	d10a      	bne.n	8006256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	430a      	orrs	r2, r1
 8006276:	605a      	str	r2, [r3, #4]
  }
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b098      	sub	sp, #96	@ 0x60
 8006288:	af02      	add	r7, sp, #8
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006294:	f7fb f872 	bl	800137c <HAL_GetTick>
 8006298:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d12f      	bne.n	8006308 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062b0:	2200      	movs	r2, #0
 80062b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f88e 	bl	80063d8 <UART_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d022      	beq.n	8006308 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ca:	e853 3f00 	ldrex	r3, [r3]
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	461a      	mov	r2, r3
 80062de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80062e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80062e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80062ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e6      	bne.n	80062c2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e063      	b.n	80063d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b04      	cmp	r3, #4
 8006314:	d149      	bne.n	80063aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006316:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800631e:	2200      	movs	r2, #0
 8006320:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f857 	bl	80063d8 <UART_WaitOnFlagUntilTimeout>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d03c      	beq.n	80063aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	623b      	str	r3, [r7, #32]
   return(result);
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006344:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800634e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006350:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800635c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e6      	bne.n	8006330 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	60fb      	str	r3, [r7, #12]
   return(result);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f023 0301 	bic.w	r3, r3, #1
 8006378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3308      	adds	r3, #8
 8006380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006382:	61fa      	str	r2, [r7, #28]
 8006384:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	69b9      	ldr	r1, [r7, #24]
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	617b      	str	r3, [r7, #20]
   return(result);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e5      	bne.n	8006362 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e012      	b.n	80063d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2220      	movs	r2, #32
 80063b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3758      	adds	r7, #88	@ 0x58
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	4613      	mov	r3, r2
 80063e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e8:	e04f      	b.n	800648a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f0:	d04b      	beq.n	800648a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f2:	f7fa ffc3 	bl	800137c <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d302      	bcc.n	8006408 <UART_WaitOnFlagUntilTimeout+0x30>
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e04e      	b.n	80064aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d037      	beq.n	800648a <UART_WaitOnFlagUntilTimeout+0xb2>
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2b80      	cmp	r3, #128	@ 0x80
 800641e:	d034      	beq.n	800648a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b40      	cmp	r3, #64	@ 0x40
 8006424:	d031      	beq.n	800648a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b08      	cmp	r3, #8
 8006432:	d110      	bne.n	8006456 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2208      	movs	r2, #8
 800643a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 f838 	bl	80064b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2208      	movs	r2, #8
 8006446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e029      	b.n	80064aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006460:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006464:	d111      	bne.n	800648a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800646e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 f81e 	bl	80064b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e00f      	b.n	80064aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4013      	ands	r3, r2
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	429a      	cmp	r2, r3
 8006498:	bf0c      	ite	eq
 800649a:	2301      	moveq	r3, #1
 800649c:	2300      	movne	r3, #0
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	461a      	mov	r2, r3
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d0a0      	beq.n	80063ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b095      	sub	sp, #84	@ 0x54
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	461a      	mov	r2, r3
 80064d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80064da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80064de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80064e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e6      	bne.n	80064ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3308      	adds	r3, #8
 80064f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	e853 3f00 	ldrex	r3, [r3]
 80064fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006510:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006512:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800651e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e3      	bne.n	80064ec <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d118      	bne.n	800655e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	60bb      	str	r3, [r7, #8]
   return(result);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f023 0310 	bic.w	r3, r3, #16
 8006540:	647b      	str	r3, [r7, #68]	@ 0x44
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	461a      	mov	r2, r3
 8006548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800654a:	61bb      	str	r3, [r7, #24]
 800654c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6979      	ldr	r1, [r7, #20]
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	613b      	str	r3, [r7, #16]
   return(result);
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e6      	bne.n	800652c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006572:	bf00      	nop
 8006574:	3754      	adds	r7, #84	@ 0x54
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800657e:	b480      	push	{r7}
 8006580:	b085      	sub	sp, #20
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_UARTEx_DisableFifoMode+0x16>
 8006590:	2302      	movs	r3, #2
 8006592:	e027      	b.n	80065e4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2224      	movs	r2, #36	@ 0x24
 80065a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681a      	ldr	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f022 0201 	bic.w	r2, r2, #1
 80065ba:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80065c2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006600:	2b01      	cmp	r3, #1
 8006602:	d101      	bne.n	8006608 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006604:	2302      	movs	r3, #2
 8006606:	e02d      	b.n	8006664 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2224      	movs	r2, #36	@ 0x24
 8006614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0201 	bic.w	r2, r2, #1
 800662e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f84f 	bl	80066e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2220      	movs	r2, #32
 8006656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006680:	2302      	movs	r3, #2
 8006682:	e02d      	b.n	80066e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2224      	movs	r2, #36	@ 0x24
 8006690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0201 	bic.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f811 	bl	80066e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d108      	bne.n	800670a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006708:	e031      	b.n	800676e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800670a:	2308      	movs	r3, #8
 800670c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800670e:	2308      	movs	r3, #8
 8006710:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	0e5b      	lsrs	r3, r3, #25
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	0f5b      	lsrs	r3, r3, #29
 800672a:	b2db      	uxtb	r3, r3
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	7b3a      	ldrb	r2, [r7, #12]
 8006736:	4911      	ldr	r1, [pc, #68]	@ (800677c <UARTEx_SetNbDataToProcess+0x94>)
 8006738:	5c8a      	ldrb	r2, [r1, r2]
 800673a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800673e:	7b3a      	ldrb	r2, [r7, #12]
 8006740:	490f      	ldr	r1, [pc, #60]	@ (8006780 <UARTEx_SetNbDataToProcess+0x98>)
 8006742:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006744:	fb93 f3f2 	sdiv	r3, r3, r2
 8006748:	b29a      	uxth	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	7b7a      	ldrb	r2, [r7, #13]
 8006754:	4909      	ldr	r1, [pc, #36]	@ (800677c <UARTEx_SetNbDataToProcess+0x94>)
 8006756:	5c8a      	ldrb	r2, [r1, r2]
 8006758:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800675c:	7b7a      	ldrb	r2, [r7, #13]
 800675e:	4908      	ldr	r1, [pc, #32]	@ (8006780 <UARTEx_SetNbDataToProcess+0x98>)
 8006760:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006762:	fb93 f3f2 	sdiv	r3, r3, r2
 8006766:	b29a      	uxth	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800676e:	bf00      	nop
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	0800a574 	.word	0x0800a574
 8006780:	0800a57c 	.word	0x0800a57c

08006784 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006784:	b084      	sub	sp, #16
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	f107 001c 	add.w	r0, r7, #28
 8006792:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa68 	bl	8006c78 <USB_CoreReset>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80067ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d106      	bne.n	80067c2 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	639a      	str	r2, [r3, #56]	@ 0x38
 80067c0:	e005      	b.n	80067ce <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067da:	b004      	add	sp, #16
 80067dc:	4770      	bx	lr

080067de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f023 0201 	bic.w	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d115      	bne.n	800684e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800682e:	200a      	movs	r0, #10
 8006830:	f7fa fdb0 	bl	8001394 <HAL_Delay>
      ms += 10U;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	330a      	adds	r3, #10
 8006838:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa0e 	bl	8006c5c <USB_GetMode>
 8006840:	4603      	mov	r3, r0
 8006842:	2b01      	cmp	r3, #1
 8006844:	d01e      	beq.n	8006884 <USB_SetCurrentMode+0x84>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2bc7      	cmp	r3, #199	@ 0xc7
 800684a:	d9f0      	bls.n	800682e <USB_SetCurrentMode+0x2e>
 800684c:	e01a      	b.n	8006884 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d115      	bne.n	8006880 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006860:	200a      	movs	r0, #10
 8006862:	f7fa fd97 	bl	8001394 <HAL_Delay>
      ms += 10U;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	330a      	adds	r3, #10
 800686a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f9f5 	bl	8006c5c <USB_GetMode>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <USB_SetCurrentMode+0x84>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2bc7      	cmp	r3, #199	@ 0xc7
 800687c:	d9f0      	bls.n	8006860 <USB_SetCurrentMode+0x60>
 800687e:	e001      	b.n	8006884 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e005      	b.n	8006890 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2bc8      	cmp	r3, #200	@ 0xc8
 8006888:	d101      	bne.n	800688e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006898:	b084      	sub	sp, #16
 800689a:	b580      	push	{r7, lr}
 800689c:	b086      	sub	sp, #24
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80068a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068b2:	2300      	movs	r3, #0
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	e009      	b.n	80068cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	3340      	adds	r3, #64	@ 0x40
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	2200      	movs	r2, #0
 80068c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	3301      	adds	r3, #1
 80068ca:	613b      	str	r3, [r7, #16]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	2b0e      	cmp	r3, #14
 80068d0:	d9f2      	bls.n	80068b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d11c      	bne.n	8006914 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068e8:	f043 0302 	orr.w	r3, r3, #2
 80068ec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e005      	b.n	8006920 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006918:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006926:	461a      	mov	r2, r3
 8006928:	2300      	movs	r3, #0
 800692a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800692c:	2103      	movs	r1, #3
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f95a 	bl	8006be8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006934:	2110      	movs	r1, #16
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f8f6 	bl	8006b28 <USB_FlushTxFifo>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f920 	bl	8006b8c <USB_FlushRxFifo>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800695c:	461a      	mov	r2, r3
 800695e:	2300      	movs	r3, #0
 8006960:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006968:	461a      	mov	r2, r3
 800696a:	2300      	movs	r3, #0
 800696c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006974:	461a      	mov	r2, r3
 8006976:	2300      	movs	r3, #0
 8006978:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800697a:	2300      	movs	r3, #0
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	e043      	b.n	8006a08 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006992:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006996:	d118      	bne.n	80069ca <USB_DevInit+0x132>
    {
      if (i == 0U)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10a      	bne.n	80069b4 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069aa:	461a      	mov	r2, r3
 80069ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	e013      	b.n	80069dc <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c0:	461a      	mov	r2, r3
 80069c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	e008      	b.n	80069dc <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d6:	461a      	mov	r2, r3
 80069d8:	2300      	movs	r3, #0
 80069da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e8:	461a      	mov	r2, r3
 80069ea:	2300      	movs	r3, #0
 80069ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069fa:	461a      	mov	r2, r3
 80069fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	3301      	adds	r3, #1
 8006a06:	613b      	str	r3, [r7, #16]
 8006a08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d3b5      	bcc.n	8006980 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a14:	2300      	movs	r3, #0
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	e043      	b.n	8006aa2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a30:	d118      	bne.n	8006a64 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10a      	bne.n	8006a4e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a44:	461a      	mov	r2, r3
 8006a46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	e013      	b.n	8006a76 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	015a      	lsls	r2, r3, #5
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4413      	add	r3, r2
 8006a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	e008      	b.n	8006a76 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a70:	461a      	mov	r2, r3
 8006a72:	2300      	movs	r3, #0
 8006a74:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a82:	461a      	mov	r2, r3
 8006a84:	2300      	movs	r3, #0
 8006a86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a94:	461a      	mov	r2, r3
 8006a96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006a9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d3b5      	bcc.n	8006a1a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ac0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006ace:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f043 0210 	orr.w	r2, r3, #16
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	699a      	ldr	r2, [r3, #24]
 8006ae0:	4b10      	ldr	r3, [pc, #64]	@ (8006b24 <USB_DevInit+0x28c>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ae8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	f043 0208 	orr.w	r2, r3, #8
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006afc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d107      	bne.n	8006b14 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b0c:	f043 0304 	orr.w	r3, r3, #4
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b20:	b004      	add	sp, #16
 8006b22:	4770      	bx	lr
 8006b24:	803c3800 	.word	0x803c3800

08006b28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b42:	d901      	bls.n	8006b48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e01b      	b.n	8006b80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	daf2      	bge.n	8006b36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	019b      	lsls	r3, r3, #6
 8006b58:	f043 0220 	orr.w	r2, r3, #32
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b6c:	d901      	bls.n	8006b72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e006      	b.n	8006b80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b20      	cmp	r3, #32
 8006b7c:	d0f0      	beq.n	8006b60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ba4:	d901      	bls.n	8006baa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e018      	b.n	8006bdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	daf2      	bge.n	8006b98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2210      	movs	r2, #16
 8006bba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bc8:	d901      	bls.n	8006bce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e006      	b.n	8006bdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0310 	and.w	r3, r3, #16
 8006bd6:	2b10      	cmp	r3, #16
 8006bd8:	d0f0      	beq.n	8006bbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	68f9      	ldr	r1, [r7, #12]
 8006c04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006c34:	f023 0303 	bic.w	r3, r3, #3
 8006c38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c48:	f043 0302 	orr.w	r3, r3, #2
 8006c4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	f003 0301 	and.w	r3, r3, #1
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3301      	adds	r3, #1
 8006c88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c90:	d901      	bls.n	8006c96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e01b      	b.n	8006cce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	daf2      	bge.n	8006c84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f043 0201 	orr.w	r2, r3, #1
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cba:	d901      	bls.n	8006cc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e006      	b.n	8006cce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d0f0      	beq.n	8006cae <USB_CoreReset+0x36>

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
	...

08006cdc <__NVIC_SetPriority>:
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	6039      	str	r1, [r7, #0]
 8006ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	db0a      	blt.n	8006d06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	490c      	ldr	r1, [pc, #48]	@ (8006d28 <__NVIC_SetPriority+0x4c>)
 8006cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cfa:	0112      	lsls	r2, r2, #4
 8006cfc:	b2d2      	uxtb	r2, r2
 8006cfe:	440b      	add	r3, r1
 8006d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006d04:	e00a      	b.n	8006d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	4908      	ldr	r1, [pc, #32]	@ (8006d2c <__NVIC_SetPriority+0x50>)
 8006d0c:	79fb      	ldrb	r3, [r7, #7]
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	3b04      	subs	r3, #4
 8006d14:	0112      	lsls	r2, r2, #4
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	440b      	add	r3, r1
 8006d1a:	761a      	strb	r2, [r3, #24]
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	e000e100 	.word	0xe000e100
 8006d2c:	e000ed00 	.word	0xe000ed00

08006d30 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006d34:	4b05      	ldr	r3, [pc, #20]	@ (8006d4c <SysTick_Handler+0x1c>)
 8006d36:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006d38:	f002 f946 	bl	8008fc8 <xTaskGetSchedulerState>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d001      	beq.n	8006d46 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006d42:	f003 f841 	bl	8009dc8 <xPortSysTickHandler>
  }
}
 8006d46:	bf00      	nop
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	e000e010 	.word	0xe000e010

08006d50 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d54:	2100      	movs	r1, #0
 8006d56:	f06f 0004 	mvn.w	r0, #4
 8006d5a:	f7ff ffbf 	bl	8006cdc <__NVIC_SetPriority>
#endif
}
 8006d5e:	bf00      	nop
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d6a:	f3ef 8305 	mrs	r3, IPSR
 8006d6e:	603b      	str	r3, [r7, #0]
  return(result);
 8006d70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d76:	f06f 0305 	mvn.w	r3, #5
 8006d7a:	607b      	str	r3, [r7, #4]
 8006d7c:	e00c      	b.n	8006d98 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8006da8 <osKernelInitialize+0x44>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d105      	bne.n	8006d92 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d86:	4b08      	ldr	r3, [pc, #32]	@ (8006da8 <osKernelInitialize+0x44>)
 8006d88:	2201      	movs	r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	607b      	str	r3, [r7, #4]
 8006d90:	e002      	b.n	8006d98 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d92:	f04f 33ff 	mov.w	r3, #4294967295
 8006d96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d98:	687b      	ldr	r3, [r7, #4]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	200407fc 	.word	0x200407fc

08006dac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006db2:	f3ef 8305 	mrs	r3, IPSR
 8006db6:	603b      	str	r3, [r7, #0]
  return(result);
 8006db8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006dbe:	f06f 0305 	mvn.w	r3, #5
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	e010      	b.n	8006de8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <osKernelStart+0x48>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d109      	bne.n	8006de2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006dce:	f7ff ffbf 	bl	8006d50 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006dd2:	4b08      	ldr	r3, [pc, #32]	@ (8006df4 <osKernelStart+0x48>)
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006dd8:	f001 fc92 	bl	8008700 <vTaskStartScheduler>
      stat = osOK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	607b      	str	r3, [r7, #4]
 8006de0:	e002      	b.n	8006de8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006de2:	f04f 33ff 	mov.w	r3, #4294967295
 8006de6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006de8:	687b      	ldr	r3, [r7, #4]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop
 8006df4:	200407fc 	.word	0x200407fc

08006df8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08e      	sub	sp, #56	@ 0x38
 8006dfc:	af04      	add	r7, sp, #16
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e04:	2300      	movs	r3, #0
 8006e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e08:	f3ef 8305 	mrs	r3, IPSR
 8006e0c:	617b      	str	r3, [r7, #20]
  return(result);
 8006e0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d17e      	bne.n	8006f12 <osThreadNew+0x11a>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d07b      	beq.n	8006f12 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006e1a:	2380      	movs	r3, #128	@ 0x80
 8006e1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006e1e:	2318      	movs	r3, #24
 8006e20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006e26:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d045      	beq.n	8006ebe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d002      	beq.n	8006e40 <osThreadNew+0x48>
        name = attr->name;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <osThreadNew+0x6e>
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	2b38      	cmp	r3, #56	@ 0x38
 8006e58:	d805      	bhi.n	8006e66 <osThreadNew+0x6e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <osThreadNew+0x72>
        return (NULL);
 8006e66:	2300      	movs	r3, #0
 8006e68:	e054      	b.n	8006f14 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	089b      	lsrs	r3, r3, #2
 8006e78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00e      	beq.n	8006ea0 <osThreadNew+0xa8>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	2ba7      	cmp	r3, #167	@ 0xa7
 8006e88:	d90a      	bls.n	8006ea0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d006      	beq.n	8006ea0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d002      	beq.n	8006ea0 <osThreadNew+0xa8>
        mem = 1;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	61bb      	str	r3, [r7, #24]
 8006e9e:	e010      	b.n	8006ec2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10c      	bne.n	8006ec2 <osThreadNew+0xca>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d108      	bne.n	8006ec2 <osThreadNew+0xca>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d104      	bne.n	8006ec2 <osThreadNew+0xca>
          mem = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61bb      	str	r3, [r7, #24]
 8006ebc:	e001      	b.n	8006ec2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d110      	bne.n	8006eea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ed0:	9202      	str	r2, [sp, #8]
 8006ed2:	9301      	str	r3, [sp, #4]
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	6a3a      	ldr	r2, [r7, #32]
 8006edc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f001 fa50 	bl	8008384 <xTaskCreateStatic>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	e013      	b.n	8006f12 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d110      	bne.n	8006f12 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	f107 0310 	add.w	r3, r7, #16
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f001 fa9e 	bl	8008444 <xTaskCreate>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d001      	beq.n	8006f12 <osThreadNew+0x11a>
            hTask = NULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f12:	693b      	ldr	r3, [r7, #16]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3728      	adds	r7, #40	@ 0x28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b08a      	sub	sp, #40	@ 0x28
 8006f20:	af02      	add	r7, sp, #8
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f2c:	f3ef 8305 	mrs	r3, IPSR
 8006f30:	613b      	str	r3, [r7, #16]
  return(result);
 8006f32:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d175      	bne.n	8007024 <osSemaphoreNew+0x108>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d072      	beq.n	8007024 <osSemaphoreNew+0x108>
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d86e      	bhi.n	8007024 <osSemaphoreNew+0x108>
    mem = -1;
 8006f46:	f04f 33ff 	mov.w	r3, #4294967295
 8006f4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d015      	beq.n	8006f7e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d006      	beq.n	8006f68 <osSemaphoreNew+0x4c>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006f60:	d902      	bls.n	8006f68 <osSemaphoreNew+0x4c>
        mem = 1;
 8006f62:	2301      	movs	r3, #1
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	e00c      	b.n	8006f82 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d108      	bne.n	8006f82 <osSemaphoreNew+0x66>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d104      	bne.n	8006f82 <osSemaphoreNew+0x66>
          mem = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	e001      	b.n	8006f82 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f88:	d04c      	beq.n	8007024 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d128      	bne.n	8006fe2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d10a      	bne.n	8006fac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	9200      	str	r2, [sp, #0]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	f000 fa2c 	bl	8007400 <xQueueGenericCreateStatic>
 8006fa8:	61f8      	str	r0, [r7, #28]
 8006faa:	e005      	b.n	8006fb8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006fac:	2203      	movs	r2, #3
 8006fae:	2100      	movs	r1, #0
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	f000 faa2 	bl	80074fa <xQueueGenericCreate>
 8006fb6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d022      	beq.n	8007004 <osSemaphoreNew+0xe8>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d01f      	beq.n	8007004 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	2100      	movs	r1, #0
 8006fca:	69f8      	ldr	r0, [r7, #28]
 8006fcc:	f000 fb62 	bl	8007694 <xQueueGenericSend>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d016      	beq.n	8007004 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006fd6:	69f8      	ldr	r0, [r7, #28]
 8006fd8:	f001 f800 	bl	8007fdc <vQueueDelete>
            hSemaphore = NULL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61fb      	str	r3, [r7, #28]
 8006fe0:	e010      	b.n	8007004 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d108      	bne.n	8006ffa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	461a      	mov	r2, r3
 8006fee:	68b9      	ldr	r1, [r7, #8]
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 fae0 	bl	80075b6 <xQueueCreateCountingSemaphoreStatic>
 8006ff6:	61f8      	str	r0, [r7, #28]
 8006ff8:	e004      	b.n	8007004 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006ffa:	68b9      	ldr	r1, [r7, #8]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 fb13 	bl	8007628 <xQueueCreateCountingSemaphore>
 8007002:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00c      	beq.n	8007024 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e001      	b.n	800701c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800701c:	6979      	ldr	r1, [r7, #20]
 800701e:	69f8      	ldr	r0, [r7, #28]
 8007020:	f001 f928 	bl	8008274 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007024:	69fb      	ldr	r3, [r7, #28]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3720      	adds	r7, #32
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d103      	bne.n	8007050 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007048:	f06f 0303 	mvn.w	r3, #3
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	e039      	b.n	80070c4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007050:	f3ef 8305 	mrs	r3, IPSR
 8007054:	60fb      	str	r3, [r7, #12]
  return(result);
 8007056:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007058:	2b00      	cmp	r3, #0
 800705a:	d022      	beq.n	80070a2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007062:	f06f 0303 	mvn.w	r3, #3
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	e02c      	b.n	80070c4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800706a:	2300      	movs	r3, #0
 800706c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800706e:	f107 0308 	add.w	r3, r7, #8
 8007072:	461a      	mov	r2, r3
 8007074:	2100      	movs	r1, #0
 8007076:	6938      	ldr	r0, [r7, #16]
 8007078:	f000 ff2e 	bl	8007ed8 <xQueueReceiveFromISR>
 800707c:	4603      	mov	r3, r0
 800707e:	2b01      	cmp	r3, #1
 8007080:	d003      	beq.n	800708a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007082:	f06f 0302 	mvn.w	r3, #2
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	e01c      	b.n	80070c4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d019      	beq.n	80070c4 <osSemaphoreAcquire+0x94>
 8007090:	4b0f      	ldr	r3, [pc, #60]	@ (80070d0 <osSemaphoreAcquire+0xa0>)
 8007092:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	e010      	b.n	80070c4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80070a2:	6839      	ldr	r1, [r7, #0]
 80070a4:	6938      	ldr	r0, [r7, #16]
 80070a6:	f000 fe07 	bl	8007cb8 <xQueueSemaphoreTake>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d009      	beq.n	80070c4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80070b6:	f06f 0301 	mvn.w	r3, #1
 80070ba:	617b      	str	r3, [r7, #20]
 80070bc:	e002      	b.n	80070c4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80070be:	f06f 0302 	mvn.w	r3, #2
 80070c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80070c4:	697b      	ldr	r3, [r7, #20]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	e000ed04 	.word	0xe000ed04

080070d4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d103      	bne.n	80070f2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80070ea:	f06f 0303 	mvn.w	r3, #3
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	e02c      	b.n	800714c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070f2:	f3ef 8305 	mrs	r3, IPSR
 80070f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80070f8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d01a      	beq.n	8007134 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007102:	f107 0308 	add.w	r3, r7, #8
 8007106:	4619      	mov	r1, r3
 8007108:	6938      	ldr	r0, [r7, #16]
 800710a:	f000 fc63 	bl	80079d4 <xQueueGiveFromISR>
 800710e:	4603      	mov	r3, r0
 8007110:	2b01      	cmp	r3, #1
 8007112:	d003      	beq.n	800711c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007114:	f06f 0302 	mvn.w	r3, #2
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	e017      	b.n	800714c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d014      	beq.n	800714c <osSemaphoreRelease+0x78>
 8007122:	4b0d      	ldr	r3, [pc, #52]	@ (8007158 <osSemaphoreRelease+0x84>)
 8007124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	e00b      	b.n	800714c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	2100      	movs	r1, #0
 800713a:	6938      	ldr	r0, [r7, #16]
 800713c:	f000 faaa 	bl	8007694 <xQueueGenericSend>
 8007140:	4603      	mov	r3, r0
 8007142:	2b01      	cmp	r3, #1
 8007144:	d002      	beq.n	800714c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007146:	f06f 0302 	mvn.w	r3, #2
 800714a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800714c:	697b      	ldr	r3, [r7, #20]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	e000ed04 	.word	0xe000ed04

0800715c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4a07      	ldr	r2, [pc, #28]	@ (8007188 <vApplicationGetIdleTaskMemory+0x2c>)
 800716c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	4a06      	ldr	r2, [pc, #24]	@ (800718c <vApplicationGetIdleTaskMemory+0x30>)
 8007172:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2280      	movs	r2, #128	@ 0x80
 8007178:	601a      	str	r2, [r3, #0]
}
 800717a:	bf00      	nop
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20040800 	.word	0x20040800
 800718c:	200408a8 	.word	0x200408a8

08007190 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4a07      	ldr	r2, [pc, #28]	@ (80071bc <vApplicationGetTimerTaskMemory+0x2c>)
 80071a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	4a06      	ldr	r2, [pc, #24]	@ (80071c0 <vApplicationGetTimerTaskMemory+0x30>)
 80071a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80071ae:	601a      	str	r2, [r3, #0]
}
 80071b0:	bf00      	nop
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	20040aa8 	.word	0x20040aa8
 80071c0:	20040b50 	.word	0x20040b50

080071c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f103 0208 	add.w	r2, r3, #8
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f04f 32ff 	mov.w	r2, #4294967295
 80071dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f103 0208 	add.w	r2, r3, #8
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f103 0208 	add.w	r2, r3, #8
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007212:	bf00      	nop
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800721e:	b480      	push	{r7}
 8007220:	b085      	sub	sp, #20
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	601a      	str	r2, [r3, #0]
}
 800725a:	bf00      	nop
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727c:	d103      	bne.n	8007286 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e00c      	b.n	80072a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	3308      	adds	r3, #8
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	e002      	b.n	8007294 <vListInsert+0x2e>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	429a      	cmp	r2, r3
 800729e:	d2f6      	bcs.n	800728e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	601a      	str	r2, [r3, #0]
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6892      	ldr	r2, [r2, #8]
 80072ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6852      	ldr	r2, [r2, #4]
 80072f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	429a      	cmp	r2, r3
 8007302:	d103      	bne.n	800730c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	1e5a      	subs	r2, r3, #1
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3714      	adds	r7, #20
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10b      	bne.n	8007358 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	e7fd      	b.n	8007354 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007358:	f002 fca6 	bl	8009ca8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007364:	68f9      	ldr	r1, [r7, #12]
 8007366:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	441a      	add	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007388:	3b01      	subs	r3, #1
 800738a:	68f9      	ldr	r1, [r7, #12]
 800738c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800738e:	fb01 f303 	mul.w	r3, r1, r3
 8007392:	441a      	add	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	22ff      	movs	r2, #255	@ 0xff
 800739c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	22ff      	movs	r2, #255	@ 0xff
 80073a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d114      	bne.n	80073d8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01a      	beq.n	80073ec <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3310      	adds	r3, #16
 80073ba:	4618      	mov	r0, r3
 80073bc:	f001 fc3e 	bl	8008c3c <xTaskRemoveFromEventList>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d012      	beq.n	80073ec <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80073c6:	4b0d      	ldr	r3, [pc, #52]	@ (80073fc <xQueueGenericReset+0xd0>)
 80073c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	e009      	b.n	80073ec <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	3310      	adds	r3, #16
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fef1 	bl	80071c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3324      	adds	r3, #36	@ 0x24
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff feec 	bl	80071c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80073ec:	f002 fc8e 	bl	8009d0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80073f0:	2301      	movs	r3, #1
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	e000ed04 	.word	0xe000ed04

08007400 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08e      	sub	sp, #56	@ 0x38
 8007404:	af02      	add	r7, sp, #8
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10b      	bne.n	800742c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007426:	bf00      	nop
 8007428:	bf00      	nop
 800742a:	e7fd      	b.n	8007428 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10b      	bne.n	800744a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	e7fd      	b.n	8007446 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <xQueueGenericCreateStatic+0x56>
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <xQueueGenericCreateStatic+0x5a>
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <xQueueGenericCreateStatic+0x5c>
 800745a:	2300      	movs	r3, #0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d10b      	bne.n	8007478 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	623b      	str	r3, [r7, #32]
}
 8007472:	bf00      	nop
 8007474:	bf00      	nop
 8007476:	e7fd      	b.n	8007474 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d102      	bne.n	8007484 <xQueueGenericCreateStatic+0x84>
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <xQueueGenericCreateStatic+0x88>
 8007484:	2301      	movs	r3, #1
 8007486:	e000      	b.n	800748a <xQueueGenericCreateStatic+0x8a>
 8007488:	2300      	movs	r3, #0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10b      	bne.n	80074a6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	61fb      	str	r3, [r7, #28]
}
 80074a0:	bf00      	nop
 80074a2:	bf00      	nop
 80074a4:	e7fd      	b.n	80074a2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80074a6:	2350      	movs	r3, #80	@ 0x50
 80074a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2b50      	cmp	r3, #80	@ 0x50
 80074ae:	d00b      	beq.n	80074c8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	61bb      	str	r3, [r7, #24]
}
 80074c2:	bf00      	nop
 80074c4:	bf00      	nop
 80074c6:	e7fd      	b.n	80074c4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80074c8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80074ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00d      	beq.n	80074f0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80074d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80074dc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80074e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	4613      	mov	r3, r2
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f000 f840 	bl	8007570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80074f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3730      	adds	r7, #48	@ 0x30
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b08a      	sub	sp, #40	@ 0x28
 80074fe:	af02      	add	r7, sp, #8
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	4613      	mov	r3, r2
 8007506:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <xQueueGenericCreate+0x2c>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	613b      	str	r3, [r7, #16]
}
 8007520:	bf00      	nop
 8007522:	bf00      	nop
 8007524:	e7fd      	b.n	8007522 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	3350      	adds	r3, #80	@ 0x50
 8007534:	4618      	mov	r0, r3
 8007536:	f002 fcd9 	bl	8009eec <pvPortMalloc>
 800753a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d011      	beq.n	8007566 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	3350      	adds	r3, #80	@ 0x50
 800754a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007554:	79fa      	ldrb	r2, [r7, #7]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4613      	mov	r3, r2
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f805 	bl	8007570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007566:	69bb      	ldr	r3, [r7, #24]
	}
 8007568:	4618      	mov	r0, r3
 800756a:	3720      	adds	r7, #32
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e002      	b.n	8007592 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800759e:	2101      	movs	r1, #1
 80075a0:	69b8      	ldr	r0, [r7, #24]
 80075a2:	f7ff fec3 	bl	800732c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075ae:	bf00      	nop
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b08a      	sub	sp, #40	@ 0x28
 80075ba:	af02      	add	r7, sp, #8
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10b      	bne.n	80075e0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	61bb      	str	r3, [r7, #24]
}
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d90b      	bls.n	8007600 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	617b      	str	r3, [r7, #20]
}
 80075fa:	bf00      	nop
 80075fc:	bf00      	nop
 80075fe:	e7fd      	b.n	80075fc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007600:	2302      	movs	r3, #2
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	2100      	movs	r1, #0
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f7ff fef8 	bl	8007400 <xQueueGenericCreateStatic>
 8007610:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800761e:	69fb      	ldr	r3, [r7, #28]
	}
 8007620:	4618      	mov	r0, r3
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10b      	bne.n	8007650 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	613b      	str	r3, [r7, #16]
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	e7fd      	b.n	800764c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007650:	683a      	ldr	r2, [r7, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	429a      	cmp	r2, r3
 8007656:	d90b      	bls.n	8007670 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	60fb      	str	r3, [r7, #12]
}
 800766a:	bf00      	nop
 800766c:	bf00      	nop
 800766e:	e7fd      	b.n	800766c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007670:	2202      	movs	r2, #2
 8007672:	2100      	movs	r1, #0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff ff40 	bl	80074fa <xQueueGenericCreate>
 800767a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	683a      	ldr	r2, [r7, #0]
 8007686:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007688:	697b      	ldr	r3, [r7, #20]
	}
 800768a:	4618      	mov	r0, r3
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08e      	sub	sp, #56	@ 0x38
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076a2:	2300      	movs	r3, #0
 80076a4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80076aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10b      	bne.n	80076c8 <xQueueGenericSend+0x34>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076c2:	bf00      	nop
 80076c4:	bf00      	nop
 80076c6:	e7fd      	b.n	80076c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d103      	bne.n	80076d6 <xQueueGenericSend+0x42>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <xQueueGenericSend+0x46>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <xQueueGenericSend+0x48>
 80076da:	2300      	movs	r3, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10b      	bne.n	80076f8 <xQueueGenericSend+0x64>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076f2:	bf00      	nop
 80076f4:	bf00      	nop
 80076f6:	e7fd      	b.n	80076f4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d103      	bne.n	8007706 <xQueueGenericSend+0x72>
 80076fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <xQueueGenericSend+0x76>
 8007706:	2301      	movs	r3, #1
 8007708:	e000      	b.n	800770c <xQueueGenericSend+0x78>
 800770a:	2300      	movs	r3, #0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d10b      	bne.n	8007728 <xQueueGenericSend+0x94>
	__asm volatile
 8007710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007714:	f383 8811 	msr	BASEPRI, r3
 8007718:	f3bf 8f6f 	isb	sy
 800771c:	f3bf 8f4f 	dsb	sy
 8007720:	623b      	str	r3, [r7, #32]
}
 8007722:	bf00      	nop
 8007724:	bf00      	nop
 8007726:	e7fd      	b.n	8007724 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007728:	f001 fc4e 	bl	8008fc8 <xTaskGetSchedulerState>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d102      	bne.n	8007738 <xQueueGenericSend+0xa4>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <xQueueGenericSend+0xa8>
 8007738:	2301      	movs	r3, #1
 800773a:	e000      	b.n	800773e <xQueueGenericSend+0xaa>
 800773c:	2300      	movs	r3, #0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10b      	bne.n	800775a <xQueueGenericSend+0xc6>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	61fb      	str	r3, [r7, #28]
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	e7fd      	b.n	8007756 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800775a:	f002 faa5 	bl	8009ca8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800775e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007760:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007766:	429a      	cmp	r2, r3
 8007768:	d302      	bcc.n	8007770 <xQueueGenericSend+0xdc>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b02      	cmp	r3, #2
 800776e:	d129      	bne.n	80077c4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007776:	f000 fc6d 	bl	8008054 <prvCopyDataToQueue>
 800777a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800777c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007780:	2b00      	cmp	r3, #0
 8007782:	d010      	beq.n	80077a6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	3324      	adds	r3, #36	@ 0x24
 8007788:	4618      	mov	r0, r3
 800778a:	f001 fa57 	bl	8008c3c <xTaskRemoveFromEventList>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d013      	beq.n	80077bc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007794:	4b3f      	ldr	r3, [pc, #252]	@ (8007894 <xQueueGenericSend+0x200>)
 8007796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	e00a      	b.n	80077bc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d007      	beq.n	80077bc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077ac:	4b39      	ldr	r3, [pc, #228]	@ (8007894 <xQueueGenericSend+0x200>)
 80077ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077bc:	f002 faa6 	bl	8009d0c <vPortExitCritical>
				return pdPASS;
 80077c0:	2301      	movs	r3, #1
 80077c2:	e063      	b.n	800788c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d103      	bne.n	80077d2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077ca:	f002 fa9f 	bl	8009d0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	e05c      	b.n	800788c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d106      	bne.n	80077e6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077d8:	f107 0314 	add.w	r3, r7, #20
 80077dc:	4618      	mov	r0, r3
 80077de:	f001 fa91 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077e2:	2301      	movs	r3, #1
 80077e4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077e6:	f002 fa91 	bl	8009d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077ea:	f000 fff9 	bl	80087e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077ee:	f002 fa5b 	bl	8009ca8 <vPortEnterCritical>
 80077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077f8:	b25b      	sxtb	r3, r3
 80077fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fe:	d103      	bne.n	8007808 <xQueueGenericSend+0x174>
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800780e:	b25b      	sxtb	r3, r3
 8007810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007814:	d103      	bne.n	800781e <xQueueGenericSend+0x18a>
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800781e:	f002 fa75 	bl	8009d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007822:	1d3a      	adds	r2, r7, #4
 8007824:	f107 0314 	add.w	r3, r7, #20
 8007828:	4611      	mov	r1, r2
 800782a:	4618      	mov	r0, r3
 800782c:	f001 fa80 	bl	8008d30 <xTaskCheckForTimeOut>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d124      	bne.n	8007880 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007836:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007838:	f000 fd04 	bl	8008244 <prvIsQueueFull>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d018      	beq.n	8007874 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	3310      	adds	r3, #16
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f001 f9a4 	bl	8008b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007850:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007852:	f000 fc8f 	bl	8008174 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007856:	f000 ffd1 	bl	80087fc <xTaskResumeAll>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	f47f af7c 	bne.w	800775a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007862:	4b0c      	ldr	r3, [pc, #48]	@ (8007894 <xQueueGenericSend+0x200>)
 8007864:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	e772      	b.n	800775a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007874:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007876:	f000 fc7d 	bl	8008174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800787a:	f000 ffbf 	bl	80087fc <xTaskResumeAll>
 800787e:	e76c      	b.n	800775a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007880:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007882:	f000 fc77 	bl	8008174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007886:	f000 ffb9 	bl	80087fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800788a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800788c:	4618      	mov	r0, r3
 800788e:	3738      	adds	r7, #56	@ 0x38
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	e000ed04 	.word	0xe000ed04

08007898 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b090      	sub	sp, #64	@ 0x40
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80078aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10b      	bne.n	80078c8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80078c2:	bf00      	nop
 80078c4:	bf00      	nop
 80078c6:	e7fd      	b.n	80078c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d103      	bne.n	80078d6 <xQueueGenericSendFromISR+0x3e>
 80078ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <xQueueGenericSendFromISR+0x42>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e000      	b.n	80078dc <xQueueGenericSendFromISR+0x44>
 80078da:	2300      	movs	r3, #0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d10b      	bne.n	80078f8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078f2:	bf00      	nop
 80078f4:	bf00      	nop
 80078f6:	e7fd      	b.n	80078f4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d103      	bne.n	8007906 <xQueueGenericSendFromISR+0x6e>
 80078fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <xQueueGenericSendFromISR+0x72>
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <xQueueGenericSendFromISR+0x74>
 800790a:	2300      	movs	r3, #0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10b      	bne.n	8007928 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	623b      	str	r3, [r7, #32]
}
 8007922:	bf00      	nop
 8007924:	bf00      	nop
 8007926:	e7fd      	b.n	8007924 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007928:	f002 fa9e 	bl	8009e68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800792c:	f3ef 8211 	mrs	r2, BASEPRI
 8007930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	61fa      	str	r2, [r7, #28]
 8007942:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007944:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007946:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800794c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800794e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007950:	429a      	cmp	r2, r3
 8007952:	d302      	bcc.n	800795a <xQueueGenericSendFromISR+0xc2>
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d12f      	bne.n	80079ba <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007960:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007968:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	68b9      	ldr	r1, [r7, #8]
 800796e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007970:	f000 fb70 	bl	8008054 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007974:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797c:	d112      	bne.n	80079a4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007982:	2b00      	cmp	r3, #0
 8007984:	d016      	beq.n	80079b4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	3324      	adds	r3, #36	@ 0x24
 800798a:	4618      	mov	r0, r3
 800798c:	f001 f956 	bl	8008c3c <xTaskRemoveFromEventList>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00e      	beq.n	80079b4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00b      	beq.n	80079b4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	e007      	b.n	80079b4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80079a8:	3301      	adds	r3, #1
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	b25a      	sxtb	r2, r3
 80079ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80079b4:	2301      	movs	r3, #1
 80079b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80079b8:	e001      	b.n	80079be <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079c0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80079c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3740      	adds	r7, #64	@ 0x40
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08e      	sub	sp, #56	@ 0x38
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80079e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10b      	bne.n	8007a00 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	623b      	str	r3, [r7, #32]
}
 80079fa:	bf00      	nop
 80079fc:	bf00      	nop
 80079fe:	e7fd      	b.n	80079fc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00b      	beq.n	8007a20 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	61fb      	str	r3, [r7, #28]
}
 8007a1a:	bf00      	nop
 8007a1c:	bf00      	nop
 8007a1e:	e7fd      	b.n	8007a1c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d103      	bne.n	8007a30 <xQueueGiveFromISR+0x5c>
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d101      	bne.n	8007a34 <xQueueGiveFromISR+0x60>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <xQueueGiveFromISR+0x62>
 8007a34:	2300      	movs	r3, #0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d10b      	bne.n	8007a52 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	61bb      	str	r3, [r7, #24]
}
 8007a4c:	bf00      	nop
 8007a4e:	bf00      	nop
 8007a50:	e7fd      	b.n	8007a4e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a52:	f002 fa09 	bl	8009e68 <vPortValidateInterruptPriority>
	__asm volatile
 8007a56:	f3ef 8211 	mrs	r2, BASEPRI
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	617a      	str	r2, [r7, #20]
 8007a6c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007a6e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a76:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d22b      	bcs.n	8007ada <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a92:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a94:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d112      	bne.n	8007ac4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d016      	beq.n	8007ad4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa8:	3324      	adds	r3, #36	@ 0x24
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f001 f8c6 	bl	8008c3c <xTaskRemoveFromEventList>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00e      	beq.n	8007ad4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00b      	beq.n	8007ad4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	e007      	b.n	8007ad4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ac8:	3301      	adds	r3, #1
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	b25a      	sxtb	r2, r3
 8007ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ad8:	e001      	b.n	8007ade <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ae0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f383 8811 	msr	BASEPRI, r3
}
 8007ae8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3738      	adds	r7, #56	@ 0x38
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08c      	sub	sp, #48	@ 0x30
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b00:	2300      	movs	r3, #0
 8007b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10b      	bne.n	8007b26 <xQueueReceive+0x32>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	623b      	str	r3, [r7, #32]
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	e7fd      	b.n	8007b22 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d103      	bne.n	8007b34 <xQueueReceive+0x40>
 8007b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <xQueueReceive+0x44>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <xQueueReceive+0x46>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10b      	bne.n	8007b56 <xQueueReceive+0x62>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	61fb      	str	r3, [r7, #28]
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	e7fd      	b.n	8007b52 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b56:	f001 fa37 	bl	8008fc8 <xTaskGetSchedulerState>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d102      	bne.n	8007b66 <xQueueReceive+0x72>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <xQueueReceive+0x76>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <xQueueReceive+0x78>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10b      	bne.n	8007b88 <xQueueReceive+0x94>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	61bb      	str	r3, [r7, #24]
}
 8007b82:	bf00      	nop
 8007b84:	bf00      	nop
 8007b86:	e7fd      	b.n	8007b84 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b88:	f002 f88e 	bl	8009ca8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b90:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d01f      	beq.n	8007bd8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b9c:	f000 fac4 	bl	8008128 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba2:	1e5a      	subs	r2, r3, #1
 8007ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007baa:	691b      	ldr	r3, [r3, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00f      	beq.n	8007bd0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb2:	3310      	adds	r3, #16
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f001 f841 	bl	8008c3c <xTaskRemoveFromEventList>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d007      	beq.n	8007bd0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bc0:	4b3c      	ldr	r3, [pc, #240]	@ (8007cb4 <xQueueReceive+0x1c0>)
 8007bc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bd0:	f002 f89c 	bl	8009d0c <vPortExitCritical>
				return pdPASS;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e069      	b.n	8007cac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d103      	bne.n	8007be6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bde:	f002 f895 	bl	8009d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e062      	b.n	8007cac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d106      	bne.n	8007bfa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bec:	f107 0310 	add.w	r3, r7, #16
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f001 f887 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bfa:	f002 f887 	bl	8009d0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bfe:	f000 fdef 	bl	80087e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c02:	f002 f851 	bl	8009ca8 <vPortEnterCritical>
 8007c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c0c:	b25b      	sxtb	r3, r3
 8007c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c12:	d103      	bne.n	8007c1c <xQueueReceive+0x128>
 8007c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c22:	b25b      	sxtb	r3, r3
 8007c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c28:	d103      	bne.n	8007c32 <xQueueReceive+0x13e>
 8007c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c32:	f002 f86b 	bl	8009d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c36:	1d3a      	adds	r2, r7, #4
 8007c38:	f107 0310 	add.w	r3, r7, #16
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f001 f876 	bl	8008d30 <xTaskCheckForTimeOut>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d123      	bne.n	8007c92 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c4c:	f000 fae4 	bl	8008218 <prvIsQueueEmpty>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d017      	beq.n	8007c86 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	3324      	adds	r3, #36	@ 0x24
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	4611      	mov	r1, r2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 ff9a 	bl	8008b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c66:	f000 fa85 	bl	8008174 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c6a:	f000 fdc7 	bl	80087fc <xTaskResumeAll>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d189      	bne.n	8007b88 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007c74:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb4 <xQueueReceive+0x1c0>)
 8007c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c7a:	601a      	str	r2, [r3, #0]
 8007c7c:	f3bf 8f4f 	dsb	sy
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	e780      	b.n	8007b88 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c88:	f000 fa74 	bl	8008174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c8c:	f000 fdb6 	bl	80087fc <xTaskResumeAll>
 8007c90:	e77a      	b.n	8007b88 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c94:	f000 fa6e 	bl	8008174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c98:	f000 fdb0 	bl	80087fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c9e:	f000 fabb 	bl	8008218 <prvIsQueueEmpty>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f43f af6f 	beq.w	8007b88 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007caa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3730      	adds	r7, #48	@ 0x30
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	e000ed04 	.word	0xe000ed04

08007cb8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08e      	sub	sp, #56	@ 0x38
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10b      	bne.n	8007cec <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	623b      	str	r3, [r7, #32]
}
 8007ce6:	bf00      	nop
 8007ce8:	bf00      	nop
 8007cea:	e7fd      	b.n	8007ce8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	61fb      	str	r3, [r7, #28]
}
 8007d06:	bf00      	nop
 8007d08:	bf00      	nop
 8007d0a:	e7fd      	b.n	8007d08 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d0c:	f001 f95c 	bl	8008fc8 <xTaskGetSchedulerState>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d102      	bne.n	8007d1c <xQueueSemaphoreTake+0x64>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <xQueueSemaphoreTake+0x68>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e000      	b.n	8007d22 <xQueueSemaphoreTake+0x6a>
 8007d20:	2300      	movs	r3, #0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10b      	bne.n	8007d3e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	61bb      	str	r3, [r7, #24]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d3e:	f001 ffb3 	bl	8009ca8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d46:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d024      	beq.n	8007d98 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d50:	1e5a      	subs	r2, r3, #1
 8007d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d54:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d104      	bne.n	8007d68 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007d5e:	f001 faad 	bl	80092bc <pvTaskIncrementMutexHeldCount>
 8007d62:	4602      	mov	r2, r0
 8007d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d66:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00f      	beq.n	8007d90 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d72:	3310      	adds	r3, #16
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 ff61 	bl	8008c3c <xTaskRemoveFromEventList>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d007      	beq.n	8007d90 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d80:	4b54      	ldr	r3, [pc, #336]	@ (8007ed4 <xQueueSemaphoreTake+0x21c>)
 8007d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d90:	f001 ffbc 	bl	8009d0c <vPortExitCritical>
				return pdPASS;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e098      	b.n	8007eca <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d112      	bne.n	8007dc4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	617b      	str	r3, [r7, #20]
}
 8007db6:	bf00      	nop
 8007db8:	bf00      	nop
 8007dba:	e7fd      	b.n	8007db8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007dbc:	f001 ffa6 	bl	8009d0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	e082      	b.n	8007eca <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d106      	bne.n	8007dd8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dca:	f107 030c 	add.w	r3, r7, #12
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f000 ff98 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007dd8:	f001 ff98 	bl	8009d0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ddc:	f000 fd00 	bl	80087e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007de0:	f001 ff62 	bl	8009ca8 <vPortEnterCritical>
 8007de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007dea:	b25b      	sxtb	r3, r3
 8007dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df0:	d103      	bne.n	8007dfa <xQueueSemaphoreTake+0x142>
 8007df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e00:	b25b      	sxtb	r3, r3
 8007e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e06:	d103      	bne.n	8007e10 <xQueueSemaphoreTake+0x158>
 8007e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e10:	f001 ff7c 	bl	8009d0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e14:	463a      	mov	r2, r7
 8007e16:	f107 030c 	add.w	r3, r7, #12
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 ff87 	bl	8008d30 <xTaskCheckForTimeOut>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d132      	bne.n	8007e8e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e2a:	f000 f9f5 	bl	8008218 <prvIsQueueEmpty>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d026      	beq.n	8007e82 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d109      	bne.n	8007e50 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007e3c:	f001 ff34 	bl	8009ca8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f001 f8dd 	bl	8009004 <xTaskPriorityInherit>
 8007e4a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007e4c:	f001 ff5e 	bl	8009d0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e52:	3324      	adds	r3, #36	@ 0x24
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	4611      	mov	r1, r2
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 fe9d 	bl	8008b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e60:	f000 f988 	bl	8008174 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e64:	f000 fcca 	bl	80087fc <xTaskResumeAll>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f47f af67 	bne.w	8007d3e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007e70:	4b18      	ldr	r3, [pc, #96]	@ (8007ed4 <xQueueSemaphoreTake+0x21c>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	e75d      	b.n	8007d3e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007e82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e84:	f000 f976 	bl	8008174 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e88:	f000 fcb8 	bl	80087fc <xTaskResumeAll>
 8007e8c:	e757      	b.n	8007d3e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007e8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e90:	f000 f970 	bl	8008174 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e94:	f000 fcb2 	bl	80087fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e9a:	f000 f9bd 	bl	8008218 <prvIsQueueEmpty>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f43f af4c 	beq.w	8007d3e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00d      	beq.n	8007ec8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007eac:	f001 fefc 	bl	8009ca8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007eb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007eb2:	f000 f8b7 	bl	8008024 <prvGetDisinheritPriorityAfterTimeout>
 8007eb6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f001 f978 	bl	80091b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007ec4:	f001 ff22 	bl	8009d0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ec8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3738      	adds	r7, #56	@ 0x38
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	e000ed04 	.word	0xe000ed04

08007ed8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08e      	sub	sp, #56	@ 0x38
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10b      	bne.n	8007f06 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	623b      	str	r3, [r7, #32]
}
 8007f00:	bf00      	nop
 8007f02:	bf00      	nop
 8007f04:	e7fd      	b.n	8007f02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d103      	bne.n	8007f14 <xQueueReceiveFromISR+0x3c>
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <xQueueReceiveFromISR+0x40>
 8007f14:	2301      	movs	r3, #1
 8007f16:	e000      	b.n	8007f1a <xQueueReceiveFromISR+0x42>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10b      	bne.n	8007f36 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	61fb      	str	r3, [r7, #28]
}
 8007f30:	bf00      	nop
 8007f32:	bf00      	nop
 8007f34:	e7fd      	b.n	8007f32 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f36:	f001 ff97 	bl	8009e68 <vPortValidateInterruptPriority>
	__asm volatile
 8007f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8007f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	61ba      	str	r2, [r7, #24]
 8007f50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d02f      	beq.n	8007fc2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f6c:	68b9      	ldr	r1, [r7, #8]
 8007f6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f70:	f000 f8da 	bl	8008128 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f76:	1e5a      	subs	r2, r3, #1
 8007f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f7a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007f7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f84:	d112      	bne.n	8007fac <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d016      	beq.n	8007fbc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	3310      	adds	r3, #16
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fe52 	bl	8008c3c <xTaskRemoveFromEventList>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00e      	beq.n	8007fbc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00b      	beq.n	8007fbc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	601a      	str	r2, [r3, #0]
 8007faa:	e007      	b.n	8007fbc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	b25a      	sxtb	r2, r3
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc0:	e001      	b.n	8007fc6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f383 8811 	msr	BASEPRI, r3
}
 8007fd0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3738      	adds	r7, #56	@ 0x38
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10b      	bne.n	8008006 <vQueueDelete+0x2a>
	__asm volatile
 8007fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	60bb      	str	r3, [r7, #8]
}
 8008000:	bf00      	nop
 8008002:	bf00      	nop
 8008004:	e7fd      	b.n	8008002 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f000 f95e 	bl	80082c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008012:	2b00      	cmp	r3, #0
 8008014:	d102      	bne.n	800801c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f002 f836 	bl	800a088 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800801c:	bf00      	nop
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	d006      	beq.n	8008042 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	e001      	b.n	8008046 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008046:	68fb      	ldr	r3, [r7, #12]
	}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	60b9      	str	r1, [r7, #8]
 800805e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008060:	2300      	movs	r3, #0
 8008062:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10d      	bne.n	800808e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d14d      	bne.n	8008116 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	4618      	mov	r0, r3
 8008080:	f001 f828 	bl	80090d4 <xTaskPriorityDisinherit>
 8008084:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	609a      	str	r2, [r3, #8]
 800808c:	e043      	b.n	8008116 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d119      	bne.n	80080c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6858      	ldr	r0, [r3, #4]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	461a      	mov	r2, r3
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	f002 f996 	bl	800a3d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ac:	441a      	add	r2, r3
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d32b      	bcc.n	8008116 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	605a      	str	r2, [r3, #4]
 80080c6:	e026      	b.n	8008116 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	68d8      	ldr	r0, [r3, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d0:	461a      	mov	r2, r3
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	f002 f97c 	bl	800a3d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e0:	425b      	negs	r3, r3
 80080e2:	441a      	add	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d207      	bcs.n	8008104 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080fc:	425b      	negs	r3, r3
 80080fe:	441a      	add	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b02      	cmp	r3, #2
 8008108:	d105      	bne.n	8008116 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	3b01      	subs	r3, #1
 8008114:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	1c5a      	adds	r2, r3, #1
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800811e:	697b      	ldr	r3, [r7, #20]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d018      	beq.n	800816c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008142:	441a      	add	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	429a      	cmp	r2, r3
 8008152:	d303      	bcc.n	800815c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68d9      	ldr	r1, [r3, #12]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008164:	461a      	mov	r2, r3
 8008166:	6838      	ldr	r0, [r7, #0]
 8008168:	f002 f932 	bl	800a3d0 <memcpy>
	}
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800817c:	f001 fd94 	bl	8009ca8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008186:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008188:	e011      	b.n	80081ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800818e:	2b00      	cmp	r3, #0
 8008190:	d012      	beq.n	80081b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3324      	adds	r3, #36	@ 0x24
 8008196:	4618      	mov	r0, r3
 8008198:	f000 fd50 	bl	8008c3c <xTaskRemoveFromEventList>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081a2:	f000 fe29 	bl	8008df8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	dce9      	bgt.n	800818a <prvUnlockQueue+0x16>
 80081b6:	e000      	b.n	80081ba <prvUnlockQueue+0x46>
					break;
 80081b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	22ff      	movs	r2, #255	@ 0xff
 80081be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80081c2:	f001 fda3 	bl	8009d0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081c6:	f001 fd6f 	bl	8009ca8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80081d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081d2:	e011      	b.n	80081f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d012      	beq.n	8008202 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3310      	adds	r3, #16
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 fd2b 	bl	8008c3c <xTaskRemoveFromEventList>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081ec:	f000 fe04 	bl	8008df8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	3b01      	subs	r3, #1
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	dce9      	bgt.n	80081d4 <prvUnlockQueue+0x60>
 8008200:	e000      	b.n	8008204 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008202:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	22ff      	movs	r2, #255	@ 0xff
 8008208:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800820c:	f001 fd7e 	bl	8009d0c <vPortExitCritical>
}
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008220:	f001 fd42 	bl	8009ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008228:	2b00      	cmp	r3, #0
 800822a:	d102      	bne.n	8008232 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800822c:	2301      	movs	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	e001      	b.n	8008236 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008236:	f001 fd69 	bl	8009d0c <vPortExitCritical>

	return xReturn;
 800823a:	68fb      	ldr	r3, [r7, #12]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3710      	adds	r7, #16
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800824c:	f001 fd2c 	bl	8009ca8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008258:	429a      	cmp	r2, r3
 800825a:	d102      	bne.n	8008262 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800825c:	2301      	movs	r3, #1
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	e001      	b.n	8008266 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008266:	f001 fd51 	bl	8009d0c <vPortExitCritical>

	return xReturn;
 800826a:	68fb      	ldr	r3, [r7, #12]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	e014      	b.n	80082ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008284:	4a0f      	ldr	r2, [pc, #60]	@ (80082c4 <vQueueAddToRegistry+0x50>)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d10b      	bne.n	80082a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008290:	490c      	ldr	r1, [pc, #48]	@ (80082c4 <vQueueAddToRegistry+0x50>)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800829a:	4a0a      	ldr	r2, [pc, #40]	@ (80082c4 <vQueueAddToRegistry+0x50>)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	4413      	add	r3, r2
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082a6:	e006      	b.n	80082b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	3301      	adds	r3, #1
 80082ac:	60fb      	str	r3, [r7, #12]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2b07      	cmp	r3, #7
 80082b2:	d9e7      	bls.n	8008284 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20040f50 	.word	0x20040f50

080082c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e016      	b.n	8008304 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80082d6:	4a10      	ldr	r2, [pc, #64]	@ (8008318 <vQueueUnregisterQueue+0x50>)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	00db      	lsls	r3, r3, #3
 80082dc:	4413      	add	r3, r2
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d10b      	bne.n	80082fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80082e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008318 <vQueueUnregisterQueue+0x50>)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2100      	movs	r1, #0
 80082ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80082f0:	4a09      	ldr	r2, [pc, #36]	@ (8008318 <vQueueUnregisterQueue+0x50>)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	00db      	lsls	r3, r3, #3
 80082f6:	4413      	add	r3, r2
 80082f8:	2200      	movs	r2, #0
 80082fa:	605a      	str	r2, [r3, #4]
				break;
 80082fc:	e006      	b.n	800830c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	3301      	adds	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b07      	cmp	r3, #7
 8008308:	d9e5      	bls.n	80082d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800830a:	bf00      	nop
 800830c:	bf00      	nop
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	20040f50 	.word	0x20040f50

0800831c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800832c:	f001 fcbc 	bl	8009ca8 <vPortEnterCritical>
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008336:	b25b      	sxtb	r3, r3
 8008338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833c:	d103      	bne.n	8008346 <vQueueWaitForMessageRestricted+0x2a>
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800834c:	b25b      	sxtb	r3, r3
 800834e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008352:	d103      	bne.n	800835c <vQueueWaitForMessageRestricted+0x40>
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800835c:	f001 fcd6 	bl	8009d0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	3324      	adds	r3, #36	@ 0x24
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	68b9      	ldr	r1, [r7, #8]
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fc37 	bl	8008be4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008376:	6978      	ldr	r0, [r7, #20]
 8008378:	f7ff fefc 	bl	8008174 <prvUnlockQueue>
	}
 800837c:	bf00      	nop
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008384:	b580      	push	{r7, lr}
 8008386:	b08e      	sub	sp, #56	@ 0x38
 8008388:	af04      	add	r7, sp, #16
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10b      	bne.n	80083b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	623b      	str	r3, [r7, #32]
}
 80083aa:	bf00      	nop
 80083ac:	bf00      	nop
 80083ae:	e7fd      	b.n	80083ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10b      	bne.n	80083ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	61fb      	str	r3, [r7, #28]
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	e7fd      	b.n	80083ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083ce:	23a8      	movs	r3, #168	@ 0xa8
 80083d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2ba8      	cmp	r3, #168	@ 0xa8
 80083d6:	d00b      	beq.n	80083f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	61bb      	str	r3, [r7, #24]
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	e7fd      	b.n	80083ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01e      	beq.n	8008436 <xTaskCreateStatic+0xb2>
 80083f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d01b      	beq.n	8008436 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008406:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840a:	2202      	movs	r2, #2
 800840c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008410:	2300      	movs	r3, #0
 8008412:	9303      	str	r3, [sp, #12]
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	9302      	str	r3, [sp, #8]
 8008418:	f107 0314 	add.w	r3, r7, #20
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	68b9      	ldr	r1, [r7, #8]
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f851 	bl	80084d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800842e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008430:	f000 f8f6 	bl	8008620 <prvAddNewTaskToReadyList>
 8008434:	e001      	b.n	800843a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008436:	2300      	movs	r3, #0
 8008438:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800843a:	697b      	ldr	r3, [r7, #20]
	}
 800843c:	4618      	mov	r0, r3
 800843e:	3728      	adds	r7, #40	@ 0x28
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08c      	sub	sp, #48	@ 0x30
 8008448:	af04      	add	r7, sp, #16
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	603b      	str	r3, [r7, #0]
 8008450:	4613      	mov	r3, r2
 8008452:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fd47 	bl	8009eec <pvPortMalloc>
 800845e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00e      	beq.n	8008484 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008466:	20a8      	movs	r0, #168	@ 0xa8
 8008468:	f001 fd40 	bl	8009eec <pvPortMalloc>
 800846c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	631a      	str	r2, [r3, #48]	@ 0x30
 800847a:	e005      	b.n	8008488 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800847c:	6978      	ldr	r0, [r7, #20]
 800847e:	f001 fe03 	bl	800a088 <vPortFree>
 8008482:	e001      	b.n	8008488 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008484:	2300      	movs	r3, #0
 8008486:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d017      	beq.n	80084be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	2200      	movs	r2, #0
 8008492:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008496:	88fa      	ldrh	r2, [r7, #6]
 8008498:	2300      	movs	r3, #0
 800849a:	9303      	str	r3, [sp, #12]
 800849c:	69fb      	ldr	r3, [r7, #28]
 800849e:	9302      	str	r3, [sp, #8]
 80084a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f000 f80f 	bl	80084d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084b2:	69f8      	ldr	r0, [r7, #28]
 80084b4:	f000 f8b4 	bl	8008620 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084b8:	2301      	movs	r3, #1
 80084ba:	61bb      	str	r3, [r7, #24]
 80084bc:	e002      	b.n	80084c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084be:	f04f 33ff 	mov.w	r3, #4294967295
 80084c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084c4:	69bb      	ldr	r3, [r7, #24]
	}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3720      	adds	r7, #32
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
 80084dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	461a      	mov	r2, r3
 80084e8:	21a5      	movs	r1, #165	@ 0xa5
 80084ea:	f001 feed 	bl	800a2c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80084f8:	3b01      	subs	r3, #1
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	f023 0307 	bic.w	r3, r3, #7
 8008506:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	617b      	str	r3, [r7, #20]
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	e7fd      	b.n	8008526 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01f      	beq.n	8008570 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008530:	2300      	movs	r3, #0
 8008532:	61fb      	str	r3, [r7, #28]
 8008534:	e012      	b.n	800855c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	4413      	add	r3, r2
 800853c:	7819      	ldrb	r1, [r3, #0]
 800853e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	4413      	add	r3, r2
 8008544:	3334      	adds	r3, #52	@ 0x34
 8008546:	460a      	mov	r2, r1
 8008548:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	4413      	add	r3, r2
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d006      	beq.n	8008564 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	3301      	adds	r3, #1
 800855a:	61fb      	str	r3, [r7, #28]
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	2b0f      	cmp	r3, #15
 8008560:	d9e9      	bls.n	8008536 <prvInitialiseNewTask+0x66>
 8008562:	e000      	b.n	8008566 <prvInitialiseNewTask+0x96>
			{
				break;
 8008564:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008568:	2200      	movs	r2, #0
 800856a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800856e:	e003      	b.n	8008578 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008572:	2200      	movs	r2, #0
 8008574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857a:	2b37      	cmp	r3, #55	@ 0x37
 800857c:	d901      	bls.n	8008582 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800857e:	2337      	movs	r3, #55	@ 0x37
 8008580:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008586:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800858c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800858e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008590:	2200      	movs	r2, #0
 8008592:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008596:	3304      	adds	r3, #4
 8008598:	4618      	mov	r0, r3
 800859a:	f7fe fe33 	bl	8007204 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800859e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a0:	3318      	adds	r3, #24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fe2e 	bl	8007204 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80085a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085bc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c0:	2200      	movs	r2, #0
 80085c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80085ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d0:	3354      	adds	r3, #84	@ 0x54
 80085d2:	224c      	movs	r2, #76	@ 0x4c
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 fe76 	bl	800a2c8 <memset>
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	4a0d      	ldr	r2, [pc, #52]	@ (8008614 <prvInitialiseNewTask+0x144>)
 80085e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80085e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e4:	4a0c      	ldr	r2, [pc, #48]	@ (8008618 <prvInitialiseNewTask+0x148>)
 80085e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80085e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ea:	4a0c      	ldr	r2, [pc, #48]	@ (800861c <prvInitialiseNewTask+0x14c>)
 80085ec:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	68f9      	ldr	r1, [r7, #12]
 80085f2:	69b8      	ldr	r0, [r7, #24]
 80085f4:	f001 fa24 	bl	8009a40 <pxPortInitialiseStack>
 80085f8:	4602      	mov	r2, r0
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008600:	2b00      	cmp	r3, #0
 8008602:	d002      	beq.n	800860a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800860a:	bf00      	nop
 800860c:	3720      	adds	r7, #32
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	2004219c 	.word	0x2004219c
 8008618:	20042204 	.word	0x20042204
 800861c:	2004226c 	.word	0x2004226c

08008620 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008628:	f001 fb3e 	bl	8009ca8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800862c:	4b2d      	ldr	r3, [pc, #180]	@ (80086e4 <prvAddNewTaskToReadyList+0xc4>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	4a2c      	ldr	r2, [pc, #176]	@ (80086e4 <prvAddNewTaskToReadyList+0xc4>)
 8008634:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008636:	4b2c      	ldr	r3, [pc, #176]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d109      	bne.n	8008652 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800863e:	4a2a      	ldr	r2, [pc, #168]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008644:	4b27      	ldr	r3, [pc, #156]	@ (80086e4 <prvAddNewTaskToReadyList+0xc4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d110      	bne.n	800866e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800864c:	f000 fbf8 	bl	8008e40 <prvInitialiseTaskLists>
 8008650:	e00d      	b.n	800866e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008652:	4b26      	ldr	r3, [pc, #152]	@ (80086ec <prvAddNewTaskToReadyList+0xcc>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d109      	bne.n	800866e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800865a:	4b23      	ldr	r3, [pc, #140]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008664:	429a      	cmp	r2, r3
 8008666:	d802      	bhi.n	800866e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008668:	4a1f      	ldr	r2, [pc, #124]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800866e:	4b20      	ldr	r3, [pc, #128]	@ (80086f0 <prvAddNewTaskToReadyList+0xd0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3301      	adds	r3, #1
 8008674:	4a1e      	ldr	r2, [pc, #120]	@ (80086f0 <prvAddNewTaskToReadyList+0xd0>)
 8008676:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008678:	4b1d      	ldr	r3, [pc, #116]	@ (80086f0 <prvAddNewTaskToReadyList+0xd0>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008684:	4b1b      	ldr	r3, [pc, #108]	@ (80086f4 <prvAddNewTaskToReadyList+0xd4>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d903      	bls.n	8008694 <prvAddNewTaskToReadyList+0x74>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008690:	4a18      	ldr	r2, [pc, #96]	@ (80086f4 <prvAddNewTaskToReadyList+0xd4>)
 8008692:	6013      	str	r3, [r2, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4a15      	ldr	r2, [pc, #84]	@ (80086f8 <prvAddNewTaskToReadyList+0xd8>)
 80086a2:	441a      	add	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3304      	adds	r3, #4
 80086a8:	4619      	mov	r1, r3
 80086aa:	4610      	mov	r0, r2
 80086ac:	f7fe fdb7 	bl	800721e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086b0:	f001 fb2c 	bl	8009d0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80086b4:	4b0d      	ldr	r3, [pc, #52]	@ (80086ec <prvAddNewTaskToReadyList+0xcc>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00e      	beq.n	80086da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80086bc:	4b0a      	ldr	r3, [pc, #40]	@ (80086e8 <prvAddNewTaskToReadyList+0xc8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d207      	bcs.n	80086da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80086ca:	4b0c      	ldr	r3, [pc, #48]	@ (80086fc <prvAddNewTaskToReadyList+0xdc>)
 80086cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086da:	bf00      	nop
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	20041464 	.word	0x20041464
 80086e8:	20040f90 	.word	0x20040f90
 80086ec:	20041470 	.word	0x20041470
 80086f0:	20041480 	.word	0x20041480
 80086f4:	2004146c 	.word	0x2004146c
 80086f8:	20040f94 	.word	0x20040f94
 80086fc:	e000ed04 	.word	0xe000ed04

08008700 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08a      	sub	sp, #40	@ 0x28
 8008704:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008706:	2300      	movs	r3, #0
 8008708:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800870a:	2300      	movs	r3, #0
 800870c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800870e:	463a      	mov	r2, r7
 8008710:	1d39      	adds	r1, r7, #4
 8008712:	f107 0308 	add.w	r3, r7, #8
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fd20 	bl	800715c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	9202      	str	r2, [sp, #8]
 8008724:	9301      	str	r3, [sp, #4]
 8008726:	2300      	movs	r3, #0
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	2300      	movs	r3, #0
 800872c:	460a      	mov	r2, r1
 800872e:	4924      	ldr	r1, [pc, #144]	@ (80087c0 <vTaskStartScheduler+0xc0>)
 8008730:	4824      	ldr	r0, [pc, #144]	@ (80087c4 <vTaskStartScheduler+0xc4>)
 8008732:	f7ff fe27 	bl	8008384 <xTaskCreateStatic>
 8008736:	4603      	mov	r3, r0
 8008738:	4a23      	ldr	r2, [pc, #140]	@ (80087c8 <vTaskStartScheduler+0xc8>)
 800873a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800873c:	4b22      	ldr	r3, [pc, #136]	@ (80087c8 <vTaskStartScheduler+0xc8>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008744:	2301      	movs	r3, #1
 8008746:	617b      	str	r3, [r7, #20]
 8008748:	e001      	b.n	800874e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800874a:	2300      	movs	r3, #0
 800874c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d102      	bne.n	800875a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008754:	f000 fe1a 	bl	800938c <xTimerCreateTimerTask>
 8008758:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d11b      	bne.n	8008798 <vTaskStartScheduler+0x98>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	613b      	str	r3, [r7, #16]
}
 8008772:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008774:	4b15      	ldr	r3, [pc, #84]	@ (80087cc <vTaskStartScheduler+0xcc>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3354      	adds	r3, #84	@ 0x54
 800877a:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <vTaskStartScheduler+0xd0>)
 800877c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800877e:	4b15      	ldr	r3, [pc, #84]	@ (80087d4 <vTaskStartScheduler+0xd4>)
 8008780:	f04f 32ff 	mov.w	r2, #4294967295
 8008784:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008786:	4b14      	ldr	r3, [pc, #80]	@ (80087d8 <vTaskStartScheduler+0xd8>)
 8008788:	2201      	movs	r2, #1
 800878a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800878c:	4b13      	ldr	r3, [pc, #76]	@ (80087dc <vTaskStartScheduler+0xdc>)
 800878e:	2200      	movs	r2, #0
 8008790:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008792:	f001 f9e5 	bl	8009b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008796:	e00f      	b.n	80087b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879e:	d10b      	bne.n	80087b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	60fb      	str	r3, [r7, #12]
}
 80087b2:	bf00      	nop
 80087b4:	bf00      	nop
 80087b6:	e7fd      	b.n	80087b4 <vTaskStartScheduler+0xb4>
}
 80087b8:	bf00      	nop
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	0800a4c8 	.word	0x0800a4c8
 80087c4:	08008e11 	.word	0x08008e11
 80087c8:	20041488 	.word	0x20041488
 80087cc:	20040f90 	.word	0x20040f90
 80087d0:	20040010 	.word	0x20040010
 80087d4:	20041484 	.word	0x20041484
 80087d8:	20041470 	.word	0x20041470
 80087dc:	20041468 	.word	0x20041468

080087e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087e0:	b480      	push	{r7}
 80087e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80087e4:	4b04      	ldr	r3, [pc, #16]	@ (80087f8 <vTaskSuspendAll+0x18>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3301      	adds	r3, #1
 80087ea:	4a03      	ldr	r2, [pc, #12]	@ (80087f8 <vTaskSuspendAll+0x18>)
 80087ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80087ee:	bf00      	nop
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	2004148c 	.word	0x2004148c

080087fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008806:	2300      	movs	r3, #0
 8008808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800880a:	4b42      	ldr	r3, [pc, #264]	@ (8008914 <xTaskResumeAll+0x118>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10b      	bne.n	800882a <xTaskResumeAll+0x2e>
	__asm volatile
 8008812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	603b      	str	r3, [r7, #0]
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	e7fd      	b.n	8008826 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800882a:	f001 fa3d 	bl	8009ca8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800882e:	4b39      	ldr	r3, [pc, #228]	@ (8008914 <xTaskResumeAll+0x118>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	3b01      	subs	r3, #1
 8008834:	4a37      	ldr	r2, [pc, #220]	@ (8008914 <xTaskResumeAll+0x118>)
 8008836:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008838:	4b36      	ldr	r3, [pc, #216]	@ (8008914 <xTaskResumeAll+0x118>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d162      	bne.n	8008906 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008840:	4b35      	ldr	r3, [pc, #212]	@ (8008918 <xTaskResumeAll+0x11c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d05e      	beq.n	8008906 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008848:	e02f      	b.n	80088aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800884a:	4b34      	ldr	r3, [pc, #208]	@ (800891c <xTaskResumeAll+0x120>)
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3318      	adds	r3, #24
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe fd3e 	bl	80072d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3304      	adds	r3, #4
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fd39 	bl	80072d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886a:	4b2d      	ldr	r3, [pc, #180]	@ (8008920 <xTaskResumeAll+0x124>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d903      	bls.n	800887a <xTaskResumeAll+0x7e>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008876:	4a2a      	ldr	r2, [pc, #168]	@ (8008920 <xTaskResumeAll+0x124>)
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4a27      	ldr	r2, [pc, #156]	@ (8008924 <xTaskResumeAll+0x128>)
 8008888:	441a      	add	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3304      	adds	r3, #4
 800888e:	4619      	mov	r1, r3
 8008890:	4610      	mov	r0, r2
 8008892:	f7fe fcc4 	bl	800721e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889a:	4b23      	ldr	r3, [pc, #140]	@ (8008928 <xTaskResumeAll+0x12c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d302      	bcc.n	80088aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80088a4:	4b21      	ldr	r3, [pc, #132]	@ (800892c <xTaskResumeAll+0x130>)
 80088a6:	2201      	movs	r2, #1
 80088a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088aa:	4b1c      	ldr	r3, [pc, #112]	@ (800891c <xTaskResumeAll+0x120>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1cb      	bne.n	800884a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088b8:	f000 fb66 	bl	8008f88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80088bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008930 <xTaskResumeAll+0x134>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d010      	beq.n	80088ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088c8:	f000 f846 	bl	8008958 <xTaskIncrementTick>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d002      	beq.n	80088d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80088d2:	4b16      	ldr	r3, [pc, #88]	@ (800892c <xTaskResumeAll+0x130>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3b01      	subs	r3, #1
 80088dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1f1      	bne.n	80088c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80088e4:	4b12      	ldr	r3, [pc, #72]	@ (8008930 <xTaskResumeAll+0x134>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088ea:	4b10      	ldr	r3, [pc, #64]	@ (800892c <xTaskResumeAll+0x130>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d009      	beq.n	8008906 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088f2:	2301      	movs	r3, #1
 80088f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008934 <xTaskResumeAll+0x138>)
 80088f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008906:	f001 fa01 	bl	8009d0c <vPortExitCritical>

	return xAlreadyYielded;
 800890a:	68bb      	ldr	r3, [r7, #8]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}
 8008914:	2004148c 	.word	0x2004148c
 8008918:	20041464 	.word	0x20041464
 800891c:	20041424 	.word	0x20041424
 8008920:	2004146c 	.word	0x2004146c
 8008924:	20040f94 	.word	0x20040f94
 8008928:	20040f90 	.word	0x20040f90
 800892c:	20041478 	.word	0x20041478
 8008930:	20041474 	.word	0x20041474
 8008934:	e000ed04 	.word	0xe000ed04

08008938 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800893e:	4b05      	ldr	r3, [pc, #20]	@ (8008954 <xTaskGetTickCount+0x1c>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008944:	687b      	ldr	r3, [r7, #4]
}
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr
 8008952:	bf00      	nop
 8008954:	20041468 	.word	0x20041468

08008958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800895e:	2300      	movs	r3, #0
 8008960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008962:	4b4f      	ldr	r3, [pc, #316]	@ (8008aa0 <xTaskIncrementTick+0x148>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	f040 8090 	bne.w	8008a8c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800896c:	4b4d      	ldr	r3, [pc, #308]	@ (8008aa4 <xTaskIncrementTick+0x14c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3301      	adds	r3, #1
 8008972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008974:	4a4b      	ldr	r2, [pc, #300]	@ (8008aa4 <xTaskIncrementTick+0x14c>)
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d121      	bne.n	80089c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008980:	4b49      	ldr	r3, [pc, #292]	@ (8008aa8 <xTaskIncrementTick+0x150>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00b      	beq.n	80089a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	603b      	str	r3, [r7, #0]
}
 800899c:	bf00      	nop
 800899e:	bf00      	nop
 80089a0:	e7fd      	b.n	800899e <xTaskIncrementTick+0x46>
 80089a2:	4b41      	ldr	r3, [pc, #260]	@ (8008aa8 <xTaskIncrementTick+0x150>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	4b40      	ldr	r3, [pc, #256]	@ (8008aac <xTaskIncrementTick+0x154>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a3e      	ldr	r2, [pc, #248]	@ (8008aa8 <xTaskIncrementTick+0x150>)
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	4a3e      	ldr	r2, [pc, #248]	@ (8008aac <xTaskIncrementTick+0x154>)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	4b3e      	ldr	r3, [pc, #248]	@ (8008ab0 <xTaskIncrementTick+0x158>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3301      	adds	r3, #1
 80089bc:	4a3c      	ldr	r2, [pc, #240]	@ (8008ab0 <xTaskIncrementTick+0x158>)
 80089be:	6013      	str	r3, [r2, #0]
 80089c0:	f000 fae2 	bl	8008f88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089c4:	4b3b      	ldr	r3, [pc, #236]	@ (8008ab4 <xTaskIncrementTick+0x15c>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d349      	bcc.n	8008a62 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089ce:	4b36      	ldr	r3, [pc, #216]	@ (8008aa8 <xTaskIncrementTick+0x150>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d104      	bne.n	80089e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089d8:	4b36      	ldr	r3, [pc, #216]	@ (8008ab4 <xTaskIncrementTick+0x15c>)
 80089da:	f04f 32ff 	mov.w	r2, #4294967295
 80089de:	601a      	str	r2, [r3, #0]
					break;
 80089e0:	e03f      	b.n	8008a62 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e2:	4b31      	ldr	r3, [pc, #196]	@ (8008aa8 <xTaskIncrementTick+0x150>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d203      	bcs.n	8008a02 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089fa:	4a2e      	ldr	r2, [pc, #184]	@ (8008ab4 <xTaskIncrementTick+0x15c>)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a00:	e02f      	b.n	8008a62 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	3304      	adds	r3, #4
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fe fc66 	bl	80072d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d004      	beq.n	8008a1e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	3318      	adds	r3, #24
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fe fc5d 	bl	80072d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a22:	4b25      	ldr	r3, [pc, #148]	@ (8008ab8 <xTaskIncrementTick+0x160>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d903      	bls.n	8008a32 <xTaskIncrementTick+0xda>
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2e:	4a22      	ldr	r2, [pc, #136]	@ (8008ab8 <xTaskIncrementTick+0x160>)
 8008a30:	6013      	str	r3, [r2, #0]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8008abc <xTaskIncrementTick+0x164>)
 8008a40:	441a      	add	r2, r3
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	3304      	adds	r3, #4
 8008a46:	4619      	mov	r1, r3
 8008a48:	4610      	mov	r0, r2
 8008a4a:	f7fe fbe8 	bl	800721e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a52:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac0 <xTaskIncrementTick+0x168>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d3b8      	bcc.n	80089ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a60:	e7b5      	b.n	80089ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a62:	4b17      	ldr	r3, [pc, #92]	@ (8008ac0 <xTaskIncrementTick+0x168>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a68:	4914      	ldr	r1, [pc, #80]	@ (8008abc <xTaskIncrementTick+0x164>)
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	440b      	add	r3, r1
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d901      	bls.n	8008a7e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a7e:	4b11      	ldr	r3, [pc, #68]	@ (8008ac4 <xTaskIncrementTick+0x16c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d007      	beq.n	8008a96 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008a86:	2301      	movs	r3, #1
 8008a88:	617b      	str	r3, [r7, #20]
 8008a8a:	e004      	b.n	8008a96 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ac8 <xTaskIncrementTick+0x170>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	3301      	adds	r3, #1
 8008a92:	4a0d      	ldr	r2, [pc, #52]	@ (8008ac8 <xTaskIncrementTick+0x170>)
 8008a94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a96:	697b      	ldr	r3, [r7, #20]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	2004148c 	.word	0x2004148c
 8008aa4:	20041468 	.word	0x20041468
 8008aa8:	2004141c 	.word	0x2004141c
 8008aac:	20041420 	.word	0x20041420
 8008ab0:	2004147c 	.word	0x2004147c
 8008ab4:	20041484 	.word	0x20041484
 8008ab8:	2004146c 	.word	0x2004146c
 8008abc:	20040f94 	.word	0x20040f94
 8008ac0:	20040f90 	.word	0x20040f90
 8008ac4:	20041478 	.word	0x20041478
 8008ac8:	20041474 	.word	0x20041474

08008acc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8008b80 <vTaskSwitchContext+0xb4>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ada:	4b2a      	ldr	r3, [pc, #168]	@ (8008b84 <vTaskSwitchContext+0xb8>)
 8008adc:	2201      	movs	r2, #1
 8008ade:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ae0:	e047      	b.n	8008b72 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008ae2:	4b28      	ldr	r3, [pc, #160]	@ (8008b84 <vTaskSwitchContext+0xb8>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae8:	4b27      	ldr	r3, [pc, #156]	@ (8008b88 <vTaskSwitchContext+0xbc>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	e011      	b.n	8008b14 <vTaskSwitchContext+0x48>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10b      	bne.n	8008b0e <vTaskSwitchContext+0x42>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	607b      	str	r3, [r7, #4]
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop
 8008b0c:	e7fd      	b.n	8008b0a <vTaskSwitchContext+0x3e>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	60fb      	str	r3, [r7, #12]
 8008b14:	491d      	ldr	r1, [pc, #116]	@ (8008b8c <vTaskSwitchContext+0xc0>)
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	440b      	add	r3, r1
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0e3      	beq.n	8008af0 <vTaskSwitchContext+0x24>
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4a16      	ldr	r2, [pc, #88]	@ (8008b8c <vTaskSwitchContext+0xc0>)
 8008b34:	4413      	add	r3, r2
 8008b36:	60bb      	str	r3, [r7, #8]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	685a      	ldr	r2, [r3, #4]
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	605a      	str	r2, [r3, #4]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	685a      	ldr	r2, [r3, #4]
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	3308      	adds	r3, #8
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d104      	bne.n	8008b58 <vTaskSwitchContext+0x8c>
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	605a      	str	r2, [r3, #4]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b90 <vTaskSwitchContext+0xc4>)
 8008b60:	6013      	str	r3, [r2, #0]
 8008b62:	4a09      	ldr	r2, [pc, #36]	@ (8008b88 <vTaskSwitchContext+0xbc>)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b68:	4b09      	ldr	r3, [pc, #36]	@ (8008b90 <vTaskSwitchContext+0xc4>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3354      	adds	r3, #84	@ 0x54
 8008b6e:	4a09      	ldr	r2, [pc, #36]	@ (8008b94 <vTaskSwitchContext+0xc8>)
 8008b70:	6013      	str	r3, [r2, #0]
}
 8008b72:	bf00      	nop
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	2004148c 	.word	0x2004148c
 8008b84:	20041478 	.word	0x20041478
 8008b88:	2004146c 	.word	0x2004146c
 8008b8c:	20040f94 	.word	0x20040f94
 8008b90:	20040f90 	.word	0x20040f90
 8008b94:	20040010 	.word	0x20040010

08008b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10b      	bne.n	8008bc0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bac:	f383 8811 	msr	BASEPRI, r3
 8008bb0:	f3bf 8f6f 	isb	sy
 8008bb4:	f3bf 8f4f 	dsb	sy
 8008bb8:	60fb      	str	r3, [r7, #12]
}
 8008bba:	bf00      	nop
 8008bbc:	bf00      	nop
 8008bbe:	e7fd      	b.n	8008bbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bc0:	4b07      	ldr	r3, [pc, #28]	@ (8008be0 <vTaskPlaceOnEventList+0x48>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3318      	adds	r3, #24
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f7fe fb4c 	bl	8007266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bce:	2101      	movs	r1, #1
 8008bd0:	6838      	ldr	r0, [r7, #0]
 8008bd2:	f000 fb87 	bl	80092e4 <prvAddCurrentTaskToDelayedList>
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20040f90 	.word	0x20040f90

08008be4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10b      	bne.n	8008c0e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	617b      	str	r3, [r7, #20]
}
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	e7fd      	b.n	8008c0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c38 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3318      	adds	r3, #24
 8008c14:	4619      	mov	r1, r3
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f7fe fb01 	bl	800721e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008c22:	f04f 33ff 	mov.w	r3, #4294967295
 8008c26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	68b8      	ldr	r0, [r7, #8]
 8008c2c:	f000 fb5a 	bl	80092e4 <prvAddCurrentTaskToDelayedList>
	}
 8008c30:	bf00      	nop
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20040f90 	.word	0x20040f90

08008c3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10b      	bne.n	8008c6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60fb      	str	r3, [r7, #12]
}
 8008c64:	bf00      	nop
 8008c66:	bf00      	nop
 8008c68:	e7fd      	b.n	8008c66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3318      	adds	r3, #24
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fb32 	bl	80072d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c74:	4b1d      	ldr	r3, [pc, #116]	@ (8008cec <xTaskRemoveFromEventList+0xb0>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d11d      	bne.n	8008cb8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe fb29 	bl	80072d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c8a:	4b19      	ldr	r3, [pc, #100]	@ (8008cf0 <xTaskRemoveFromEventList+0xb4>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d903      	bls.n	8008c9a <xTaskRemoveFromEventList+0x5e>
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c96:	4a16      	ldr	r2, [pc, #88]	@ (8008cf0 <xTaskRemoveFromEventList+0xb4>)
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	4a13      	ldr	r2, [pc, #76]	@ (8008cf4 <xTaskRemoveFromEventList+0xb8>)
 8008ca8:	441a      	add	r2, r3
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	3304      	adds	r3, #4
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	f7fe fab4 	bl	800721e <vListInsertEnd>
 8008cb6:	e005      	b.n	8008cc4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	3318      	adds	r3, #24
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	480e      	ldr	r0, [pc, #56]	@ (8008cf8 <xTaskRemoveFromEventList+0xbc>)
 8008cc0:	f7fe faad 	bl	800721e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008cfc <xTaskRemoveFromEventList+0xc0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d905      	bls.n	8008cde <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008d00 <xTaskRemoveFromEventList+0xc4>)
 8008cd8:	2201      	movs	r2, #1
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	e001      	b.n	8008ce2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ce2:	697b      	ldr	r3, [r7, #20]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	2004148c 	.word	0x2004148c
 8008cf0:	2004146c 	.word	0x2004146c
 8008cf4:	20040f94 	.word	0x20040f94
 8008cf8:	20041424 	.word	0x20041424
 8008cfc:	20040f90 	.word	0x20040f90
 8008d00:	20041478 	.word	0x20041478

08008d04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	@ (8008d28 <vTaskInternalSetTimeOutState+0x24>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d14:	4b05      	ldr	r3, [pc, #20]	@ (8008d2c <vTaskInternalSetTimeOutState+0x28>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	605a      	str	r2, [r3, #4]
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	2004147c 	.word	0x2004147c
 8008d2c:	20041468 	.word	0x20041468

08008d30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10b      	bne.n	8008d58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	613b      	str	r3, [r7, #16]
}
 8008d52:	bf00      	nop
 8008d54:	bf00      	nop
 8008d56:	e7fd      	b.n	8008d54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10b      	bne.n	8008d76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	60fb      	str	r3, [r7, #12]
}
 8008d70:	bf00      	nop
 8008d72:	bf00      	nop
 8008d74:	e7fd      	b.n	8008d72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008d76:	f000 ff97 	bl	8009ca8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8008df0 <xTaskCheckForTimeOut+0xc0>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d92:	d102      	bne.n	8008d9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61fb      	str	r3, [r7, #28]
 8008d98:	e023      	b.n	8008de2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b15      	ldr	r3, [pc, #84]	@ (8008df4 <xTaskCheckForTimeOut+0xc4>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d007      	beq.n	8008db6 <xTaskCheckForTimeOut+0x86>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d302      	bcc.n	8008db6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008db0:	2301      	movs	r3, #1
 8008db2:	61fb      	str	r3, [r7, #28]
 8008db4:	e015      	b.n	8008de2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d20b      	bcs.n	8008dd8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	1ad2      	subs	r2, r2, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f7ff ff99 	bl	8008d04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	e004      	b.n	8008de2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dde:	2301      	movs	r3, #1
 8008de0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008de2:	f000 ff93 	bl	8009d0c <vPortExitCritical>

	return xReturn;
 8008de6:	69fb      	ldr	r3, [r7, #28]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20041468 	.word	0x20041468
 8008df4:	2004147c 	.word	0x2004147c

08008df8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dfc:	4b03      	ldr	r3, [pc, #12]	@ (8008e0c <vTaskMissedYield+0x14>)
 8008dfe:	2201      	movs	r2, #1
 8008e00:	601a      	str	r2, [r3, #0]
}
 8008e02:	bf00      	nop
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	20041478 	.word	0x20041478

08008e10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e18:	f000 f852 	bl	8008ec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e1c:	4b06      	ldr	r3, [pc, #24]	@ (8008e38 <prvIdleTask+0x28>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d9f9      	bls.n	8008e18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e24:	4b05      	ldr	r3, [pc, #20]	@ (8008e3c <prvIdleTask+0x2c>)
 8008e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e34:	e7f0      	b.n	8008e18 <prvIdleTask+0x8>
 8008e36:	bf00      	nop
 8008e38:	20040f94 	.word	0x20040f94
 8008e3c:	e000ed04 	.word	0xe000ed04

08008e40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e46:	2300      	movs	r3, #0
 8008e48:	607b      	str	r3, [r7, #4]
 8008e4a:	e00c      	b.n	8008e66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4a12      	ldr	r2, [pc, #72]	@ (8008ea0 <prvInitialiseTaskLists+0x60>)
 8008e58:	4413      	add	r3, r2
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe f9b2 	bl	80071c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	3301      	adds	r3, #1
 8008e64:	607b      	str	r3, [r7, #4]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b37      	cmp	r3, #55	@ 0x37
 8008e6a:	d9ef      	bls.n	8008e4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e6c:	480d      	ldr	r0, [pc, #52]	@ (8008ea4 <prvInitialiseTaskLists+0x64>)
 8008e6e:	f7fe f9a9 	bl	80071c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e72:	480d      	ldr	r0, [pc, #52]	@ (8008ea8 <prvInitialiseTaskLists+0x68>)
 8008e74:	f7fe f9a6 	bl	80071c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e78:	480c      	ldr	r0, [pc, #48]	@ (8008eac <prvInitialiseTaskLists+0x6c>)
 8008e7a:	f7fe f9a3 	bl	80071c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e7e:	480c      	ldr	r0, [pc, #48]	@ (8008eb0 <prvInitialiseTaskLists+0x70>)
 8008e80:	f7fe f9a0 	bl	80071c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e84:	480b      	ldr	r0, [pc, #44]	@ (8008eb4 <prvInitialiseTaskLists+0x74>)
 8008e86:	f7fe f99d 	bl	80071c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb8 <prvInitialiseTaskLists+0x78>)
 8008e8c:	4a05      	ldr	r2, [pc, #20]	@ (8008ea4 <prvInitialiseTaskLists+0x64>)
 8008e8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e90:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <prvInitialiseTaskLists+0x7c>)
 8008e92:	4a05      	ldr	r2, [pc, #20]	@ (8008ea8 <prvInitialiseTaskLists+0x68>)
 8008e94:	601a      	str	r2, [r3, #0]
}
 8008e96:	bf00      	nop
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20040f94 	.word	0x20040f94
 8008ea4:	200413f4 	.word	0x200413f4
 8008ea8:	20041408 	.word	0x20041408
 8008eac:	20041424 	.word	0x20041424
 8008eb0:	20041438 	.word	0x20041438
 8008eb4:	20041450 	.word	0x20041450
 8008eb8:	2004141c 	.word	0x2004141c
 8008ebc:	20041420 	.word	0x20041420

08008ec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ec6:	e019      	b.n	8008efc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ec8:	f000 feee 	bl	8009ca8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ecc:	4b10      	ldr	r3, [pc, #64]	@ (8008f10 <prvCheckTasksWaitingTermination+0x50>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fe f9fd 	bl	80072d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ede:	4b0d      	ldr	r3, [pc, #52]	@ (8008f14 <prvCheckTasksWaitingTermination+0x54>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8008f14 <prvCheckTasksWaitingTermination+0x54>)
 8008ee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	4a0a      	ldr	r2, [pc, #40]	@ (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008ef0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ef2:	f000 ff0b 	bl	8009d0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 f810 	bl	8008f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008efc:	4b06      	ldr	r3, [pc, #24]	@ (8008f18 <prvCheckTasksWaitingTermination+0x58>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1e1      	bne.n	8008ec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f04:	bf00      	nop
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20041438 	.word	0x20041438
 8008f14:	20041464 	.word	0x20041464
 8008f18:	2004144c 	.word	0x2004144c

08008f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3354      	adds	r3, #84	@ 0x54
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f001 f9d5 	bl	800a2d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d108      	bne.n	8008f4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f001 f8a3 	bl	800a088 <vPortFree>
				vPortFree( pxTCB );
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 f8a0 	bl	800a088 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f48:	e019      	b.n	8008f7e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d103      	bne.n	8008f5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f001 f897 	bl	800a088 <vPortFree>
	}
 8008f5a:	e010      	b.n	8008f7e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d00b      	beq.n	8008f7e <prvDeleteTCB+0x62>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	bf00      	nop
 8008f7c:	e7fd      	b.n	8008f7a <prvDeleteTCB+0x5e>
	}
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
	...

08008f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b083      	sub	sp, #12
 8008f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d104      	bne.n	8008fa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f98:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fa0:	e008      	b.n	8008fb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa2:	4b07      	ldr	r3, [pc, #28]	@ (8008fc0 <prvResetNextTaskUnblockTime+0x38>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4a04      	ldr	r2, [pc, #16]	@ (8008fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8008fb2:	6013      	str	r3, [r2, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	2004141c 	.word	0x2004141c
 8008fc4:	20041484 	.word	0x20041484

08008fc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fce:	4b0b      	ldr	r3, [pc, #44]	@ (8008ffc <xTaskGetSchedulerState+0x34>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d102      	bne.n	8008fdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	607b      	str	r3, [r7, #4]
 8008fda:	e008      	b.n	8008fee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fdc:	4b08      	ldr	r3, [pc, #32]	@ (8009000 <xTaskGetSchedulerState+0x38>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d102      	bne.n	8008fea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	607b      	str	r3, [r7, #4]
 8008fe8:	e001      	b.n	8008fee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fea:	2300      	movs	r3, #0
 8008fec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fee:	687b      	ldr	r3, [r7, #4]
	}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	20041470 	.word	0x20041470
 8009000:	2004148c 	.word	0x2004148c

08009004 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d051      	beq.n	80090be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800901e:	4b2a      	ldr	r3, [pc, #168]	@ (80090c8 <xTaskPriorityInherit+0xc4>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009024:	429a      	cmp	r2, r3
 8009026:	d241      	bcs.n	80090ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	db06      	blt.n	800903e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009030:	4b25      	ldr	r3, [pc, #148]	@ (80090c8 <xTaskPriorityInherit+0xc4>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009036:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6959      	ldr	r1, [r3, #20]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009046:	4613      	mov	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4a1f      	ldr	r2, [pc, #124]	@ (80090cc <xTaskPriorityInherit+0xc8>)
 8009050:	4413      	add	r3, r2
 8009052:	4299      	cmp	r1, r3
 8009054:	d122      	bne.n	800909c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	3304      	adds	r3, #4
 800905a:	4618      	mov	r0, r3
 800905c:	f7fe f93c 	bl	80072d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009060:	4b19      	ldr	r3, [pc, #100]	@ (80090c8 <xTaskPriorityInherit+0xc4>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800906e:	4b18      	ldr	r3, [pc, #96]	@ (80090d0 <xTaskPriorityInherit+0xcc>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	d903      	bls.n	800907e <xTaskPriorityInherit+0x7a>
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800907a:	4a15      	ldr	r2, [pc, #84]	@ (80090d0 <xTaskPriorityInherit+0xcc>)
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4a10      	ldr	r2, [pc, #64]	@ (80090cc <xTaskPriorityInherit+0xc8>)
 800908c:	441a      	add	r2, r3
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	3304      	adds	r3, #4
 8009092:	4619      	mov	r1, r3
 8009094:	4610      	mov	r0, r2
 8009096:	f7fe f8c2 	bl	800721e <vListInsertEnd>
 800909a:	e004      	b.n	80090a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800909c:	4b0a      	ldr	r3, [pc, #40]	@ (80090c8 <xTaskPriorityInherit+0xc4>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80090a6:	2301      	movs	r3, #1
 80090a8:	60fb      	str	r3, [r7, #12]
 80090aa:	e008      	b.n	80090be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090b0:	4b05      	ldr	r3, [pc, #20]	@ (80090c8 <xTaskPriorityInherit+0xc4>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d201      	bcs.n	80090be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80090ba:	2301      	movs	r3, #1
 80090bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090be:	68fb      	ldr	r3, [r7, #12]
	}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20040f90 	.word	0x20040f90
 80090cc:	20040f94 	.word	0x20040f94
 80090d0:	2004146c 	.word	0x2004146c

080090d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090e0:	2300      	movs	r3, #0
 80090e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d058      	beq.n	800919c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090ea:	4b2f      	ldr	r3, [pc, #188]	@ (80091a8 <xTaskPriorityDisinherit+0xd4>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d00b      	beq.n	800910c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80090f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f8:	f383 8811 	msr	BASEPRI, r3
 80090fc:	f3bf 8f6f 	isb	sy
 8009100:	f3bf 8f4f 	dsb	sy
 8009104:	60fb      	str	r3, [r7, #12]
}
 8009106:	bf00      	nop
 8009108:	bf00      	nop
 800910a:	e7fd      	b.n	8009108 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10b      	bne.n	800912c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	60bb      	str	r3, [r7, #8]
}
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	e7fd      	b.n	8009128 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009130:	1e5a      	subs	r2, r3, #1
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800913e:	429a      	cmp	r2, r3
 8009140:	d02c      	beq.n	800919c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009146:	2b00      	cmp	r3, #0
 8009148:	d128      	bne.n	800919c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	3304      	adds	r3, #4
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe f8c2 	bl	80072d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009160:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800916c:	4b0f      	ldr	r3, [pc, #60]	@ (80091ac <xTaskPriorityDisinherit+0xd8>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	429a      	cmp	r2, r3
 8009172:	d903      	bls.n	800917c <xTaskPriorityDisinherit+0xa8>
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009178:	4a0c      	ldr	r2, [pc, #48]	@ (80091ac <xTaskPriorityDisinherit+0xd8>)
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4a09      	ldr	r2, [pc, #36]	@ (80091b0 <xTaskPriorityDisinherit+0xdc>)
 800918a:	441a      	add	r2, r3
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	4610      	mov	r0, r2
 8009194:	f7fe f843 	bl	800721e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009198:	2301      	movs	r3, #1
 800919a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800919c:	697b      	ldr	r3, [r7, #20]
	}
 800919e:	4618      	mov	r0, r3
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	20040f90 	.word	0x20040f90
 80091ac:	2004146c 	.word	0x2004146c
 80091b0:	20040f94 	.word	0x20040f94

080091b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b088      	sub	sp, #32
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80091c2:	2301      	movs	r3, #1
 80091c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d06c      	beq.n	80092a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80091cc:	69bb      	ldr	r3, [r7, #24]
 80091ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10b      	bne.n	80091ec <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	60fb      	str	r3, [r7, #12]
}
 80091e6:	bf00      	nop
 80091e8:	bf00      	nop
 80091ea:	e7fd      	b.n	80091e8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d902      	bls.n	80091fc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	61fb      	str	r3, [r7, #28]
 80091fa:	e002      	b.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009200:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009206:	69fa      	ldr	r2, [r7, #28]
 8009208:	429a      	cmp	r2, r3
 800920a:	d04c      	beq.n	80092a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	429a      	cmp	r2, r3
 8009214:	d147      	bne.n	80092a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009216:	4b26      	ldr	r3, [pc, #152]	@ (80092b0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	429a      	cmp	r2, r3
 800921e:	d10b      	bne.n	8009238 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	60bb      	str	r3, [r7, #8]
}
 8009232:	bf00      	nop
 8009234:	bf00      	nop
 8009236:	e7fd      	b.n	8009234 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	69fa      	ldr	r2, [r7, #28]
 8009242:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	2b00      	cmp	r3, #0
 800924a:	db04      	blt.n	8009256 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	6959      	ldr	r1, [r3, #20]
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	4613      	mov	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4a13      	ldr	r2, [pc, #76]	@ (80092b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009266:	4413      	add	r3, r2
 8009268:	4299      	cmp	r1, r3
 800926a:	d11c      	bne.n	80092a6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800926c:	69bb      	ldr	r3, [r7, #24]
 800926e:	3304      	adds	r3, #4
 8009270:	4618      	mov	r0, r3
 8009272:	f7fe f831 	bl	80072d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800927a:	4b0f      	ldr	r3, [pc, #60]	@ (80092b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	429a      	cmp	r2, r3
 8009280:	d903      	bls.n	800928a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009286:	4a0c      	ldr	r2, [pc, #48]	@ (80092b8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009288:	6013      	str	r3, [r2, #0]
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4a07      	ldr	r2, [pc, #28]	@ (80092b4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009298:	441a      	add	r2, r3
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	3304      	adds	r3, #4
 800929e:	4619      	mov	r1, r3
 80092a0:	4610      	mov	r0, r2
 80092a2:	f7fd ffbc 	bl	800721e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092a6:	bf00      	nop
 80092a8:	3720      	adds	r7, #32
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20040f90 	.word	0x20040f90
 80092b4:	20040f94 	.word	0x20040f94
 80092b8:	2004146c 	.word	0x2004146c

080092bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80092c0:	4b07      	ldr	r3, [pc, #28]	@ (80092e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d004      	beq.n	80092d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80092c8:	4b05      	ldr	r3, [pc, #20]	@ (80092e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80092ce:	3201      	adds	r2, #1
 80092d0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80092d2:	4b03      	ldr	r3, [pc, #12]	@ (80092e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80092d4:	681b      	ldr	r3, [r3, #0]
	}
 80092d6:	4618      	mov	r0, r3
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	20040f90 	.word	0x20040f90

080092e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092ee:	4b21      	ldr	r3, [pc, #132]	@ (8009374 <prvAddCurrentTaskToDelayedList+0x90>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092f4:	4b20      	ldr	r3, [pc, #128]	@ (8009378 <prvAddCurrentTaskToDelayedList+0x94>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3304      	adds	r3, #4
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fd ffec 	bl	80072d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009306:	d10a      	bne.n	800931e <prvAddCurrentTaskToDelayedList+0x3a>
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d007      	beq.n	800931e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800930e:	4b1a      	ldr	r3, [pc, #104]	@ (8009378 <prvAddCurrentTaskToDelayedList+0x94>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3304      	adds	r3, #4
 8009314:	4619      	mov	r1, r3
 8009316:	4819      	ldr	r0, [pc, #100]	@ (800937c <prvAddCurrentTaskToDelayedList+0x98>)
 8009318:	f7fd ff81 	bl	800721e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800931c:	e026      	b.n	800936c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4413      	add	r3, r2
 8009324:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009326:	4b14      	ldr	r3, [pc, #80]	@ (8009378 <prvAddCurrentTaskToDelayedList+0x94>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	429a      	cmp	r2, r3
 8009334:	d209      	bcs.n	800934a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009336:	4b12      	ldr	r3, [pc, #72]	@ (8009380 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4b0f      	ldr	r3, [pc, #60]	@ (8009378 <prvAddCurrentTaskToDelayedList+0x94>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3304      	adds	r3, #4
 8009340:	4619      	mov	r1, r3
 8009342:	4610      	mov	r0, r2
 8009344:	f7fd ff8f 	bl	8007266 <vListInsert>
}
 8009348:	e010      	b.n	800936c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800934a:	4b0e      	ldr	r3, [pc, #56]	@ (8009384 <prvAddCurrentTaskToDelayedList+0xa0>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	4b0a      	ldr	r3, [pc, #40]	@ (8009378 <prvAddCurrentTaskToDelayedList+0x94>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3304      	adds	r3, #4
 8009354:	4619      	mov	r1, r3
 8009356:	4610      	mov	r0, r2
 8009358:	f7fd ff85 	bl	8007266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800935c:	4b0a      	ldr	r3, [pc, #40]	@ (8009388 <prvAddCurrentTaskToDelayedList+0xa4>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	429a      	cmp	r2, r3
 8009364:	d202      	bcs.n	800936c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009366:	4a08      	ldr	r2, [pc, #32]	@ (8009388 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	6013      	str	r3, [r2, #0]
}
 800936c:	bf00      	nop
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	20041468 	.word	0x20041468
 8009378:	20040f90 	.word	0x20040f90
 800937c:	20041450 	.word	0x20041450
 8009380:	20041420 	.word	0x20041420
 8009384:	2004141c 	.word	0x2004141c
 8009388:	20041484 	.word	0x20041484

0800938c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08a      	sub	sp, #40	@ 0x28
 8009390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009392:	2300      	movs	r3, #0
 8009394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009396:	f000 fb13 	bl	80099c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800939a:	4b1d      	ldr	r3, [pc, #116]	@ (8009410 <xTimerCreateTimerTask+0x84>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d021      	beq.n	80093e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80093a2:	2300      	movs	r3, #0
 80093a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093aa:	1d3a      	adds	r2, r7, #4
 80093ac:	f107 0108 	add.w	r1, r7, #8
 80093b0:	f107 030c 	add.w	r3, r7, #12
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fd feeb 	bl	8007190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	9202      	str	r2, [sp, #8]
 80093c2:	9301      	str	r3, [sp, #4]
 80093c4:	2302      	movs	r3, #2
 80093c6:	9300      	str	r3, [sp, #0]
 80093c8:	2300      	movs	r3, #0
 80093ca:	460a      	mov	r2, r1
 80093cc:	4911      	ldr	r1, [pc, #68]	@ (8009414 <xTimerCreateTimerTask+0x88>)
 80093ce:	4812      	ldr	r0, [pc, #72]	@ (8009418 <xTimerCreateTimerTask+0x8c>)
 80093d0:	f7fe ffd8 	bl	8008384 <xTaskCreateStatic>
 80093d4:	4603      	mov	r3, r0
 80093d6:	4a11      	ldr	r2, [pc, #68]	@ (800941c <xTimerCreateTimerTask+0x90>)
 80093d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80093da:	4b10      	ldr	r3, [pc, #64]	@ (800941c <xTimerCreateTimerTask+0x90>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d001      	beq.n	80093e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093e2:	2301      	movs	r3, #1
 80093e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10b      	bne.n	8009404 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80093ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	613b      	str	r3, [r7, #16]
}
 80093fe:	bf00      	nop
 8009400:	bf00      	nop
 8009402:	e7fd      	b.n	8009400 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009404:	697b      	ldr	r3, [r7, #20]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	200414c0 	.word	0x200414c0
 8009414:	0800a4d0 	.word	0x0800a4d0
 8009418:	08009559 	.word	0x08009559
 800941c:	200414c4 	.word	0x200414c4

08009420 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b08a      	sub	sp, #40	@ 0x28
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
 800942c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800942e:	2300      	movs	r3, #0
 8009430:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10b      	bne.n	8009450 <xTimerGenericCommand+0x30>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	623b      	str	r3, [r7, #32]
}
 800944a:	bf00      	nop
 800944c:	bf00      	nop
 800944e:	e7fd      	b.n	800944c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009450:	4b19      	ldr	r3, [pc, #100]	@ (80094b8 <xTimerGenericCommand+0x98>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d02a      	beq.n	80094ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	2b05      	cmp	r3, #5
 8009468:	dc18      	bgt.n	800949c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800946a:	f7ff fdad 	bl	8008fc8 <xTaskGetSchedulerState>
 800946e:	4603      	mov	r3, r0
 8009470:	2b02      	cmp	r3, #2
 8009472:	d109      	bne.n	8009488 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009474:	4b10      	ldr	r3, [pc, #64]	@ (80094b8 <xTimerGenericCommand+0x98>)
 8009476:	6818      	ldr	r0, [r3, #0]
 8009478:	f107 0110 	add.w	r1, r7, #16
 800947c:	2300      	movs	r3, #0
 800947e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009480:	f7fe f908 	bl	8007694 <xQueueGenericSend>
 8009484:	6278      	str	r0, [r7, #36]	@ 0x24
 8009486:	e012      	b.n	80094ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009488:	4b0b      	ldr	r3, [pc, #44]	@ (80094b8 <xTimerGenericCommand+0x98>)
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	f107 0110 	add.w	r1, r7, #16
 8009490:	2300      	movs	r3, #0
 8009492:	2200      	movs	r2, #0
 8009494:	f7fe f8fe 	bl	8007694 <xQueueGenericSend>
 8009498:	6278      	str	r0, [r7, #36]	@ 0x24
 800949a:	e008      	b.n	80094ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800949c:	4b06      	ldr	r3, [pc, #24]	@ (80094b8 <xTimerGenericCommand+0x98>)
 800949e:	6818      	ldr	r0, [r3, #0]
 80094a0:	f107 0110 	add.w	r1, r7, #16
 80094a4:	2300      	movs	r3, #0
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	f7fe f9f6 	bl	8007898 <xQueueGenericSendFromISR>
 80094ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80094ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3728      	adds	r7, #40	@ 0x28
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	200414c0 	.word	0x200414c0

080094bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af02      	add	r7, sp, #8
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094c6:	4b23      	ldr	r3, [pc, #140]	@ (8009554 <prvProcessExpiredTimer+0x98>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	3304      	adds	r3, #4
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fd feff 	bl	80072d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094e0:	f003 0304 	and.w	r3, r3, #4
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d023      	beq.n	8009530 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	18d1      	adds	r1, r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	683a      	ldr	r2, [r7, #0]
 80094f4:	6978      	ldr	r0, [r7, #20]
 80094f6:	f000 f8d5 	bl	80096a4 <prvInsertTimerInActiveList>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d020      	beq.n	8009542 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009500:	2300      	movs	r3, #0
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	2300      	movs	r3, #0
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	2100      	movs	r1, #0
 800950a:	6978      	ldr	r0, [r7, #20]
 800950c:	f7ff ff88 	bl	8009420 <xTimerGenericCommand>
 8009510:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d114      	bne.n	8009542 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	60fb      	str	r3, [r7, #12]
}
 800952a:	bf00      	nop
 800952c:	bf00      	nop
 800952e:	e7fd      	b.n	800952c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009536:	f023 0301 	bic.w	r3, r3, #1
 800953a:	b2da      	uxtb	r2, r3
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	6978      	ldr	r0, [r7, #20]
 8009548:	4798      	blx	r3
}
 800954a:	bf00      	nop
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	200414b8 	.word	0x200414b8

08009558 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009560:	f107 0308 	add.w	r3, r7, #8
 8009564:	4618      	mov	r0, r3
 8009566:	f000 f859 	bl	800961c <prvGetNextExpireTime>
 800956a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4619      	mov	r1, r3
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f805 	bl	8009580 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009576:	f000 f8d7 	bl	8009728 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800957a:	bf00      	nop
 800957c:	e7f0      	b.n	8009560 <prvTimerTask+0x8>
	...

08009580 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800958a:	f7ff f929 	bl	80087e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800958e:	f107 0308 	add.w	r3, r7, #8
 8009592:	4618      	mov	r0, r3
 8009594:	f000 f866 	bl	8009664 <prvSampleTimeNow>
 8009598:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d130      	bne.n	8009602 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10a      	bne.n	80095bc <prvProcessTimerOrBlockTask+0x3c>
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d806      	bhi.n	80095bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80095ae:	f7ff f925 	bl	80087fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80095b2:	68f9      	ldr	r1, [r7, #12]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff ff81 	bl	80094bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80095ba:	e024      	b.n	8009606 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d008      	beq.n	80095d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095c2:	4b13      	ldr	r3, [pc, #76]	@ (8009610 <prvProcessTimerOrBlockTask+0x90>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d101      	bne.n	80095d0 <prvProcessTimerOrBlockTask+0x50>
 80095cc:	2301      	movs	r3, #1
 80095ce:	e000      	b.n	80095d2 <prvProcessTimerOrBlockTask+0x52>
 80095d0:	2300      	movs	r3, #0
 80095d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80095d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009614 <prvProcessTimerOrBlockTask+0x94>)
 80095d6:	6818      	ldr	r0, [r3, #0]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	4619      	mov	r1, r3
 80095e2:	f7fe fe9b 	bl	800831c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095e6:	f7ff f909 	bl	80087fc <xTaskResumeAll>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10a      	bne.n	8009606 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80095f0:	4b09      	ldr	r3, [pc, #36]	@ (8009618 <prvProcessTimerOrBlockTask+0x98>)
 80095f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	f3bf 8f6f 	isb	sy
}
 8009600:	e001      	b.n	8009606 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009602:	f7ff f8fb 	bl	80087fc <xTaskResumeAll>
}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	200414bc 	.word	0x200414bc
 8009614:	200414c0 	.word	0x200414c0
 8009618:	e000ed04 	.word	0xe000ed04

0800961c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800961c:	b480      	push	{r7}
 800961e:	b085      	sub	sp, #20
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009624:	4b0e      	ldr	r3, [pc, #56]	@ (8009660 <prvGetNextExpireTime+0x44>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d101      	bne.n	8009632 <prvGetNextExpireTime+0x16>
 800962e:	2201      	movs	r2, #1
 8009630:	e000      	b.n	8009634 <prvGetNextExpireTime+0x18>
 8009632:	2200      	movs	r2, #0
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d105      	bne.n	800964c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009640:	4b07      	ldr	r3, [pc, #28]	@ (8009660 <prvGetNextExpireTime+0x44>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	e001      	b.n	8009650 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800964c:	2300      	movs	r3, #0
 800964e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009650:	68fb      	ldr	r3, [r7, #12]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	200414b8 	.word	0x200414b8

08009664 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800966c:	f7ff f964 	bl	8008938 <xTaskGetTickCount>
 8009670:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009672:	4b0b      	ldr	r3, [pc, #44]	@ (80096a0 <prvSampleTimeNow+0x3c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	429a      	cmp	r2, r3
 800967a:	d205      	bcs.n	8009688 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800967c:	f000 f93a 	bl	80098f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	601a      	str	r2, [r3, #0]
 8009686:	e002      	b.n	800968e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800968e:	4a04      	ldr	r2, [pc, #16]	@ (80096a0 <prvSampleTimeNow+0x3c>)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009694:	68fb      	ldr	r3, [r7, #12]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	200414c8 	.word	0x200414c8

080096a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	68ba      	ldr	r2, [r7, #8]
 80096ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d812      	bhi.n	80096f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	1ad2      	subs	r2, r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d302      	bcc.n	80096de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80096d8:	2301      	movs	r3, #1
 80096da:	617b      	str	r3, [r7, #20]
 80096dc:	e01b      	b.n	8009716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80096de:	4b10      	ldr	r3, [pc, #64]	@ (8009720 <prvInsertTimerInActiveList+0x7c>)
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3304      	adds	r3, #4
 80096e6:	4619      	mov	r1, r3
 80096e8:	4610      	mov	r0, r2
 80096ea:	f7fd fdbc 	bl	8007266 <vListInsert>
 80096ee:	e012      	b.n	8009716 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d206      	bcs.n	8009706 <prvInsertTimerInActiveList+0x62>
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d302      	bcc.n	8009706 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009700:	2301      	movs	r3, #1
 8009702:	617b      	str	r3, [r7, #20]
 8009704:	e007      	b.n	8009716 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009706:	4b07      	ldr	r3, [pc, #28]	@ (8009724 <prvInsertTimerInActiveList+0x80>)
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3304      	adds	r3, #4
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f7fd fda8 	bl	8007266 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009716:	697b      	ldr	r3, [r7, #20]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	200414bc 	.word	0x200414bc
 8009724:	200414b8 	.word	0x200414b8

08009728 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b08e      	sub	sp, #56	@ 0x38
 800972c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800972e:	e0ce      	b.n	80098ce <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	da19      	bge.n	800976a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009736:	1d3b      	adds	r3, r7, #4
 8009738:	3304      	adds	r3, #4
 800973a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800973c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10b      	bne.n	800975a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	61fb      	str	r3, [r7, #28]
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop
 8009758:	e7fd      	b.n	8009756 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800975a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009760:	6850      	ldr	r0, [r2, #4]
 8009762:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009764:	6892      	ldr	r2, [r2, #8]
 8009766:	4611      	mov	r1, r2
 8009768:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	f2c0 80ae 	blt.w	80098ce <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d004      	beq.n	8009788 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800977e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009780:	3304      	adds	r3, #4
 8009782:	4618      	mov	r0, r3
 8009784:	f7fd fda8 	bl	80072d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009788:	463b      	mov	r3, r7
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff ff6a 	bl	8009664 <prvSampleTimeNow>
 8009790:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b09      	cmp	r3, #9
 8009796:	f200 8097 	bhi.w	80098c8 <prvProcessReceivedCommands+0x1a0>
 800979a:	a201      	add	r2, pc, #4	@ (adr r2, 80097a0 <prvProcessReceivedCommands+0x78>)
 800979c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a0:	080097c9 	.word	0x080097c9
 80097a4:	080097c9 	.word	0x080097c9
 80097a8:	080097c9 	.word	0x080097c9
 80097ac:	0800983f 	.word	0x0800983f
 80097b0:	08009853 	.word	0x08009853
 80097b4:	0800989f 	.word	0x0800989f
 80097b8:	080097c9 	.word	0x080097c9
 80097bc:	080097c9 	.word	0x080097c9
 80097c0:	0800983f 	.word	0x0800983f
 80097c4:	08009853 	.word	0x08009853
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80097ce:	f043 0301 	orr.w	r3, r3, #1
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	18d1      	adds	r1, r2, r3
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097e8:	f7ff ff5c 	bl	80096a4 <prvInsertTimerInActiveList>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d06c      	beq.n	80098cc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f4:	6a1b      	ldr	r3, [r3, #32]
 80097f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b00      	cmp	r3, #0
 8009806:	d061      	beq.n	80098cc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	441a      	add	r2, r3
 8009810:	2300      	movs	r3, #0
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	2300      	movs	r3, #0
 8009816:	2100      	movs	r1, #0
 8009818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800981a:	f7ff fe01 	bl	8009420 <xTimerGenericCommand>
 800981e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d152      	bne.n	80098cc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800982a:	f383 8811 	msr	BASEPRI, r3
 800982e:	f3bf 8f6f 	isb	sy
 8009832:	f3bf 8f4f 	dsb	sy
 8009836:	61bb      	str	r3, [r7, #24]
}
 8009838:	bf00      	nop
 800983a:	bf00      	nop
 800983c:	e7fd      	b.n	800983a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800983e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009840:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009844:	f023 0301 	bic.w	r3, r3, #1
 8009848:	b2da      	uxtb	r2, r3
 800984a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009850:	e03d      	b.n	80098ce <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009854:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009858:	f043 0301 	orr.w	r3, r3, #1
 800985c:	b2da      	uxtb	r2, r3
 800985e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009860:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009868:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800986a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d10b      	bne.n	800988a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	617b      	str	r3, [r7, #20]
}
 8009884:	bf00      	nop
 8009886:	bf00      	nop
 8009888:	e7fd      	b.n	8009886 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800988a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009890:	18d1      	adds	r1, r2, r3
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009896:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009898:	f7ff ff04 	bl	80096a4 <prvInsertTimerInActiveList>
					break;
 800989c:	e017      	b.n	80098ce <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800989e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d103      	bne.n	80098b4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80098ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098ae:	f000 fbeb 	bl	800a088 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098b2:	e00c      	b.n	80098ce <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098ba:	f023 0301 	bic.w	r3, r3, #1
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80098c6:	e002      	b.n	80098ce <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80098c8:	bf00      	nop
 80098ca:	e000      	b.n	80098ce <prvProcessReceivedCommands+0x1a6>
					break;
 80098cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098ce:	4b08      	ldr	r3, [pc, #32]	@ (80098f0 <prvProcessReceivedCommands+0x1c8>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	1d39      	adds	r1, r7, #4
 80098d4:	2200      	movs	r2, #0
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fe f90c 	bl	8007af4 <xQueueReceive>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f47f af26 	bne.w	8009730 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80098e4:	bf00      	nop
 80098e6:	bf00      	nop
 80098e8:	3730      	adds	r7, #48	@ 0x30
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	200414c0 	.word	0x200414c0

080098f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b088      	sub	sp, #32
 80098f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098fa:	e049      	b.n	8009990 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098fc:	4b2e      	ldr	r3, [pc, #184]	@ (80099b8 <prvSwitchTimerLists+0xc4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009906:	4b2c      	ldr	r3, [pc, #176]	@ (80099b8 <prvSwitchTimerLists+0xc4>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	3304      	adds	r3, #4
 8009914:	4618      	mov	r0, r3
 8009916:	f7fd fcdf 	bl	80072d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	68f8      	ldr	r0, [r7, #12]
 8009920:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	d02f      	beq.n	8009990 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4413      	add	r3, r2
 8009938:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	429a      	cmp	r2, r3
 8009940:	d90e      	bls.n	8009960 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800994e:	4b1a      	ldr	r3, [pc, #104]	@ (80099b8 <prvSwitchTimerLists+0xc4>)
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3304      	adds	r3, #4
 8009956:	4619      	mov	r1, r3
 8009958:	4610      	mov	r0, r2
 800995a:	f7fd fc84 	bl	8007266 <vListInsert>
 800995e:	e017      	b.n	8009990 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009960:	2300      	movs	r3, #0
 8009962:	9300      	str	r3, [sp, #0]
 8009964:	2300      	movs	r3, #0
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	2100      	movs	r1, #0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f7ff fd58 	bl	8009420 <xTimerGenericCommand>
 8009970:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10b      	bne.n	8009990 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	603b      	str	r3, [r7, #0]
}
 800998a:	bf00      	nop
 800998c:	bf00      	nop
 800998e:	e7fd      	b.n	800998c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009990:	4b09      	ldr	r3, [pc, #36]	@ (80099b8 <prvSwitchTimerLists+0xc4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1b0      	bne.n	80098fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800999a:	4b07      	ldr	r3, [pc, #28]	@ (80099b8 <prvSwitchTimerLists+0xc4>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80099a0:	4b06      	ldr	r3, [pc, #24]	@ (80099bc <prvSwitchTimerLists+0xc8>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a04      	ldr	r2, [pc, #16]	@ (80099b8 <prvSwitchTimerLists+0xc4>)
 80099a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80099a8:	4a04      	ldr	r2, [pc, #16]	@ (80099bc <prvSwitchTimerLists+0xc8>)
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	6013      	str	r3, [r2, #0]
}
 80099ae:	bf00      	nop
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	200414b8 	.word	0x200414b8
 80099bc:	200414bc 	.word	0x200414bc

080099c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099c6:	f000 f96f 	bl	8009ca8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099ca:	4b15      	ldr	r3, [pc, #84]	@ (8009a20 <prvCheckForValidListAndQueue+0x60>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d120      	bne.n	8009a14 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80099d2:	4814      	ldr	r0, [pc, #80]	@ (8009a24 <prvCheckForValidListAndQueue+0x64>)
 80099d4:	f7fd fbf6 	bl	80071c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099d8:	4813      	ldr	r0, [pc, #76]	@ (8009a28 <prvCheckForValidListAndQueue+0x68>)
 80099da:	f7fd fbf3 	bl	80071c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099de:	4b13      	ldr	r3, [pc, #76]	@ (8009a2c <prvCheckForValidListAndQueue+0x6c>)
 80099e0:	4a10      	ldr	r2, [pc, #64]	@ (8009a24 <prvCheckForValidListAndQueue+0x64>)
 80099e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099e4:	4b12      	ldr	r3, [pc, #72]	@ (8009a30 <prvCheckForValidListAndQueue+0x70>)
 80099e6:	4a10      	ldr	r2, [pc, #64]	@ (8009a28 <prvCheckForValidListAndQueue+0x68>)
 80099e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099ea:	2300      	movs	r3, #0
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	4b11      	ldr	r3, [pc, #68]	@ (8009a34 <prvCheckForValidListAndQueue+0x74>)
 80099f0:	4a11      	ldr	r2, [pc, #68]	@ (8009a38 <prvCheckForValidListAndQueue+0x78>)
 80099f2:	2110      	movs	r1, #16
 80099f4:	200a      	movs	r0, #10
 80099f6:	f7fd fd03 	bl	8007400 <xQueueGenericCreateStatic>
 80099fa:	4603      	mov	r3, r0
 80099fc:	4a08      	ldr	r2, [pc, #32]	@ (8009a20 <prvCheckForValidListAndQueue+0x60>)
 80099fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a00:	4b07      	ldr	r3, [pc, #28]	@ (8009a20 <prvCheckForValidListAndQueue+0x60>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d005      	beq.n	8009a14 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a08:	4b05      	ldr	r3, [pc, #20]	@ (8009a20 <prvCheckForValidListAndQueue+0x60>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	490b      	ldr	r1, [pc, #44]	@ (8009a3c <prvCheckForValidListAndQueue+0x7c>)
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe fc30 	bl	8008274 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a14:	f000 f97a 	bl	8009d0c <vPortExitCritical>
}
 8009a18:	bf00      	nop
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	200414c0 	.word	0x200414c0
 8009a24:	20041490 	.word	0x20041490
 8009a28:	200414a4 	.word	0x200414a4
 8009a2c:	200414b8 	.word	0x200414b8
 8009a30:	200414bc 	.word	0x200414bc
 8009a34:	2004156c 	.word	0x2004156c
 8009a38:	200414cc 	.word	0x200414cc
 8009a3c:	0800a4d8 	.word	0x0800a4d8

08009a40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	3b04      	subs	r3, #4
 8009a50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3b04      	subs	r3, #4
 8009a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	f023 0201 	bic.w	r2, r3, #1
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	3b04      	subs	r3, #4
 8009a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a70:	4a0c      	ldr	r2, [pc, #48]	@ (8009aa4 <pxPortInitialiseStack+0x64>)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3b14      	subs	r3, #20
 8009a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	3b04      	subs	r3, #4
 8009a86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f06f 0202 	mvn.w	r2, #2
 8009a8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	3b20      	subs	r3, #32
 8009a94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a96:	68fb      	ldr	r3, [r7, #12]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3714      	adds	r7, #20
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr
 8009aa4:	08009aa9 	.word	0x08009aa9

08009aa8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ab2:	4b13      	ldr	r3, [pc, #76]	@ (8009b00 <prvTaskExitError+0x58>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aba:	d00b      	beq.n	8009ad4 <prvTaskExitError+0x2c>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	60fb      	str	r3, [r7, #12]
}
 8009ace:	bf00      	nop
 8009ad0:	bf00      	nop
 8009ad2:	e7fd      	b.n	8009ad0 <prvTaskExitError+0x28>
	__asm volatile
 8009ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad8:	f383 8811 	msr	BASEPRI, r3
 8009adc:	f3bf 8f6f 	isb	sy
 8009ae0:	f3bf 8f4f 	dsb	sy
 8009ae4:	60bb      	str	r3, [r7, #8]
}
 8009ae6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ae8:	bf00      	nop
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0fc      	beq.n	8009aea <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	3714      	adds	r7, #20
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop
 8009b00:	2004000c 	.word	0x2004000c
	...

08009b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b10:	4b07      	ldr	r3, [pc, #28]	@ (8009b30 <pxCurrentTCBConst2>)
 8009b12:	6819      	ldr	r1, [r3, #0]
 8009b14:	6808      	ldr	r0, [r1, #0]
 8009b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1a:	f380 8809 	msr	PSP, r0
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f04f 0000 	mov.w	r0, #0
 8009b26:	f380 8811 	msr	BASEPRI, r0
 8009b2a:	4770      	bx	lr
 8009b2c:	f3af 8000 	nop.w

08009b30 <pxCurrentTCBConst2>:
 8009b30:	20040f90 	.word	0x20040f90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b34:	bf00      	nop
 8009b36:	bf00      	nop

08009b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b38:	4808      	ldr	r0, [pc, #32]	@ (8009b5c <prvPortStartFirstTask+0x24>)
 8009b3a:	6800      	ldr	r0, [r0, #0]
 8009b3c:	6800      	ldr	r0, [r0, #0]
 8009b3e:	f380 8808 	msr	MSP, r0
 8009b42:	f04f 0000 	mov.w	r0, #0
 8009b46:	f380 8814 	msr	CONTROL, r0
 8009b4a:	b662      	cpsie	i
 8009b4c:	b661      	cpsie	f
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	f3bf 8f6f 	isb	sy
 8009b56:	df00      	svc	0
 8009b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b5a:	bf00      	nop
 8009b5c:	e000ed08 	.word	0xe000ed08

08009b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b66:	4b47      	ldr	r3, [pc, #284]	@ (8009c84 <xPortStartScheduler+0x124>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a47      	ldr	r2, [pc, #284]	@ (8009c88 <xPortStartScheduler+0x128>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d10b      	bne.n	8009b88 <xPortStartScheduler+0x28>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	613b      	str	r3, [r7, #16]
}
 8009b82:	bf00      	nop
 8009b84:	bf00      	nop
 8009b86:	e7fd      	b.n	8009b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b88:	4b3e      	ldr	r3, [pc, #248]	@ (8009c84 <xPortStartScheduler+0x124>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a3f      	ldr	r2, [pc, #252]	@ (8009c8c <xPortStartScheduler+0x12c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d10b      	bne.n	8009baa <xPortStartScheduler+0x4a>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	60fb      	str	r3, [r7, #12]
}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop
 8009ba8:	e7fd      	b.n	8009ba6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009baa:	4b39      	ldr	r3, [pc, #228]	@ (8009c90 <xPortStartScheduler+0x130>)
 8009bac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	22ff      	movs	r2, #255	@ 0xff
 8009bba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bc4:	78fb      	ldrb	r3, [r7, #3]
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009bcc:	b2da      	uxtb	r2, r3
 8009bce:	4b31      	ldr	r3, [pc, #196]	@ (8009c94 <xPortStartScheduler+0x134>)
 8009bd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bd2:	4b31      	ldr	r3, [pc, #196]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009bd4:	2207      	movs	r2, #7
 8009bd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bd8:	e009      	b.n	8009bee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009bda:	4b2f      	ldr	r3, [pc, #188]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	4a2d      	ldr	r2, [pc, #180]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009be2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009be4:	78fb      	ldrb	r3, [r7, #3]
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bf6:	2b80      	cmp	r3, #128	@ 0x80
 8009bf8:	d0ef      	beq.n	8009bda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009bfa:	4b27      	ldr	r3, [pc, #156]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f1c3 0307 	rsb	r3, r3, #7
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d00b      	beq.n	8009c1e <xPortStartScheduler+0xbe>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	60bb      	str	r3, [r7, #8]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	4a1c      	ldr	r2, [pc, #112]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009c26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c28:	4b1b      	ldr	r3, [pc, #108]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009c30:	4a19      	ldr	r2, [pc, #100]	@ (8009c98 <xPortStartScheduler+0x138>)
 8009c32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	b2da      	uxtb	r2, r3
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c3c:	4b17      	ldr	r3, [pc, #92]	@ (8009c9c <xPortStartScheduler+0x13c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a16      	ldr	r2, [pc, #88]	@ (8009c9c <xPortStartScheduler+0x13c>)
 8009c42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009c46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c48:	4b14      	ldr	r3, [pc, #80]	@ (8009c9c <xPortStartScheduler+0x13c>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a13      	ldr	r2, [pc, #76]	@ (8009c9c <xPortStartScheduler+0x13c>)
 8009c4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009c52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c54:	f000 f8da 	bl	8009e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c58:	4b11      	ldr	r3, [pc, #68]	@ (8009ca0 <xPortStartScheduler+0x140>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c5e:	f000 f8f9 	bl	8009e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c62:	4b10      	ldr	r3, [pc, #64]	@ (8009ca4 <xPortStartScheduler+0x144>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a0f      	ldr	r2, [pc, #60]	@ (8009ca4 <xPortStartScheduler+0x144>)
 8009c68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009c6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c6e:	f7ff ff63 	bl	8009b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c72:	f7fe ff2b 	bl	8008acc <vTaskSwitchContext>
	prvTaskExitError();
 8009c76:	f7ff ff17 	bl	8009aa8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	e000ed00 	.word	0xe000ed00
 8009c88:	410fc271 	.word	0x410fc271
 8009c8c:	410fc270 	.word	0x410fc270
 8009c90:	e000e400 	.word	0xe000e400
 8009c94:	200415bc 	.word	0x200415bc
 8009c98:	200415c0 	.word	0x200415c0
 8009c9c:	e000ed20 	.word	0xe000ed20
 8009ca0:	2004000c 	.word	0x2004000c
 8009ca4:	e000ef34 	.word	0xe000ef34

08009ca8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	607b      	str	r3, [r7, #4]
}
 8009cc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009cc2:	4b10      	ldr	r3, [pc, #64]	@ (8009d04 <vPortEnterCritical+0x5c>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8009d04 <vPortEnterCritical+0x5c>)
 8009cca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ccc:	4b0d      	ldr	r3, [pc, #52]	@ (8009d04 <vPortEnterCritical+0x5c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d110      	bne.n	8009cf6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d08 <vPortEnterCritical+0x60>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00b      	beq.n	8009cf6 <vPortEnterCritical+0x4e>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	603b      	str	r3, [r7, #0]
}
 8009cf0:	bf00      	nop
 8009cf2:	bf00      	nop
 8009cf4:	e7fd      	b.n	8009cf2 <vPortEnterCritical+0x4a>
	}
}
 8009cf6:	bf00      	nop
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	2004000c 	.word	0x2004000c
 8009d08:	e000ed04 	.word	0xe000ed04

08009d0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009d12:	4b12      	ldr	r3, [pc, #72]	@ (8009d5c <vPortExitCritical+0x50>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d10b      	bne.n	8009d32 <vPortExitCritical+0x26>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	607b      	str	r3, [r7, #4]
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	e7fd      	b.n	8009d2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d32:	4b0a      	ldr	r3, [pc, #40]	@ (8009d5c <vPortExitCritical+0x50>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3b01      	subs	r3, #1
 8009d38:	4a08      	ldr	r2, [pc, #32]	@ (8009d5c <vPortExitCritical+0x50>)
 8009d3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d3c:	4b07      	ldr	r3, [pc, #28]	@ (8009d5c <vPortExitCritical+0x50>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d105      	bne.n	8009d50 <vPortExitCritical+0x44>
 8009d44:	2300      	movs	r3, #0
 8009d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	f383 8811 	msr	BASEPRI, r3
}
 8009d4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	2004000c 	.word	0x2004000c

08009d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d60:	f3ef 8009 	mrs	r0, PSP
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	4b15      	ldr	r3, [pc, #84]	@ (8009dc0 <pxCurrentTCBConst>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	f01e 0f10 	tst.w	lr, #16
 8009d70:	bf08      	it	eq
 8009d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d7a:	6010      	str	r0, [r2, #0]
 8009d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009d84:	f380 8811 	msr	BASEPRI, r0
 8009d88:	f3bf 8f4f 	dsb	sy
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f7fe fe9c 	bl	8008acc <vTaskSwitchContext>
 8009d94:	f04f 0000 	mov.w	r0, #0
 8009d98:	f380 8811 	msr	BASEPRI, r0
 8009d9c:	bc09      	pop	{r0, r3}
 8009d9e:	6819      	ldr	r1, [r3, #0]
 8009da0:	6808      	ldr	r0, [r1, #0]
 8009da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da6:	f01e 0f10 	tst.w	lr, #16
 8009daa:	bf08      	it	eq
 8009dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009db0:	f380 8809 	msr	PSP, r0
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop
 8009dbc:	f3af 8000 	nop.w

08009dc0 <pxCurrentTCBConst>:
 8009dc0:	20040f90 	.word	0x20040f90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop

08009dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	607b      	str	r3, [r7, #4]
}
 8009de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009de2:	f7fe fdb9 	bl	8008958 <xTaskIncrementTick>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dec:	4b06      	ldr	r3, [pc, #24]	@ (8009e08 <xPortSysTickHandler+0x40>)
 8009dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	2300      	movs	r3, #0
 8009df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	f383 8811 	msr	BASEPRI, r3
}
 8009dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009e00:	bf00      	nop
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	e000ed04 	.word	0xe000ed04

08009e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e10:	4b0b      	ldr	r3, [pc, #44]	@ (8009e40 <vPortSetupTimerInterrupt+0x34>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e16:	4b0b      	ldr	r3, [pc, #44]	@ (8009e44 <vPortSetupTimerInterrupt+0x38>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e48 <vPortSetupTimerInterrupt+0x3c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a0a      	ldr	r2, [pc, #40]	@ (8009e4c <vPortSetupTimerInterrupt+0x40>)
 8009e22:	fba2 2303 	umull	r2, r3, r2, r3
 8009e26:	099b      	lsrs	r3, r3, #6
 8009e28:	4a09      	ldr	r2, [pc, #36]	@ (8009e50 <vPortSetupTimerInterrupt+0x44>)
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e2e:	4b04      	ldr	r3, [pc, #16]	@ (8009e40 <vPortSetupTimerInterrupt+0x34>)
 8009e30:	2207      	movs	r2, #7
 8009e32:	601a      	str	r2, [r3, #0]
}
 8009e34:	bf00      	nop
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	e000e010 	.word	0xe000e010
 8009e44:	e000e018 	.word	0xe000e018
 8009e48:	20040000 	.word	0x20040000
 8009e4c:	10624dd3 	.word	0x10624dd3
 8009e50:	e000e014 	.word	0xe000e014

08009e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009e64 <vPortEnableVFP+0x10>
 8009e58:	6801      	ldr	r1, [r0, #0]
 8009e5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009e5e:	6001      	str	r1, [r0, #0]
 8009e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e62:	bf00      	nop
 8009e64:	e000ed88 	.word	0xe000ed88

08009e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e6e:	f3ef 8305 	mrs	r3, IPSR
 8009e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b0f      	cmp	r3, #15
 8009e78:	d915      	bls.n	8009ea6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e7a:	4a18      	ldr	r2, [pc, #96]	@ (8009edc <vPortValidateInterruptPriority+0x74>)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4413      	add	r3, r2
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e84:	4b16      	ldr	r3, [pc, #88]	@ (8009ee0 <vPortValidateInterruptPriority+0x78>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	7afa      	ldrb	r2, [r7, #11]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d20b      	bcs.n	8009ea6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	607b      	str	r3, [r7, #4]
}
 8009ea0:	bf00      	nop
 8009ea2:	bf00      	nop
 8009ea4:	e7fd      	b.n	8009ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ee4 <vPortValidateInterruptPriority+0x7c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009eae:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee8 <vPortValidateInterruptPriority+0x80>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d90b      	bls.n	8009ece <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eba:	f383 8811 	msr	BASEPRI, r3
 8009ebe:	f3bf 8f6f 	isb	sy
 8009ec2:	f3bf 8f4f 	dsb	sy
 8009ec6:	603b      	str	r3, [r7, #0]
}
 8009ec8:	bf00      	nop
 8009eca:	bf00      	nop
 8009ecc:	e7fd      	b.n	8009eca <vPortValidateInterruptPriority+0x62>
	}
 8009ece:	bf00      	nop
 8009ed0:	3714      	adds	r7, #20
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	e000e3f0 	.word	0xe000e3f0
 8009ee0:	200415bc 	.word	0x200415bc
 8009ee4:	e000ed0c 	.word	0xe000ed0c
 8009ee8:	200415c0 	.word	0x200415c0

08009eec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08a      	sub	sp, #40	@ 0x28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ef8:	f7fe fc72 	bl	80087e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009efc:	4b5c      	ldr	r3, [pc, #368]	@ (800a070 <pvPortMalloc+0x184>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009f04:	f000 f924 	bl	800a150 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f08:	4b5a      	ldr	r3, [pc, #360]	@ (800a074 <pvPortMalloc+0x188>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f040 8095 	bne.w	800a040 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01e      	beq.n	8009f5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009f1c:	2208      	movs	r2, #8
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4413      	add	r3, r2
 8009f22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f003 0307 	and.w	r3, r3, #7
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d015      	beq.n	8009f5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f023 0307 	bic.w	r3, r3, #7
 8009f34:	3308      	adds	r3, #8
 8009f36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f003 0307 	and.w	r3, r3, #7
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <pvPortMalloc+0x6e>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	617b      	str	r3, [r7, #20]
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	e7fd      	b.n	8009f56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d06f      	beq.n	800a040 <pvPortMalloc+0x154>
 8009f60:	4b45      	ldr	r3, [pc, #276]	@ (800a078 <pvPortMalloc+0x18c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d86a      	bhi.n	800a040 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f6a:	4b44      	ldr	r3, [pc, #272]	@ (800a07c <pvPortMalloc+0x190>)
 8009f6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f6e:	4b43      	ldr	r3, [pc, #268]	@ (800a07c <pvPortMalloc+0x190>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f74:	e004      	b.n	8009f80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d903      	bls.n	8009f92 <pvPortMalloc+0xa6>
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1f1      	bne.n	8009f76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f92:	4b37      	ldr	r3, [pc, #220]	@ (800a070 <pvPortMalloc+0x184>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d051      	beq.n	800a040 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2208      	movs	r2, #8
 8009fa2:	4413      	add	r3, r2
 8009fa4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	1ad2      	subs	r2, r2, r3
 8009fb6:	2308      	movs	r3, #8
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d920      	bls.n	800a000 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	f003 0307 	and.w	r3, r3, #7
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00b      	beq.n	8009fe8 <pvPortMalloc+0xfc>
	__asm volatile
 8009fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd4:	f383 8811 	msr	BASEPRI, r3
 8009fd8:	f3bf 8f6f 	isb	sy
 8009fdc:	f3bf 8f4f 	dsb	sy
 8009fe0:	613b      	str	r3, [r7, #16]
}
 8009fe2:	bf00      	nop
 8009fe4:	bf00      	nop
 8009fe6:	e7fd      	b.n	8009fe4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fea:	685a      	ldr	r2, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	1ad2      	subs	r2, r2, r3
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ffa:	69b8      	ldr	r0, [r7, #24]
 8009ffc:	f000 f90a 	bl	800a214 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a000:	4b1d      	ldr	r3, [pc, #116]	@ (800a078 <pvPortMalloc+0x18c>)
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	4a1b      	ldr	r2, [pc, #108]	@ (800a078 <pvPortMalloc+0x18c>)
 800a00c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a00e:	4b1a      	ldr	r3, [pc, #104]	@ (800a078 <pvPortMalloc+0x18c>)
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	4b1b      	ldr	r3, [pc, #108]	@ (800a080 <pvPortMalloc+0x194>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	429a      	cmp	r2, r3
 800a018:	d203      	bcs.n	800a022 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a01a:	4b17      	ldr	r3, [pc, #92]	@ (800a078 <pvPortMalloc+0x18c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a18      	ldr	r2, [pc, #96]	@ (800a080 <pvPortMalloc+0x194>)
 800a020:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a024:	685a      	ldr	r2, [r3, #4]
 800a026:	4b13      	ldr	r3, [pc, #76]	@ (800a074 <pvPortMalloc+0x188>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	431a      	orrs	r2, r3
 800a02c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a036:	4b13      	ldr	r3, [pc, #76]	@ (800a084 <pvPortMalloc+0x198>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	3301      	adds	r3, #1
 800a03c:	4a11      	ldr	r2, [pc, #68]	@ (800a084 <pvPortMalloc+0x198>)
 800a03e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a040:	f7fe fbdc 	bl	80087fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00b      	beq.n	800a066 <pvPortMalloc+0x17a>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	60fb      	str	r3, [r7, #12]
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	e7fd      	b.n	800a062 <pvPortMalloc+0x176>
	return pvReturn;
 800a066:	69fb      	ldr	r3, [r7, #28]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3728      	adds	r7, #40	@ 0x28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}
 800a070:	20042184 	.word	0x20042184
 800a074:	20042198 	.word	0x20042198
 800a078:	20042188 	.word	0x20042188
 800a07c:	2004217c 	.word	0x2004217c
 800a080:	2004218c 	.word	0x2004218c
 800a084:	20042190 	.word	0x20042190

0800a088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d04f      	beq.n	800a13a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a09a:	2308      	movs	r3, #8
 800a09c:	425b      	negs	r3, r3
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	4b25      	ldr	r3, [pc, #148]	@ (800a144 <vPortFree+0xbc>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10b      	bne.n	800a0ce <vPortFree+0x46>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	60fb      	str	r3, [r7, #12]
}
 800a0c8:	bf00      	nop
 800a0ca:	bf00      	nop
 800a0cc:	e7fd      	b.n	800a0ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00b      	beq.n	800a0ee <vPortFree+0x66>
	__asm volatile
 800a0d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0da:	f383 8811 	msr	BASEPRI, r3
 800a0de:	f3bf 8f6f 	isb	sy
 800a0e2:	f3bf 8f4f 	dsb	sy
 800a0e6:	60bb      	str	r3, [r7, #8]
}
 800a0e8:	bf00      	nop
 800a0ea:	bf00      	nop
 800a0ec:	e7fd      	b.n	800a0ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	685a      	ldr	r2, [r3, #4]
 800a0f2:	4b14      	ldr	r3, [pc, #80]	@ (800a144 <vPortFree+0xbc>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d01e      	beq.n	800a13a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d11a      	bne.n	800a13a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	4b0e      	ldr	r3, [pc, #56]	@ (800a144 <vPortFree+0xbc>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	43db      	mvns	r3, r3
 800a10e:	401a      	ands	r2, r3
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a114:	f7fe fb64 	bl	80087e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	4b0a      	ldr	r3, [pc, #40]	@ (800a148 <vPortFree+0xc0>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4413      	add	r3, r2
 800a122:	4a09      	ldr	r2, [pc, #36]	@ (800a148 <vPortFree+0xc0>)
 800a124:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a126:	6938      	ldr	r0, [r7, #16]
 800a128:	f000 f874 	bl	800a214 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a12c:	4b07      	ldr	r3, [pc, #28]	@ (800a14c <vPortFree+0xc4>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3301      	adds	r3, #1
 800a132:	4a06      	ldr	r2, [pc, #24]	@ (800a14c <vPortFree+0xc4>)
 800a134:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a136:	f7fe fb61 	bl	80087fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a13a:	bf00      	nop
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20042198 	.word	0x20042198
 800a148:	20042188 	.word	0x20042188
 800a14c:	20042194 	.word	0x20042194

0800a150 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a156:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a15a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a15c:	4b27      	ldr	r3, [pc, #156]	@ (800a1fc <prvHeapInit+0xac>)
 800a15e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f003 0307 	and.w	r3, r3, #7
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00c      	beq.n	800a184 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	3307      	adds	r3, #7
 800a16e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f023 0307 	bic.w	r3, r3, #7
 800a176:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	4a1f      	ldr	r2, [pc, #124]	@ (800a1fc <prvHeapInit+0xac>)
 800a180:	4413      	add	r3, r2
 800a182:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a188:	4a1d      	ldr	r2, [pc, #116]	@ (800a200 <prvHeapInit+0xb0>)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a18e:	4b1c      	ldr	r3, [pc, #112]	@ (800a200 <prvHeapInit+0xb0>)
 800a190:	2200      	movs	r2, #0
 800a192:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	4413      	add	r3, r2
 800a19a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a19c:	2208      	movs	r2, #8
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	1a9b      	subs	r3, r3, r2
 800a1a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f023 0307 	bic.w	r3, r3, #7
 800a1aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4a15      	ldr	r2, [pc, #84]	@ (800a204 <prvHeapInit+0xb4>)
 800a1b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a1b2:	4b14      	ldr	r3, [pc, #80]	@ (800a204 <prvHeapInit+0xb4>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a1ba:	4b12      	ldr	r3, [pc, #72]	@ (800a204 <prvHeapInit+0xb4>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	1ad2      	subs	r2, r2, r3
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a204 <prvHeapInit+0xb4>)
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	4a0a      	ldr	r2, [pc, #40]	@ (800a208 <prvHeapInit+0xb8>)
 800a1de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	4a09      	ldr	r2, [pc, #36]	@ (800a20c <prvHeapInit+0xbc>)
 800a1e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1e8:	4b09      	ldr	r3, [pc, #36]	@ (800a210 <prvHeapInit+0xc0>)
 800a1ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a1ee:	601a      	str	r2, [r3, #0]
}
 800a1f0:	bf00      	nop
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	200415c4 	.word	0x200415c4
 800a200:	2004217c 	.word	0x2004217c
 800a204:	20042184 	.word	0x20042184
 800a208:	2004218c 	.word	0x2004218c
 800a20c:	20042188 	.word	0x20042188
 800a210:	20042198 	.word	0x20042198

0800a214 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a21c:	4b28      	ldr	r3, [pc, #160]	@ (800a2c0 <prvInsertBlockIntoFreeList+0xac>)
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	e002      	b.n	800a228 <prvInsertBlockIntoFreeList+0x14>
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	60fb      	str	r3, [r7, #12]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d8f7      	bhi.n	800a222 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	4413      	add	r3, r2
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	429a      	cmp	r2, r3
 800a242:	d108      	bne.n	800a256 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	441a      	add	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	441a      	add	r2, r3
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d118      	bne.n	800a29c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	4b15      	ldr	r3, [pc, #84]	@ (800a2c4 <prvInsertBlockIntoFreeList+0xb0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	429a      	cmp	r2, r3
 800a274:	d00d      	beq.n	800a292 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	685a      	ldr	r2, [r3, #4]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	441a      	add	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	e008      	b.n	800a2a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a292:	4b0c      	ldr	r3, [pc, #48]	@ (800a2c4 <prvInsertBlockIntoFreeList+0xb0>)
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	601a      	str	r2, [r3, #0]
 800a29a:	e003      	b.n	800a2a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d002      	beq.n	800a2b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2b2:	bf00      	nop
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	2004217c 	.word	0x2004217c
 800a2c4:	20042184 	.word	0x20042184

0800a2c8 <memset>:
 800a2c8:	4402      	add	r2, r0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d100      	bne.n	800a2d2 <memset+0xa>
 800a2d0:	4770      	bx	lr
 800a2d2:	f803 1b01 	strb.w	r1, [r3], #1
 800a2d6:	e7f9      	b.n	800a2cc <memset+0x4>

0800a2d8 <_reclaim_reent>:
 800a2d8:	4b29      	ldr	r3, [pc, #164]	@ (800a380 <_reclaim_reent+0xa8>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4283      	cmp	r3, r0
 800a2de:	b570      	push	{r4, r5, r6, lr}
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	d04b      	beq.n	800a37c <_reclaim_reent+0xa4>
 800a2e4:	69c3      	ldr	r3, [r0, #28]
 800a2e6:	b1ab      	cbz	r3, 800a314 <_reclaim_reent+0x3c>
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	b16b      	cbz	r3, 800a308 <_reclaim_reent+0x30>
 800a2ec:	2500      	movs	r5, #0
 800a2ee:	69e3      	ldr	r3, [r4, #28]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	5959      	ldr	r1, [r3, r5]
 800a2f4:	2900      	cmp	r1, #0
 800a2f6:	d13b      	bne.n	800a370 <_reclaim_reent+0x98>
 800a2f8:	3504      	adds	r5, #4
 800a2fa:	2d80      	cmp	r5, #128	@ 0x80
 800a2fc:	d1f7      	bne.n	800a2ee <_reclaim_reent+0x16>
 800a2fe:	69e3      	ldr	r3, [r4, #28]
 800a300:	4620      	mov	r0, r4
 800a302:	68d9      	ldr	r1, [r3, #12]
 800a304:	f000 f872 	bl	800a3ec <_free_r>
 800a308:	69e3      	ldr	r3, [r4, #28]
 800a30a:	6819      	ldr	r1, [r3, #0]
 800a30c:	b111      	cbz	r1, 800a314 <_reclaim_reent+0x3c>
 800a30e:	4620      	mov	r0, r4
 800a310:	f000 f86c 	bl	800a3ec <_free_r>
 800a314:	6961      	ldr	r1, [r4, #20]
 800a316:	b111      	cbz	r1, 800a31e <_reclaim_reent+0x46>
 800a318:	4620      	mov	r0, r4
 800a31a:	f000 f867 	bl	800a3ec <_free_r>
 800a31e:	69e1      	ldr	r1, [r4, #28]
 800a320:	b111      	cbz	r1, 800a328 <_reclaim_reent+0x50>
 800a322:	4620      	mov	r0, r4
 800a324:	f000 f862 	bl	800a3ec <_free_r>
 800a328:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a32a:	b111      	cbz	r1, 800a332 <_reclaim_reent+0x5a>
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 f85d 	bl	800a3ec <_free_r>
 800a332:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a334:	b111      	cbz	r1, 800a33c <_reclaim_reent+0x64>
 800a336:	4620      	mov	r0, r4
 800a338:	f000 f858 	bl	800a3ec <_free_r>
 800a33c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a33e:	b111      	cbz	r1, 800a346 <_reclaim_reent+0x6e>
 800a340:	4620      	mov	r0, r4
 800a342:	f000 f853 	bl	800a3ec <_free_r>
 800a346:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a348:	b111      	cbz	r1, 800a350 <_reclaim_reent+0x78>
 800a34a:	4620      	mov	r0, r4
 800a34c:	f000 f84e 	bl	800a3ec <_free_r>
 800a350:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a352:	b111      	cbz	r1, 800a35a <_reclaim_reent+0x82>
 800a354:	4620      	mov	r0, r4
 800a356:	f000 f849 	bl	800a3ec <_free_r>
 800a35a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a35c:	b111      	cbz	r1, 800a364 <_reclaim_reent+0x8c>
 800a35e:	4620      	mov	r0, r4
 800a360:	f000 f844 	bl	800a3ec <_free_r>
 800a364:	6a23      	ldr	r3, [r4, #32]
 800a366:	b14b      	cbz	r3, 800a37c <_reclaim_reent+0xa4>
 800a368:	4620      	mov	r0, r4
 800a36a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a36e:	4718      	bx	r3
 800a370:	680e      	ldr	r6, [r1, #0]
 800a372:	4620      	mov	r0, r4
 800a374:	f000 f83a 	bl	800a3ec <_free_r>
 800a378:	4631      	mov	r1, r6
 800a37a:	e7bb      	b.n	800a2f4 <_reclaim_reent+0x1c>
 800a37c:	bd70      	pop	{r4, r5, r6, pc}
 800a37e:	bf00      	nop
 800a380:	20040010 	.word	0x20040010

0800a384 <__libc_init_array>:
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	4d0d      	ldr	r5, [pc, #52]	@ (800a3bc <__libc_init_array+0x38>)
 800a388:	4c0d      	ldr	r4, [pc, #52]	@ (800a3c0 <__libc_init_array+0x3c>)
 800a38a:	1b64      	subs	r4, r4, r5
 800a38c:	10a4      	asrs	r4, r4, #2
 800a38e:	2600      	movs	r6, #0
 800a390:	42a6      	cmp	r6, r4
 800a392:	d109      	bne.n	800a3a8 <__libc_init_array+0x24>
 800a394:	4d0b      	ldr	r5, [pc, #44]	@ (800a3c4 <__libc_init_array+0x40>)
 800a396:	4c0c      	ldr	r4, [pc, #48]	@ (800a3c8 <__libc_init_array+0x44>)
 800a398:	f000 f87e 	bl	800a498 <_init>
 800a39c:	1b64      	subs	r4, r4, r5
 800a39e:	10a4      	asrs	r4, r4, #2
 800a3a0:	2600      	movs	r6, #0
 800a3a2:	42a6      	cmp	r6, r4
 800a3a4:	d105      	bne.n	800a3b2 <__libc_init_array+0x2e>
 800a3a6:	bd70      	pop	{r4, r5, r6, pc}
 800a3a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ac:	4798      	blx	r3
 800a3ae:	3601      	adds	r6, #1
 800a3b0:	e7ee      	b.n	800a390 <__libc_init_array+0xc>
 800a3b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3b6:	4798      	blx	r3
 800a3b8:	3601      	adds	r6, #1
 800a3ba:	e7f2      	b.n	800a3a2 <__libc_init_array+0x1e>
 800a3bc:	0800a58c 	.word	0x0800a58c
 800a3c0:	0800a58c 	.word	0x0800a58c
 800a3c4:	0800a58c 	.word	0x0800a58c
 800a3c8:	0800a590 	.word	0x0800a590

0800a3cc <__retarget_lock_acquire_recursive>:
 800a3cc:	4770      	bx	lr

0800a3ce <__retarget_lock_release_recursive>:
 800a3ce:	4770      	bx	lr

0800a3d0 <memcpy>:
 800a3d0:	440a      	add	r2, r1
 800a3d2:	4291      	cmp	r1, r2
 800a3d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3d8:	d100      	bne.n	800a3dc <memcpy+0xc>
 800a3da:	4770      	bx	lr
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3e6:	4291      	cmp	r1, r2
 800a3e8:	d1f9      	bne.n	800a3de <memcpy+0xe>
 800a3ea:	bd10      	pop	{r4, pc}

0800a3ec <_free_r>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	2900      	cmp	r1, #0
 800a3f2:	d041      	beq.n	800a478 <_free_r+0x8c>
 800a3f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3f8:	1f0c      	subs	r4, r1, #4
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bfb8      	it	lt
 800a3fe:	18e4      	addlt	r4, r4, r3
 800a400:	f000 f83e 	bl	800a480 <__malloc_lock>
 800a404:	4a1d      	ldr	r2, [pc, #116]	@ (800a47c <_free_r+0x90>)
 800a406:	6813      	ldr	r3, [r2, #0]
 800a408:	b933      	cbnz	r3, 800a418 <_free_r+0x2c>
 800a40a:	6063      	str	r3, [r4, #4]
 800a40c:	6014      	str	r4, [r2, #0]
 800a40e:	4628      	mov	r0, r5
 800a410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a414:	f000 b83a 	b.w	800a48c <__malloc_unlock>
 800a418:	42a3      	cmp	r3, r4
 800a41a:	d908      	bls.n	800a42e <_free_r+0x42>
 800a41c:	6820      	ldr	r0, [r4, #0]
 800a41e:	1821      	adds	r1, r4, r0
 800a420:	428b      	cmp	r3, r1
 800a422:	bf01      	itttt	eq
 800a424:	6819      	ldreq	r1, [r3, #0]
 800a426:	685b      	ldreq	r3, [r3, #4]
 800a428:	1809      	addeq	r1, r1, r0
 800a42a:	6021      	streq	r1, [r4, #0]
 800a42c:	e7ed      	b.n	800a40a <_free_r+0x1e>
 800a42e:	461a      	mov	r2, r3
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	b10b      	cbz	r3, 800a438 <_free_r+0x4c>
 800a434:	42a3      	cmp	r3, r4
 800a436:	d9fa      	bls.n	800a42e <_free_r+0x42>
 800a438:	6811      	ldr	r1, [r2, #0]
 800a43a:	1850      	adds	r0, r2, r1
 800a43c:	42a0      	cmp	r0, r4
 800a43e:	d10b      	bne.n	800a458 <_free_r+0x6c>
 800a440:	6820      	ldr	r0, [r4, #0]
 800a442:	4401      	add	r1, r0
 800a444:	1850      	adds	r0, r2, r1
 800a446:	4283      	cmp	r3, r0
 800a448:	6011      	str	r1, [r2, #0]
 800a44a:	d1e0      	bne.n	800a40e <_free_r+0x22>
 800a44c:	6818      	ldr	r0, [r3, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	6053      	str	r3, [r2, #4]
 800a452:	4408      	add	r0, r1
 800a454:	6010      	str	r0, [r2, #0]
 800a456:	e7da      	b.n	800a40e <_free_r+0x22>
 800a458:	d902      	bls.n	800a460 <_free_r+0x74>
 800a45a:	230c      	movs	r3, #12
 800a45c:	602b      	str	r3, [r5, #0]
 800a45e:	e7d6      	b.n	800a40e <_free_r+0x22>
 800a460:	6820      	ldr	r0, [r4, #0]
 800a462:	1821      	adds	r1, r4, r0
 800a464:	428b      	cmp	r3, r1
 800a466:	bf04      	itt	eq
 800a468:	6819      	ldreq	r1, [r3, #0]
 800a46a:	685b      	ldreq	r3, [r3, #4]
 800a46c:	6063      	str	r3, [r4, #4]
 800a46e:	bf04      	itt	eq
 800a470:	1809      	addeq	r1, r1, r0
 800a472:	6021      	streq	r1, [r4, #0]
 800a474:	6054      	str	r4, [r2, #4]
 800a476:	e7ca      	b.n	800a40e <_free_r+0x22>
 800a478:	bd38      	pop	{r3, r4, r5, pc}
 800a47a:	bf00      	nop
 800a47c:	200422d8 	.word	0x200422d8

0800a480 <__malloc_lock>:
 800a480:	4801      	ldr	r0, [pc, #4]	@ (800a488 <__malloc_lock+0x8>)
 800a482:	f7ff bfa3 	b.w	800a3cc <__retarget_lock_acquire_recursive>
 800a486:	bf00      	nop
 800a488:	200422d4 	.word	0x200422d4

0800a48c <__malloc_unlock>:
 800a48c:	4801      	ldr	r0, [pc, #4]	@ (800a494 <__malloc_unlock+0x8>)
 800a48e:	f7ff bf9e 	b.w	800a3ce <__retarget_lock_release_recursive>
 800a492:	bf00      	nop
 800a494:	200422d4 	.word	0x200422d4

0800a498 <_init>:
 800a498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49a:	bf00      	nop
 800a49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49e:	bc08      	pop	{r3}
 800a4a0:	469e      	mov	lr, r3
 800a4a2:	4770      	bx	lr

0800a4a4 <_fini>:
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a6:	bf00      	nop
 800a4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4aa:	bc08      	pop	{r3}
 800a4ac:	469e      	mov	lr, r3
 800a4ae:	4770      	bx	lr
