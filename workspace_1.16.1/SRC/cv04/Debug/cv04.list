
cv04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9e0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800bba0  0800bba0  0000cba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd84  0800bd84  0000d078  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd84  0800bd84  0000cd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd8c  0800bd8c  0000d078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd8c  0800bd8c  0000cd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd90  0800bd90  0000cd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20040000  0800bd94  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002378  20040078  0800be0c  0000d078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200423f0  0800be0c  0000d3f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028c26  00000000  00000000  0000d0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bbb  00000000  00000000  00035cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002050  00000000  00000000  0003a890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001912  00000000  00000000  0003c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ac0  00000000  00000000  0003e1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024945  00000000  00000000  00042cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001273bc  00000000  00000000  000675f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e9b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000901c  00000000  00000000  0018e9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00197a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040078 	.word	0x20040078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bb88 	.word	0x0800bb88

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2004007c 	.word	0x2004007c
 80001fc:	0800bb88 	.word	0x0800bb88

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2uiz>:
 8000aac:	004a      	lsls	r2, r1, #1
 8000aae:	d211      	bcs.n	8000ad4 <__aeabi_d2uiz+0x28>
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab4:	d211      	bcs.n	8000ada <__aeabi_d2uiz+0x2e>
 8000ab6:	d50d      	bpl.n	8000ad4 <__aeabi_d2uiz+0x28>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d40e      	bmi.n	8000ae0 <__aeabi_d2uiz+0x34>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ade:	d102      	bne.n	8000ae6 <__aeabi_d2uiz+0x3a>
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	4770      	bx	lr
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	4770      	bx	lr

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96a 	b.w	8000dd8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fa1f f68c 	uxth.w	r6, ip
 8000b52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b72:	f080 8112 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810f 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fa1f f38e 	uxth.w	r3, lr
 8000b86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb00 f606 	mul.w	r6, r0, r6
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba2:	f080 80fc 	bcs.w	8000d9e <__udivmoddi4+0x282>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f9 	bls.w	8000d9e <__udivmoddi4+0x282>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80f0 	bcc.w	8000dc8 <__udivmoddi4+0x2ac>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 8090 	bne.w	8000d20 <__udivmoddi4+0x204>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa1f f78c 	uxth.w	r7, ip
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1e:	fb07 f006 	mul.w	r0, r7, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cd 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c42:	fb08 4410 	mls	r4, r8, r0, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb00 f707 	mul.w	r7, r0, r7
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80b0 	bhi.w	8000dc2 <__udivmoddi4+0x2a6>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0620 	rsb	r6, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 f706 	lsr.w	r7, r2, r6
 8000c76:	431f      	orrs	r7, r3
 8000c78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c80:	ea43 030c 	orr.w	r3, r3, ip
 8000c84:	40f4      	lsrs	r4, r6
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	0c38      	lsrs	r0, r7, #16
 8000c8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c90:	fbb4 fef0 	udiv	lr, r4, r0
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	fb00 441e 	mls	r4, r0, lr, r4
 8000c9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb2:	f080 8084 	bcs.w	8000dbe <__udivmoddi4+0x2a2>
 8000cb6:	45a1      	cmp	r9, r4
 8000cb8:	f240 8081 	bls.w	8000dbe <__udivmoddi4+0x2a2>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	eba4 0409 	sub.w	r4, r4, r9
 8000cc6:	fa1f f983 	uxth.w	r9, r3
 8000cca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cce:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x1d2>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce4:	d267      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000ce6:	45a4      	cmp	ip, r4
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cf6:	eba4 040c 	sub.w	r4, r4, ip
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	d351      	bcc.n	8000da6 <__udivmoddi4+0x28a>
 8000d02:	d04e      	beq.n	8000da2 <__udivmoddi4+0x286>
 8000d04:	b155      	cbz	r5, 8000d1c <__udivmoddi4+0x200>
 8000d06:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	431e      	orrs	r6, r3
 8000d16:	40cc      	lsrs	r4, r1
 8000d18:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e750      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f103 	lsr.w	r1, r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d30:	4094      	lsls	r4, r2
 8000d32:	430c      	orrs	r4, r1
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3110 	mls	r1, r8, r0, r3
 8000d48:	0c23      	lsrs	r3, r4, #16
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f107 	mul.w	r1, r0, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x24c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d5e:	d22c      	bcs.n	8000dba <__udivmoddi4+0x29e>
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d92a      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d70:	fb08 3311 	mls	r3, r8, r1, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb01 f307 	mul.w	r3, r1, r7
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x276>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d88:	d213      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d911      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000d8e:	3902      	subs	r1, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	1ae4      	subs	r4, r4, r3
 8000d94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d98:	e739      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e6f0      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e706      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d2ae      	bcs.n	8000d04 <__udivmoddi4+0x1e8>
 8000da6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000daa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7a8      	b.n	8000d04 <__udivmoddi4+0x1e8>
 8000db2:	4631      	mov	r1, r6
 8000db4:	e7ed      	b.n	8000d92 <__udivmoddi4+0x276>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e799      	b.n	8000cee <__udivmoddi4+0x1d2>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e7d4      	b.n	8000d68 <__udivmoddi4+0x24c>
 8000dbe:	46d6      	mov	lr, sl
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dc2:	4463      	add	r3, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e74d      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	4623      	mov	r3, r4
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e70f      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e730      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de0:	f001 f9f5 	bl	80021ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de4:	f000 f8da 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de8:	f000 fb66 	bl	80014b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000dec:	f000 f9c8 	bl	8001180 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000df0:	f000 fa14 	bl	800121c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000df4:	f000 fb32 	bl	800145c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000df8:	f000 fafa 	bl	80013f0 <MX_TIM7_Init>
  MX_ADC1_Init();
 8000dfc:	f000 f922 	bl	8001044 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e00:	f000 fa58 	bl	80012b4 <MX_TIM3_Init>
  MX_DAC1_Init();
 8000e04:	f000 f988 	bl	8001118 <MX_DAC1_Init>
  MX_TIM4_Init();
 8000e08:	f000 faa2 	bl	8001350 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ControlData.ControlError=0;
 8000e0c:	4946      	ldr	r1, [pc, #280]	@ (8000f28 <main+0x14c>)
 8000e0e:	f04f 0200 	mov.w	r2, #0
 8000e12:	f04f 0300 	mov.w	r3, #0
 8000e16:	e9c1 2306 	strd	r2, r3, [r1, #24]
  ControlData.ControlledVariable=0;
 8000e1a:	4943      	ldr	r1, [pc, #268]	@ (8000f28 <main+0x14c>)
 8000e1c:	f04f 0200 	mov.w	r2, #0
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e9c1 2302 	strd	r2, r3, [r1, #8]
  ControlData.IntegralTimeConstant=1;
 8000e28:	493f      	ldr	r1, [pc, #252]	@ (8000f28 <main+0x14c>)
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	4b3f      	ldr	r3, [pc, #252]	@ (8000f2c <main+0x150>)
 8000e30:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  ControlData.ManipulatedVariable=0;
 8000e34:	493c      	ldr	r1, [pc, #240]	@ (8000f28 <main+0x14c>)
 8000e36:	f04f 0200 	mov.w	r2, #0
 8000e3a:	f04f 0300 	mov.w	r3, #0
 8000e3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  ControlData.PropGain=2;
 8000e42:	4939      	ldr	r1, [pc, #228]	@ (8000f28 <main+0x14c>)
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e4c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ControlData.Setpoint=0;
 8000e50:	4935      	ldr	r1, [pc, #212]	@ (8000f28 <main+0x14c>)
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	e9c1 2300 	strd	r2, r3, [r1]
  HAL_TIM_Base_Start_IT(&htim3);
 8000e5e:	4834      	ldr	r0, [pc, #208]	@ (8000f30 <main+0x154>)
 8000e60:	f005 f92a 	bl	80060b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000e64:	4833      	ldr	r0, [pc, #204]	@ (8000f34 <main+0x158>)
 8000e66:	f005 f927 	bl	80060b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000e6a:	4833      	ldr	r0, [pc, #204]	@ (8000f38 <main+0x15c>)
 8000e6c:	f005 f924 	bl	80060b8 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000e70:	4832      	ldr	r0, [pc, #200]	@ (8000f3c <main+0x160>)
 8000e72:	f001 fd63 	bl	800293c <HAL_ADC_Start_IT>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000e76:	2100      	movs	r1, #0
 8000e78:	4831      	ldr	r0, [pc, #196]	@ (8000f40 <main+0x164>)
 8000e7a:	f002 fe8d 	bl	8003b98 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e7e:	f006 fec7 	bl	8007c10 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommunicationMutex */
  CommunicationMutexHandle = osMutexNew(&CommunicationMutex_attributes);
 8000e82:	4830      	ldr	r0, [pc, #192]	@ (8000f44 <main+0x168>)
 8000e84:	f007 f860 	bl	8007f48 <osMutexNew>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f48 <main+0x16c>)
 8000e8c:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore1 */
  Semaphore1Handle = osSemaphoreNew(1, 0, &Semaphore1_attributes);
 8000e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8000f4c <main+0x170>)
 8000e90:	2100      	movs	r1, #0
 8000e92:	2001      	movs	r0, #1
 8000e94:	f007 f966 	bl	8008164 <osSemaphoreNew>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f50 <main+0x174>)
 8000e9c:	6013      	str	r3, [r2, #0]

  /* creation of RegulationSemaphore */
  RegulationSemaphoreHandle = osSemaphoreNew(1, 0, &RegulationSemaphore_attributes);
 8000e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f54 <main+0x178>)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f007 f95e 	bl	8008164 <osSemaphoreNew>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a2b      	ldr	r2, [pc, #172]	@ (8000f58 <main+0x17c>)
 8000eac:	6013      	str	r3, [r2, #0]

  /* creation of CommunicationSemaphore */
  CommunicationSemaphoreHandle = osSemaphoreNew(1, 0, &CommunicationSemaphore_attributes);
 8000eae:	4a2b      	ldr	r2, [pc, #172]	@ (8000f5c <main+0x180>)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f007 f956 	bl	8008164 <osSemaphoreNew>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a29      	ldr	r2, [pc, #164]	@ (8000f60 <main+0x184>)
 8000ebc:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 8000ebe:	4b29      	ldr	r3, [pc, #164]	@ (8000f64 <main+0x188>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4828      	ldr	r0, [pc, #160]	@ (8000f68 <main+0x18c>)
 8000ec6:	f006 ff95 	bl	8007df4 <osTimerNew>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4a27      	ldr	r2, [pc, #156]	@ (8000f6c <main+0x190>)
 8000ece:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(myTimer01Handle, 500);
 8000ed0:	4b26      	ldr	r3, [pc, #152]	@ (8000f6c <main+0x190>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f007 f807 	bl	8007eec <osTimerStart>
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Fronta */
  FrontaHandle = osMessageQueueNew (1, sizeof(uint32_t), &Fronta_attributes);
 8000ede:	4a24      	ldr	r2, [pc, #144]	@ (8000f70 <main+0x194>)
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	f007 fa5e 	bl	80083a4 <osMessageQueueNew>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a22      	ldr	r2, [pc, #136]	@ (8000f74 <main+0x198>)
 8000eec:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Filtrace */
  FiltraceHandle = osThreadNew(StartFiltrace, NULL, &Filtrace_attributes);
 8000eee:	4a22      	ldr	r2, [pc, #136]	@ (8000f78 <main+0x19c>)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4822      	ldr	r0, [pc, #136]	@ (8000f7c <main+0x1a0>)
 8000ef4:	f006 fed6 	bl	8007ca4 <osThreadNew>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a21      	ldr	r2, [pc, #132]	@ (8000f80 <main+0x1a4>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* creation of Regulace */
  RegulaceHandle = osThreadNew(StartRegulace, NULL, &Regulace_attributes);
 8000efe:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <main+0x1a8>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	4821      	ldr	r0, [pc, #132]	@ (8000f88 <main+0x1ac>)
 8000f04:	f006 fece 	bl	8007ca4 <osThreadNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a20      	ldr	r2, [pc, #128]	@ (8000f8c <main+0x1b0>)
 8000f0c:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(StartCommunication, NULL, &Communication_attributes);
 8000f0e:	4a20      	ldr	r2, [pc, #128]	@ (8000f90 <main+0x1b4>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4820      	ldr	r0, [pc, #128]	@ (8000f94 <main+0x1b8>)
 8000f14:	f006 fec6 	bl	8007ca4 <osThreadNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f98 <main+0x1bc>)
 8000f1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f1e:	f006 fe9b 	bl	8007c58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f22:	bf00      	nop
 8000f24:	e7fd      	b.n	8000f22 <main+0x146>
 8000f26:	bf00      	nop
 8000f28:	20040098 	.word	0x20040098
 8000f2c:	3ff00000 	.word	0x3ff00000
 8000f30:	200402d4 	.word	0x200402d4
 8000f34:	20040320 	.word	0x20040320
 8000f38:	2004036c 	.word	0x2004036c
 8000f3c:	20040130 	.word	0x20040130
 8000f40:	20040198 	.word	0x20040198
 8000f44:	0800bcd4 	.word	0x0800bcd4
 8000f48:	200408b0 	.word	0x200408b0
 8000f4c:	0800bce4 	.word	0x0800bce4
 8000f50:	200408b4 	.word	0x200408b4
 8000f54:	0800bcf4 	.word	0x0800bcf4
 8000f58:	200408b8 	.word	0x200408b8
 8000f5c:	0800bd04 	.word	0x0800bd04
 8000f60:	200408bc 	.word	0x200408bc
 8000f64:	0800bcc4 	.word	0x0800bcc4
 8000f68:	080019c5 	.word	0x080019c5
 8000f6c:	200408ac 	.word	0x200408ac
 8000f70:	0800bcac 	.word	0x0800bcac
 8000f74:	200408a8 	.word	0x200408a8
 8000f78:	0800bc40 	.word	0x0800bc40
 8000f7c:	08001631 	.word	0x08001631
 8000f80:	2004089c 	.word	0x2004089c
 8000f84:	0800bc64 	.word	0x0800bc64
 8000f88:	080016f1 	.word	0x080016f1
 8000f8c:	200408a0 	.word	0x200408a0
 8000f90:	0800bc88 	.word	0x0800bc88
 8000f94:	080019b1 	.word	0x080019b1
 8000f98:	200408a4 	.word	0x200408a4

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b096      	sub	sp, #88	@ 0x58
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	2244      	movs	r2, #68	@ 0x44
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00a fd04 	bl	800b9b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f003 fb3c 	bl	800463c <HAL_PWREx_ControlVoltageScaling>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000fca:	f000 fd7d 	bl	8001ac8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000fce:	2322      	movs	r3, #34	@ 0x22
 8000fd0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fdc:	2340      	movs	r3, #64	@ 0x40
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000fec:	231e      	movs	r3, #30
 8000fee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4618      	mov	r0, r3
 8001002:	f003 fbdf 	bl	80047c4 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800100c:	f000 fd5c 	bl	8001ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	230f      	movs	r3, #15
 8001012:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2303      	movs	r3, #3
 8001016:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001020:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001026:	463b      	mov	r3, r7
 8001028:	2105      	movs	r1, #5
 800102a:	4618      	mov	r0, r3
 800102c:	f003 ffe4 	bl	8004ff8 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001036:	f000 fd47 	bl	8001ac8 <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3758      	adds	r7, #88	@ 0x58
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800105a:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <MX_ADC1_Init+0xc8>)
 800105c:	4a2c      	ldr	r2, [pc, #176]	@ (8001110 <MX_ADC1_Init+0xcc>)
 800105e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001060:	4b2a      	ldr	r3, [pc, #168]	@ (800110c <MX_ADC1_Init+0xc8>)
 8001062:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001066:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001068:	4b28      	ldr	r3, [pc, #160]	@ (800110c <MX_ADC1_Init+0xc8>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106e:	4b27      	ldr	r3, [pc, #156]	@ (800110c <MX_ADC1_Init+0xc8>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001074:	4b25      	ldr	r3, [pc, #148]	@ (800110c <MX_ADC1_Init+0xc8>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107a:	4b24      	ldr	r3, [pc, #144]	@ (800110c <MX_ADC1_Init+0xc8>)
 800107c:	2204      	movs	r2, #4
 800107e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b22      	ldr	r3, [pc, #136]	@ (800110c <MX_ADC1_Init+0xc8>)
 8001082:	2200      	movs	r2, #0
 8001084:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001086:	4b21      	ldr	r3, [pc, #132]	@ (800110c <MX_ADC1_Init+0xc8>)
 8001088:	2200      	movs	r2, #0
 800108a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800108c:	4b1f      	ldr	r3, [pc, #124]	@ (800110c <MX_ADC1_Init+0xc8>)
 800108e:	2201      	movs	r2, #1
 8001090:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <MX_ADC1_Init+0xc8>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800109a:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <MX_ADC1_Init+0xc8>)
 800109c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80010a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	@ (800110c <MX_ADC1_Init+0xc8>)
 80010a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <MX_ADC1_Init+0xc8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b2:	4b16      	ldr	r3, [pc, #88]	@ (800110c <MX_ADC1_Init+0xc8>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_ADC1_Init+0xc8>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c0:	4812      	ldr	r0, [pc, #72]	@ (800110c <MX_ADC1_Init+0xc8>)
 80010c2:	f001 faf5 	bl	80026b0 <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80010cc:	f000 fcfc 	bl	8001ac8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010d0:	4b10      	ldr	r3, [pc, #64]	@ (8001114 <MX_ADC1_Init+0xd0>)
 80010d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010d4:	2306      	movs	r3, #6
 80010d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010dc:	237f      	movs	r3, #127	@ 0x7f
 80010de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010e0:	2304      	movs	r3, #4
 80010e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	@ (800110c <MX_ADC1_Init+0xc8>)
 80010ee:	f001 feaf 	bl	8002e50 <HAL_ADC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80010f8:	f000 fce6 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80010fc:	217f      	movs	r1, #127	@ 0x7f
 80010fe:	4803      	ldr	r0, [pc, #12]	@ (800110c <MX_ADC1_Init+0xc8>)
 8001100:	f002 fbb4 	bl	800386c <HAL_ADCEx_Calibration_Start>

  /* USER CODE END ADC1_Init 2 */

}
 8001104:	bf00      	nop
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20040130 	.word	0x20040130
 8001110:	50040000 	.word	0x50040000
 8001114:	21800100 	.word	0x21800100

08001118 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	@ 0x28
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800111e:	463b      	mov	r3, r7
 8001120:	2228      	movs	r2, #40	@ 0x28
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f00a fc47 	bl	800b9b8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <MX_DAC1_Init+0x60>)
 800112c:	4a13      	ldr	r2, [pc, #76]	@ (800117c <MX_DAC1_Init+0x64>)
 800112e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001130:	4811      	ldr	r0, [pc, #68]	@ (8001178 <MX_DAC1_Init+0x60>)
 8001132:	f002 fd0f 	bl	8003b54 <HAL_DAC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800113c:	f000 fcc4 	bl	8001ac8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	4806      	ldr	r0, [pc, #24]	@ (8001178 <MX_DAC1_Init+0x60>)
 8001160:	f002 fdf6 	bl	8003d50 <HAL_DAC_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800116a:	f000 fcad 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20040198 	.word	0x20040198
 800117c:	40007400 	.word	0x40007400

08001180 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 8001186:	4a23      	ldr	r2, [pc, #140]	@ (8001214 <MX_LPUART1_UART_Init+0x94>)
 8001188:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800118a:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 800118c:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <MX_LPUART1_UART_Init+0x98>)
 800118e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 8001192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001196:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b0:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b6:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 80011be:	2200      	movs	r2, #0
 80011c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80011c2:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011c8:	4811      	ldr	r0, [pc, #68]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 80011ca:	f005 fbc3 	bl	8006954 <HAL_UART_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80011d4:	f000 fc78 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d8:	2100      	movs	r1, #0
 80011da:	480d      	ldr	r0, [pc, #52]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 80011dc:	f006 f95e 	bl	800749c <HAL_UARTEx_SetTxFifoThreshold>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80011e6:	f000 fc6f 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011ea:	2100      	movs	r1, #0
 80011ec:	4808      	ldr	r0, [pc, #32]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 80011ee:	f006 f993 	bl	8007518 <HAL_UARTEx_SetRxFifoThreshold>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011f8:	f000 fc66 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	@ (8001210 <MX_LPUART1_UART_Init+0x90>)
 80011fe:	f006 f914 	bl	800742a <HAL_UARTEx_DisableFifoMode>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001208:	f000 fc5e 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200401ac 	.word	0x200401ac
 8001214:	40008000 	.word	0x40008000
 8001218:	00033324 	.word	0x00033324

0800121c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001220:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001222:	4a23      	ldr	r2, [pc, #140]	@ (80012b0 <MX_USART3_UART_Init+0x94>)
 8001224:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001226:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800122c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800122e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001234:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800123a:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 800125a:	2200      	movs	r2, #0
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001264:	4811      	ldr	r0, [pc, #68]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001266:	f005 fb75 	bl	8006954 <HAL_UART_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001270:	f000 fc2a 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	480d      	ldr	r0, [pc, #52]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 8001278:	f006 f910 	bl	800749c <HAL_UARTEx_SetTxFifoThreshold>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001282:	f000 fc21 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001286:	2100      	movs	r1, #0
 8001288:	4808      	ldr	r0, [pc, #32]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 800128a:	f006 f945 	bl	8007518 <HAL_UARTEx_SetRxFifoThreshold>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001294:	f000 fc18 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	@ (80012ac <MX_USART3_UART_Init+0x90>)
 800129a:	f006 f8c6 	bl	800742a <HAL_UARTEx_DisableFifoMode>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012a4:	f000 fc10 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20040240 	.word	0x20040240
 80012b0:	40004800 	.word	0x40004800

080012b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <MX_TIM3_Init+0x94>)
 80012d4:	4a1d      	ldr	r2, [pc, #116]	@ (800134c <MX_TIM3_Init+0x98>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 80012d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <MX_TIM3_Init+0x94>)
 80012da:	220b      	movs	r2, #11
 80012dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <MX_TIM3_Init+0x94>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80012e4:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_TIM3_Init+0x94>)
 80012e6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80012ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <MX_TIM3_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <MX_TIM3_Init+0x94>)
 80012f4:	2280      	movs	r2, #128	@ 0x80
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012f8:	4813      	ldr	r0, [pc, #76]	@ (8001348 <MX_TIM3_Init+0x94>)
 80012fa:	f004 fe85 	bl	8006008 <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001304:	f000 fbe0 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <MX_TIM3_Init+0x94>)
 8001316:	f005 f846 	bl	80063a6 <HAL_TIM_ConfigClockSource>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001320:	f000 fbd2 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001324:	2320      	movs	r3, #32
 8001326:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_TIM3_Init+0x94>)
 8001332:	f005 fa69 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800133c:	f000 fbc4 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200402d4 	.word	0x200402d4
 800134c:	40000400 	.word	0x40000400

08001350 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0310 	add.w	r3, r7, #16
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800136e:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <MX_TIM4_Init+0x98>)
 8001370:	4a1e      	ldr	r2, [pc, #120]	@ (80013ec <MX_TIM4_Init+0x9c>)
 8001372:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6000-1;
 8001374:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <MX_TIM4_Init+0x98>)
 8001376:	f241 726f 	movw	r2, #5999	@ 0x176f
 800137a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137c:	4b1a      	ldr	r3, [pc, #104]	@ (80013e8 <MX_TIM4_Init+0x98>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001382:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <MX_TIM4_Init+0x98>)
 8001384:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001388:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138a:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <MX_TIM4_Init+0x98>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <MX_TIM4_Init+0x98>)
 8001392:	2280      	movs	r2, #128	@ 0x80
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001396:	4814      	ldr	r0, [pc, #80]	@ (80013e8 <MX_TIM4_Init+0x98>)
 8001398:	f004 fe36 	bl	8006008 <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80013a2:	f000 fb91 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	4619      	mov	r1, r3
 80013b2:	480d      	ldr	r0, [pc, #52]	@ (80013e8 <MX_TIM4_Init+0x98>)
 80013b4:	f004 fff7 	bl	80063a6 <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80013be:	f000 fb83 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013c2:	2320      	movs	r3, #32
 80013c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <MX_TIM4_Init+0x98>)
 80013d0:	f005 fa1a 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80013da:	f000 fb75 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	3720      	adds	r7, #32
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20040320 	.word	0x20040320
 80013ec:	40000800 	.word	0x40000800

080013f0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_TIM7_Init+0x64>)
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <MX_TIM7_Init+0x68>)
 8001404:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 240-1;
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <MX_TIM7_Init+0x64>)
 8001408:	22ef      	movs	r2, #239	@ 0xef
 800140a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_TIM7_Init+0x64>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001412:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <MX_TIM7_Init+0x64>)
 8001414:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001418:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <MX_TIM7_Init+0x64>)
 800141c:	2280      	movs	r2, #128	@ 0x80
 800141e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <MX_TIM7_Init+0x64>)
 8001422:	f004 fdf1 	bl	8006008 <HAL_TIM_Base_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800142c:	f000 fb4c 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001430:	2320      	movs	r3, #32
 8001432:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	4619      	mov	r1, r3
 800143c:	4805      	ldr	r0, [pc, #20]	@ (8001454 <MX_TIM7_Init+0x64>)
 800143e:	f005 f9e3 	bl	8006808 <HAL_TIMEx_MasterConfigSynchronization>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001448:	f000 fb3e 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2004036c 	.word	0x2004036c
 8001458:	40001400 	.word	0x40001400

0800145c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001460:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001462:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001466:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800146a:	2206      	movs	r2, #6
 800146c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800146e:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001470:	2202      	movs	r2, #2
 8001472:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001474:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001476:	2202      	movs	r2, #2
 8001478:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800147a:	4b0e      	ldr	r3, [pc, #56]	@ (80014b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800147c:	2201      	movs	r2, #1
 800147e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001482:	2200      	movs	r2, #0
 8001484:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001486:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001488:	2200      	movs	r2, #0
 800148a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800148c:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800148e:	2201      	movs	r2, #1
 8001490:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001492:	4b08      	ldr	r3, [pc, #32]	@ (80014b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001494:	2200      	movs	r2, #0
 8001496:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149a:	2201      	movs	r2, #1
 800149c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a0:	f002 ff79 	bl	8004396 <HAL_PCD_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014aa:	f000 fb0d 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200403b8 	.word	0x200403b8

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	@ 0x30
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	4b4c      	ldr	r3, [pc, #304]	@ (8001600 <MX_GPIO_Init+0x148>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001600 <MX_GPIO_Init+0x148>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	4b49      	ldr	r3, [pc, #292]	@ (8001600 <MX_GPIO_Init+0x148>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	61bb      	str	r3, [r7, #24]
 80014e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e6:	4b46      	ldr	r3, [pc, #280]	@ (8001600 <MX_GPIO_Init+0x148>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	4a45      	ldr	r2, [pc, #276]	@ (8001600 <MX_GPIO_Init+0x148>)
 80014ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014f2:	4b43      	ldr	r3, [pc, #268]	@ (8001600 <MX_GPIO_Init+0x148>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b40      	ldr	r3, [pc, #256]	@ (8001600 <MX_GPIO_Init+0x148>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	4a3f      	ldr	r2, [pc, #252]	@ (8001600 <MX_GPIO_Init+0x148>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150a:	4b3d      	ldr	r3, [pc, #244]	@ (8001600 <MX_GPIO_Init+0x148>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	4b3a      	ldr	r3, [pc, #232]	@ (8001600 <MX_GPIO_Init+0x148>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a39      	ldr	r2, [pc, #228]	@ (8001600 <MX_GPIO_Init+0x148>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b37      	ldr	r3, [pc, #220]	@ (8001600 <MX_GPIO_Init+0x148>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <MX_GPIO_Init+0x148>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a33      	ldr	r2, [pc, #204]	@ (8001600 <MX_GPIO_Init+0x148>)
 8001534:	f043 0308 	orr.w	r3, r3, #8
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <MX_GPIO_Init+0x148>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001546:	4b2e      	ldr	r3, [pc, #184]	@ (8001600 <MX_GPIO_Init+0x148>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a2d      	ldr	r2, [pc, #180]	@ (8001600 <MX_GPIO_Init+0x148>)
 800154c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <MX_GPIO_Init+0x148>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800155e:	f003 f921 	bl	80047a4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001568:	4826      	ldr	r0, [pc, #152]	@ (8001604 <MX_GPIO_Init+0x14c>)
 800156a:	f002 fed9 	bl	8004320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	2140      	movs	r1, #64	@ 0x40
 8001572:	4825      	ldr	r0, [pc, #148]	@ (8001608 <MX_GPIO_Init+0x150>)
 8001574:	f002 fed4 	bl	8004320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001578:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800157e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	481f      	ldr	r0, [pc, #124]	@ (800160c <MX_GPIO_Init+0x154>)
 8001590:	f002 fd34 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001594:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a6:	f107 031c 	add.w	r3, r7, #28
 80015aa:	4619      	mov	r1, r3
 80015ac:	4815      	ldr	r0, [pc, #84]	@ (8001604 <MX_GPIO_Init+0x14c>)
 80015ae:	f002 fd25 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015b2:	2320      	movs	r3, #32
 80015b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4810      	ldr	r0, [pc, #64]	@ (8001608 <MX_GPIO_Init+0x150>)
 80015c6:	f002 fd19 	bl	8003ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015ca:	2340      	movs	r3, #64	@ 0x40
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4809      	ldr	r0, [pc, #36]	@ (8001608 <MX_GPIO_Init+0x150>)
 80015e2:	f002 fd0b 	bl	8003ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2105      	movs	r1, #5
 80015ea:	2028      	movs	r0, #40	@ 0x28
 80015ec:	f002 fa88 	bl	8003b00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015f0:	2028      	movs	r0, #40	@ 0x28
 80015f2:	f002 faa1 	bl	8003b38 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015f6:	bf00      	nop
 80015f8:	3730      	adds	r7, #48	@ 0x30
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40021000 	.word	0x40021000
 8001604:	48000400 	.word	0x48000400
 8001608:	48001800 	.word	0x48001800
 800160c:	48000800 	.word	0x48000800

08001610 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(Semaphore1Handle);
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <HAL_ADC_ConvCpltCallback+0x1c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f006 fe7d 	bl	800831c <osSemaphoreRelease>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200408b4 	.word	0x200408b4

08001630 <StartFiltrace>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFiltrace */
void StartFiltrace(void *argument)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b098      	sub	sp, #96	@ 0x60
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
   // Proměnná pro aktuální vzorek
  uint32_t buffer[N] = {0}; // Kruhový buffer pro N vzorků, inicializován na 0
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2250      	movs	r2, #80	@ 0x50
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f00a f9b9 	bl	800b9b8 <memset>
  int index = 0; // Index pro přístup do bufferu
 8001646:	2300      	movs	r3, #0
 8001648:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t sum = 0; // Součet všech prvků v bufferu
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for (;;)
  {
    ADCInput = HAL_ADC_GetValue(&hadc1);
 800164e:	4821      	ldr	r0, [pc, #132]	@ (80016d4 <StartFiltrace+0xa4>)
 8001650:	f001 fa28 	bl	8002aa4 <HAL_ADC_GetValue>
 8001654:	4603      	mov	r3, r0
 8001656:	4a20      	ldr	r2, [pc, #128]	@ (80016d8 <StartFiltrace+0xa8>)
 8001658:	6013      	str	r3, [r2, #0]

    sum -= buffer[index];
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	3360      	adds	r3, #96	@ 0x60
 8001662:	443b      	add	r3, r7
 8001664:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	60bb      	str	r3, [r7, #8]
    buffer[index] = ADCInput;
 800166c:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <StartFiltrace+0xa8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	3360      	adds	r3, #96	@ 0x60
 8001676:	443b      	add	r3, r7
 8001678:	f843 2c54 	str.w	r2, [r3, #-84]
    sum += ADCInput;
 800167c:	68ba      	ldr	r2, [r7, #8]
 800167e:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <StartFiltrace+0xa8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4413      	add	r3, r2
 8001684:	60bb      	str	r3, [r7, #8]

    index = (index + 1) % N;
 8001686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <StartFiltrace+0xac>)
 800168c:	fb83 1302 	smull	r1, r3, r3, r2
 8001690:	10d9      	asrs	r1, r3, #3
 8001692:	17d3      	asrs	r3, r2, #31
 8001694:	1ac9      	subs	r1, r1, r3
 8001696:	460b      	mov	r3, r1
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	440b      	add	r3, r1
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    xQueueOverwrite(FrontaHandle,&sum);
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <StartFiltrace+0xb0>)
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	f107 0108 	add.w	r1, r7, #8
 80016aa:	2302      	movs	r3, #2
 80016ac:	2200      	movs	r2, #0
 80016ae:	f007 fa9f 	bl	8008bf0 <xQueueGenericSend>
    FilterOutput = sum / N;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	4a0b      	ldr	r2, [pc, #44]	@ (80016e4 <StartFiltrace+0xb4>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <StartFiltrace+0xb8>)
 80016be:	6013      	str	r3, [r2, #0]
    //HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, DACOut);

    osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 80016c0:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <StartFiltrace+0xbc>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	4618      	mov	r0, r3
 80016ca:	f006 fdd5 	bl	8008278 <osSemaphoreAcquire>
    ADCInput = HAL_ADC_GetValue(&hadc1);
 80016ce:	bf00      	nop
 80016d0:	e7bd      	b.n	800164e <StartFiltrace+0x1e>
 80016d2:	bf00      	nop
 80016d4:	20040130 	.word	0x20040130
 80016d8:	200400ec 	.word	0x200400ec
 80016dc:	66666667 	.word	0x66666667
 80016e0:	200408a8 	.word	0x200408a8
 80016e4:	cccccccd 	.word	0xcccccccd
 80016e8:	200400e8 	.word	0x200400e8
 80016ec:	200408b4 	.word	0x200408b4

080016f0 <StartRegulace>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRegulace */
void StartRegulace(void *argument)
{
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b092      	sub	sp, #72	@ 0x48
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRegulace */
  /* Infinite loop */
	double Pterm;
	double Iterm;
	uint32_t Umin = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t Umax = 4095;
 80016fc:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001700:	623b      	str	r3, [r7, #32]
	double Epast=0,  Ipast=0;
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
	double Tsampling=0.02;
 800171a:	a3a3      	add	r3, pc, #652	@ (adr r3, 80019a8 <StartRegulace+0x2b8>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double Ti=2;
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800172c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	uint32_t StartTime;
	osStatus_t MutexStat;
  for(;;)
  {
	  osSemaphoreAcquire(RegulationSemaphoreHandle, osWaitForever);
 8001730:	4b8b      	ldr	r3, [pc, #556]	@ (8001960 <StartRegulace+0x270>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	4618      	mov	r0, r3
 800173a:	f006 fd9d 	bl	8008278 <osSemaphoreAcquire>
	  StartTime = TIM3->CNT;
 800173e:	4b89      	ldr	r3, [pc, #548]	@ (8001964 <StartRegulace+0x274>)
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	617b      	str	r3, [r7, #20]
	  MutexStat=osMutexAcquire(CommunicationMutexHandle, 200);
 8001744:	4b88      	ldr	r3, [pc, #544]	@ (8001968 <StartRegulace+0x278>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	21c8      	movs	r1, #200	@ 0xc8
 800174a:	4618      	mov	r0, r3
 800174c:	f006 fc82 	bl	8008054 <osMutexAcquire>
 8001750:	6138      	str	r0, [r7, #16]
	  if (MutexStat==osOK){
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d110      	bne.n	800177a <StartRegulace+0x8a>
		  Ti = ControlData.IntegralTimeConstant;
 8001758:	4b84      	ldr	r3, [pc, #528]	@ (800196c <StartRegulace+0x27c>)
 800175a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800175e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		  PropGain = ControlData.PropGain;
 8001762:	4b82      	ldr	r3, [pc, #520]	@ (800196c <StartRegulace+0x27c>)
 8001764:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001768:	4981      	ldr	r1, [pc, #516]	@ (8001970 <StartRegulace+0x280>)
 800176a:	e9c1 2300 	strd	r2, r3, [r1]
		  Setpoint = ControlData.Setpoint;
 800176e:	4b7f      	ldr	r3, [pc, #508]	@ (800196c <StartRegulace+0x27c>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	497f      	ldr	r1, [pc, #508]	@ (8001974 <StartRegulace+0x284>)
 8001776:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  osMessageQueueGet(FrontaHandle, &FiltrData, NULL, 2);
 800177a:	4b7f      	ldr	r3, [pc, #508]	@ (8001978 <StartRegulace+0x288>)
 800177c:	6818      	ldr	r0, [r3, #0]
 800177e:	2302      	movs	r3, #2
 8001780:	2200      	movs	r2, #0
 8001782:	497e      	ldr	r1, [pc, #504]	@ (800197c <StartRegulace+0x28c>)
 8001784:	f006 fe82 	bl	800848c <osMessageQueueGet>
	  ControlledVariable=FiltrData*1.0/(N*1.0);
 8001788:	4b7c      	ldr	r3, [pc, #496]	@ (800197c <StartRegulace+0x28c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fe79 	bl	8000484 <__aeabi_ui2d>
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	4b7a      	ldr	r3, [pc, #488]	@ (8001980 <StartRegulace+0x290>)
 8001798:	f7ff f818 	bl	80007cc <__aeabi_ddiv>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4978      	ldr	r1, [pc, #480]	@ (8001984 <StartRegulace+0x294>)
 80017a2:	e9c1 2300 	strd	r2, r3, [r1]
	  RPM=1400*ControlledVariable/1700.0;
 80017a6:	4b77      	ldr	r3, [pc, #476]	@ (8001984 <StartRegulace+0x294>)
 80017a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	4b75      	ldr	r3, [pc, #468]	@ (8001988 <StartRegulace+0x298>)
 80017b2:	f7fe fee1 	bl	8000578 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	a366      	add	r3, pc, #408	@ (adr r3, 8001958 <StartRegulace+0x268>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7ff f802 	bl	80007cc <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	496f      	ldr	r1, [pc, #444]	@ (800198c <StartRegulace+0x29c>)
 80017ce:	e9c1 2300 	strd	r2, r3, [r1]
	  ControlError=Setpoint-RPM;
 80017d2:	4b68      	ldr	r3, [pc, #416]	@ (8001974 <StartRegulace+0x284>)
 80017d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d8:	4b6c      	ldr	r3, [pc, #432]	@ (800198c <StartRegulace+0x29c>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	f7fe fd13 	bl	8000208 <__aeabi_dsub>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	496a      	ldr	r1, [pc, #424]	@ (8001990 <StartRegulace+0x2a0>)
 80017e8:	e9c1 2300 	strd	r2, r3, [r1]
	  Pterm=PropGain*ControlError;
 80017ec:	4b60      	ldr	r3, [pc, #384]	@ (8001970 <StartRegulace+0x280>)
 80017ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f2:	4b67      	ldr	r3, [pc, #412]	@ (8001990 <StartRegulace+0x2a0>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe febe 	bl	8000578 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  Iterm=Ipast+0.5*PropGain*Tsampling*(ControlError+Epast)/Ti;
 8001804:	4b5a      	ldr	r3, [pc, #360]	@ (8001970 <StartRegulace+0x280>)
 8001806:	e9d3 0100 	ldrd	r0, r1, [r3]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	4b61      	ldr	r3, [pc, #388]	@ (8001994 <StartRegulace+0x2a4>)
 8001810:	f7fe feb2 	bl	8000578 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001820:	f7fe feaa 	bl	8000578 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4614      	mov	r4, r2
 800182a:	461d      	mov	r5, r3
 800182c:	4b58      	ldr	r3, [pc, #352]	@ (8001990 <StartRegulace+0x2a0>)
 800182e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001832:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001836:	f7fe fce9 	bl	800020c <__adddf3>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4620      	mov	r0, r4
 8001840:	4629      	mov	r1, r5
 8001842:	f7fe fe99 	bl	8000578 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001852:	f7fe ffbb 	bl	80007cc <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800185e:	f7fe fcd5 	bl	800020c <__adddf3>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  	  ManipulatedVariable=Pterm+Iterm;
 800186a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800186e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001872:	f7fe fccb 	bl	800020c <__adddf3>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4947      	ldr	r1, [pc, #284]	@ (8001998 <StartRegulace+0x2a8>)
 800187c:	e9c1 2300 	strd	r2, r3, [r1]
  	  if (ManipulatedVariable>Umax) {
 8001880:	6a38      	ldr	r0, [r7, #32]
 8001882:	f7fe fdff 	bl	8000484 <__aeabi_ui2d>
 8001886:	4b44      	ldr	r3, [pc, #272]	@ (8001998 <StartRegulace+0x2a8>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7ff f8e6 	bl	8000a5c <__aeabi_dcmplt>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <StartRegulace+0x1be>
  		  ManipulatedVariable=Umax;
 8001896:	6a38      	ldr	r0, [r7, #32]
 8001898:	f7fe fdf4 	bl	8000484 <__aeabi_ui2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	493d      	ldr	r1, [pc, #244]	@ (8001998 <StartRegulace+0x2a8>)
 80018a2:	e9c1 2300 	strd	r2, r3, [r1]
  		  Iterm=Ipast;
 80018a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  	  }
  	  if (ManipulatedVariable<Umin) {
 80018ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018b0:	f7fe fde8 	bl	8000484 <__aeabi_ui2d>
 80018b4:	4b38      	ldr	r3, [pc, #224]	@ (8001998 <StartRegulace+0x2a8>)
 80018b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ba:	f7ff f8ed 	bl	8000a98 <__aeabi_dcmpgt>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00b      	beq.n	80018dc <StartRegulace+0x1ec>
  		  ManipulatedVariable=Umin;
 80018c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018c6:	f7fe fddd 	bl	8000484 <__aeabi_ui2d>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4932      	ldr	r1, [pc, #200]	@ (8001998 <StartRegulace+0x2a8>)
 80018d0:	e9c1 2300 	strd	r2, r3, [r1]
  		  Iterm=Ipast;
 80018d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80018d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
  	  }
  	  DAC_OUTPUT=ManipulatedVariable;
 80018dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <StartRegulace+0x2a8>)
 80018de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e2:	492e      	ldr	r1, [pc, #184]	@ (800199c <StartRegulace+0x2ac>)
 80018e4:	e9c1 2300 	strd	r2, r3, [r1]
  	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, ManipulatedVariable);
 80018e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001998 <StartRegulace+0x2a8>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f8db 	bl	8000aac <__aeabi_d2uiz>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2200      	movs	r2, #0
 80018fa:	2100      	movs	r1, #0
 80018fc:	4828      	ldr	r0, [pc, #160]	@ (80019a0 <StartRegulace+0x2b0>)
 80018fe:	f002 f9f7 	bl	8003cf0 <HAL_DAC_SetValue>
  	  Ipast=Iterm;
 8001902:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001906:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  	  Epast=ControlError;
 800190a:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <StartRegulace+0x2a0>)
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	  if (MutexStat==osOK){
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d116      	bne.n	8001948 <StartRegulace+0x258>
	  	  ControlData.ManipulatedVariable = ManipulatedVariable;
 800191a:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <StartRegulace+0x2a8>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	4912      	ldr	r1, [pc, #72]	@ (800196c <StartRegulace+0x27c>)
 8001922:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  	  ControlData.ControlError = ControlError;
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <StartRegulace+0x2a0>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	490f      	ldr	r1, [pc, #60]	@ (800196c <StartRegulace+0x27c>)
 800192e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  	  ControlData.ControlledVariable = RPM;
 8001932:	4b16      	ldr	r3, [pc, #88]	@ (800198c <StartRegulace+0x29c>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	490c      	ldr	r1, [pc, #48]	@ (800196c <StartRegulace+0x27c>)
 800193a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		  osMutexRelease(CommunicationMutexHandle);
 800193e:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <StartRegulace+0x278>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f006 fbd1 	bl	80080ea <osMutexRelease>
	  }
  	  ControlExecutionTime = TIM3->CNT - StartTime;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <StartRegulace+0x274>)
 800194a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <StartRegulace+0x2b4>)
 8001952:	6013      	str	r3, [r2, #0]
	  osSemaphoreAcquire(RegulationSemaphoreHandle, osWaitForever);
 8001954:	e6ec      	b.n	8001730 <StartRegulace+0x40>
 8001956:	bf00      	nop
 8001958:	00000000 	.word	0x00000000
 800195c:	409a9000 	.word	0x409a9000
 8001960:	200408b8 	.word	0x200408b8
 8001964:	40000400 	.word	0x40000400
 8001968:	200408b0 	.word	0x200408b0
 800196c:	20040098 	.word	0x20040098
 8001970:	20040010 	.word	0x20040010
 8001974:	20040100 	.word	0x20040100
 8001978:	200408a8 	.word	0x200408a8
 800197c:	20040110 	.word	0x20040110
 8001980:	40340000 	.word	0x40340000
 8001984:	20040108 	.word	0x20040108
 8001988:	4095e000 	.word	0x4095e000
 800198c:	200400f8 	.word	0x200400f8
 8001990:	20040120 	.word	0x20040120
 8001994:	3fe00000 	.word	0x3fe00000
 8001998:	20040118 	.word	0x20040118
 800199c:	200400f0 	.word	0x200400f0
 80019a0:	20040198 	.word	0x20040198
 80019a4:	2004012c 	.word	0x2004012c
 80019a8:	47ae147b 	.word	0x47ae147b
 80019ac:	3f947ae1 	.word	0x3f947ae1

080019b0 <StartCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommunication */
void StartCommunication(void *argument)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommunication */
  /* Infinite loop */

  /* USER CODE END StartCommunication */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <Callback01>:

/* Callback01 function */
void Callback01(void *argument)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
	  uint32_t StartTime;
	  osStatus_t MutexStat;
	  for(;;)
	  {
		  StartTime = TIM3->CNT;
 80019cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a48 <Callback01+0x84>)
 80019ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d0:	60fb      	str	r3, [r7, #12]
		  MutexStat=osMutexAcquire(CommunicationMutexHandle, 200);
 80019d2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a4c <Callback01+0x88>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	21c8      	movs	r1, #200	@ 0xc8
 80019d8:	4618      	mov	r0, r3
 80019da:	f006 fb3b 	bl	8008054 <osMutexAcquire>
 80019de:	60b8      	str	r0, [r7, #8]
		  if (MutexStat==osOK){
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d123      	bne.n	8001a2e <Callback01+0x6a>
			ControlData.Setpoint = GlobalSetpoint;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a50 <Callback01+0x8c>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	4919      	ldr	r1, [pc, #100]	@ (8001a54 <Callback01+0x90>)
 80019ee:	e9c1 2300 	strd	r2, r3, [r1]
			ControlData.PropGain = GlobalPropGain;
 80019f2:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <Callback01+0x94>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	4916      	ldr	r1, [pc, #88]	@ (8001a54 <Callback01+0x90>)
 80019fa:	e9c1 2308 	strd	r2, r3, [r1, #32]
			ControlData.IntegralTimeConstant = GlobalIntergralTimeConstant;
 80019fe:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <Callback01+0x98>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	4913      	ldr	r1, [pc, #76]	@ (8001a54 <Callback01+0x90>)
 8001a06:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
			GlobalControlError = ControlData.ControlError;
 8001a0a:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <Callback01+0x90>)
 8001a0c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a10:	4913      	ldr	r1, [pc, #76]	@ (8001a60 <Callback01+0x9c>)
 8001a12:	e9c1 2300 	strd	r2, r3, [r1]
			GlobalControlledVariable = ControlData.ControlledVariable;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <Callback01+0x90>)
 8001a18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a1c:	4911      	ldr	r1, [pc, #68]	@ (8001a64 <Callback01+0xa0>)
 8001a1e:	e9c1 2300 	strd	r2, r3, [r1]
			GlobalManipulatedVariable = ControlData.ManipulatedVariable;
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <Callback01+0x90>)
 8001a24:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001a28:	490f      	ldr	r1, [pc, #60]	@ (8001a68 <Callback01+0xa4>)
 8001a2a:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  CommunicationExecutionTime = TIM3->CNT - StartTime;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <Callback01+0x84>)
 8001a30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	4a0d      	ldr	r2, [pc, #52]	@ (8001a6c <Callback01+0xa8>)
 8001a38:	6013      	str	r3, [r2, #0]
		  osMutexRelease(CommunicationMutexHandle);
 8001a3a:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <Callback01+0x88>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f006 fb53 	bl	80080ea <osMutexRelease>
		  StartTime = TIM3->CNT;
 8001a44:	e7c2      	b.n	80019cc <Callback01+0x8>
 8001a46:	bf00      	nop
 8001a48:	40000400 	.word	0x40000400
 8001a4c:	200408b0 	.word	0x200408b0
 8001a50:	200400e0 	.word	0x200400e0
 8001a54:	20040098 	.word	0x20040098
 8001a58:	20040008 	.word	0x20040008
 8001a5c:	20040000 	.word	0x20040000
 8001a60:	200400c8 	.word	0x200400c8
 8001a64:	200400d8 	.word	0x200400d8
 8001a68:	200400d0 	.word	0x200400d0
 8001a6c:	20040128 	.word	0x20040128

08001a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d101      	bne.n	8001a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a82:	f000 fbbd 	bl	8002200 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim==&htim3){
	}
	if (htim==&htim7){
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d104      	bne.n	8001a98 <HAL_TIM_PeriodElapsedCallback+0x28>
		osSemaphoreRelease(RegulationSemaphoreHandle);
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f006 fc42 	bl	800831c <osSemaphoreRelease>
	}
	if (htim==&htim4){
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d104      	bne.n	8001aaa <HAL_TIM_PeriodElapsedCallback+0x3a>
		osSemaphoreRelease(CommunicationSemaphoreHandle);
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f006 fc39 	bl	800831c <osSemaphoreRelease>
	}
  /* USER CODE END Callback 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40001000 	.word	0x40001000
 8001ab8:	2004036c 	.word	0x2004036c
 8001abc:	200408b8 	.word	0x200408b8
 8001ac0:	20040320 	.word	0x20040320
 8001ac4:	200408bc 	.word	0x200408bc

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
}
 8001ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <Error_Handler+0x8>

08001ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ada:	4b11      	ldr	r3, [pc, #68]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ade:	4a10      	ldr	r2, [pc, #64]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001afe:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <HAL_MspInit+0x4c>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	f06f 0001 	mvn.w	r0, #1
 8001b12:	f001 fff5 	bl	8003b00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b0ae      	sub	sp, #184	@ 0xb8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	2294      	movs	r2, #148	@ 0x94
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f009 ff37 	bl	800b9b8 <memset>
  if(hadc->Instance==ADC1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8001bfc <HAL_ADC_MspInit+0xd8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d14f      	bne.n	8001bf4 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b54:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b58:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001b5a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001b62:	2302      	movs	r3, #2
 8001b64:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b66:	2301      	movs	r3, #1
 8001b68:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b72:	2302      	movs	r3, #2
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001b7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4618      	mov	r0, r3
 8001b86:	f003 fd27 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001b90:	f7ff ff9a 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b94:	4b1a      	ldr	r3, [pc, #104]	@ (8001c00 <HAL_ADC_MspInit+0xdc>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b98:	4a19      	ldr	r2, [pc, #100]	@ (8001c00 <HAL_ADC_MspInit+0xdc>)
 8001b9a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba0:	4b17      	ldr	r3, [pc, #92]	@ (8001c00 <HAL_ADC_MspInit+0xdc>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	4b14      	ldr	r3, [pc, #80]	@ (8001c00 <HAL_ADC_MspInit+0xdc>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb0:	4a13      	ldr	r2, [pc, #76]	@ (8001c00 <HAL_ADC_MspInit+0xdc>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bb8:	4b11      	ldr	r3, [pc, #68]	@ (8001c00 <HAL_ADC_MspInit+0xdc>)
 8001bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bca:	230b      	movs	r3, #11
 8001bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be0:	f002 fa0c 	bl	8003ffc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2105      	movs	r1, #5
 8001be8:	2012      	movs	r0, #18
 8001bea:	f001 ff89 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001bee:	2012      	movs	r0, #18
 8001bf0:	f001 ffa2 	bl	8003b38 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001bf4:	bf00      	nop
 8001bf6:	37b8      	adds	r7, #184	@ 0xb8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	50040000 	.word	0x50040000
 8001c00:	40021000 	.word	0x40021000

08001c04 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	@ 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a19      	ldr	r2, [pc, #100]	@ (8001c88 <HAL_DAC_MspInit+0x84>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d12c      	bne.n	8001c80 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001c26:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <HAL_DAC_MspInit+0x88>)
 8001c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2a:	4a18      	ldr	r2, [pc, #96]	@ (8001c8c <HAL_DAC_MspInit+0x88>)
 8001c2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c32:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <HAL_DAC_MspInit+0x88>)
 8001c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <HAL_DAC_MspInit+0x88>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c42:	4a12      	ldr	r2, [pc, #72]	@ (8001c8c <HAL_DAC_MspInit+0x88>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <HAL_DAC_MspInit+0x88>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c56:	2310      	movs	r3, #16
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c6c:	f002 f9c6 	bl	8003ffc <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2105      	movs	r1, #5
 8001c74:	2036      	movs	r0, #54	@ 0x36
 8001c76:	f001 ff43 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c7a:	2036      	movs	r0, #54	@ 0x36
 8001c7c:	f001 ff5c 	bl	8003b38 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001c80:	bf00      	nop
 8001c82:	3728      	adds	r7, #40	@ 0x28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40007400 	.word	0x40007400
 8001c8c:	40021000 	.word	0x40021000

08001c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0b0      	sub	sp, #192	@ 0xc0
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca8:	f107 0318 	add.w	r3, r7, #24
 8001cac:	2294      	movs	r2, #148	@ 0x94
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f009 fe81 	bl	800b9b8 <memset>
  if(huart->Instance==LPUART1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a43      	ldr	r2, [pc, #268]	@ (8001dc8 <HAL_UART_MspInit+0x138>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d13e      	bne.n	8001d3e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001cc0:	2320      	movs	r3, #32
 8001cc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc8:	f107 0318 	add.w	r3, r7, #24
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fc83 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cd8:	f7ff fef6 	bl	8001ac8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce0:	4a3a      	ldr	r2, [pc, #232]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001ce8:	4b38      	ldr	r3, [pc, #224]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cf4:	4b35      	ldr	r3, [pc, #212]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf8:	4a34      	ldr	r2, [pc, #208]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001cfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d00:	4b32      	ldr	r3, [pc, #200]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001d0c:	f002 fd4a 	bl	80047a4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001d10:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001d14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d34:	4619      	mov	r1, r3
 8001d36:	4826      	ldr	r0, [pc, #152]	@ (8001dd0 <HAL_UART_MspInit+0x140>)
 8001d38:	f002 f960 	bl	8003ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d3c:	e040      	b.n	8001dc0 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a24      	ldr	r2, [pc, #144]	@ (8001dd4 <HAL_UART_MspInit+0x144>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d13b      	bne.n	8001dc0 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d50:	f107 0318 	add.w	r3, r7, #24
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 fc3f 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001d60:	f7ff feb2 	bl	8001ac8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d64:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d68:	4a18      	ldr	r2, [pc, #96]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001d6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d70:	4b16      	ldr	r3, [pc, #88]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d80:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d88:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <HAL_UART_MspInit+0x13c>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d94:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dae:	2307      	movs	r3, #7
 8001db0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001db8:	4619      	mov	r1, r3
 8001dba:	4807      	ldr	r0, [pc, #28]	@ (8001dd8 <HAL_UART_MspInit+0x148>)
 8001dbc:	f002 f91e 	bl	8003ffc <HAL_GPIO_Init>
}
 8001dc0:	bf00      	nop
 8001dc2:	37c0      	adds	r7, #192	@ 0xc0
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40008000 	.word	0x40008000
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	48001800 	.word	0x48001800
 8001dd4:	40004800 	.word	0x40004800
 8001dd8:	48000c00 	.word	0x48000c00

08001ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a27      	ldr	r2, [pc, #156]	@ (8001e88 <HAL_TIM_Base_MspInit+0xac>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d114      	bne.n	8001e18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dee:	4b27      	ldr	r3, [pc, #156]	@ (8001e8c <HAL_TIM_Base_MspInit+0xb0>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df2:	4a26      	ldr	r2, [pc, #152]	@ (8001e8c <HAL_TIM_Base_MspInit+0xb0>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dfa:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <HAL_TIM_Base_MspInit+0xb0>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2105      	movs	r1, #5
 8001e0a:	201d      	movs	r0, #29
 8001e0c:	f001 fe78 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e10:	201d      	movs	r0, #29
 8001e12:	f001 fe91 	bl	8003b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e16:	e032      	b.n	8001e7e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e90 <HAL_TIM_Base_MspInit+0xb4>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d114      	bne.n	8001e4c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e22:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <HAL_TIM_Base_MspInit+0xb0>)
 8001e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e26:	4a19      	ldr	r2, [pc, #100]	@ (8001e8c <HAL_TIM_Base_MspInit+0xb0>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e2e:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <HAL_TIM_Base_MspInit+0xb0>)
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2105      	movs	r1, #5
 8001e3e:	201e      	movs	r0, #30
 8001e40:	f001 fe5e 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e44:	201e      	movs	r0, #30
 8001e46:	f001 fe77 	bl	8003b38 <HAL_NVIC_EnableIRQ>
}
 8001e4a:	e018      	b.n	8001e7e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a10      	ldr	r2, [pc, #64]	@ (8001e94 <HAL_TIM_Base_MspInit+0xb8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d113      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <HAL_TIM_Base_MspInit+0xb0>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e8c <HAL_TIM_Base_MspInit+0xb0>)
 8001e5c:	f043 0320 	orr.w	r3, r3, #32
 8001e60:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e62:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <HAL_TIM_Base_MspInit+0xb0>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e66:	f003 0320 	and.w	r3, r3, #32
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2105      	movs	r1, #5
 8001e72:	2037      	movs	r0, #55	@ 0x37
 8001e74:	f001 fe44 	bl	8003b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e78:	2037      	movs	r0, #55	@ 0x37
 8001e7a:	f001 fe5d 	bl	8003b38 <HAL_NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40000800 	.word	0x40000800
 8001e94:	40001400 	.word	0x40001400

08001e98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0b0      	sub	sp, #192	@ 0xc0
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb0:	f107 0318 	add.w	r3, r7, #24
 8001eb4:	2294      	movs	r2, #148	@ 0x94
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f009 fd7d 	bl	800b9b8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ec6:	d16c      	bne.n	8001fa2 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ec8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ecc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 fb7d 	bl	80055d8 <HAL_RCCEx_PeriphCLKConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001ee4:	f7ff fdf0 	bl	8001ac8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b30      	ldr	r3, [pc, #192]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eec:	4a2f      	ldr	r2, [pc, #188]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001f00:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f20:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f24:	4619      	mov	r1, r3
 8001f26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f2a:	f002 f867 	bl	8003ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f46:	4619      	mov	r1, r3
 8001f48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f4c:	f002 f856 	bl	8003ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f50:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f54:	4a15      	ldr	r2, [pc, #84]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001f56:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5c:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f68:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d114      	bne.n	8001f9e <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f74:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f78:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f80:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001f8c:	f002 fbfa 	bl	8004784 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f94:	4a05      	ldr	r2, [pc, #20]	@ (8001fac <HAL_PCD_MspInit+0x114>)
 8001f96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001f9c:	e001      	b.n	8001fa2 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001f9e:	f002 fbf1 	bl	8004784 <HAL_PWREx_EnableVddUSB>
}
 8001fa2:	bf00      	nop
 8001fa4:	37c0      	adds	r7, #192	@ 0xc0
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40021000 	.word	0x40021000

08001fb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08e      	sub	sp, #56	@ 0x38
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001fbe:	4b34      	ldr	r3, [pc, #208]	@ (8002090 <HAL_InitTick+0xe0>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc2:	4a33      	ldr	r2, [pc, #204]	@ (8002090 <HAL_InitTick+0xe0>)
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fca:	4b31      	ldr	r3, [pc, #196]	@ (8002090 <HAL_InitTick+0xe0>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fd6:	f107 0210 	add.w	r2, r7, #16
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f003 fa07 	bl	80053f4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fe6:	6a3b      	ldr	r3, [r7, #32]
 8001fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d103      	bne.n	8001ff8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ff0:	f003 f9d4 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 8001ff4:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ff6:	e004      	b.n	8002002 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ff8:	f003 f9d0 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002004:	4a23      	ldr	r2, [pc, #140]	@ (8002094 <HAL_InitTick+0xe4>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0c9b      	lsrs	r3, r3, #18
 800200c:	3b01      	subs	r3, #1
 800200e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002010:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <HAL_InitTick+0xe8>)
 8002012:	4a22      	ldr	r2, [pc, #136]	@ (800209c <HAL_InitTick+0xec>)
 8002014:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002016:	4b20      	ldr	r3, [pc, #128]	@ (8002098 <HAL_InitTick+0xe8>)
 8002018:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800201c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800201e:	4a1e      	ldr	r2, [pc, #120]	@ (8002098 <HAL_InitTick+0xe8>)
 8002020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002022:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002024:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <HAL_InitTick+0xe8>)
 8002026:	2200      	movs	r2, #0
 8002028:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202a:	4b1b      	ldr	r3, [pc, #108]	@ (8002098 <HAL_InitTick+0xe8>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <HAL_InitTick+0xe8>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002036:	4818      	ldr	r0, [pc, #96]	@ (8002098 <HAL_InitTick+0xe8>)
 8002038:	f003 ffe6 	bl	8006008 <HAL_TIM_Base_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002042:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002046:	2b00      	cmp	r3, #0
 8002048:	d11b      	bne.n	8002082 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800204a:	4813      	ldr	r0, [pc, #76]	@ (8002098 <HAL_InitTick+0xe8>)
 800204c:	f004 f834 	bl	80060b8 <HAL_TIM_Base_Start_IT>
 8002050:	4603      	mov	r3, r0
 8002052:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002056:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800205a:	2b00      	cmp	r3, #0
 800205c:	d111      	bne.n	8002082 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800205e:	2036      	movs	r0, #54	@ 0x36
 8002060:	f001 fd6a 	bl	8003b38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b0f      	cmp	r3, #15
 8002068:	d808      	bhi.n	800207c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800206a:	2200      	movs	r2, #0
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	2036      	movs	r0, #54	@ 0x36
 8002070:	f001 fd46 	bl	8003b00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002074:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <HAL_InitTick+0xf0>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e002      	b.n	8002082 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002082:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002086:	4618      	mov	r0, r3
 8002088:	3738      	adds	r7, #56	@ 0x38
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	431bde83 	.word	0x431bde83
 8002098:	200408c0 	.word	0x200408c0
 800209c:	40001000 	.word	0x40001000
 80020a0:	2004001c 	.word	0x2004001c

080020a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <NMI_Handler+0x4>

080020ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <HardFault_Handler+0x4>

080020b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <MemManage_Handler+0x4>

080020bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <BusFault_Handler+0x4>

080020c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <UsageFault_Handler+0x4>

080020cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020e0:	4802      	ldr	r0, [pc, #8]	@ (80020ec <ADC1_IRQHandler+0x10>)
 80020e2:	f000 fcec 	bl	8002abe <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20040130 	.word	0x20040130

080020f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020f4:	4802      	ldr	r0, [pc, #8]	@ (8002100 <TIM3_IRQHandler+0x10>)
 80020f6:	f004 f84f 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200402d4 	.word	0x200402d4

08002104 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002108:	4802      	ldr	r0, [pc, #8]	@ (8002114 <TIM4_IRQHandler+0x10>)
 800210a:	f004 f845 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20040320 	.word	0x20040320

08002118 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800211c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002120:	f002 f916 	bl	8004350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800212c:	4803      	ldr	r0, [pc, #12]	@ (800213c <TIM6_DAC_IRQHandler+0x14>)
 800212e:	f004 f833 	bl	8006198 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002132:	4803      	ldr	r0, [pc, #12]	@ (8002140 <TIM6_DAC_IRQHandler+0x18>)
 8002134:	f001 fd82 	bl	8003c3c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200408c0 	.word	0x200408c0
 8002140:	20040198 	.word	0x20040198

08002144 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002148:	4802      	ldr	r0, [pc, #8]	@ (8002154 <TIM7_IRQHandler+0x10>)
 800214a:	f004 f825 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2004036c 	.word	0x2004036c

08002158 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002180:	f7ff ffea 	bl	8002158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002184:	480c      	ldr	r0, [pc, #48]	@ (80021b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002186:	490d      	ldr	r1, [pc, #52]	@ (80021bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002188:	4a0d      	ldr	r2, [pc, #52]	@ (80021c0 <LoopForever+0xe>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800219c:	4c0a      	ldr	r4, [pc, #40]	@ (80021c8 <LoopForever+0x16>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021aa:	f009 fc63 	bl	800ba74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ae:	f7fe fe15 	bl	8000ddc <main>

080021b2 <LoopForever>:

LoopForever:
    b LoopForever
 80021b2:	e7fe      	b.n	80021b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021b4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80021b8:	20040000 	.word	0x20040000
  ldr r1, =_edata
 80021bc:	20040078 	.word	0x20040078
  ldr r2, =_sidata
 80021c0:	0800bd94 	.word	0x0800bd94
  ldr r2, =_sbss
 80021c4:	20040078 	.word	0x20040078
  ldr r4, =_ebss
 80021c8:	200423f0 	.word	0x200423f0

080021cc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <CAN1_RX0_IRQHandler>

080021ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d8:	2003      	movs	r0, #3
 80021da:	f001 fc86 	bl	8003aea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021de:	2005      	movs	r0, #5
 80021e0:	f7ff fee6 	bl	8001fb0 <HAL_InitTick>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	e001      	b.n	80021f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021f0:	f7ff fc70 	bl	8001ad4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f4:	79fb      	ldrb	r3, [r7, #7]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_IncTick+0x20>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_IncTick+0x24>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	@ (8002224 <HAL_IncTick+0x24>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20040020 	.word	0x20040020
 8002224:	2004090c 	.word	0x2004090c

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <HAL_GetTick+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	2004090c 	.word	0x2004090c

08002240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff ffee 	bl	8002228 <HAL_GetTick>
 800224c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002258:	d005      	beq.n	8002266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800225a:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <HAL_Delay+0x44>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002266:	bf00      	nop
 8002268:	f7ff ffde 	bl	8002228 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f7      	bhi.n	8002268 <HAL_Delay+0x28>
  {
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20040020 	.word	0x20040020

08002288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3360      	adds	r3, #96	@ 0x60
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <LL_ADC_SetOffset+0x44>)
 8002312:	4013      	ands	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	4313      	orrs	r3, r2
 8002320:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	03fff000 	.word	0x03fff000

08002338 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3360      	adds	r3, #96	@ 0x60
 8002346:	461a      	mov	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3360      	adds	r3, #96	@ 0x60
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	615a      	str	r2, [r3, #20]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e000      	b.n	80023da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b087      	sub	sp, #28
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	60b9      	str	r1, [r7, #8]
 80023f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3330      	adds	r3, #48	@ 0x30
 80023f6:	461a      	mov	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	4413      	add	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f003 031f 	and.w	r3, r3, #31
 8002410:	211f      	movs	r1, #31
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	f003 011f 	and.w	r1, r3, #31
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	431a      	orrs	r2, r3
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002464:	b480      	push	{r7}
 8002466:	b087      	sub	sp, #28
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	3314      	adds	r3, #20
 8002474:	461a      	mov	r2, r3
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	0e5b      	lsrs	r3, r3, #25
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	4413      	add	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	0d1b      	lsrs	r3, r3, #20
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2107      	movs	r1, #7
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	401a      	ands	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	0d1b      	lsrs	r3, r3, #20
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	fa01 f303 	lsl.w	r3, r1, r3
 80024a8:	431a      	orrs	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d4:	43db      	mvns	r3, r3
 80024d6:	401a      	ands	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f003 0318 	and.w	r3, r3, #24
 80024de:	4908      	ldr	r1, [pc, #32]	@ (8002500 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024e0:	40d9      	lsrs	r1, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	400b      	ands	r3, r1
 80024e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ea:	431a      	orrs	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024f2:	bf00      	nop
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	0007ffff 	.word	0x0007ffff

08002504 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002514:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6093      	str	r3, [r2, #8]
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800253c:	d101      	bne.n	8002542 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002560:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002564:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002588:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800258c:	d101      	bne.n	8002592 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025b4:	f043 0201 	orr.w	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025dc:	f043 0202 	orr.w	r2, r3, #2
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <LL_ADC_IsEnabled+0x18>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <LL_ADC_IsEnabled+0x1a>
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b02      	cmp	r3, #2
 8002628:	d101      	bne.n	800262e <LL_ADC_IsDisableOngoing+0x18>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_IsDisableOngoing+0x1a>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800264c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d101      	bne.n	800267c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b08      	cmp	r3, #8
 800269c:	d101      	bne.n	80026a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e129      	b.n	800291e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff fa23 	bl	8001b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff19 	bl	8002528 <LL_ADC_IsDeepPowerDownEnabled>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff feff 	bl	8002504 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff34 	bl	8002578 <LL_ADC_IsInternalRegulatorEnabled>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d115      	bne.n	8002742 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff18 	bl	8002550 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002720:	4b81      	ldr	r3, [pc, #516]	@ (8002928 <HAL_ADC_Init+0x278>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	4a81      	ldr	r2, [pc, #516]	@ (800292c <HAL_ADC_Init+0x27c>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	3301      	adds	r3, #1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002734:	e002      	b.n	800273c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3b01      	subs	r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f9      	bne.n	8002736 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff16 	bl	8002578 <LL_ADC_IsInternalRegulatorEnabled>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10d      	bne.n	800276e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002756:	f043 0210 	orr.w	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002762:	f043 0201 	orr.w	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff76 	bl	8002664 <LL_ADC_REG_IsConversionOngoing>
 8002778:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 80c2 	bne.w	800290c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 80be 	bne.w	800290c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002794:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002798:	f043 0202 	orr.w	r2, r3, #2
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff23 	bl	80025f0 <LL_ADC_IsEnabled>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027b0:	485f      	ldr	r0, [pc, #380]	@ (8002930 <HAL_ADC_Init+0x280>)
 80027b2:	f7ff ff1d 	bl	80025f0 <LL_ADC_IsEnabled>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4619      	mov	r1, r3
 80027c2:	485c      	ldr	r0, [pc, #368]	@ (8002934 <HAL_ADC_Init+0x284>)
 80027c4:	f7ff fd60 	bl	8002288 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7e5b      	ldrb	r3, [r3, #25]
 80027cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80027d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80027de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d106      	bne.n	8002804 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	3b01      	subs	r3, #1
 80027fc:	045b      	lsls	r3, r3, #17
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d009      	beq.n	8002820 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002810:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002818:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	4b44      	ldr	r3, [pc, #272]	@ (8002938 <HAL_ADC_Init+0x288>)
 8002828:	4013      	ands	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	69b9      	ldr	r1, [r7, #24]
 8002830:	430b      	orrs	r3, r1
 8002832:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff26 	bl	800268a <LL_ADC_INJ_IsConversionOngoing>
 800283e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d140      	bne.n	80028c8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d13d      	bne.n	80028c8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7e1b      	ldrb	r3, [r3, #24]
 8002854:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002856:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800285e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800286e:	f023 0306 	bic.w	r3, r3, #6
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	69b9      	ldr	r1, [r7, #24]
 8002878:	430b      	orrs	r3, r1
 800287a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002882:	2b01      	cmp	r3, #1
 8002884:	d118      	bne.n	80028b8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002890:	f023 0304 	bic.w	r3, r3, #4
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800289c:	4311      	orrs	r1, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80028a2:	4311      	orrs	r1, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028a8:	430a      	orrs	r2, r1
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	611a      	str	r2, [r3, #16]
 80028b6:	e007      	b.n	80028c8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10c      	bne.n	80028ea <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	f023 010f 	bic.w	r1, r3, #15
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	1e5a      	subs	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80028e8:	e007      	b.n	80028fa <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 020f 	bic.w	r2, r2, #15
 80028f8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fe:	f023 0303 	bic.w	r3, r3, #3
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	659a      	str	r2, [r3, #88]	@ 0x58
 800290a:	e007      	b.n	800291c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002910:	f043 0210 	orr.w	r2, r3, #16
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800291c:	7ffb      	ldrb	r3, [r7, #31]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	20040018 	.word	0x20040018
 800292c:	053e2d63 	.word	0x053e2d63
 8002930:	50040000 	.word	0x50040000
 8002934:	50040300 	.word	0x50040300
 8002938:	fff0c007 	.word	0xfff0c007

0800293c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fe8b 	bl	8002664 <LL_ADC_REG_IsConversionOngoing>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	f040 80a0 	bne.w	8002a96 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_ADC_Start_IT+0x28>
 8002960:	2302      	movs	r3, #2
 8002962:	e09b      	b.n	8002a9c <HAL_ADC_Start_IT+0x160>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fe6b 	bl	8003648 <ADC_Enable>
 8002972:	4603      	mov	r3, r0
 8002974:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f040 8087 	bne.w	8002a8c <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002982:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002996:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a2:	f023 0206 	bic.w	r2, r3, #6
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029aa:	e002      	b.n	80029b2 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	221c      	movs	r2, #28
 80029b8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 021c 	bic.w	r2, r2, #28
 80029d0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d108      	bne.n	80029ec <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0208 	orr.w	r2, r2, #8
 80029e8:	605a      	str	r2, [r3, #4]
          break;
 80029ea:	e008      	b.n	80029fe <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0204 	orr.w	r2, r2, #4
 80029fa:	605a      	str	r2, [r3, #4]
          break;
 80029fc:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d107      	bne.n	8002a16 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0210 	orr.w	r2, r2, #16
 8002a14:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d02d      	beq.n	8002a80 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a2c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d110      	bne.n	8002a5e <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0220 	bic.w	r2, r2, #32
 8002a4a:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a5a:	605a      	str	r2, [r3, #4]
            break;
 8002a5c:	e010      	b.n	8002a80 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a6c:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0220 	orr.w	r2, r2, #32
 8002a7c:	605a      	str	r2, [r3, #4]
            break;
 8002a7e:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fdd9 	bl	800263c <LL_ADC_REG_StartConversion>
 8002a8a:	e006      	b.n	8002a9a <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002a94:	e001      	b.n	8002a9a <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
 8002a98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b088      	sub	sp, #32
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d017      	beq.n	8002b14 <HAL_ADC_IRQHandler+0x56>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 ff38 	bl	800397c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2202      	movs	r2, #2
 8002b12:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d004      	beq.n	8002b28 <HAL_ADC_IRQHandler+0x6a>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d05e      	beq.n	8002bf0 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d059      	beq.n	8002bf0 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fc31 	bl	80023c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d03e      	beq.n	8002be2 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d135      	bne.n	8002be2 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d12e      	bne.n	8002be2 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fd6b 	bl	8002664 <LL_ADC_REG_IsConversionOngoing>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11a      	bne.n	8002bca <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 020c 	bic.w	r2, r2, #12
 8002ba2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d112      	bne.n	8002be2 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bc8:	e00b      	b.n	8002be2 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bce:	f043 0210 	orr.w	r2, r3, #16
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fe fd14 	bl	8001610 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	220c      	movs	r2, #12
 8002bee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d004      	beq.n	8002c04 <HAL_ADC_IRQHandler+0x146>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d072      	beq.n	8002cf4 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d06d      	beq.n	8002cf4 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c28:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fc02 	bl	800243e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c3a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fbbd 	bl	80023c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c46:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d047      	beq.n	8002ce6 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_ADC_IRQHandler+0x1b2>
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d03f      	beq.n	8002ce6 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d13a      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7a:	2b40      	cmp	r3, #64	@ 0x40
 8002c7c:	d133      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d12e      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fcfc 	bl	800268a <LL_ADC_INJ_IsConversionOngoing>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d11a      	bne.n	8002cce <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002ca6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d112      	bne.n	8002ce6 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc4:	f043 0201 	orr.w	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ccc:	e00b      	b.n	8002ce6 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd2:	f043 0210 	orr.w	r2, r3, #16
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fe20 	bl	800392c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2260      	movs	r2, #96	@ 0x60
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d011      	beq.n	8002d22 <HAL_ADC_IRQHandler+0x264>
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00c      	beq.n	8002d22 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f886 	bl	8002e26 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2280      	movs	r2, #128	@ 0x80
 8002d20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d012      	beq.n	8002d52 <HAL_ADC_IRQHandler+0x294>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00d      	beq.n	8002d52 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fe06 	bl	8003954 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d50:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d012      	beq.n	8002d82 <HAL_ADC_IRQHandler+0x2c4>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d6a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fdf8 	bl	8003968 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02a      	beq.n	8002de2 <HAL_ADC_IRQHandler+0x324>
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d025      	beq.n	8002de2 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d102      	bne.n	8002da4 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	e008      	b.n	8002db6 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002db2:	2301      	movs	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d10e      	bne.n	8002dda <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dcc:	f043 0202 	orr.w	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f830 	bl	8002e3a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2210      	movs	r2, #16
 8002de0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d018      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x360>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d013      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e06:	f043 0208 	orr.w	r2, r3, #8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e16:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fd91 	bl	8003940 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002e1e:	bf00      	nop
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b0b6      	sub	sp, #216	@ 0xd8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d101      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x22>
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e3d5      	b.n	800361e <HAL_ADC_ConfigChannel+0x7ce>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fbf0 	bl	8002664 <LL_ADC_REG_IsConversionOngoing>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 83ba 	bne.w	8003600 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b05      	cmp	r3, #5
 8002e9a:	d824      	bhi.n	8002ee6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	3b02      	subs	r3, #2
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d81b      	bhi.n	8002ede <HAL_ADC_ConfigChannel+0x8e>
 8002ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8002eac <HAL_ADC_ConfigChannel+0x5c>)
 8002ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eac:	08002ebd 	.word	0x08002ebd
 8002eb0:	08002ec5 	.word	0x08002ec5
 8002eb4:	08002ecd 	.word	0x08002ecd
 8002eb8:	08002ed5 	.word	0x08002ed5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ec2:	e010      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002ec4:	2312      	movs	r3, #18
 8002ec6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002ecc:	2318      	movs	r3, #24
 8002ece:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ed2:	e008      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002edc:	e003      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002ede:	2306      	movs	r3, #6
 8002ee0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ee4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002ef4:	f7ff fa77 	bl	80023e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fbb1 	bl	8002664 <LL_ADC_REG_IsConversionOngoing>
 8002f02:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fbbd 	bl	800268a <LL_ADC_INJ_IsConversionOngoing>
 8002f10:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f040 81bf 	bne.w	800329c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 81ba 	bne.w	800329c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f30:	d10f      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f7ff fa91 	bl	8002464 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fa25 	bl	800239a <LL_ADC_SetSamplingTimeCommonConfig>
 8002f50:	e00e      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	6819      	ldr	r1, [r3, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f7ff fa80 	bl	8002464 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fa15 	bl	800239a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	08db      	lsrs	r3, r3, #3
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d00a      	beq.n	8002fa8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6919      	ldr	r1, [r3, #16]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fa2:	f7ff f9a5 	bl	80022f0 <LL_ADC_SetOffset>
 8002fa6:	e179      	b.n	800329c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2100      	movs	r1, #0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff f9c2 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x184>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff f9b7 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	0e9b      	lsrs	r3, r3, #26
 8002fce:	f003 021f 	and.w	r2, r3, #31
 8002fd2:	e01e      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1c2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff f9ac 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ffa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003002:	2320      	movs	r3, #32
 8003004:	e004      	b.n	8003010 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003006:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301a:	2b00      	cmp	r3, #0
 800301c:	d105      	bne.n	800302a <HAL_ADC_ConfigChannel+0x1da>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	0e9b      	lsrs	r3, r3, #26
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	e018      	b.n	800305c <HAL_ADC_ConfigChannel+0x20c>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800303e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003042:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003046:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e004      	b.n	800305c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003052:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003056:	fab3 f383 	clz	r3, r3
 800305a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800305c:	429a      	cmp	r2, r3
 800305e:	d106      	bne.n	800306e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	2100      	movs	r1, #0
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff f97b 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff f95f 	bl	8002338 <LL_ADC_GetOffsetChannel>
 800307a:	4603      	mov	r3, r0
 800307c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <HAL_ADC_ConfigChannel+0x24a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f954 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8003090:	4603      	mov	r3, r0
 8003092:	0e9b      	lsrs	r3, r3, #26
 8003094:	f003 021f 	and.w	r2, r3, #31
 8003098:	e01e      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x288>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f949 	bl	8002338 <LL_ADC_GetOffsetChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80030b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80030c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 80030c8:	2320      	movs	r3, #32
 80030ca:	e004      	b.n	80030d6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 80030cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x2a0>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	e018      	b.n	8003122 <HAL_ADC_ConfigChannel+0x2d2>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003104:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800310c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e004      	b.n	8003122 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003118:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003122:	429a      	cmp	r2, r3
 8003124:	d106      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	2101      	movs	r1, #1
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f918 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2102      	movs	r1, #2
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f8fc 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x310>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2102      	movs	r1, #2
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff f8f1 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	f003 021f 	and.w	r2, r3, #31
 800315e:	e01e      	b.n	800319e <HAL_ADC_ConfigChannel+0x34e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2102      	movs	r1, #2
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff f8e6 	bl	8002338 <LL_ADC_GetOffsetChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800317e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003182:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e004      	b.n	800319c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8003192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x366>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0e9b      	lsrs	r3, r3, #26
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	e014      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x390>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80031c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80031ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80031d2:	2320      	movs	r3, #32
 80031d4:	e004      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 80031d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d106      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2102      	movs	r1, #2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff f8b9 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2103      	movs	r1, #3
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff f89d 	bl	8002338 <LL_ADC_GetOffsetChannel>
 80031fe:	4603      	mov	r3, r0
 8003200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <HAL_ADC_ConfigChannel+0x3ce>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2103      	movs	r1, #3
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f892 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8003214:	4603      	mov	r3, r0
 8003216:	0e9b      	lsrs	r3, r3, #26
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	e017      	b.n	800324e <HAL_ADC_ConfigChannel+0x3fe>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2103      	movs	r1, #3
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff f887 	bl	8002338 <LL_ADC_GetOffsetChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003238:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800323a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003240:	2320      	movs	r3, #32
 8003242:	e003      	b.n	800324c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003244:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003256:	2b00      	cmp	r3, #0
 8003258:	d105      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x416>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0e9b      	lsrs	r3, r3, #26
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	e011      	b.n	800328a <HAL_ADC_ConfigChannel+0x43a>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003274:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003276:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003278:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800327e:	2320      	movs	r3, #32
 8003280:	e003      	b.n	800328a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8003282:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800328a:	429a      	cmp	r2, r3
 800328c:	d106      	bne.n	800329c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2200      	movs	r2, #0
 8003294:	2103      	movs	r1, #3
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff f864 	bl	8002364 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff f9a5 	bl	80025f0 <LL_ADC_IsEnabled>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f040 813f 	bne.w	800352c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f7ff f8fe 	bl	80024bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003500 <HAL_ADC_ConfigChannel+0x6b0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f040 8130 	bne.w	800352c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10b      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x4a4>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	0e9b      	lsrs	r3, r3, #26
 80032e2:	3301      	adds	r3, #1
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2b09      	cmp	r3, #9
 80032ea:	bf94      	ite	ls
 80032ec:	2301      	movls	r3, #1
 80032ee:	2300      	movhi	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e019      	b.n	8003328 <HAL_ADC_ConfigChannel+0x4d8>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003304:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800330c:	2320      	movs	r3, #32
 800330e:	e003      	b.n	8003318 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	3301      	adds	r3, #1
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	2b09      	cmp	r3, #9
 8003320:	bf94      	ite	ls
 8003322:	2301      	movls	r3, #1
 8003324:	2300      	movhi	r3, #0
 8003326:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003328:	2b00      	cmp	r3, #0
 800332a:	d079      	beq.n	8003420 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003334:	2b00      	cmp	r3, #0
 8003336:	d107      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x4f8>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	0e9b      	lsrs	r3, r3, #26
 800333e:	3301      	adds	r3, #1
 8003340:	069b      	lsls	r3, r3, #26
 8003342:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003346:	e015      	b.n	8003374 <HAL_ADC_ConfigChannel+0x524>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003358:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800335a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003360:	2320      	movs	r3, #32
 8003362:	e003      	b.n	800336c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	3301      	adds	r3, #1
 800336e:	069b      	lsls	r3, r3, #26
 8003370:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x544>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	3301      	adds	r3, #1
 8003388:	f003 031f 	and.w	r3, r3, #31
 800338c:	2101      	movs	r1, #1
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	e017      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x574>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80033a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80033a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80033ac:	2320      	movs	r3, #32
 80033ae:	e003      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80033b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	3301      	adds	r3, #1
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f303 	lsl.w	r3, r1, r3
 80033c4:	ea42 0103 	orr.w	r1, r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x59a>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	0e9b      	lsrs	r3, r3, #26
 80033da:	3301      	adds	r3, #1
 80033dc:	f003 021f 	and.w	r2, r3, #31
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	051b      	lsls	r3, r3, #20
 80033e8:	e018      	b.n	800341c <HAL_ADC_ConfigChannel+0x5cc>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80033f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80033fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003402:	2320      	movs	r3, #32
 8003404:	e003      	b.n	800340e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	3301      	adds	r3, #1
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800341c:	430b      	orrs	r3, r1
 800341e:	e080      	b.n	8003522 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_ADC_ConfigChannel+0x5ec>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	0e9b      	lsrs	r3, r3, #26
 8003432:	3301      	adds	r3, #1
 8003434:	069b      	lsls	r3, r3, #26
 8003436:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800343a:	e015      	b.n	8003468 <HAL_ADC_ConfigChannel+0x618>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800344e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003454:	2320      	movs	r3, #32
 8003456:	e003      	b.n	8003460 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	3301      	adds	r3, #1
 8003462:	069b      	lsls	r3, r3, #26
 8003464:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x638>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0e9b      	lsrs	r3, r3, #26
 800347a:	3301      	adds	r3, #1
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	e017      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x668>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	61bb      	str	r3, [r7, #24]
  return result;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80034a0:	2320      	movs	r3, #32
 80034a2:	e003      	b.n	80034ac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	3301      	adds	r3, #1
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	2101      	movs	r1, #1
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	ea42 0103 	orr.w	r1, r2, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10d      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x694>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	0e9b      	lsrs	r3, r3, #26
 80034ce:	3301      	adds	r3, #1
 80034d0:	f003 021f 	and.w	r2, r3, #31
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	3b1e      	subs	r3, #30
 80034dc:	051b      	lsls	r3, r3, #20
 80034de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034e2:	e01d      	b.n	8003520 <HAL_ADC_ConfigChannel+0x6d0>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	60fb      	str	r3, [r7, #12]
  return result;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d103      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	e005      	b.n	800350c <HAL_ADC_ConfigChannel+0x6bc>
 8003500:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3301      	adds	r3, #1
 800350e:	f003 021f 	and.w	r2, r3, #31
 8003512:	4613      	mov	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	4413      	add	r3, r2
 8003518:	3b1e      	subs	r3, #30
 800351a:	051b      	lsls	r3, r3, #20
 800351c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003520:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003526:	4619      	mov	r1, r3
 8003528:	f7fe ff9c 	bl	8002464 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	4b3d      	ldr	r3, [pc, #244]	@ (8003628 <HAL_ADC_ConfigChannel+0x7d8>)
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d06c      	beq.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003538:	483c      	ldr	r0, [pc, #240]	@ (800362c <HAL_ADC_ConfigChannel+0x7dc>)
 800353a:	f7fe fecb 	bl	80022d4 <LL_ADC_GetCommonPathInternalCh>
 800353e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a3a      	ldr	r2, [pc, #232]	@ (8003630 <HAL_ADC_ConfigChannel+0x7e0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d127      	bne.n	800359c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800354c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003550:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d121      	bne.n	800359c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a35      	ldr	r2, [pc, #212]	@ (8003634 <HAL_ADC_ConfigChannel+0x7e4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d157      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003566:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800356a:	4619      	mov	r1, r3
 800356c:	482f      	ldr	r0, [pc, #188]	@ (800362c <HAL_ADC_ConfigChannel+0x7dc>)
 800356e:	f7fe fe9e 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003572:	4b31      	ldr	r3, [pc, #196]	@ (8003638 <HAL_ADC_ConfigChannel+0x7e8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	099b      	lsrs	r3, r3, #6
 8003578:	4a30      	ldr	r2, [pc, #192]	@ (800363c <HAL_ADC_ConfigChannel+0x7ec>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	099b      	lsrs	r3, r3, #6
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800358c:	e002      	b.n	8003594 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	3b01      	subs	r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f9      	bne.n	800358e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800359a:	e03a      	b.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a27      	ldr	r2, [pc, #156]	@ (8003640 <HAL_ADC_ConfigChannel+0x7f0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d113      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10d      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003634 <HAL_ADC_ConfigChannel+0x7e4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d12a      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c4:	4619      	mov	r1, r3
 80035c6:	4819      	ldr	r0, [pc, #100]	@ (800362c <HAL_ADC_ConfigChannel+0x7dc>)
 80035c8:	f7fe fe71 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035cc:	e021      	b.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003644 <HAL_ADC_ConfigChannel+0x7f4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d11c      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d116      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a12      	ldr	r2, [pc, #72]	@ (8003634 <HAL_ADC_ConfigChannel+0x7e4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d111      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035f6:	4619      	mov	r1, r3
 80035f8:	480c      	ldr	r0, [pc, #48]	@ (800362c <HAL_ADC_ConfigChannel+0x7dc>)
 80035fa:	f7fe fe58 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
 80035fe:	e008      	b.n	8003612 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800361a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800361e:	4618      	mov	r0, r3
 8003620:	37d8      	adds	r7, #216	@ 0xd8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	80080000 	.word	0x80080000
 800362c:	50040300 	.word	0x50040300
 8003630:	c7520000 	.word	0xc7520000
 8003634:	50040000 	.word	0x50040000
 8003638:	20040018 	.word	0x20040018
 800363c:	053e2d63 	.word	0x053e2d63
 8003640:	cb840000 	.word	0xcb840000
 8003644:	80000001 	.word	0x80000001

08003648 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003650:	2300      	movs	r3, #0
 8003652:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe ffc9 	bl	80025f0 <LL_ADC_IsEnabled>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d169      	bne.n	8003738 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	4b36      	ldr	r3, [pc, #216]	@ (8003744 <ADC_Enable+0xfc>)
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003676:	f043 0210 	orr.w	r2, r3, #16
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003682:	f043 0201 	orr.w	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e055      	b.n	800373a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe ff84 	bl	80025a0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003698:	482b      	ldr	r0, [pc, #172]	@ (8003748 <ADC_Enable+0x100>)
 800369a:	f7fe fe1b 	bl	80022d4 <LL_ADC_GetCommonPathInternalCh>
 800369e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036a8:	4b28      	ldr	r3, [pc, #160]	@ (800374c <ADC_Enable+0x104>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	099b      	lsrs	r3, r3, #6
 80036ae:	4a28      	ldr	r2, [pc, #160]	@ (8003750 <ADC_Enable+0x108>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	099b      	lsrs	r3, r3, #6
 80036b6:	1c5a      	adds	r2, r3, #1
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036c2:	e002      	b.n	80036ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f9      	bne.n	80036c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036d0:	f7fe fdaa 	bl	8002228 <HAL_GetTick>
 80036d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036d6:	e028      	b.n	800372a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fe ff87 	bl	80025f0 <LL_ADC_IsEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe ff57 	bl	80025a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036f2:	f7fe fd99 	bl	8002228 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d914      	bls.n	800372a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d00d      	beq.n	800372a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	f043 0210 	orr.w	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371e:	f043 0201 	orr.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e007      	b.n	800373a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d1cf      	bne.n	80036d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	8000003f 	.word	0x8000003f
 8003748:	50040300 	.word	0x50040300
 800374c:	20040018 	.word	0x20040018
 8003750:	053e2d63 	.word	0x053e2d63

08003754 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe ff58 	bl	8002616 <LL_ADC_IsDisableOngoing>
 8003766:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe ff3f 	bl	80025f0 <LL_ADC_IsEnabled>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d047      	beq.n	8003808 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d144      	bne.n	8003808 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 030d 	and.w	r3, r3, #13
 8003788:	2b01      	cmp	r3, #1
 800378a:	d10c      	bne.n	80037a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fe ff19 	bl	80025c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2203      	movs	r2, #3
 800379c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800379e:	f7fe fd43 	bl	8002228 <HAL_GetTick>
 80037a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037a4:	e029      	b.n	80037fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037aa:	f043 0210 	orr.w	r2, r3, #16
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b6:	f043 0201 	orr.w	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e023      	b.n	800380a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037c2:	f7fe fd31 	bl	8002228 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d914      	bls.n	80037fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00d      	beq.n	80037fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	f043 0210 	orr.w	r2, r3, #16
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	f043 0201 	orr.w	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e007      	b.n	800380a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 0301 	and.w	r3, r3, #1
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1dc      	bne.n	80037c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <LL_ADC_StartCalibration>:
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003824:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800382e:	4313      	orrs	r3, r2
 8003830:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	609a      	str	r2, [r3, #8]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_IsCalibrationOnGoing>:
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003854:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003858:	d101      	bne.n	800385e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003876:	2300      	movs	r3, #0
 8003878:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_ADCEx_Calibration_Start+0x1c>
 8003884:	2302      	movs	r3, #2
 8003886:	e04d      	b.n	8003924 <HAL_ADCEx_Calibration_Start+0xb8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff5f 	bl	8003754 <ADC_Disable>
 8003896:	4603      	mov	r3, r0
 8003898:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d136      	bne.n	800390e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038a8:	f023 0302 	bic.w	r3, r3, #2
 80038ac:	f043 0202 	orr.w	r2, r3, #2
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff ffa9 	bl	8003812 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038c0:	e014      	b.n	80038ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	3301      	adds	r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80038ce:	d30d      	bcc.n	80038ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d4:	f023 0312 	bic.w	r3, r3, #18
 80038d8:	f043 0210 	orr.w	r2, r3, #16
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e01b      	b.n	8003924 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ffa7 	bl	8003844 <LL_ADC_IsCalibrationOnGoing>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e2      	bne.n	80038c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003900:	f023 0303 	bic.w	r3, r3, #3
 8003904:	f043 0201 	orr.w	r2, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	659a      	str	r2, [r3, #88]	@ 0x58
 800390c:	e005      	b.n	800391a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003912:	f043 0210 	orr.w	r2, r3, #16
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003922:	7bfb      	ldrb	r3, [r7, #15]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a0:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039ac:	4013      	ands	r3, r2
 80039ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c2:	4a04      	ldr	r2, [pc, #16]	@ (80039d4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	60d3      	str	r3, [r2, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039dc:	4b04      	ldr	r3, [pc, #16]	@ (80039f0 <__NVIC_GetPriorityGrouping+0x18>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	f003 0307 	and.w	r3, r3, #7
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	db0b      	blt.n	8003a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	f003 021f 	and.w	r2, r3, #31
 8003a0c:	4907      	ldr	r1, [pc, #28]	@ (8003a2c <__NVIC_EnableIRQ+0x38>)
 8003a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	2001      	movs	r0, #1
 8003a16:	fa00 f202 	lsl.w	r2, r0, r2
 8003a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	e000e100 	.word	0xe000e100

08003a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	6039      	str	r1, [r7, #0]
 8003a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	db0a      	blt.n	8003a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	490c      	ldr	r1, [pc, #48]	@ (8003a7c <__NVIC_SetPriority+0x4c>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	440b      	add	r3, r1
 8003a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a58:	e00a      	b.n	8003a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4908      	ldr	r1, [pc, #32]	@ (8003a80 <__NVIC_SetPriority+0x50>)
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	3b04      	subs	r3, #4
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	761a      	strb	r2, [r3, #24]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000e100 	.word	0xe000e100
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b089      	sub	sp, #36	@ 0x24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f1c3 0307 	rsb	r3, r3, #7
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	bf28      	it	cs
 8003aa2:	2304      	movcs	r3, #4
 8003aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d902      	bls.n	8003ab4 <NVIC_EncodePriority+0x30>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	3b03      	subs	r3, #3
 8003ab2:	e000      	b.n	8003ab6 <NVIC_EncodePriority+0x32>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003acc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	43d9      	mvns	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003adc:	4313      	orrs	r3, r2
         );
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3724      	adds	r7, #36	@ 0x24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7ff ff4c 	bl	8003990 <__NVIC_SetPriorityGrouping>
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
 8003b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b12:	f7ff ff61 	bl	80039d8 <__NVIC_GetPriorityGrouping>
 8003b16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	6978      	ldr	r0, [r7, #20]
 8003b1e:	f7ff ffb1 	bl	8003a84 <NVIC_EncodePriority>
 8003b22:	4602      	mov	r2, r0
 8003b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff80 	bl	8003a30 <__NVIC_SetPriority>
}
 8003b30:	bf00      	nop
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff ff54 	bl	80039f4 <__NVIC_EnableIRQ>
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e014      	b.n	8003b90 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	791b      	ldrb	r3, [r3, #4]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d105      	bne.n	8003b7c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fe f844 	bl	8001c04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	795b      	ldrb	r3, [r3, #5]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_DAC_Start+0x16>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e040      	b.n	8003c30 <HAL_DAC_Start+0x98>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6819      	ldr	r1, [r3, #0]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d11d      	bne.n	8003c22 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	e014      	b.n	8003c22 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2102      	movs	r1, #2
 8003c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d107      	bne.n	8003c22 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0202 	orr.w	r2, r2, #2
 8003c20:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c52:	d120      	bne.n	8003c96 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c62:	d118      	bne.n	8003c96 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2204      	movs	r2, #4
 8003c68:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f043 0201 	orr.w	r2, r3, #1
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c7e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f852 	bl	8003d3a <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ca4:	d120      	bne.n	8003ce8 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cb4:	d118      	bne.n	8003ce8 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f043 0202 	orr.w	r2, r3, #2
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003cd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003ce0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f980 	bl	8003fe8 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d105      	bne.n	8003d1a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4413      	add	r3, r2
 8003d14:	3308      	adds	r3, #8
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e004      	b.n	8003d24 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4413      	add	r3, r2
 8003d20:	3314      	adds	r3, #20
 8003d22:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	461a      	mov	r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	795b      	ldrb	r3, [r3, #5]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_DAC_ConfigChannel+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e137      	b.n	8003fdc <HAL_DAC_ConfigChannel+0x28c>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2202      	movs	r2, #2
 8003d76:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b04      	cmp	r3, #4
 8003d7e:	f040 8081 	bne.w	8003e84 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003d82:	f7fe fa51 	bl	8002228 <HAL_GetTick>
 8003d86:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d140      	bne.n	8003e10 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d8e:	e018      	b.n	8003dc2 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003d90:	f7fe fa4a 	bl	8002228 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d911      	bls.n	8003dc2 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f043 0208 	orr.w	r2, r3, #8
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2203      	movs	r2, #3
 8003dbc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e10c      	b.n	8003fdc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1df      	bne.n	8003d90 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	f7fe fa35 	bl	8002240 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	69d2      	ldr	r2, [r2, #28]
 8003dde:	641a      	str	r2, [r3, #64]	@ 0x40
 8003de0:	e023      	b.n	8003e2a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003de2:	f7fe fa21 	bl	8002228 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d90f      	bls.n	8003e10 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	da0a      	bge.n	8003e10 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f043 0208 	orr.w	r2, r3, #8
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2203      	movs	r2, #3
 8003e0a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e0e5      	b.n	8003fdc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	dbe3      	blt.n	8003de2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f7fe fa10 	bl	8002240 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	69d2      	ldr	r2, [r2, #28]
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f003 0310 	and.w	r3, r3, #16
 8003e36:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	ea02 0103 	and.w	r1, r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6a1a      	ldr	r2, [r3, #32]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	21ff      	movs	r1, #255	@ 0xff
 8003e66:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	ea02 0103 	and.w	r1, r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d11d      	bne.n	8003ec8 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	221f      	movs	r2, #31
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f003 0310 	and.w	r3, r3, #16
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ece:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2207      	movs	r2, #7
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	43db      	mvns	r3, r3
 8003ede:	69fa      	ldr	r2, [r7, #28]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6819      	ldr	r1, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	43da      	mvns	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	400a      	ands	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6c:	d104      	bne.n	8003f78 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f74:	61fb      	str	r3, [r7, #28]
 8003f76:	e018      	b.n	8003faa <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d104      	bne.n	8003f8a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e00f      	b.n	8003faa <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8003f8a:	f001 f9fb 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 8003f8e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4a14      	ldr	r2, [pc, #80]	@ (8003fe4 <HAL_DAC_ConfigChannel+0x294>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d904      	bls.n	8003fa2 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	e003      	b.n	8003faa <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003fa8:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6819      	ldr	r1, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f003 0310 	and.w	r3, r3, #16
 8003fbe:	22c0      	movs	r2, #192	@ 0xc0
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43da      	mvns	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	400a      	ands	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	04c4b400 	.word	0x04c4b400

08003fe8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400a:	e166      	b.n	80042da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2101      	movs	r1, #1
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	4013      	ands	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 8158 	beq.w	80042d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b01      	cmp	r3, #1
 800402e:	d005      	beq.n	800403c <HAL_GPIO_Init+0x40>
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d130      	bne.n	800409e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	2203      	movs	r2, #3
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	4013      	ands	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004072:	2201      	movs	r2, #1
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	43db      	mvns	r3, r3
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4013      	ands	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 0201 	and.w	r2, r3, #1
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d017      	beq.n	80040da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	2203      	movs	r2, #3
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f003 0303 	and.w	r3, r3, #3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d123      	bne.n	800412e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	08da      	lsrs	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3208      	adds	r2, #8
 80040ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f003 0307 	and.w	r3, r3, #7
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	220f      	movs	r2, #15
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	4013      	ands	r3, r2
 8004108:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	08da      	lsrs	r2, r3, #3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3208      	adds	r2, #8
 8004128:	6939      	ldr	r1, [r7, #16]
 800412a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	2203      	movs	r2, #3
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0203 	and.w	r2, r3, #3
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80b2 	beq.w	80042d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004170:	4b61      	ldr	r3, [pc, #388]	@ (80042f8 <HAL_GPIO_Init+0x2fc>)
 8004172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004174:	4a60      	ldr	r2, [pc, #384]	@ (80042f8 <HAL_GPIO_Init+0x2fc>)
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	6613      	str	r3, [r2, #96]	@ 0x60
 800417c:	4b5e      	ldr	r3, [pc, #376]	@ (80042f8 <HAL_GPIO_Init+0x2fc>)
 800417e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004188:	4a5c      	ldr	r2, [pc, #368]	@ (80042fc <HAL_GPIO_Init+0x300>)
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	089b      	lsrs	r3, r3, #2
 800418e:	3302      	adds	r3, #2
 8004190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	220f      	movs	r2, #15
 80041a0:	fa02 f303 	lsl.w	r3, r2, r3
 80041a4:	43db      	mvns	r3, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80041b2:	d02b      	beq.n	800420c <HAL_GPIO_Init+0x210>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a52      	ldr	r2, [pc, #328]	@ (8004300 <HAL_GPIO_Init+0x304>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d025      	beq.n	8004208 <HAL_GPIO_Init+0x20c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a51      	ldr	r2, [pc, #324]	@ (8004304 <HAL_GPIO_Init+0x308>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d01f      	beq.n	8004204 <HAL_GPIO_Init+0x208>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a50      	ldr	r2, [pc, #320]	@ (8004308 <HAL_GPIO_Init+0x30c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d019      	beq.n	8004200 <HAL_GPIO_Init+0x204>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a4f      	ldr	r2, [pc, #316]	@ (800430c <HAL_GPIO_Init+0x310>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <HAL_GPIO_Init+0x200>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a4e      	ldr	r2, [pc, #312]	@ (8004310 <HAL_GPIO_Init+0x314>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00d      	beq.n	80041f8 <HAL_GPIO_Init+0x1fc>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a4d      	ldr	r2, [pc, #308]	@ (8004314 <HAL_GPIO_Init+0x318>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d007      	beq.n	80041f4 <HAL_GPIO_Init+0x1f8>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a4c      	ldr	r2, [pc, #304]	@ (8004318 <HAL_GPIO_Init+0x31c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d101      	bne.n	80041f0 <HAL_GPIO_Init+0x1f4>
 80041ec:	2307      	movs	r3, #7
 80041ee:	e00e      	b.n	800420e <HAL_GPIO_Init+0x212>
 80041f0:	2308      	movs	r3, #8
 80041f2:	e00c      	b.n	800420e <HAL_GPIO_Init+0x212>
 80041f4:	2306      	movs	r3, #6
 80041f6:	e00a      	b.n	800420e <HAL_GPIO_Init+0x212>
 80041f8:	2305      	movs	r3, #5
 80041fa:	e008      	b.n	800420e <HAL_GPIO_Init+0x212>
 80041fc:	2304      	movs	r3, #4
 80041fe:	e006      	b.n	800420e <HAL_GPIO_Init+0x212>
 8004200:	2303      	movs	r3, #3
 8004202:	e004      	b.n	800420e <HAL_GPIO_Init+0x212>
 8004204:	2302      	movs	r3, #2
 8004206:	e002      	b.n	800420e <HAL_GPIO_Init+0x212>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_GPIO_Init+0x212>
 800420c:	2300      	movs	r3, #0
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	f002 0203 	and.w	r2, r2, #3
 8004214:	0092      	lsls	r2, r2, #2
 8004216:	4093      	lsls	r3, r2
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	4313      	orrs	r3, r2
 800421c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800421e:	4937      	ldr	r1, [pc, #220]	@ (80042fc <HAL_GPIO_Init+0x300>)
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	3302      	adds	r3, #2
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800422c:	4b3b      	ldr	r3, [pc, #236]	@ (800431c <HAL_GPIO_Init+0x320>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	43db      	mvns	r3, r3
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004250:	4a32      	ldr	r2, [pc, #200]	@ (800431c <HAL_GPIO_Init+0x320>)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004256:	4b31      	ldr	r3, [pc, #196]	@ (800431c <HAL_GPIO_Init+0x320>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	43db      	mvns	r3, r3
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4013      	ands	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800427a:	4a28      	ldr	r2, [pc, #160]	@ (800431c <HAL_GPIO_Init+0x320>)
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004280:	4b26      	ldr	r3, [pc, #152]	@ (800431c <HAL_GPIO_Init+0x320>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	43db      	mvns	r3, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042a4:	4a1d      	ldr	r2, [pc, #116]	@ (800431c <HAL_GPIO_Init+0x320>)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80042aa:	4b1c      	ldr	r3, [pc, #112]	@ (800431c <HAL_GPIO_Init+0x320>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	43db      	mvns	r3, r3
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4013      	ands	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042ce:	4a13      	ldr	r2, [pc, #76]	@ (800431c <HAL_GPIO_Init+0x320>)
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3301      	adds	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f47f ae91 	bne.w	800400c <HAL_GPIO_Init+0x10>
  }
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40010000 	.word	0x40010000
 8004300:	48000400 	.word	0x48000400
 8004304:	48000800 	.word	0x48000800
 8004308:	48000c00 	.word	0x48000c00
 800430c:	48001000 	.word	0x48001000
 8004310:	48001400 	.word	0x48001400
 8004314:	48001800 	.word	0x48001800
 8004318:	48001c00 	.word	0x48001c00
 800431c:	40010400 	.word	0x40010400

08004320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	807b      	strh	r3, [r7, #2]
 800432c:	4613      	mov	r3, r2
 800432e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004330:	787b      	ldrb	r3, [r7, #1]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004336:	887a      	ldrh	r2, [r7, #2]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800433c:	e002      	b.n	8004344 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800433e:	887a      	ldrh	r2, [r7, #2]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800435a:	4b08      	ldr	r3, [pc, #32]	@ (800437c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800435c:	695a      	ldr	r2, [r3, #20]
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	4013      	ands	r3, r2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d006      	beq.n	8004374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004366:	4a05      	ldr	r2, [pc, #20]	@ (800437c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800436c:	88fb      	ldrh	r3, [r7, #6]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f806 	bl	8004380 <HAL_GPIO_EXTI_Callback>
  }
}
 8004374:	bf00      	nop
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40010400 	.word	0x40010400

08004380 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af02      	add	r7, sp, #8
 800439c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e101      	b.n	80045ac <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d106      	bne.n	80043c2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7fd fd6b 	bl	8001e98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2203      	movs	r2, #3
 80043c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f003 f958 	bl	800768a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	7c1a      	ldrb	r2, [r3, #16]
 80043e2:	f88d 2000 	strb.w	r2, [sp]
 80043e6:	3304      	adds	r3, #4
 80043e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ea:	f003 f921 	bl	8007630 <USB_CoreInit>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0d5      	b.n	80045ac <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f003 f950 	bl	80076ac <USB_SetCurrentMode>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2202      	movs	r2, #2
 8004416:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e0c6      	b.n	80045ac <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
 8004422:	e04a      	b.n	80044ba <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004424:	7bfa      	ldrb	r2, [r7, #15]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	3315      	adds	r3, #21
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004438:	7bfa      	ldrb	r2, [r7, #15]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	3314      	adds	r3, #20
 8004448:	7bfa      	ldrb	r2, [r7, #15]
 800444a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800444c:	7bfa      	ldrb	r2, [r7, #15]
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	b298      	uxth	r0, r3
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	332e      	adds	r3, #46	@ 0x2e
 8004460:	4602      	mov	r2, r0
 8004462:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	3318      	adds	r3, #24
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004478:	7bfa      	ldrb	r2, [r7, #15]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	331c      	adds	r3, #28
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800448c:	7bfa      	ldrb	r2, [r7, #15]
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	3320      	adds	r3, #32
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044a0:	7bfa      	ldrb	r2, [r7, #15]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	3324      	adds	r3, #36	@ 0x24
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	3301      	adds	r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	791b      	ldrb	r3, [r3, #4]
 80044be:	7bfa      	ldrb	r2, [r7, #15]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3af      	bcc.n	8004424 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]
 80044c8:	e044      	b.n	8004554 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044ca:	7bfa      	ldrb	r2, [r7, #15]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	440b      	add	r3, r1
 80044d8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044e0:	7bfa      	ldrb	r2, [r7, #15]
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	4613      	mov	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80044f2:	7bfa      	ldrb	r2, [r7, #15]
 80044f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800450c:	7bfa      	ldrb	r2, [r7, #15]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004522:	7bfa      	ldrb	r2, [r7, #15]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004534:	2200      	movs	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004538:	7bfa      	ldrb	r2, [r7, #15]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800454a:	2200      	movs	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	3301      	adds	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	791b      	ldrb	r3, [r3, #4]
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	429a      	cmp	r2, r3
 800455c:	d3b5      	bcc.n	80044ca <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	7c1a      	ldrb	r2, [r3, #16]
 8004566:	f88d 2000 	strb.w	r2, [sp]
 800456a:	3304      	adds	r3, #4
 800456c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800456e:	f003 f8e9 	bl	8007744 <USB_DevInit>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e013      	b.n	80045ac <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	7b1b      	ldrb	r3, [r3, #12]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d102      	bne.n	80045a0 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f80a 	bl	80045b4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f003 fa8e 	bl	8007ac6 <USB_DevDisconnect>

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e6:	f043 0303 	orr.w	r3, r3, #3
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004600:	4b0d      	ldr	r3, [pc, #52]	@ (8004638 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004608:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800460c:	d102      	bne.n	8004614 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800460e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004612:	e00b      	b.n	800462c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004614:	4b08      	ldr	r3, [pc, #32]	@ (8004638 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800461a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004622:	d102      	bne.n	800462a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004628:	e000      	b.n	800462c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800462a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800462c:	4618      	mov	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40007000 	.word	0x40007000

0800463c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d141      	bne.n	80046ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800464a:	4b4b      	ldr	r3, [pc, #300]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004656:	d131      	bne.n	80046bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004658:	4b47      	ldr	r3, [pc, #284]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800465a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800465e:	4a46      	ldr	r2, [pc, #280]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004664:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004668:	4b43      	ldr	r3, [pc, #268]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004670:	4a41      	ldr	r2, [pc, #260]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004672:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004676:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004678:	4b40      	ldr	r3, [pc, #256]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2232      	movs	r2, #50	@ 0x32
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	4a3f      	ldr	r2, [pc, #252]	@ (8004780 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	0c9b      	lsrs	r3, r3, #18
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800468e:	e002      	b.n	8004696 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3b01      	subs	r3, #1
 8004694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004696:	4b38      	ldr	r3, [pc, #224]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a2:	d102      	bne.n	80046aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f2      	bne.n	8004690 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046aa:	4b33      	ldr	r3, [pc, #204]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b6:	d158      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e057      	b.n	800476c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046bc:	4b2e      	ldr	r3, [pc, #184]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046c2:	4a2d      	ldr	r2, [pc, #180]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80046cc:	e04d      	b.n	800476a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046d4:	d141      	bne.n	800475a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046d6:	4b28      	ldr	r3, [pc, #160]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e2:	d131      	bne.n	8004748 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046e4:	4b24      	ldr	r3, [pc, #144]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046ea:	4a23      	ldr	r2, [pc, #140]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046f4:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004702:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004704:	4b1d      	ldr	r3, [pc, #116]	@ (800477c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2232      	movs	r2, #50	@ 0x32
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	4a1c      	ldr	r2, [pc, #112]	@ (8004780 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	0c9b      	lsrs	r3, r3, #18
 8004716:	3301      	adds	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800471a:	e002      	b.n	8004722 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3b01      	subs	r3, #1
 8004720:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004722:	4b15      	ldr	r3, [pc, #84]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800472e:	d102      	bne.n	8004736 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1f2      	bne.n	800471c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004736:	4b10      	ldr	r3, [pc, #64]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004742:	d112      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e011      	b.n	800476c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004748:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800474e:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004754:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004758:	e007      	b.n	800476a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800475a:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004762:	4a05      	ldr	r2, [pc, #20]	@ (8004778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004768:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	40007000 	.word	0x40007000
 800477c:	20040018 	.word	0x20040018
 8004780:	431bde83 	.word	0x431bde83

08004784 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004788:	4b05      	ldr	r3, [pc, #20]	@ (80047a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4a04      	ldr	r2, [pc, #16]	@ (80047a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800478e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004792:	6053      	str	r3, [r2, #4]
}
 8004794:	bf00      	nop
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40007000 	.word	0x40007000

080047a4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80047a8:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4a04      	ldr	r2, [pc, #16]	@ (80047c0 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047b2:	6053      	str	r3, [r2, #4]
}
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40007000 	.word	0x40007000

080047c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f000 bc08 	b.w	8004fe8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047d8:	4b96      	ldr	r3, [pc, #600]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 030c 	and.w	r3, r3, #12
 80047e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047e2:	4b94      	ldr	r3, [pc, #592]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80e4 	beq.w	80049c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d007      	beq.n	8004810 <HAL_RCC_OscConfig+0x4c>
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	2b0c      	cmp	r3, #12
 8004804:	f040 808b 	bne.w	800491e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	2b01      	cmp	r3, #1
 800480c:	f040 8087 	bne.w	800491e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004810:	4b88      	ldr	r3, [pc, #544]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_OscConfig+0x64>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e3df      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1a      	ldr	r2, [r3, #32]
 800482c:	4b81      	ldr	r3, [pc, #516]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <HAL_RCC_OscConfig+0x7e>
 8004838:	4b7e      	ldr	r3, [pc, #504]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004840:	e005      	b.n	800484e <HAL_RCC_OscConfig+0x8a>
 8004842:	4b7c      	ldr	r3, [pc, #496]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800484e:	4293      	cmp	r3, r2
 8004850:	d223      	bcs.n	800489a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fdfe 	bl	8005458 <RCC_SetFlashLatencyFromMSIRange>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e3c0      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004866:	4b73      	ldr	r3, [pc, #460]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a72      	ldr	r2, [pc, #456]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 800486c:	f043 0308 	orr.w	r3, r3, #8
 8004870:	6013      	str	r3, [r2, #0]
 8004872:	4b70      	ldr	r3, [pc, #448]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	496d      	ldr	r1, [pc, #436]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004884:	4b6b      	ldr	r3, [pc, #428]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	4968      	ldr	r1, [pc, #416]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004894:	4313      	orrs	r3, r2
 8004896:	604b      	str	r3, [r1, #4]
 8004898:	e025      	b.n	80048e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800489a:	4b66      	ldr	r3, [pc, #408]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a65      	ldr	r2, [pc, #404]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 80048a0:	f043 0308 	orr.w	r3, r3, #8
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	4b63      	ldr	r3, [pc, #396]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	4960      	ldr	r1, [pc, #384]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b8:	4b5e      	ldr	r3, [pc, #376]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	495b      	ldr	r1, [pc, #364]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fdbe 	bl	8005458 <RCC_SetFlashLatencyFromMSIRange>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e380      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048e6:	f000 fcc1 	bl	800526c <HAL_RCC_GetSysClockFreq>
 80048ea:	4602      	mov	r2, r0
 80048ec:	4b51      	ldr	r3, [pc, #324]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	091b      	lsrs	r3, r3, #4
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	4950      	ldr	r1, [pc, #320]	@ (8004a38 <HAL_RCC_OscConfig+0x274>)
 80048f8:	5ccb      	ldrb	r3, [r1, r3]
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004902:	4a4e      	ldr	r2, [pc, #312]	@ (8004a3c <HAL_RCC_OscConfig+0x278>)
 8004904:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004906:	4b4e      	ldr	r3, [pc, #312]	@ (8004a40 <HAL_RCC_OscConfig+0x27c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fb50 	bl	8001fb0 <HAL_InitTick>
 8004910:	4603      	mov	r3, r0
 8004912:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d052      	beq.n	80049c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	e364      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d032      	beq.n	800498c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004926:	4b43      	ldr	r3, [pc, #268]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a42      	ldr	r2, [pc, #264]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004932:	f7fd fc79 	bl	8002228 <HAL_GetTick>
 8004936:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004938:	e008      	b.n	800494c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800493a:	f7fd fc75 	bl	8002228 <HAL_GetTick>
 800493e:	4602      	mov	r2, r0
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	2b02      	cmp	r3, #2
 8004946:	d901      	bls.n	800494c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e34d      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800494c:	4b39      	ldr	r3, [pc, #228]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0f0      	beq.n	800493a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004958:	4b36      	ldr	r3, [pc, #216]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a35      	ldr	r2, [pc, #212]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 800495e:	f043 0308 	orr.w	r3, r3, #8
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b33      	ldr	r3, [pc, #204]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	4930      	ldr	r1, [pc, #192]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004976:	4b2f      	ldr	r3, [pc, #188]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	021b      	lsls	r3, r3, #8
 8004984:	492b      	ldr	r1, [pc, #172]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004986:	4313      	orrs	r3, r2
 8004988:	604b      	str	r3, [r1, #4]
 800498a:	e01a      	b.n	80049c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800498c:	4b29      	ldr	r3, [pc, #164]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a28      	ldr	r2, [pc, #160]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004998:	f7fd fc46 	bl	8002228 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049a0:	f7fd fc42 	bl	8002228 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e31a      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049b2:	4b20      	ldr	r3, [pc, #128]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f0      	bne.n	80049a0 <HAL_RCC_OscConfig+0x1dc>
 80049be:	e000      	b.n	80049c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d073      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_OscConfig+0x21c>
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d10e      	bne.n	80049f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d10b      	bne.n	80049f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e0:	4b14      	ldr	r3, [pc, #80]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d063      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x2f0>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d15f      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e2f7      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a00:	d106      	bne.n	8004a10 <HAL_RCC_OscConfig+0x24c>
 8004a02:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a0b      	ldr	r2, [pc, #44]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a0c:	6013      	str	r3, [r2, #0]
 8004a0e:	e025      	b.n	8004a5c <HAL_RCC_OscConfig+0x298>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a18:	d114      	bne.n	8004a44 <HAL_RCC_OscConfig+0x280>
 8004a1a:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a05      	ldr	r2, [pc, #20]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004a20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b03      	ldr	r3, [pc, #12]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a02      	ldr	r2, [pc, #8]	@ (8004a34 <HAL_RCC_OscConfig+0x270>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e013      	b.n	8004a5c <HAL_RCC_OscConfig+0x298>
 8004a34:	40021000 	.word	0x40021000
 8004a38:	0800bd14 	.word	0x0800bd14
 8004a3c:	20040018 	.word	0x20040018
 8004a40:	2004001c 	.word	0x2004001c
 8004a44:	4ba0      	ldr	r3, [pc, #640]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a9f      	ldr	r2, [pc, #636]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	4b9d      	ldr	r3, [pc, #628]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a9c      	ldr	r2, [pc, #624]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d013      	beq.n	8004a8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fd fbe0 	bl	8002228 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fd fbdc 	bl	8002228 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	@ 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e2b4      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a7e:	4b92      	ldr	r3, [pc, #584]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2a8>
 8004a8a:	e014      	b.n	8004ab6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd fbcc 	bl	8002228 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fd fbc8 	bl	8002228 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	@ 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e2a0      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aa6:	4b88      	ldr	r3, [pc, #544]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x2d0>
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d060      	beq.n	8004b84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x310>
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	2b0c      	cmp	r3, #12
 8004acc:	d119      	bne.n	8004b02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d116      	bne.n	8004b02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ad4:	4b7c      	ldr	r3, [pc, #496]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_OscConfig+0x328>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e27d      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aec:	4b76      	ldr	r3, [pc, #472]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	061b      	lsls	r3, r3, #24
 8004afa:	4973      	ldr	r1, [pc, #460]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b00:	e040      	b.n	8004b84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d023      	beq.n	8004b52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b0a:	4b6f      	ldr	r3, [pc, #444]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a6e      	ldr	r2, [pc, #440]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b16:	f7fd fb87 	bl	8002228 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b1e:	f7fd fb83 	bl	8002228 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e25b      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b30:	4b65      	ldr	r3, [pc, #404]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3c:	4b62      	ldr	r3, [pc, #392]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	061b      	lsls	r3, r3, #24
 8004b4a:	495f      	ldr	r1, [pc, #380]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	604b      	str	r3, [r1, #4]
 8004b50:	e018      	b.n	8004b84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b52:	4b5d      	ldr	r3, [pc, #372]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a5c      	ldr	r2, [pc, #368]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fd fb63 	bl	8002228 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b66:	f7fd fb5f 	bl	8002228 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e237      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b78:	4b53      	ldr	r3, [pc, #332]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d03c      	beq.n	8004c0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01c      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b98:	4b4b      	ldr	r3, [pc, #300]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b9e:	4a4a      	ldr	r2, [pc, #296]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba8:	f7fd fb3e 	bl	8002228 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb0:	f7fd fb3a 	bl	8002228 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e212      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bc2:	4b41      	ldr	r3, [pc, #260]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0ef      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x3ec>
 8004bd0:	e01b      	b.n	8004c0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd8:	4a3b      	ldr	r2, [pc, #236]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be2:	f7fd fb21 	bl	8002228 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bea:	f7fd fb1d 	bl	8002228 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e1f5      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bfc:	4b32      	ldr	r3, [pc, #200]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1ef      	bne.n	8004bea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0304 	and.w	r3, r3, #4
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 80a6 	beq.w	8004d64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10d      	bne.n	8004c44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c28:	4b27      	ldr	r3, [pc, #156]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2c:	4a26      	ldr	r2, [pc, #152]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c34:	4b24      	ldr	r3, [pc, #144]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c40:	2301      	movs	r3, #1
 8004c42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c44:	4b21      	ldr	r3, [pc, #132]	@ (8004ccc <HAL_RCC_OscConfig+0x508>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d118      	bne.n	8004c82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c50:	4b1e      	ldr	r3, [pc, #120]	@ (8004ccc <HAL_RCC_OscConfig+0x508>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1d      	ldr	r2, [pc, #116]	@ (8004ccc <HAL_RCC_OscConfig+0x508>)
 8004c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5c:	f7fd fae4 	bl	8002228 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c64:	f7fd fae0 	bl	8002228 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e1b8      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c76:	4b15      	ldr	r3, [pc, #84]	@ (8004ccc <HAL_RCC_OscConfig+0x508>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d108      	bne.n	8004c9c <HAL_RCC_OscConfig+0x4d8>
 8004c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c90:	4a0d      	ldr	r2, [pc, #52]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c9a:	e029      	b.n	8004cf0 <HAL_RCC_OscConfig+0x52c>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b05      	cmp	r3, #5
 8004ca2:	d115      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x50c>
 8004ca4:	4b08      	ldr	r3, [pc, #32]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004caa:	4a07      	ldr	r2, [pc, #28]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004cac:	f043 0304 	orr.w	r3, r3, #4
 8004cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cb4:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cba:	4a03      	ldr	r2, [pc, #12]	@ (8004cc8 <HAL_RCC_OscConfig+0x504>)
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cc4:	e014      	b.n	8004cf0 <HAL_RCC_OscConfig+0x52c>
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40007000 	.word	0x40007000
 8004cd0:	4b9d      	ldr	r3, [pc, #628]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd6:	4a9c      	ldr	r2, [pc, #624]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ce0:	4b99      	ldr	r3, [pc, #612]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce6:	4a98      	ldr	r2, [pc, #608]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004ce8:	f023 0304 	bic.w	r3, r3, #4
 8004cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d016      	beq.n	8004d26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf8:	f7fd fa96 	bl	8002228 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d00:	f7fd fa92 	bl	8002228 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e168      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d16:	4b8c      	ldr	r3, [pc, #560]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ed      	beq.n	8004d00 <HAL_RCC_OscConfig+0x53c>
 8004d24:	e015      	b.n	8004d52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d26:	f7fd fa7f 	bl	8002228 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7fd fa7b 	bl	8002228 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e151      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d44:	4b80      	ldr	r3, [pc, #512]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1ed      	bne.n	8004d2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d52:	7ffb      	ldrb	r3, [r7, #31]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d105      	bne.n	8004d64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d58:	4b7b      	ldr	r3, [pc, #492]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d5c:	4a7a      	ldr	r2, [pc, #488]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d03c      	beq.n	8004dea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01c      	beq.n	8004db2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d78:	4b73      	ldr	r3, [pc, #460]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d7e:	4a72      	ldr	r2, [pc, #456]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d88:	f7fd fa4e 	bl	8002228 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d90:	f7fd fa4a 	bl	8002228 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e122      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004da2:	4b69      	ldr	r3, [pc, #420]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ef      	beq.n	8004d90 <HAL_RCC_OscConfig+0x5cc>
 8004db0:	e01b      	b.n	8004dea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004db2:	4b65      	ldr	r3, [pc, #404]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004db8:	4a63      	ldr	r2, [pc, #396]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004dba:	f023 0301 	bic.w	r3, r3, #1
 8004dbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc2:	f7fd fa31 	bl	8002228 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dc8:	e008      	b.n	8004ddc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dca:	f7fd fa2d 	bl	8002228 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e105      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ddc:	4b5a      	ldr	r3, [pc, #360]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1ef      	bne.n	8004dca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 80f9 	beq.w	8004fe6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	f040 80cf 	bne.w	8004f9c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dfe:	4b52      	ldr	r3, [pc, #328]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f003 0203 	and.w	r2, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d12c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d123      	bne.n	8004e6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d11b      	bne.n	8004e6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d113      	bne.n	8004e6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	3b01      	subs	r3, #1
 8004e52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d109      	bne.n	8004e6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	3b01      	subs	r3, #1
 8004e66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d071      	beq.n	8004f50 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	2b0c      	cmp	r3, #12
 8004e70:	d068      	beq.n	8004f44 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e72:	4b35      	ldr	r3, [pc, #212]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d105      	bne.n	8004e8a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e7e:	4b32      	ldr	r3, [pc, #200]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e0ac      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a2d      	ldr	r2, [pc, #180]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004e94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e9a:	f7fd f9c5 	bl	8002228 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea0:	e008      	b.n	8004eb4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea2:	f7fd f9c1 	bl	8002228 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e099      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eb4:	4b24      	ldr	r3, [pc, #144]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ec0:	4b21      	ldr	r3, [pc, #132]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	4b21      	ldr	r3, [pc, #132]	@ (8004f4c <HAL_RCC_OscConfig+0x788>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ed0:	3a01      	subs	r2, #1
 8004ed2:	0112      	lsls	r2, r2, #4
 8004ed4:	4311      	orrs	r1, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004eda:	0212      	lsls	r2, r2, #8
 8004edc:	4311      	orrs	r1, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ee2:	0852      	lsrs	r2, r2, #1
 8004ee4:	3a01      	subs	r2, #1
 8004ee6:	0552      	lsls	r2, r2, #21
 8004ee8:	4311      	orrs	r1, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004eee:	0852      	lsrs	r2, r2, #1
 8004ef0:	3a01      	subs	r2, #1
 8004ef2:	0652      	lsls	r2, r2, #25
 8004ef4:	4311      	orrs	r1, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004efa:	06d2      	lsls	r2, r2, #27
 8004efc:	430a      	orrs	r2, r1
 8004efe:	4912      	ldr	r1, [pc, #72]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f04:	4b10      	ldr	r3, [pc, #64]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a0f      	ldr	r2, [pc, #60]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004f0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f10:	4b0d      	ldr	r3, [pc, #52]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a0c      	ldr	r2, [pc, #48]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004f16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f1c:	f7fd f984 	bl	8002228 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f24:	f7fd f980 	bl	8002228 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e058      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f36:	4b04      	ldr	r3, [pc, #16]	@ (8004f48 <HAL_RCC_OscConfig+0x784>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0f0      	beq.n	8004f24 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f42:	e050      	b.n	8004fe6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e04f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
 8004f48:	40021000 	.word	0x40021000
 8004f4c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f50:	4b27      	ldr	r3, [pc, #156]	@ (8004ff0 <HAL_RCC_OscConfig+0x82c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d144      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f5c:	4b24      	ldr	r3, [pc, #144]	@ (8004ff0 <HAL_RCC_OscConfig+0x82c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a23      	ldr	r2, [pc, #140]	@ (8004ff0 <HAL_RCC_OscConfig+0x82c>)
 8004f62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f68:	4b21      	ldr	r3, [pc, #132]	@ (8004ff0 <HAL_RCC_OscConfig+0x82c>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	4a20      	ldr	r2, [pc, #128]	@ (8004ff0 <HAL_RCC_OscConfig+0x82c>)
 8004f6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f74:	f7fd f958 	bl	8002228 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fd f954 	bl	8002228 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e02c      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8e:	4b18      	ldr	r3, [pc, #96]	@ (8004ff0 <HAL_RCC_OscConfig+0x82c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x7b8>
 8004f9a:	e024      	b.n	8004fe6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b0c      	cmp	r3, #12
 8004fa0:	d01f      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa2:	4b13      	ldr	r3, [pc, #76]	@ (8004ff0 <HAL_RCC_OscConfig+0x82c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a12      	ldr	r2, [pc, #72]	@ (8004ff0 <HAL_RCC_OscConfig+0x82c>)
 8004fa8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fae:	f7fd f93b 	bl	8002228 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb6:	f7fd f937 	bl	8002228 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e00f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc8:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <HAL_RCC_OscConfig+0x82c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f0      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fd4:	4b06      	ldr	r3, [pc, #24]	@ (8004ff0 <HAL_RCC_OscConfig+0x82c>)
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	4905      	ldr	r1, [pc, #20]	@ (8004ff0 <HAL_RCC_OscConfig+0x82c>)
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_RCC_OscConfig+0x830>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60cb      	str	r3, [r1, #12]
 8004fe0:	e001      	b.n	8004fe6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	feeefffc 	.word	0xfeeefffc

08004ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e11d      	b.n	800524c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005010:	4b90      	ldr	r3, [pc, #576]	@ (8005254 <HAL_RCC_ClockConfig+0x25c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d910      	bls.n	8005040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b8d      	ldr	r3, [pc, #564]	@ (8005254 <HAL_RCC_ClockConfig+0x25c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 020f 	bic.w	r2, r3, #15
 8005026:	498b      	ldr	r1, [pc, #556]	@ (8005254 <HAL_RCC_ClockConfig+0x25c>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	4b89      	ldr	r3, [pc, #548]	@ (8005254 <HAL_RCC_ClockConfig+0x25c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d001      	beq.n	8005040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e105      	b.n	800524c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d010      	beq.n	800506e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	4b81      	ldr	r3, [pc, #516]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005058:	429a      	cmp	r2, r3
 800505a:	d908      	bls.n	800506e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800505c:	4b7e      	ldr	r3, [pc, #504]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	497b      	ldr	r1, [pc, #492]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800506a:	4313      	orrs	r3, r2
 800506c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d079      	beq.n	800516e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b03      	cmp	r3, #3
 8005080:	d11e      	bne.n	80050c0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005082:	4b75      	ldr	r3, [pc, #468]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e0dc      	b.n	800524c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005092:	f000 fa3b 	bl	800550c <RCC_GetSysClockFreqFromPLLSource>
 8005096:	4603      	mov	r3, r0
 8005098:	4a70      	ldr	r2, [pc, #448]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d946      	bls.n	800512c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800509e:	4b6e      	ldr	r3, [pc, #440]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d140      	bne.n	800512c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050aa:	4b6b      	ldr	r3, [pc, #428]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050b2:	4a69      	ldr	r2, [pc, #420]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80050b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050ba:	2380      	movs	r3, #128	@ 0x80
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	e035      	b.n	800512c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d107      	bne.n	80050d8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c8:	4b63      	ldr	r3, [pc, #396]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d115      	bne.n	8005100 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0b9      	b.n	800524c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d107      	bne.n	80050f0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80050e0:	4b5d      	ldr	r3, [pc, #372]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d109      	bne.n	8005100 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e0ad      	b.n	800524c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f0:	4b59      	ldr	r3, [pc, #356]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0a5      	b.n	800524c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005100:	f000 f8b4 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8005104:	4603      	mov	r3, r0
 8005106:	4a55      	ldr	r2, [pc, #340]	@ (800525c <HAL_RCC_ClockConfig+0x264>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d90f      	bls.n	800512c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800510c:	4b52      	ldr	r3, [pc, #328]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d109      	bne.n	800512c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005118:	4b4f      	ldr	r3, [pc, #316]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005120:	4a4d      	ldr	r2, [pc, #308]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005126:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005128:	2380      	movs	r3, #128	@ 0x80
 800512a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800512c:	4b4a      	ldr	r3, [pc, #296]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f023 0203 	bic.w	r2, r3, #3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4947      	ldr	r1, [pc, #284]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800513a:	4313      	orrs	r3, r2
 800513c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800513e:	f7fd f873 	bl	8002228 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005144:	e00a      	b.n	800515c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005146:	f7fd f86f 	bl	8002228 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005154:	4293      	cmp	r3, r2
 8005156:	d901      	bls.n	800515c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e077      	b.n	800524c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800515c:	4b3e      	ldr	r3, [pc, #248]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 020c 	and.w	r2, r3, #12
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	429a      	cmp	r2, r3
 800516c:	d1eb      	bne.n	8005146 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b80      	cmp	r3, #128	@ 0x80
 8005172:	d105      	bne.n	8005180 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005174:	4b38      	ldr	r3, [pc, #224]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4a37      	ldr	r2, [pc, #220]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800517a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800517e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d010      	beq.n	80051ae <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689a      	ldr	r2, [r3, #8]
 8005190:	4b31      	ldr	r3, [pc, #196]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005198:	429a      	cmp	r2, r3
 800519a:	d208      	bcs.n	80051ae <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800519c:	4b2e      	ldr	r3, [pc, #184]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	492b      	ldr	r1, [pc, #172]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051ae:	4b29      	ldr	r3, [pc, #164]	@ (8005254 <HAL_RCC_ClockConfig+0x25c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d210      	bcs.n	80051de <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051bc:	4b25      	ldr	r3, [pc, #148]	@ (8005254 <HAL_RCC_ClockConfig+0x25c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f023 020f 	bic.w	r2, r3, #15
 80051c4:	4923      	ldr	r1, [pc, #140]	@ (8005254 <HAL_RCC_ClockConfig+0x25c>)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051cc:	4b21      	ldr	r3, [pc, #132]	@ (8005254 <HAL_RCC_ClockConfig+0x25c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 030f 	and.w	r3, r3, #15
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d001      	beq.n	80051de <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e036      	b.n	800524c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d008      	beq.n	80051fc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	4918      	ldr	r1, [pc, #96]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d009      	beq.n	800521c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005208:	4b13      	ldr	r3, [pc, #76]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	4910      	ldr	r1, [pc, #64]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800521c:	f000 f826 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8005220:	4602      	mov	r2, r0
 8005222:	4b0d      	ldr	r3, [pc, #52]	@ (8005258 <HAL_RCC_ClockConfig+0x260>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	091b      	lsrs	r3, r3, #4
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	490c      	ldr	r1, [pc, #48]	@ (8005260 <HAL_RCC_ClockConfig+0x268>)
 800522e:	5ccb      	ldrb	r3, [r1, r3]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
 8005238:	4a0a      	ldr	r2, [pc, #40]	@ (8005264 <HAL_RCC_ClockConfig+0x26c>)
 800523a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800523c:	4b0a      	ldr	r3, [pc, #40]	@ (8005268 <HAL_RCC_ClockConfig+0x270>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4618      	mov	r0, r3
 8005242:	f7fc feb5 	bl	8001fb0 <HAL_InitTick>
 8005246:	4603      	mov	r3, r0
 8005248:	73fb      	strb	r3, [r7, #15]

  return status;
 800524a:	7bfb      	ldrb	r3, [r7, #15]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40022000 	.word	0x40022000
 8005258:	40021000 	.word	0x40021000
 800525c:	04c4b400 	.word	0x04c4b400
 8005260:	0800bd14 	.word	0x0800bd14
 8005264:	20040018 	.word	0x20040018
 8005268:	2004001c 	.word	0x2004001c

0800526c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800526c:	b480      	push	{r7}
 800526e:	b089      	sub	sp, #36	@ 0x24
 8005270:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
 8005276:	2300      	movs	r3, #0
 8005278:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800527a:	4b3e      	ldr	r3, [pc, #248]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x108>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005284:	4b3b      	ldr	r3, [pc, #236]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x108>)
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0x34>
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b0c      	cmp	r3, #12
 8005298:	d121      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d11e      	bne.n	80052de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052a0:	4b34      	ldr	r3, [pc, #208]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d107      	bne.n	80052bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052ac:	4b31      	ldr	r3, [pc, #196]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052b2:	0a1b      	lsrs	r3, r3, #8
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	61fb      	str	r3, [r7, #28]
 80052ba:	e005      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x108>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	091b      	lsrs	r3, r3, #4
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005378 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10d      	bne.n	80052f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052dc:	e00a      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d102      	bne.n	80052ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052e4:	4b25      	ldr	r3, [pc, #148]	@ (800537c <HAL_RCC_GetSysClockFreq+0x110>)
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	e004      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d101      	bne.n	80052f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052f0:	4b23      	ldr	r3, [pc, #140]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x114>)
 80052f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	2b0c      	cmp	r3, #12
 80052f8:	d134      	bne.n	8005364 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x108>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d003      	beq.n	8005312 <HAL_RCC_GetSysClockFreq+0xa6>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d003      	beq.n	8005318 <HAL_RCC_GetSysClockFreq+0xac>
 8005310:	e005      	b.n	800531e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005312:	4b1a      	ldr	r3, [pc, #104]	@ (800537c <HAL_RCC_GetSysClockFreq+0x110>)
 8005314:	617b      	str	r3, [r7, #20]
      break;
 8005316:	e005      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005318:	4b19      	ldr	r3, [pc, #100]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x114>)
 800531a:	617b      	str	r3, [r7, #20]
      break;
 800531c:	e002      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	617b      	str	r3, [r7, #20]
      break;
 8005322:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005324:	4b13      	ldr	r3, [pc, #76]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x108>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	3301      	adds	r3, #1
 8005330:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x108>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	0a1b      	lsrs	r3, r3, #8
 8005338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	fb03 f202 	mul.w	r2, r3, r2
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800534a:	4b0a      	ldr	r3, [pc, #40]	@ (8005374 <HAL_RCC_GetSysClockFreq+0x108>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	0e5b      	lsrs	r3, r3, #25
 8005350:	f003 0303 	and.w	r3, r3, #3
 8005354:	3301      	adds	r3, #1
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005362:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005364:	69bb      	ldr	r3, [r7, #24]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3724      	adds	r7, #36	@ 0x24
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000
 8005378:	0800bd2c 	.word	0x0800bd2c
 800537c:	00f42400 	.word	0x00f42400
 8005380:	007a1200 	.word	0x007a1200

08005384 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005388:	4b03      	ldr	r3, [pc, #12]	@ (8005398 <HAL_RCC_GetHCLKFreq+0x14>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20040018 	.word	0x20040018

0800539c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053a0:	f7ff fff0 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 80053a4:	4602      	mov	r2, r0
 80053a6:	4b06      	ldr	r3, [pc, #24]	@ (80053c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	0a1b      	lsrs	r3, r3, #8
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	4904      	ldr	r1, [pc, #16]	@ (80053c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053b2:	5ccb      	ldrb	r3, [r1, r3]
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053bc:	4618      	mov	r0, r3
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40021000 	.word	0x40021000
 80053c4:	0800bd24 	.word	0x0800bd24

080053c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053cc:	f7ff ffda 	bl	8005384 <HAL_RCC_GetHCLKFreq>
 80053d0:	4602      	mov	r2, r0
 80053d2:	4b06      	ldr	r3, [pc, #24]	@ (80053ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	0adb      	lsrs	r3, r3, #11
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	4904      	ldr	r1, [pc, #16]	@ (80053f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053de:	5ccb      	ldrb	r3, [r1, r3]
 80053e0:	f003 031f 	and.w	r3, r3, #31
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40021000 	.word	0x40021000
 80053f0:	0800bd24 	.word	0x0800bd24

080053f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	220f      	movs	r2, #15
 8005402:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005404:	4b12      	ldr	r3, [pc, #72]	@ (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f003 0203 	and.w	r2, r3, #3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005410:	4b0f      	ldr	r3, [pc, #60]	@ (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800541c:	4b0c      	ldr	r3, [pc, #48]	@ (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005428:	4b09      	ldr	r3, [pc, #36]	@ (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	08db      	lsrs	r3, r3, #3
 800542e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005436:	4b07      	ldr	r3, [pc, #28]	@ (8005454 <HAL_RCC_GetClockConfig+0x60>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 020f 	and.w	r2, r3, #15
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40021000 	.word	0x40021000
 8005454:	40022000 	.word	0x40022000

08005458 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005460:	2300      	movs	r3, #0
 8005462:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005464:	4b27      	ldr	r3, [pc, #156]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005470:	f7ff f8c4 	bl	80045fc <HAL_PWREx_GetVoltageRange>
 8005474:	6178      	str	r0, [r7, #20]
 8005476:	e014      	b.n	80054a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005478:	4b22      	ldr	r3, [pc, #136]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800547a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800547c:	4a21      	ldr	r2, [pc, #132]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800547e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005482:	6593      	str	r3, [r2, #88]	@ 0x58
 8005484:	4b1f      	ldr	r3, [pc, #124]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005488:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005490:	f7ff f8b4 	bl	80045fc <HAL_PWREx_GetVoltageRange>
 8005494:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005496:	4b1b      	ldr	r3, [pc, #108]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549a:	4a1a      	ldr	r2, [pc, #104]	@ (8005504 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800549c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054a8:	d10b      	bne.n	80054c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b80      	cmp	r3, #128	@ 0x80
 80054ae:	d913      	bls.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80054b4:	d902      	bls.n	80054bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054b6:	2302      	movs	r3, #2
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	e00d      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054bc:	2301      	movs	r3, #1
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	e00a      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80054c6:	d902      	bls.n	80054ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80054c8:	2302      	movs	r3, #2
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	e004      	b.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b70      	cmp	r3, #112	@ 0x70
 80054d2:	d101      	bne.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054d4:	2301      	movs	r3, #1
 80054d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f023 020f 	bic.w	r2, r3, #15
 80054e0:	4909      	ldr	r1, [pc, #36]	@ (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054e8:	4b07      	ldr	r3, [pc, #28]	@ (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d001      	beq.n	80054fa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40021000 	.word	0x40021000
 8005508:	40022000 	.word	0x40022000

0800550c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005512:	4b2d      	ldr	r3, [pc, #180]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b03      	cmp	r3, #3
 8005520:	d00b      	beq.n	800553a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b03      	cmp	r3, #3
 8005526:	d825      	bhi.n	8005574 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d008      	beq.n	8005540 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d11f      	bne.n	8005574 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005534:	4b25      	ldr	r3, [pc, #148]	@ (80055cc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005536:	613b      	str	r3, [r7, #16]
    break;
 8005538:	e01f      	b.n	800557a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800553a:	4b25      	ldr	r3, [pc, #148]	@ (80055d0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800553c:	613b      	str	r3, [r7, #16]
    break;
 800553e:	e01c      	b.n	800557a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005540:	4b21      	ldr	r3, [pc, #132]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d107      	bne.n	800555c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800554c:	4b1e      	ldr	r3, [pc, #120]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800554e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	617b      	str	r3, [r7, #20]
 800555a:	e005      	b.n	8005568 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800555c:	4b1a      	ldr	r3, [pc, #104]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	091b      	lsrs	r3, r3, #4
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005568:	4a1a      	ldr	r2, [pc, #104]	@ (80055d4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005570:	613b      	str	r3, [r7, #16]
    break;
 8005572:	e002      	b.n	800557a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
    break;
 8005578:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800557a:	4b13      	ldr	r3, [pc, #76]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	091b      	lsrs	r3, r3, #4
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	3301      	adds	r3, #1
 8005586:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005588:	4b0f      	ldr	r3, [pc, #60]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0a1b      	lsrs	r3, r3, #8
 800558e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	fb03 f202 	mul.w	r2, r3, r2
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055a0:	4b09      	ldr	r3, [pc, #36]	@ (80055c8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	0e5b      	lsrs	r3, r3, #25
 80055a6:	f003 0303 	and.w	r3, r3, #3
 80055aa:	3301      	adds	r3, #1
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80055ba:	683b      	ldr	r3, [r7, #0]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	40021000 	.word	0x40021000
 80055cc:	00f42400 	.word	0x00f42400
 80055d0:	007a1200 	.word	0x007a1200
 80055d4:	0800bd2c 	.word	0x0800bd2c

080055d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055e0:	2300      	movs	r3, #0
 80055e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055e4:	2300      	movs	r3, #0
 80055e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d040      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055f8:	2b80      	cmp	r3, #128	@ 0x80
 80055fa:	d02a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055fc:	2b80      	cmp	r3, #128	@ 0x80
 80055fe:	d825      	bhi.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005600:	2b60      	cmp	r3, #96	@ 0x60
 8005602:	d026      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005604:	2b60      	cmp	r3, #96	@ 0x60
 8005606:	d821      	bhi.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005608:	2b40      	cmp	r3, #64	@ 0x40
 800560a:	d006      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	d81d      	bhi.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005610:	2b00      	cmp	r3, #0
 8005612:	d009      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005614:	2b20      	cmp	r3, #32
 8005616:	d010      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005618:	e018      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800561a:	4b89      	ldr	r3, [pc, #548]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	4a88      	ldr	r2, [pc, #544]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005624:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005626:	e015      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3304      	adds	r3, #4
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fb02 	bl	8005c38 <RCCEx_PLLSAI1_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005638:	e00c      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3320      	adds	r3, #32
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fbed 	bl	8005e20 <RCCEx_PLLSAI2_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800564a:	e003      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	74fb      	strb	r3, [r7, #19]
      break;
 8005650:	e000      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800565a:	4b79      	ldr	r3, [pc, #484]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800565c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005660:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005668:	4975      	ldr	r1, [pc, #468]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005670:	e001      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005672:	7cfb      	ldrb	r3, [r7, #19]
 8005674:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d047      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800568a:	d030      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 800568c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005690:	d82a      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005692:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005696:	d02a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800569c:	d824      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800569e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056a2:	d008      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80056a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056a8:	d81e      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80056ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056b2:	d010      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80056b4:	e018      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056b6:	4b62      	ldr	r3, [pc, #392]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	4a61      	ldr	r2, [pc, #388]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056c0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056c2:	e015      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3304      	adds	r3, #4
 80056c8:	2100      	movs	r1, #0
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fab4 	bl	8005c38 <RCCEx_PLLSAI1_Config>
 80056d0:	4603      	mov	r3, r0
 80056d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056d4:	e00c      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3320      	adds	r3, #32
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fb9f 	bl	8005e20 <RCCEx_PLLSAI2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056e6:	e003      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	74fb      	strb	r3, [r7, #19]
      break;
 80056ec:	e000      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80056ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f0:	7cfb      	ldrb	r3, [r7, #19]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10b      	bne.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056f6:	4b52      	ldr	r3, [pc, #328]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005704:	494e      	ldr	r1, [pc, #312]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005706:	4313      	orrs	r3, r2
 8005708:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800570c:	e001      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800570e:	7cfb      	ldrb	r3, [r7, #19]
 8005710:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 809f 	beq.w	800585e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005720:	2300      	movs	r3, #0
 8005722:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005724:	4b46      	ldr	r3, [pc, #280]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005734:	2300      	movs	r3, #0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00d      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573a:	4b41      	ldr	r3, [pc, #260]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800573c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800573e:	4a40      	ldr	r2, [pc, #256]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005744:	6593      	str	r3, [r2, #88]	@ 0x58
 8005746:	4b3e      	ldr	r3, [pc, #248]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005752:	2301      	movs	r3, #1
 8005754:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005756:	4b3b      	ldr	r3, [pc, #236]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3a      	ldr	r2, [pc, #232]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800575c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005762:	f7fc fd61 	bl	8002228 <HAL_GetTick>
 8005766:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005768:	e009      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576a:	f7fc fd5d 	bl	8002228 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d902      	bls.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	74fb      	strb	r3, [r7, #19]
        break;
 800577c:	e005      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800577e:	4b31      	ldr	r3, [pc, #196]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0ef      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d15b      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005790:	4b2b      	ldr	r3, [pc, #172]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01f      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d019      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057ae:	4b24      	ldr	r3, [pc, #144]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057ba:	4b21      	ldr	r3, [pc, #132]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057da:	4a19      	ldr	r2, [pc, #100]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d016      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fc fd1c 	bl	8002228 <HAL_GetTick>
 80057f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f2:	e00b      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f4:	f7fc fd18 	bl	8002228 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d902      	bls.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	74fb      	strb	r3, [r7, #19]
            break;
 800580a:	e006      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800580c:	4b0c      	ldr	r3, [pc, #48]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800580e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0ec      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800581a:	7cfb      	ldrb	r3, [r7, #19]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10c      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005820:	4b07      	ldr	r3, [pc, #28]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005826:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005830:	4903      	ldr	r1, [pc, #12]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005838:	e008      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	74bb      	strb	r3, [r7, #18]
 800583e:	e005      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005840:	40021000 	.word	0x40021000
 8005844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800584c:	7c7b      	ldrb	r3, [r7, #17]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005852:	4ba0      	ldr	r3, [pc, #640]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005856:	4a9f      	ldr	r2, [pc, #636]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800585c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00a      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800586a:	4b9a      	ldr	r3, [pc, #616]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005870:	f023 0203 	bic.w	r2, r3, #3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005878:	4996      	ldr	r1, [pc, #600]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800588c:	4b91      	ldr	r3, [pc, #580]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005892:	f023 020c 	bic.w	r2, r3, #12
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589a:	498e      	ldr	r1, [pc, #568]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589c:	4313      	orrs	r3, r2
 800589e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00a      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ae:	4b89      	ldr	r3, [pc, #548]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058bc:	4985      	ldr	r1, [pc, #532]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00a      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058d0:	4b80      	ldr	r3, [pc, #512]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058de:	497d      	ldr	r1, [pc, #500]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058f2:	4b78      	ldr	r3, [pc, #480]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005900:	4974      	ldr	r1, [pc, #464]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00a      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005914:	4b6f      	ldr	r3, [pc, #444]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005922:	496c      	ldr	r1, [pc, #432]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005936:	4b67      	ldr	r3, [pc, #412]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005944:	4963      	ldr	r1, [pc, #396]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005958:	4b5e      	ldr	r3, [pc, #376]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005966:	495b      	ldr	r1, [pc, #364]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005968:	4313      	orrs	r3, r2
 800596a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800597a:	4b56      	ldr	r3, [pc, #344]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800597c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005980:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005988:	4952      	ldr	r1, [pc, #328]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800599c:	4b4d      	ldr	r3, [pc, #308]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059aa:	494a      	ldr	r1, [pc, #296]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059be:	4b45      	ldr	r3, [pc, #276]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059cc:	4941      	ldr	r1, [pc, #260]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059e0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059e6:	f023 0203 	bic.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ee:	4939      	ldr	r1, [pc, #228]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d028      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a02:	4b34      	ldr	r3, [pc, #208]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a08:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a10:	4930      	ldr	r1, [pc, #192]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a20:	d106      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a22:	4b2c      	ldr	r3, [pc, #176]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	4a2b      	ldr	r2, [pc, #172]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a2c:	60d3      	str	r3, [r2, #12]
 8005a2e:	e011      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a38:	d10c      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f8f9 	bl	8005c38 <RCCEx_PLLSAI1_Config>
 8005a46:	4603      	mov	r3, r0
 8005a48:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a4a:	7cfb      	ldrb	r3, [r7, #19]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005a50:	7cfb      	ldrb	r3, [r7, #19]
 8005a52:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d04d      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a68:	d108      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a70:	4a18      	ldr	r2, [pc, #96]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a76:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005a7a:	e012      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005a7c:	4b15      	ldr	r3, [pc, #84]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a82:	4a14      	ldr	r2, [pc, #80]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a88:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005a8c:	4b11      	ldr	r3, [pc, #68]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a9a:	490e      	ldr	r1, [pc, #56]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aaa:	d106      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aac:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a08      	ldr	r2, [pc, #32]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ab6:	60d3      	str	r3, [r2, #12]
 8005ab8:	e020      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005abe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ac2:	d109      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ac4:	4b03      	ldr	r3, [pc, #12]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	4a02      	ldr	r2, [pc, #8]	@ (8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ace:	60d3      	str	r3, [r2, #12]
 8005ad0:	e014      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ad2:	bf00      	nop
 8005ad4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005adc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ae0:	d10c      	bne.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 f8a5 	bl	8005c38 <RCCEx_PLLSAI1_Config>
 8005aee:	4603      	mov	r3, r0
 8005af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005af2:	7cfb      	ldrb	r3, [r7, #19]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005af8:	7cfb      	ldrb	r3, [r7, #19]
 8005afa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d028      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b08:	4b4a      	ldr	r3, [pc, #296]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b16:	4947      	ldr	r1, [pc, #284]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b26:	d106      	bne.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b28:	4b42      	ldr	r3, [pc, #264]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4a41      	ldr	r2, [pc, #260]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b32:	60d3      	str	r3, [r2, #12]
 8005b34:	e011      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b3a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b3e:	d10c      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	3304      	adds	r3, #4
 8005b44:	2101      	movs	r1, #1
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 f876 	bl	8005c38 <RCCEx_PLLSAI1_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005b56:	7cfb      	ldrb	r3, [r7, #19]
 8005b58:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01e      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b66:	4b33      	ldr	r3, [pc, #204]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b6c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b76:	492f      	ldr	r1, [pc, #188]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b88:	d10c      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	2102      	movs	r1, #2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 f851 	bl	8005c38 <RCCEx_PLLSAI1_Config>
 8005b96:	4603      	mov	r3, r0
 8005b98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b9a:	7cfb      	ldrb	r3, [r7, #19]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005ba0:	7cfb      	ldrb	r3, [r7, #19]
 8005ba2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00b      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bb0:	4b20      	ldr	r3, [pc, #128]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bb6:	f023 0204 	bic.w	r2, r3, #4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bc0:	491c      	ldr	r1, [pc, #112]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005bd4:	4b17      	ldr	r3, [pc, #92]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bda:	f023 0218 	bic.w	r2, r3, #24
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be4:	4913      	ldr	r1, [pc, #76]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d017      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c08:	490a      	ldr	r1, [pc, #40]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c1a:	d105      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	4a04      	ldr	r2, [pc, #16]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c28:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000

08005c38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c46:	4b72      	ldr	r3, [pc, #456]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00e      	beq.n	8005c70 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c52:	4b6f      	ldr	r3, [pc, #444]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0203 	and.w	r2, r3, #3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d103      	bne.n	8005c6a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
       ||
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d142      	bne.n	8005cf0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	73fb      	strb	r3, [r7, #15]
 8005c6e:	e03f      	b.n	8005cf0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d018      	beq.n	8005caa <RCCEx_PLLSAI1_Config+0x72>
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d825      	bhi.n	8005cc8 <RCCEx_PLLSAI1_Config+0x90>
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d002      	beq.n	8005c86 <RCCEx_PLLSAI1_Config+0x4e>
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d009      	beq.n	8005c98 <RCCEx_PLLSAI1_Config+0x60>
 8005c84:	e020      	b.n	8005cc8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c86:	4b62      	ldr	r3, [pc, #392]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d11d      	bne.n	8005cce <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c96:	e01a      	b.n	8005cce <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c98:	4b5d      	ldr	r3, [pc, #372]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d116      	bne.n	8005cd2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca8:	e013      	b.n	8005cd2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005caa:	4b59      	ldr	r3, [pc, #356]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10f      	bne.n	8005cd6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cb6:	4b56      	ldr	r3, [pc, #344]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cc6:	e006      	b.n	8005cd6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	73fb      	strb	r3, [r7, #15]
      break;
 8005ccc:	e004      	b.n	8005cd8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005cce:	bf00      	nop
 8005cd0:	e002      	b.n	8005cd8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005cd2:	bf00      	nop
 8005cd4:	e000      	b.n	8005cd8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005cd6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d108      	bne.n	8005cf0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005cde:	4b4c      	ldr	r3, [pc, #304]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	f023 0203 	bic.w	r2, r3, #3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4949      	ldr	r1, [pc, #292]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f040 8086 	bne.w	8005e04 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005cf8:	4b45      	ldr	r3, [pc, #276]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a44      	ldr	r2, [pc, #272]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005d02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d04:	f7fc fa90 	bl	8002228 <HAL_GetTick>
 8005d08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d0a:	e009      	b.n	8005d20 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d0c:	f7fc fa8c 	bl	8002228 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d902      	bls.n	8005d20 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	73fb      	strb	r3, [r7, #15]
        break;
 8005d1e:	e005      	b.n	8005d2c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d20:	4b3b      	ldr	r3, [pc, #236]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1ef      	bne.n	8005d0c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d168      	bne.n	8005e04 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d113      	bne.n	8005d60 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d38:	4b35      	ldr	r3, [pc, #212]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	4b35      	ldr	r3, [pc, #212]	@ (8005e14 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	6892      	ldr	r2, [r2, #8]
 8005d44:	0211      	lsls	r1, r2, #8
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68d2      	ldr	r2, [r2, #12]
 8005d4a:	06d2      	lsls	r2, r2, #27
 8005d4c:	4311      	orrs	r1, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6852      	ldr	r2, [r2, #4]
 8005d52:	3a01      	subs	r2, #1
 8005d54:	0112      	lsls	r2, r2, #4
 8005d56:	430a      	orrs	r2, r1
 8005d58:	492d      	ldr	r1, [pc, #180]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	610b      	str	r3, [r1, #16]
 8005d5e:	e02d      	b.n	8005dbc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d115      	bne.n	8005d92 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d66:	4b2a      	ldr	r3, [pc, #168]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005e18 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	6892      	ldr	r2, [r2, #8]
 8005d72:	0211      	lsls	r1, r2, #8
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	6912      	ldr	r2, [r2, #16]
 8005d78:	0852      	lsrs	r2, r2, #1
 8005d7a:	3a01      	subs	r2, #1
 8005d7c:	0552      	lsls	r2, r2, #21
 8005d7e:	4311      	orrs	r1, r2
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6852      	ldr	r2, [r2, #4]
 8005d84:	3a01      	subs	r2, #1
 8005d86:	0112      	lsls	r2, r2, #4
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	4921      	ldr	r1, [pc, #132]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	610b      	str	r3, [r1, #16]
 8005d90:	e014      	b.n	8005dbc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d92:	4b1f      	ldr	r3, [pc, #124]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d94:	691a      	ldr	r2, [r3, #16]
 8005d96:	4b21      	ldr	r3, [pc, #132]	@ (8005e1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6892      	ldr	r2, [r2, #8]
 8005d9e:	0211      	lsls	r1, r2, #8
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6952      	ldr	r2, [r2, #20]
 8005da4:	0852      	lsrs	r2, r2, #1
 8005da6:	3a01      	subs	r2, #1
 8005da8:	0652      	lsls	r2, r2, #25
 8005daa:	4311      	orrs	r1, r2
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6852      	ldr	r2, [r2, #4]
 8005db0:	3a01      	subs	r2, #1
 8005db2:	0112      	lsls	r2, r2, #4
 8005db4:	430a      	orrs	r2, r1
 8005db6:	4916      	ldr	r1, [pc, #88]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005db8:	4313      	orrs	r3, r2
 8005dba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005dbc:	4b14      	ldr	r3, [pc, #80]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a13      	ldr	r2, [pc, #76]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc8:	f7fc fa2e 	bl	8002228 <HAL_GetTick>
 8005dcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005dce:	e009      	b.n	8005de4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dd0:	f7fc fa2a 	bl	8002228 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d902      	bls.n	8005de4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	73fb      	strb	r3, [r7, #15]
          break;
 8005de2:	e005      	b.n	8005df0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005de4:	4b0a      	ldr	r3, [pc, #40]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0ef      	beq.n	8005dd0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d106      	bne.n	8005e04 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005df6:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	4904      	ldr	r1, [pc, #16]	@ (8005e10 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	40021000 	.word	0x40021000
 8005e14:	07ff800f 	.word	0x07ff800f
 8005e18:	ff9f800f 	.word	0xff9f800f
 8005e1c:	f9ff800f 	.word	0xf9ff800f

08005e20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e2e:	4b72      	ldr	r3, [pc, #456]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00e      	beq.n	8005e58 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0203 	and.w	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d103      	bne.n	8005e52 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d142      	bne.n	8005ed8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	73fb      	strb	r3, [r7, #15]
 8005e56:	e03f      	b.n	8005ed8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d018      	beq.n	8005e92 <RCCEx_PLLSAI2_Config+0x72>
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d825      	bhi.n	8005eb0 <RCCEx_PLLSAI2_Config+0x90>
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d002      	beq.n	8005e6e <RCCEx_PLLSAI2_Config+0x4e>
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d009      	beq.n	8005e80 <RCCEx_PLLSAI2_Config+0x60>
 8005e6c:	e020      	b.n	8005eb0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e6e:	4b62      	ldr	r3, [pc, #392]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d11d      	bne.n	8005eb6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e7e:	e01a      	b.n	8005eb6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e80:	4b5d      	ldr	r3, [pc, #372]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d116      	bne.n	8005eba <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e90:	e013      	b.n	8005eba <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e92:	4b59      	ldr	r3, [pc, #356]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d10f      	bne.n	8005ebe <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e9e:	4b56      	ldr	r3, [pc, #344]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eae:	e006      	b.n	8005ebe <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb4:	e004      	b.n	8005ec0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e002      	b.n	8005ec0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005ebe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d108      	bne.n	8005ed8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	f023 0203 	bic.w	r2, r3, #3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4949      	ldr	r1, [pc, #292]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f040 8086 	bne.w	8005fec <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ee0:	4b45      	ldr	r3, [pc, #276]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a44      	ldr	r2, [pc, #272]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eec:	f7fc f99c 	bl	8002228 <HAL_GetTick>
 8005ef0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ef2:	e009      	b.n	8005f08 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ef4:	f7fc f998 	bl	8002228 <HAL_GetTick>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d902      	bls.n	8005f08 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	73fb      	strb	r3, [r7, #15]
        break;
 8005f06:	e005      	b.n	8005f14 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f08:	4b3b      	ldr	r3, [pc, #236]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1ef      	bne.n	8005ef4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d168      	bne.n	8005fec <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d113      	bne.n	8005f48 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f20:	4b35      	ldr	r3, [pc, #212]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	4b35      	ldr	r3, [pc, #212]	@ (8005ffc <RCCEx_PLLSAI2_Config+0x1dc>)
 8005f26:	4013      	ands	r3, r2
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6892      	ldr	r2, [r2, #8]
 8005f2c:	0211      	lsls	r1, r2, #8
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	68d2      	ldr	r2, [r2, #12]
 8005f32:	06d2      	lsls	r2, r2, #27
 8005f34:	4311      	orrs	r1, r2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6852      	ldr	r2, [r2, #4]
 8005f3a:	3a01      	subs	r2, #1
 8005f3c:	0112      	lsls	r2, r2, #4
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	492d      	ldr	r1, [pc, #180]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	614b      	str	r3, [r1, #20]
 8005f46:	e02d      	b.n	8005fa4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d115      	bne.n	8005f7a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f50:	695a      	ldr	r2, [r3, #20]
 8005f52:	4b2b      	ldr	r3, [pc, #172]	@ (8006000 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6892      	ldr	r2, [r2, #8]
 8005f5a:	0211      	lsls	r1, r2, #8
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6912      	ldr	r2, [r2, #16]
 8005f60:	0852      	lsrs	r2, r2, #1
 8005f62:	3a01      	subs	r2, #1
 8005f64:	0552      	lsls	r2, r2, #21
 8005f66:	4311      	orrs	r1, r2
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6852      	ldr	r2, [r2, #4]
 8005f6c:	3a01      	subs	r2, #1
 8005f6e:	0112      	lsls	r2, r2, #4
 8005f70:	430a      	orrs	r2, r1
 8005f72:	4921      	ldr	r1, [pc, #132]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	614b      	str	r3, [r1, #20]
 8005f78:	e014      	b.n	8005fa4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f7c:	695a      	ldr	r2, [r3, #20]
 8005f7e:	4b21      	ldr	r3, [pc, #132]	@ (8006004 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005f80:	4013      	ands	r3, r2
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6892      	ldr	r2, [r2, #8]
 8005f86:	0211      	lsls	r1, r2, #8
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6952      	ldr	r2, [r2, #20]
 8005f8c:	0852      	lsrs	r2, r2, #1
 8005f8e:	3a01      	subs	r2, #1
 8005f90:	0652      	lsls	r2, r2, #25
 8005f92:	4311      	orrs	r1, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6852      	ldr	r2, [r2, #4]
 8005f98:	3a01      	subs	r2, #1
 8005f9a:	0112      	lsls	r2, r2, #4
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	4916      	ldr	r1, [pc, #88]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005fa4:	4b14      	ldr	r3, [pc, #80]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a13      	ldr	r2, [pc, #76]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb0:	f7fc f93a 	bl	8002228 <HAL_GetTick>
 8005fb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fb6:	e009      	b.n	8005fcc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fb8:	f7fc f936 	bl	8002228 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d902      	bls.n	8005fcc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	73fb      	strb	r3, [r7, #15]
          break;
 8005fca:	e005      	b.n	8005fd8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0ef      	beq.n	8005fb8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005fde:	4b06      	ldr	r3, [pc, #24]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fe0:	695a      	ldr	r2, [r3, #20]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	4904      	ldr	r1, [pc, #16]	@ (8005ff8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	07ff800f 	.word	0x07ff800f
 8006000:	ff9f800f 	.word	0xff9f800f
 8006004:	f9ff800f 	.word	0xf9ff800f

08006008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e049      	b.n	80060ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fb fed4 	bl	8001ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4610      	mov	r0, r2
 8006048:	f000 fa9e 	bl	8006588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d001      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e04f      	b.n	8006170 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a23      	ldr	r2, [pc, #140]	@ (800617c <HAL_TIM_Base_Start_IT+0xc4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_TIM_Base_Start_IT+0x76>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fa:	d018      	beq.n	800612e <HAL_TIM_Base_Start_IT+0x76>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1f      	ldr	r2, [pc, #124]	@ (8006180 <HAL_TIM_Base_Start_IT+0xc8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_TIM_Base_Start_IT+0x76>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1e      	ldr	r2, [pc, #120]	@ (8006184 <HAL_TIM_Base_Start_IT+0xcc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_TIM_Base_Start_IT+0x76>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1c      	ldr	r2, [pc, #112]	@ (8006188 <HAL_TIM_Base_Start_IT+0xd0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_TIM_Base_Start_IT+0x76>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1b      	ldr	r2, [pc, #108]	@ (800618c <HAL_TIM_Base_Start_IT+0xd4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_TIM_Base_Start_IT+0x76>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a19      	ldr	r2, [pc, #100]	@ (8006190 <HAL_TIM_Base_Start_IT+0xd8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d115      	bne.n	800615a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	4b17      	ldr	r3, [pc, #92]	@ (8006194 <HAL_TIM_Base_Start_IT+0xdc>)
 8006136:	4013      	ands	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b06      	cmp	r3, #6
 800613e:	d015      	beq.n	800616c <HAL_TIM_Base_Start_IT+0xb4>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006146:	d011      	beq.n	800616c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0201 	orr.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006158:	e008      	b.n	800616c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f042 0201 	orr.w	r2, r2, #1
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e000      	b.n	800616e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	40012c00 	.word	0x40012c00
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40013400 	.word	0x40013400
 8006190:	40014000 	.word	0x40014000
 8006194:	00010007 	.word	0x00010007

08006198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d020      	beq.n	80061fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0302 	and.w	r3, r3, #2
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d01b      	beq.n	80061fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0202 	mvn.w	r2, #2
 80061cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f9b2 	bl	800654c <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f9a4 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f9b5 	bl	8006560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	2b00      	cmp	r3, #0
 8006204:	d020      	beq.n	8006248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d01b      	beq.n	8006248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0204 	mvn.w	r2, #4
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f98c 	bl	800654c <HAL_TIM_IC_CaptureCallback>
 8006234:	e005      	b.n	8006242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f97e 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f000 f98f 	bl	8006560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b00      	cmp	r3, #0
 8006250:	d020      	beq.n	8006294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0208 	mvn.w	r2, #8
 8006264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2204      	movs	r2, #4
 800626a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f966 	bl	800654c <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f958 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f969 	bl	8006560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	d020      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01b      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0210 	mvn.w	r2, #16
 80062b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2208      	movs	r2, #8
 80062b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f940 	bl	800654c <HAL_TIM_IC_CaptureCallback>
 80062cc:	e005      	b.n	80062da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f932 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f943 	bl	8006560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0201 	mvn.w	r2, #1
 80062fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fb fbb6 	bl	8001a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d104      	bne.n	8006318 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00c      	beq.n	8006332 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800631e:	2b00      	cmp	r3, #0
 8006320:	d007      	beq.n	8006332 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800632a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fafd 	bl	800692c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00c      	beq.n	8006356 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800634e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 faf5 	bl	8006940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00c      	beq.n	800637a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d007      	beq.n	800637a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f8fd 	bl	8006574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f003 0320 	and.w	r3, r3, #32
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00c      	beq.n	800639e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d007      	beq.n	800639e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f06f 0220 	mvn.w	r2, #32
 8006396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fabd 	bl	8006918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d101      	bne.n	80063c2 <HAL_TIM_ConfigClockSource+0x1c>
 80063be:	2302      	movs	r3, #2
 80063c0:	e0b6      	b.n	8006530 <HAL_TIM_ConfigClockSource+0x18a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063e0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68ba      	ldr	r2, [r7, #8]
 80063f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063fe:	d03e      	beq.n	800647e <HAL_TIM_ConfigClockSource+0xd8>
 8006400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006404:	f200 8087 	bhi.w	8006516 <HAL_TIM_ConfigClockSource+0x170>
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800640c:	f000 8086 	beq.w	800651c <HAL_TIM_ConfigClockSource+0x176>
 8006410:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006414:	d87f      	bhi.n	8006516 <HAL_TIM_ConfigClockSource+0x170>
 8006416:	2b70      	cmp	r3, #112	@ 0x70
 8006418:	d01a      	beq.n	8006450 <HAL_TIM_ConfigClockSource+0xaa>
 800641a:	2b70      	cmp	r3, #112	@ 0x70
 800641c:	d87b      	bhi.n	8006516 <HAL_TIM_ConfigClockSource+0x170>
 800641e:	2b60      	cmp	r3, #96	@ 0x60
 8006420:	d050      	beq.n	80064c4 <HAL_TIM_ConfigClockSource+0x11e>
 8006422:	2b60      	cmp	r3, #96	@ 0x60
 8006424:	d877      	bhi.n	8006516 <HAL_TIM_ConfigClockSource+0x170>
 8006426:	2b50      	cmp	r3, #80	@ 0x50
 8006428:	d03c      	beq.n	80064a4 <HAL_TIM_ConfigClockSource+0xfe>
 800642a:	2b50      	cmp	r3, #80	@ 0x50
 800642c:	d873      	bhi.n	8006516 <HAL_TIM_ConfigClockSource+0x170>
 800642e:	2b40      	cmp	r3, #64	@ 0x40
 8006430:	d058      	beq.n	80064e4 <HAL_TIM_ConfigClockSource+0x13e>
 8006432:	2b40      	cmp	r3, #64	@ 0x40
 8006434:	d86f      	bhi.n	8006516 <HAL_TIM_ConfigClockSource+0x170>
 8006436:	2b30      	cmp	r3, #48	@ 0x30
 8006438:	d064      	beq.n	8006504 <HAL_TIM_ConfigClockSource+0x15e>
 800643a:	2b30      	cmp	r3, #48	@ 0x30
 800643c:	d86b      	bhi.n	8006516 <HAL_TIM_ConfigClockSource+0x170>
 800643e:	2b20      	cmp	r3, #32
 8006440:	d060      	beq.n	8006504 <HAL_TIM_ConfigClockSource+0x15e>
 8006442:	2b20      	cmp	r3, #32
 8006444:	d867      	bhi.n	8006516 <HAL_TIM_ConfigClockSource+0x170>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d05c      	beq.n	8006504 <HAL_TIM_ConfigClockSource+0x15e>
 800644a:	2b10      	cmp	r3, #16
 800644c:	d05a      	beq.n	8006504 <HAL_TIM_ConfigClockSource+0x15e>
 800644e:	e062      	b.n	8006516 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006460:	f000 f9b2 	bl	80067c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006472:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	609a      	str	r2, [r3, #8]
      break;
 800647c:	e04f      	b.n	800651e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800648e:	f000 f99b 	bl	80067c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064a0:	609a      	str	r2, [r3, #8]
      break;
 80064a2:	e03c      	b.n	800651e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b0:	461a      	mov	r2, r3
 80064b2:	f000 f90f 	bl	80066d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2150      	movs	r1, #80	@ 0x50
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 f968 	bl	8006792 <TIM_ITRx_SetConfig>
      break;
 80064c2:	e02c      	b.n	800651e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064d0:	461a      	mov	r2, r3
 80064d2:	f000 f92e 	bl	8006732 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2160      	movs	r1, #96	@ 0x60
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 f958 	bl	8006792 <TIM_ITRx_SetConfig>
      break;
 80064e2:	e01c      	b.n	800651e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f0:	461a      	mov	r2, r3
 80064f2:	f000 f8ef 	bl	80066d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2140      	movs	r1, #64	@ 0x40
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 f948 	bl	8006792 <TIM_ITRx_SetConfig>
      break;
 8006502:	e00c      	b.n	800651e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4619      	mov	r1, r3
 800650e:	4610      	mov	r0, r2
 8006510:	f000 f93f 	bl	8006792 <TIM_ITRx_SetConfig>
      break;
 8006514:	e003      	b.n	800651e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	73fb      	strb	r3, [r7, #15]
      break;
 800651a:	e000      	b.n	800651e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800651c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a46      	ldr	r2, [pc, #280]	@ (80066b4 <TIM_Base_SetConfig+0x12c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d013      	beq.n	80065c8 <TIM_Base_SetConfig+0x40>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065a6:	d00f      	beq.n	80065c8 <TIM_Base_SetConfig+0x40>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a43      	ldr	r2, [pc, #268]	@ (80066b8 <TIM_Base_SetConfig+0x130>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d00b      	beq.n	80065c8 <TIM_Base_SetConfig+0x40>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a42      	ldr	r2, [pc, #264]	@ (80066bc <TIM_Base_SetConfig+0x134>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d007      	beq.n	80065c8 <TIM_Base_SetConfig+0x40>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a41      	ldr	r2, [pc, #260]	@ (80066c0 <TIM_Base_SetConfig+0x138>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d003      	beq.n	80065c8 <TIM_Base_SetConfig+0x40>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a40      	ldr	r2, [pc, #256]	@ (80066c4 <TIM_Base_SetConfig+0x13c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d108      	bne.n	80065da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a35      	ldr	r2, [pc, #212]	@ (80066b4 <TIM_Base_SetConfig+0x12c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d01f      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e8:	d01b      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a32      	ldr	r2, [pc, #200]	@ (80066b8 <TIM_Base_SetConfig+0x130>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d017      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a31      	ldr	r2, [pc, #196]	@ (80066bc <TIM_Base_SetConfig+0x134>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d013      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a30      	ldr	r2, [pc, #192]	@ (80066c0 <TIM_Base_SetConfig+0x138>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00f      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a2f      	ldr	r2, [pc, #188]	@ (80066c4 <TIM_Base_SetConfig+0x13c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00b      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a2e      	ldr	r2, [pc, #184]	@ (80066c8 <TIM_Base_SetConfig+0x140>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a2d      	ldr	r2, [pc, #180]	@ (80066cc <TIM_Base_SetConfig+0x144>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_Base_SetConfig+0x9a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a2c      	ldr	r2, [pc, #176]	@ (80066d0 <TIM_Base_SetConfig+0x148>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d108      	bne.n	8006634 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a16      	ldr	r2, [pc, #88]	@ (80066b4 <TIM_Base_SetConfig+0x12c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00f      	beq.n	8006680 <TIM_Base_SetConfig+0xf8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a18      	ldr	r2, [pc, #96]	@ (80066c4 <TIM_Base_SetConfig+0x13c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00b      	beq.n	8006680 <TIM_Base_SetConfig+0xf8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a17      	ldr	r2, [pc, #92]	@ (80066c8 <TIM_Base_SetConfig+0x140>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d007      	beq.n	8006680 <TIM_Base_SetConfig+0xf8>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a16      	ldr	r2, [pc, #88]	@ (80066cc <TIM_Base_SetConfig+0x144>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d003      	beq.n	8006680 <TIM_Base_SetConfig+0xf8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a15      	ldr	r2, [pc, #84]	@ (80066d0 <TIM_Base_SetConfig+0x148>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d103      	bne.n	8006688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b01      	cmp	r3, #1
 8006698:	d105      	bne.n	80066a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	f023 0201 	bic.w	r2, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	611a      	str	r2, [r3, #16]
  }
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40000400 	.word	0x40000400
 80066bc:	40000800 	.word	0x40000800
 80066c0:	40000c00 	.word	0x40000c00
 80066c4:	40013400 	.word	0x40013400
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40014400 	.word	0x40014400
 80066d0:	40014800 	.word	0x40014800

080066d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	f023 0201 	bic.w	r2, r3, #1
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f023 030a 	bic.w	r3, r3, #10
 8006710:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	621a      	str	r2, [r3, #32]
}
 8006726:	bf00      	nop
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006732:	b480      	push	{r7}
 8006734:	b087      	sub	sp, #28
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	f023 0210 	bic.w	r2, r3, #16
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800675c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	031b      	lsls	r3, r3, #12
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	4313      	orrs	r3, r2
 8006766:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800676e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	621a      	str	r2, [r3, #32]
}
 8006786:	bf00      	nop
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006792:	b480      	push	{r7}
 8006794:	b085      	sub	sp, #20
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	f043 0307 	orr.w	r3, r3, #7
 80067b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	609a      	str	r2, [r3, #8]
}
 80067bc:	bf00      	nop
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	021a      	lsls	r2, r3, #8
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	431a      	orrs	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	609a      	str	r2, [r3, #8]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800681c:	2302      	movs	r3, #2
 800681e:	e068      	b.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2e      	ldr	r2, [pc, #184]	@ (8006900 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a2d      	ldr	r2, [pc, #180]	@ (8006904 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d108      	bne.n	8006866 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800685a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a1e      	ldr	r2, [pc, #120]	@ (8006900 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d01d      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006892:	d018      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a1b      	ldr	r2, [pc, #108]	@ (8006908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d013      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a1a      	ldr	r2, [pc, #104]	@ (800690c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d00e      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a18      	ldr	r2, [pc, #96]	@ (8006910 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d009      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a13      	ldr	r2, [pc, #76]	@ (8006904 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d004      	beq.n	80068c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a14      	ldr	r2, [pc, #80]	@ (8006914 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d10c      	bne.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40013400 	.word	0x40013400
 8006908:	40000400 	.word	0x40000400
 800690c:	40000800 	.word	0x40000800
 8006910:	40000c00 	.word	0x40000c00
 8006914:	40014000 	.word	0x40014000

08006918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e042      	b.n	80069ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7fb f989 	bl	8001c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2224      	movs	r2, #36	@ 0x24
 8006982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0201 	bic.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699a:	2b00      	cmp	r3, #0
 800699c:	d002      	beq.n	80069a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fb24 	bl	8006fec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f825 	bl	80069f4 <UART_SetConfig>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e01b      	b.n	80069ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689a      	ldr	r2, [r3, #8]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fba3 	bl	8007130 <UART_CheckIdleState>
 80069ea:	4603      	mov	r3, r0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f8:	b08c      	sub	sp, #48	@ 0x30
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	4baa      	ldr	r3, [pc, #680]	@ (8006ccc <UART_SetConfig+0x2d8>)
 8006a24:	4013      	ands	r3, r2
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a9f      	ldr	r2, [pc, #636]	@ (8006cd0 <UART_SetConfig+0x2dc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d004      	beq.n	8006a60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006a6a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	6812      	ldr	r2, [r2, #0]
 8006a72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a74:	430b      	orrs	r3, r1
 8006a76:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	f023 010f 	bic.w	r1, r3, #15
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a90      	ldr	r2, [pc, #576]	@ (8006cd4 <UART_SetConfig+0x2e0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d125      	bne.n	8006ae4 <UART_SetConfig+0xf0>
 8006a98:	4b8f      	ldr	r3, [pc, #572]	@ (8006cd8 <UART_SetConfig+0x2e4>)
 8006a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	d81a      	bhi.n	8006adc <UART_SetConfig+0xe8>
 8006aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aac <UART_SetConfig+0xb8>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006abd 	.word	0x08006abd
 8006ab0:	08006acd 	.word	0x08006acd
 8006ab4:	08006ac5 	.word	0x08006ac5
 8006ab8:	08006ad5 	.word	0x08006ad5
 8006abc:	2301      	movs	r3, #1
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac2:	e116      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aca:	e112      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006acc:	2304      	movs	r3, #4
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad2:	e10e      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ada:	e10a      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ae2:	e106      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a7c      	ldr	r2, [pc, #496]	@ (8006cdc <UART_SetConfig+0x2e8>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d138      	bne.n	8006b60 <UART_SetConfig+0x16c>
 8006aee:	4b7a      	ldr	r3, [pc, #488]	@ (8006cd8 <UART_SetConfig+0x2e4>)
 8006af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af4:	f003 030c 	and.w	r3, r3, #12
 8006af8:	2b0c      	cmp	r3, #12
 8006afa:	d82d      	bhi.n	8006b58 <UART_SetConfig+0x164>
 8006afc:	a201      	add	r2, pc, #4	@ (adr r2, 8006b04 <UART_SetConfig+0x110>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b39 	.word	0x08006b39
 8006b08:	08006b59 	.word	0x08006b59
 8006b0c:	08006b59 	.word	0x08006b59
 8006b10:	08006b59 	.word	0x08006b59
 8006b14:	08006b49 	.word	0x08006b49
 8006b18:	08006b59 	.word	0x08006b59
 8006b1c:	08006b59 	.word	0x08006b59
 8006b20:	08006b59 	.word	0x08006b59
 8006b24:	08006b41 	.word	0x08006b41
 8006b28:	08006b59 	.word	0x08006b59
 8006b2c:	08006b59 	.word	0x08006b59
 8006b30:	08006b59 	.word	0x08006b59
 8006b34:	08006b51 	.word	0x08006b51
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3e:	e0d8      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006b40:	2302      	movs	r3, #2
 8006b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b46:	e0d4      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006b48:	2304      	movs	r3, #4
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e0d0      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006b50:	2308      	movs	r3, #8
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b56:	e0cc      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006b58:	2310      	movs	r3, #16
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b5e:	e0c8      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a5e      	ldr	r2, [pc, #376]	@ (8006ce0 <UART_SetConfig+0x2ec>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d125      	bne.n	8006bb6 <UART_SetConfig+0x1c2>
 8006b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8006cd8 <UART_SetConfig+0x2e4>)
 8006b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b70:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b74:	2b30      	cmp	r3, #48	@ 0x30
 8006b76:	d016      	beq.n	8006ba6 <UART_SetConfig+0x1b2>
 8006b78:	2b30      	cmp	r3, #48	@ 0x30
 8006b7a:	d818      	bhi.n	8006bae <UART_SetConfig+0x1ba>
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	d00a      	beq.n	8006b96 <UART_SetConfig+0x1a2>
 8006b80:	2b20      	cmp	r3, #32
 8006b82:	d814      	bhi.n	8006bae <UART_SetConfig+0x1ba>
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <UART_SetConfig+0x19a>
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d008      	beq.n	8006b9e <UART_SetConfig+0x1aa>
 8006b8c:	e00f      	b.n	8006bae <UART_SetConfig+0x1ba>
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b94:	e0ad      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006b96:	2302      	movs	r3, #2
 8006b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9c:	e0a9      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006b9e:	2304      	movs	r3, #4
 8006ba0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba4:	e0a5      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bac:	e0a1      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006bae:	2310      	movs	r3, #16
 8006bb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb4:	e09d      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a4a      	ldr	r2, [pc, #296]	@ (8006ce4 <UART_SetConfig+0x2f0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d125      	bne.n	8006c0c <UART_SetConfig+0x218>
 8006bc0:	4b45      	ldr	r3, [pc, #276]	@ (8006cd8 <UART_SetConfig+0x2e4>)
 8006bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006bca:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bcc:	d016      	beq.n	8006bfc <UART_SetConfig+0x208>
 8006bce:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bd0:	d818      	bhi.n	8006c04 <UART_SetConfig+0x210>
 8006bd2:	2b80      	cmp	r3, #128	@ 0x80
 8006bd4:	d00a      	beq.n	8006bec <UART_SetConfig+0x1f8>
 8006bd6:	2b80      	cmp	r3, #128	@ 0x80
 8006bd8:	d814      	bhi.n	8006c04 <UART_SetConfig+0x210>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <UART_SetConfig+0x1f0>
 8006bde:	2b40      	cmp	r3, #64	@ 0x40
 8006be0:	d008      	beq.n	8006bf4 <UART_SetConfig+0x200>
 8006be2:	e00f      	b.n	8006c04 <UART_SetConfig+0x210>
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bea:	e082      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006bec:	2302      	movs	r3, #2
 8006bee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bf2:	e07e      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bfa:	e07a      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c02:	e076      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006c04:	2310      	movs	r3, #16
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c0a:	e072      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a35      	ldr	r2, [pc, #212]	@ (8006ce8 <UART_SetConfig+0x2f4>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d12a      	bne.n	8006c6c <UART_SetConfig+0x278>
 8006c16:	4b30      	ldr	r3, [pc, #192]	@ (8006cd8 <UART_SetConfig+0x2e4>)
 8006c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c24:	d01a      	beq.n	8006c5c <UART_SetConfig+0x268>
 8006c26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c2a:	d81b      	bhi.n	8006c64 <UART_SetConfig+0x270>
 8006c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c30:	d00c      	beq.n	8006c4c <UART_SetConfig+0x258>
 8006c32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c36:	d815      	bhi.n	8006c64 <UART_SetConfig+0x270>
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d003      	beq.n	8006c44 <UART_SetConfig+0x250>
 8006c3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c40:	d008      	beq.n	8006c54 <UART_SetConfig+0x260>
 8006c42:	e00f      	b.n	8006c64 <UART_SetConfig+0x270>
 8006c44:	2300      	movs	r3, #0
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4a:	e052      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c52:	e04e      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006c54:	2304      	movs	r3, #4
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5a:	e04a      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006c5c:	2308      	movs	r3, #8
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c62:	e046      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006c64:	2310      	movs	r3, #16
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c6a:	e042      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a17      	ldr	r2, [pc, #92]	@ (8006cd0 <UART_SetConfig+0x2dc>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d13a      	bne.n	8006cec <UART_SetConfig+0x2f8>
 8006c76:	4b18      	ldr	r3, [pc, #96]	@ (8006cd8 <UART_SetConfig+0x2e4>)
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006c80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c84:	d01a      	beq.n	8006cbc <UART_SetConfig+0x2c8>
 8006c86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006c8a:	d81b      	bhi.n	8006cc4 <UART_SetConfig+0x2d0>
 8006c8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c90:	d00c      	beq.n	8006cac <UART_SetConfig+0x2b8>
 8006c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c96:	d815      	bhi.n	8006cc4 <UART_SetConfig+0x2d0>
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d003      	beq.n	8006ca4 <UART_SetConfig+0x2b0>
 8006c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca0:	d008      	beq.n	8006cb4 <UART_SetConfig+0x2c0>
 8006ca2:	e00f      	b.n	8006cc4 <UART_SetConfig+0x2d0>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006caa:	e022      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006cac:	2302      	movs	r3, #2
 8006cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb2:	e01e      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006cb4:	2304      	movs	r3, #4
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cba:	e01a      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006cbc:	2308      	movs	r3, #8
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc2:	e016      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006cc4:	2310      	movs	r3, #16
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cca:	e012      	b.n	8006cf2 <UART_SetConfig+0x2fe>
 8006ccc:	cfff69f3 	.word	0xcfff69f3
 8006cd0:	40008000 	.word	0x40008000
 8006cd4:	40013800 	.word	0x40013800
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	40004400 	.word	0x40004400
 8006ce0:	40004800 	.word	0x40004800
 8006ce4:	40004c00 	.word	0x40004c00
 8006ce8:	40005000 	.word	0x40005000
 8006cec:	2310      	movs	r3, #16
 8006cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4aae      	ldr	r2, [pc, #696]	@ (8006fb0 <UART_SetConfig+0x5bc>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	f040 8097 	bne.w	8006e2c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006cfe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d02:	2b08      	cmp	r3, #8
 8006d04:	d823      	bhi.n	8006d4e <UART_SetConfig+0x35a>
 8006d06:	a201      	add	r2, pc, #4	@ (adr r2, 8006d0c <UART_SetConfig+0x318>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d31 	.word	0x08006d31
 8006d10:	08006d4f 	.word	0x08006d4f
 8006d14:	08006d39 	.word	0x08006d39
 8006d18:	08006d4f 	.word	0x08006d4f
 8006d1c:	08006d3f 	.word	0x08006d3f
 8006d20:	08006d4f 	.word	0x08006d4f
 8006d24:	08006d4f 	.word	0x08006d4f
 8006d28:	08006d4f 	.word	0x08006d4f
 8006d2c:	08006d47 	.word	0x08006d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d30:	f7fe fb34 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 8006d34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d36:	e010      	b.n	8006d5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d38:	4b9e      	ldr	r3, [pc, #632]	@ (8006fb4 <UART_SetConfig+0x5c0>)
 8006d3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d3c:	e00d      	b.n	8006d5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d3e:	f7fe fa95 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8006d42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d44:	e009      	b.n	8006d5a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d4c:	e005      	b.n	8006d5a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8130 	beq.w	8006fc2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d66:	4a94      	ldr	r2, [pc, #592]	@ (8006fb8 <UART_SetConfig+0x5c4>)
 8006d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d74:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d305      	bcc.n	8006d92 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d903      	bls.n	8006d9a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d98:	e113      	b.n	8006fc2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	60bb      	str	r3, [r7, #8]
 8006da0:	60fa      	str	r2, [r7, #12]
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da6:	4a84      	ldr	r2, [pc, #528]	@ (8006fb8 <UART_SetConfig+0x5c4>)
 8006da8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	2200      	movs	r2, #0
 8006db0:	603b      	str	r3, [r7, #0]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dbc:	f7f9 fe96 	bl	8000aec <__aeabi_uldivmod>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	020b      	lsls	r3, r1, #8
 8006dd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006dd6:	0202      	lsls	r2, r0, #8
 8006dd8:	6979      	ldr	r1, [r7, #20]
 8006dda:	6849      	ldr	r1, [r1, #4]
 8006ddc:	0849      	lsrs	r1, r1, #1
 8006dde:	2000      	movs	r0, #0
 8006de0:	460c      	mov	r4, r1
 8006de2:	4605      	mov	r5, r0
 8006de4:	eb12 0804 	adds.w	r8, r2, r4
 8006de8:	eb43 0905 	adc.w	r9, r3, r5
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	469a      	mov	sl, r3
 8006df4:	4693      	mov	fp, r2
 8006df6:	4652      	mov	r2, sl
 8006df8:	465b      	mov	r3, fp
 8006dfa:	4640      	mov	r0, r8
 8006dfc:	4649      	mov	r1, r9
 8006dfe:	f7f9 fe75 	bl	8000aec <__aeabi_uldivmod>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4613      	mov	r3, r2
 8006e08:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e0a:	6a3b      	ldr	r3, [r7, #32]
 8006e0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e10:	d308      	bcc.n	8006e24 <UART_SetConfig+0x430>
 8006e12:	6a3b      	ldr	r3, [r7, #32]
 8006e14:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e18:	d204      	bcs.n	8006e24 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6a3a      	ldr	r2, [r7, #32]
 8006e20:	60da      	str	r2, [r3, #12]
 8006e22:	e0ce      	b.n	8006fc2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e2a:	e0ca      	b.n	8006fc2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e34:	d166      	bne.n	8006f04 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e36:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d827      	bhi.n	8006e8e <UART_SetConfig+0x49a>
 8006e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e44 <UART_SetConfig+0x450>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006e71 	.word	0x08006e71
 8006e4c:	08006e79 	.word	0x08006e79
 8006e50:	08006e8f 	.word	0x08006e8f
 8006e54:	08006e7f 	.word	0x08006e7f
 8006e58:	08006e8f 	.word	0x08006e8f
 8006e5c:	08006e8f 	.word	0x08006e8f
 8006e60:	08006e8f 	.word	0x08006e8f
 8006e64:	08006e87 	.word	0x08006e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e68:	f7fe fa98 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 8006e6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e6e:	e014      	b.n	8006e9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e70:	f7fe faaa 	bl	80053c8 <HAL_RCC_GetPCLK2Freq>
 8006e74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e76:	e010      	b.n	8006e9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e78:	4b4e      	ldr	r3, [pc, #312]	@ (8006fb4 <UART_SetConfig+0x5c0>)
 8006e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e7c:	e00d      	b.n	8006e9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7e:	f7fe f9f5 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8006e82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006e84:	e009      	b.n	8006e9a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006e8c:	e005      	b.n	8006e9a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006e98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8090 	beq.w	8006fc2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea6:	4a44      	ldr	r2, [pc, #272]	@ (8006fb8 <UART_SetConfig+0x5c4>)
 8006ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eb4:	005a      	lsls	r2, r3, #1
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	085b      	lsrs	r3, r3, #1
 8006ebc:	441a      	add	r2, r3
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	2b0f      	cmp	r3, #15
 8006ecc:	d916      	bls.n	8006efc <UART_SetConfig+0x508>
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed4:	d212      	bcs.n	8006efc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	f023 030f 	bic.w	r3, r3, #15
 8006ede:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	085b      	lsrs	r3, r3, #1
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	8bfb      	ldrh	r3, [r7, #30]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	8bfa      	ldrh	r2, [r7, #30]
 8006ef8:	60da      	str	r2, [r3, #12]
 8006efa:	e062      	b.n	8006fc2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f02:	e05e      	b.n	8006fc2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d828      	bhi.n	8006f5e <UART_SetConfig+0x56a>
 8006f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f14 <UART_SetConfig+0x520>)
 8006f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f12:	bf00      	nop
 8006f14:	08006f39 	.word	0x08006f39
 8006f18:	08006f41 	.word	0x08006f41
 8006f1c:	08006f49 	.word	0x08006f49
 8006f20:	08006f5f 	.word	0x08006f5f
 8006f24:	08006f4f 	.word	0x08006f4f
 8006f28:	08006f5f 	.word	0x08006f5f
 8006f2c:	08006f5f 	.word	0x08006f5f
 8006f30:	08006f5f 	.word	0x08006f5f
 8006f34:	08006f57 	.word	0x08006f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f38:	f7fe fa30 	bl	800539c <HAL_RCC_GetPCLK1Freq>
 8006f3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f3e:	e014      	b.n	8006f6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f40:	f7fe fa42 	bl	80053c8 <HAL_RCC_GetPCLK2Freq>
 8006f44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f46:	e010      	b.n	8006f6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f48:	4b1a      	ldr	r3, [pc, #104]	@ (8006fb4 <UART_SetConfig+0x5c0>)
 8006f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f4c:	e00d      	b.n	8006f6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f4e:	f7fe f98d 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8006f52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f54:	e009      	b.n	8006f6a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f5c:	e005      	b.n	8006f6a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f68:	bf00      	nop
    }

    if (pclk != 0U)
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d028      	beq.n	8006fc2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	4a10      	ldr	r2, [pc, #64]	@ (8006fb8 <UART_SetConfig+0x5c4>)
 8006f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	085b      	lsrs	r3, r3, #1
 8006f88:	441a      	add	r2, r3
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f92:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	2b0f      	cmp	r3, #15
 8006f98:	d910      	bls.n	8006fbc <UART_SetConfig+0x5c8>
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fa0:	d20c      	bcs.n	8006fbc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60da      	str	r2, [r3, #12]
 8006fac:	e009      	b.n	8006fc2 <UART_SetConfig+0x5ce>
 8006fae:	bf00      	nop
 8006fb0:	40008000 	.word	0x40008000
 8006fb4:	00f42400 	.word	0x00f42400
 8006fb8:	0800bd5c 	.word	0x0800bd5c
      }
      else
      {
        ret = HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006fde:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3730      	adds	r7, #48	@ 0x30
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006fec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	f003 0308 	and.w	r3, r3, #8
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00a      	beq.n	800705a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705e:	f003 0304 	and.w	r3, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007080:	f003 0310 	and.w	r3, r3, #16
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	430a      	orrs	r2, r1
 800709c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01a      	beq.n	8007102 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ea:	d10a      	bne.n	8007102 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	605a      	str	r2, [r3, #4]
  }
}
 8007124:	bf00      	nop
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b098      	sub	sp, #96	@ 0x60
 8007134:	af02      	add	r7, sp, #8
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007140:	f7fb f872 	bl	8002228 <HAL_GetTick>
 8007144:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0308 	and.w	r3, r3, #8
 8007150:	2b08      	cmp	r3, #8
 8007152:	d12f      	bne.n	80071b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007154:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800715c:	2200      	movs	r2, #0
 800715e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f88e 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d022      	beq.n	80071b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800717c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800717e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007182:	653b      	str	r3, [r7, #80]	@ 0x50
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800718c:	647b      	str	r3, [r7, #68]	@ 0x44
 800718e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007192:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800719a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e6      	bne.n	800716e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e063      	b.n	800727c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d149      	bne.n	8007256 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071ca:	2200      	movs	r2, #0
 80071cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f857 	bl	8007284 <UART_WaitOnFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d03c      	beq.n	8007256 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	623b      	str	r3, [r7, #32]
   return(result);
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80071fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e6      	bne.n	80071dc <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3308      	adds	r3, #8
 8007214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	e853 3f00 	ldrex	r3, [r3]
 800721c:	60fb      	str	r3, [r7, #12]
   return(result);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f023 0301 	bic.w	r3, r3, #1
 8007224:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3308      	adds	r3, #8
 800722c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800722e:	61fa      	str	r2, [r7, #28]
 8007230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	69b9      	ldr	r1, [r7, #24]
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	617b      	str	r3, [r7, #20]
   return(result);
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e5      	bne.n	800720e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e012      	b.n	800727c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3758      	adds	r7, #88	@ 0x58
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	4613      	mov	r3, r2
 8007292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007294:	e04f      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729c:	d04b      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729e:	f7fa ffc3 	bl	8002228 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d302      	bcc.n	80072b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e04e      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d037      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b80      	cmp	r3, #128	@ 0x80
 80072ca:	d034      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b40      	cmp	r3, #64	@ 0x40
 80072d0:	d031      	beq.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d110      	bne.n	8007302 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2208      	movs	r2, #8
 80072e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f838 	bl	800735e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2208      	movs	r2, #8
 80072f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e029      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800730c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007310:	d111      	bne.n	8007336 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800731a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f000 f81e 	bl	800735e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2220      	movs	r2, #32
 8007326:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e00f      	b.n	8007356 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	4013      	ands	r3, r2
 8007340:	68ba      	ldr	r2, [r7, #8]
 8007342:	429a      	cmp	r2, r3
 8007344:	bf0c      	ite	eq
 8007346:	2301      	moveq	r3, #1
 8007348:	2300      	movne	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	429a      	cmp	r2, r3
 8007352:	d0a0      	beq.n	8007296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800735e:	b480      	push	{r7}
 8007360:	b095      	sub	sp, #84	@ 0x54
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800736e:	e853 3f00 	ldrex	r3, [r3]
 8007372:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800737a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	461a      	mov	r2, r3
 8007382:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007384:	643b      	str	r3, [r7, #64]	@ 0x40
 8007386:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007388:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800738a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800738c:	e841 2300 	strex	r3, r2, [r1]
 8007390:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1e6      	bne.n	8007366 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073ae:	f023 0301 	bic.w	r3, r3, #1
 80073b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3308      	adds	r3, #8
 80073ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c4:	e841 2300 	strex	r3, r2, [r1]
 80073c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1e3      	bne.n	8007398 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d118      	bne.n	800740a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f023 0310 	bic.w	r3, r3, #16
 80073ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fa:	6979      	ldr	r1, [r7, #20]
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	e841 2300 	strex	r3, r2, [r1]
 8007402:	613b      	str	r3, [r7, #16]
   return(result);
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1e6      	bne.n	80073d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2220      	movs	r2, #32
 800740e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800741e:	bf00      	nop
 8007420:	3754      	adds	r7, #84	@ 0x54
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007438:	2b01      	cmp	r3, #1
 800743a:	d101      	bne.n	8007440 <HAL_UARTEx_DisableFifoMode+0x16>
 800743c:	2302      	movs	r3, #2
 800743e:	e027      	b.n	8007490 <HAL_UARTEx_DisableFifoMode+0x66>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2224      	movs	r2, #36	@ 0x24
 800744c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0201 	bic.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800746e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d101      	bne.n	80074b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074b0:	2302      	movs	r3, #2
 80074b2:	e02d      	b.n	8007510 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2224      	movs	r2, #36	@ 0x24
 80074c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0201 	bic.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f84f 	bl	8007594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800752c:	2302      	movs	r3, #2
 800752e:	e02d      	b.n	800758c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2224      	movs	r2, #36	@ 0x24
 800753c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0201 	bic.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	430a      	orrs	r2, r1
 800756a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f811 	bl	8007594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d108      	bne.n	80075b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075b4:	e031      	b.n	800761a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075b6:	2308      	movs	r3, #8
 80075b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075ba:	2308      	movs	r3, #8
 80075bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	0e5b      	lsrs	r3, r3, #25
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	f003 0307 	and.w	r3, r3, #7
 80075cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	0f5b      	lsrs	r3, r3, #29
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	7b3a      	ldrb	r2, [r7, #12]
 80075e2:	4911      	ldr	r1, [pc, #68]	@ (8007628 <UARTEx_SetNbDataToProcess+0x94>)
 80075e4:	5c8a      	ldrb	r2, [r1, r2]
 80075e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075ea:	7b3a      	ldrb	r2, [r7, #12]
 80075ec:	490f      	ldr	r1, [pc, #60]	@ (800762c <UARTEx_SetNbDataToProcess+0x98>)
 80075ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	7b7a      	ldrb	r2, [r7, #13]
 8007600:	4909      	ldr	r1, [pc, #36]	@ (8007628 <UARTEx_SetNbDataToProcess+0x94>)
 8007602:	5c8a      	ldrb	r2, [r1, r2]
 8007604:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007608:	7b7a      	ldrb	r2, [r7, #13]
 800760a:	4908      	ldr	r1, [pc, #32]	@ (800762c <UARTEx_SetNbDataToProcess+0x98>)
 800760c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800760e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007612:	b29a      	uxth	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800761a:	bf00      	nop
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	0800bd74 	.word	0x0800bd74
 800762c:	0800bd7c 	.word	0x0800bd7c

08007630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007630:	b084      	sub	sp, #16
 8007632:	b580      	push	{r7, lr}
 8007634:	b084      	sub	sp, #16
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
 800763a:	f107 001c 	add.w	r0, r7, #28
 800763e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa68 	bl	8007b24 <USB_CoreReset>
 8007654:	4603      	mov	r3, r0
 8007656:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007658:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800765c:	2b00      	cmp	r3, #0
 800765e:	d106      	bne.n	800766e <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007664:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	639a      	str	r2, [r3, #56]	@ 0x38
 800766c:	e005      	b.n	800767a <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007672:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800767a:	7bfb      	ldrb	r3, [r7, #15]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007686:	b004      	add	sp, #16
 8007688:	4770      	bx	lr

0800768a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800768a:	b480      	push	{r7}
 800768c:	b083      	sub	sp, #12
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f023 0201 	bic.w	r2, r3, #1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d115      	bne.n	80076fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076da:	200a      	movs	r0, #10
 80076dc:	f7fa fdb0 	bl	8002240 <HAL_Delay>
      ms += 10U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	330a      	adds	r3, #10
 80076e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fa0e 	bl	8007b08 <USB_GetMode>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d01e      	beq.n	8007730 <USB_SetCurrentMode+0x84>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80076f6:	d9f0      	bls.n	80076da <USB_SetCurrentMode+0x2e>
 80076f8:	e01a      	b.n	8007730 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d115      	bne.n	800772c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800770c:	200a      	movs	r0, #10
 800770e:	f7fa fd97 	bl	8002240 <HAL_Delay>
      ms += 10U;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	330a      	adds	r3, #10
 8007716:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f9f5 	bl	8007b08 <USB_GetMode>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d005      	beq.n	8007730 <USB_SetCurrentMode+0x84>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2bc7      	cmp	r3, #199	@ 0xc7
 8007728:	d9f0      	bls.n	800770c <USB_SetCurrentMode+0x60>
 800772a:	e001      	b.n	8007730 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e005      	b.n	800773c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2bc8      	cmp	r3, #200	@ 0xc8
 8007734:	d101      	bne.n	800773a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007744:	b084      	sub	sp, #16
 8007746:	b580      	push	{r7, lr}
 8007748:	b086      	sub	sp, #24
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007756:	2300      	movs	r3, #0
 8007758:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800775e:	2300      	movs	r3, #0
 8007760:	613b      	str	r3, [r7, #16]
 8007762:	e009      	b.n	8007778 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	3340      	adds	r3, #64	@ 0x40
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	2200      	movs	r2, #0
 8007770:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	3301      	adds	r3, #1
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	2b0e      	cmp	r3, #14
 800777c:	d9f2      	bls.n	8007764 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800777e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007782:	2b00      	cmp	r3, #0
 8007784:	d11c      	bne.n	80077c0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007794:	f043 0302 	orr.w	r3, r3, #2
 8007798:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	601a      	str	r2, [r3, #0]
 80077be:	e005      	b.n	80077cc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077d2:	461a      	mov	r2, r3
 80077d4:	2300      	movs	r3, #0
 80077d6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077d8:	2103      	movs	r1, #3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f95a 	bl	8007a94 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077e0:	2110      	movs	r1, #16
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f8f6 	bl	80079d4 <USB_FlushTxFifo>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f920 	bl	8007a38 <USB_FlushRxFifo>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007808:	461a      	mov	r2, r3
 800780a:	2300      	movs	r3, #0
 800780c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007814:	461a      	mov	r2, r3
 8007816:	2300      	movs	r3, #0
 8007818:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007820:	461a      	mov	r2, r3
 8007822:	2300      	movs	r3, #0
 8007824:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007826:	2300      	movs	r3, #0
 8007828:	613b      	str	r3, [r7, #16]
 800782a:	e043      	b.n	80078b4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800783e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007842:	d118      	bne.n	8007876 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10a      	bne.n	8007860 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007856:	461a      	mov	r2, r3
 8007858:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	e013      	b.n	8007888 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800786c:	461a      	mov	r2, r3
 800786e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	e008      	b.n	8007888 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007882:	461a      	mov	r2, r3
 8007884:	2300      	movs	r3, #0
 8007886:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007894:	461a      	mov	r2, r3
 8007896:	2300      	movs	r3, #0
 8007898:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a6:	461a      	mov	r2, r3
 80078a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3301      	adds	r3, #1
 80078b2:	613b      	str	r3, [r7, #16]
 80078b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80078b8:	461a      	mov	r2, r3
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	4293      	cmp	r3, r2
 80078be:	d3b5      	bcc.n	800782c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078c0:	2300      	movs	r3, #0
 80078c2:	613b      	str	r3, [r7, #16]
 80078c4:	e043      	b.n	800794e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078dc:	d118      	bne.n	8007910 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10a      	bne.n	80078fa <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	015a      	lsls	r2, r3, #5
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4413      	add	r3, r2
 80078ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f0:	461a      	mov	r2, r3
 80078f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	e013      	b.n	8007922 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007906:	461a      	mov	r2, r3
 8007908:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	e008      	b.n	8007922 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800791c:	461a      	mov	r2, r3
 800791e:	2300      	movs	r3, #0
 8007920:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	015a      	lsls	r2, r3, #5
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792e:	461a      	mov	r2, r3
 8007930:	2300      	movs	r3, #0
 8007932:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007940:	461a      	mov	r2, r3
 8007942:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007946:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	3301      	adds	r3, #1
 800794c:	613b      	str	r3, [r7, #16]
 800794e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007952:	461a      	mov	r2, r3
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	4293      	cmp	r3, r2
 8007958:	d3b5      	bcc.n	80078c6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007968:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800796c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800797a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	f043 0210 	orr.w	r2, r3, #16
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	699a      	ldr	r2, [r3, #24]
 800798c:	4b10      	ldr	r3, [pc, #64]	@ (80079d0 <USB_DevInit+0x28c>)
 800798e:	4313      	orrs	r3, r2
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007994:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	f043 0208 	orr.w	r2, r3, #8
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d107      	bne.n	80079c0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079b8:	f043 0304 	orr.w	r3, r3, #4
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079cc:	b004      	add	sp, #16
 80079ce:	4770      	bx	lr
 80079d0:	803c3800 	.word	0x803c3800

080079d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079ee:	d901      	bls.n	80079f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e01b      	b.n	8007a2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	daf2      	bge.n	80079e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	019b      	lsls	r3, r3, #6
 8007a04:	f043 0220 	orr.w	r2, r3, #32
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a18:	d901      	bls.n	8007a1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e006      	b.n	8007a2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d0f0      	beq.n	8007a0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3301      	adds	r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a50:	d901      	bls.n	8007a56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e018      	b.n	8007a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	daf2      	bge.n	8007a44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2210      	movs	r2, #16
 8007a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a74:	d901      	bls.n	8007a7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e006      	b.n	8007a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f003 0310 	and.w	r3, r3, #16
 8007a82:	2b10      	cmp	r3, #16
 8007a84:	d0f0      	beq.n	8007a68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	78fb      	ldrb	r3, [r7, #3]
 8007aae:	68f9      	ldr	r1, [r7, #12]
 8007ab0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ae0:	f023 0303 	bic.w	r3, r3, #3
 8007ae4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007af4:	f043 0302 	orr.w	r3, r3, #2
 8007af8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	695b      	ldr	r3, [r3, #20]
 8007b14:	f003 0301 	and.w	r3, r3, #1
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	3301      	adds	r3, #1
 8007b34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b3c:	d901      	bls.n	8007b42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e01b      	b.n	8007b7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	daf2      	bge.n	8007b30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f043 0201 	orr.w	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b66:	d901      	bls.n	8007b6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e006      	b.n	8007b7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d0f0      	beq.n	8007b5a <USB_CoreReset+0x36>

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
	...

08007b88 <__NVIC_SetPriority>:
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	6039      	str	r1, [r7, #0]
 8007b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	db0a      	blt.n	8007bb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	490c      	ldr	r1, [pc, #48]	@ (8007bd4 <__NVIC_SetPriority+0x4c>)
 8007ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ba6:	0112      	lsls	r2, r2, #4
 8007ba8:	b2d2      	uxtb	r2, r2
 8007baa:	440b      	add	r3, r1
 8007bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007bb0:	e00a      	b.n	8007bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	4908      	ldr	r1, [pc, #32]	@ (8007bd8 <__NVIC_SetPriority+0x50>)
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	f003 030f 	and.w	r3, r3, #15
 8007bbe:	3b04      	subs	r3, #4
 8007bc0:	0112      	lsls	r2, r2, #4
 8007bc2:	b2d2      	uxtb	r2, r2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	761a      	strb	r2, [r3, #24]
}
 8007bc8:	bf00      	nop
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	e000e100 	.word	0xe000e100
 8007bd8:	e000ed00 	.word	0xe000ed00

08007bdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007be0:	4b05      	ldr	r3, [pc, #20]	@ (8007bf8 <SysTick_Handler+0x1c>)
 8007be2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007be4:	f002 fcae 	bl	800a544 <xTaskGetSchedulerState>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d001      	beq.n	8007bf2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007bee:	f003 fc63 	bl	800b4b8 <xPortSysTickHandler>
  }
}
 8007bf2:	bf00      	nop
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	e000e010 	.word	0xe000e010

08007bfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c00:	2100      	movs	r1, #0
 8007c02:	f06f 0004 	mvn.w	r0, #4
 8007c06:	f7ff ffbf 	bl	8007b88 <__NVIC_SetPriority>
#endif
}
 8007c0a:	bf00      	nop
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c16:	f3ef 8305 	mrs	r3, IPSR
 8007c1a:	603b      	str	r3, [r7, #0]
  return(result);
 8007c1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d003      	beq.n	8007c2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007c22:	f06f 0305 	mvn.w	r3, #5
 8007c26:	607b      	str	r3, [r7, #4]
 8007c28:	e00c      	b.n	8007c44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c54 <osKernelInitialize+0x44>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d105      	bne.n	8007c3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007c32:	4b08      	ldr	r3, [pc, #32]	@ (8007c54 <osKernelInitialize+0x44>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	607b      	str	r3, [r7, #4]
 8007c3c:	e002      	b.n	8007c44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c44:	687b      	ldr	r3, [r7, #4]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20040910 	.word	0x20040910

08007c58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c5e:	f3ef 8305 	mrs	r3, IPSR
 8007c62:	603b      	str	r3, [r7, #0]
  return(result);
 8007c64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007c6a:	f06f 0305 	mvn.w	r3, #5
 8007c6e:	607b      	str	r3, [r7, #4]
 8007c70:	e010      	b.n	8007c94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca0 <osKernelStart+0x48>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d109      	bne.n	8007c8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007c7a:	f7ff ffbf 	bl	8007bfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007c7e:	4b08      	ldr	r3, [pc, #32]	@ (8007ca0 <osKernelStart+0x48>)
 8007c80:	2202      	movs	r2, #2
 8007c82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007c84:	f001 ffea 	bl	8009c5c <vTaskStartScheduler>
      stat = osOK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	607b      	str	r3, [r7, #4]
 8007c8c:	e002      	b.n	8007c94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007c94:	687b      	ldr	r3, [r7, #4]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20040910 	.word	0x20040910

08007ca4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08e      	sub	sp, #56	@ 0x38
 8007ca8:	af04      	add	r7, sp, #16
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cb4:	f3ef 8305 	mrs	r3, IPSR
 8007cb8:	617b      	str	r3, [r7, #20]
  return(result);
 8007cba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d17e      	bne.n	8007dbe <osThreadNew+0x11a>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d07b      	beq.n	8007dbe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007cc6:	2380      	movs	r3, #128	@ 0x80
 8007cc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007cca:	2318      	movs	r3, #24
 8007ccc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d045      	beq.n	8007d6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <osThreadNew+0x48>
        name = attr->name;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d002      	beq.n	8007cfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d008      	beq.n	8007d12 <osThreadNew+0x6e>
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	2b38      	cmp	r3, #56	@ 0x38
 8007d04:	d805      	bhi.n	8007d12 <osThreadNew+0x6e>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <osThreadNew+0x72>
        return (NULL);
 8007d12:	2300      	movs	r3, #0
 8007d14:	e054      	b.n	8007dc0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	089b      	lsrs	r3, r3, #2
 8007d24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00e      	beq.n	8007d4c <osThreadNew+0xa8>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	2ba7      	cmp	r3, #167	@ 0xa7
 8007d34:	d90a      	bls.n	8007d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d006      	beq.n	8007d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <osThreadNew+0xa8>
        mem = 1;
 8007d46:	2301      	movs	r3, #1
 8007d48:	61bb      	str	r3, [r7, #24]
 8007d4a:	e010      	b.n	8007d6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d10c      	bne.n	8007d6e <osThreadNew+0xca>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d108      	bne.n	8007d6e <osThreadNew+0xca>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d104      	bne.n	8007d6e <osThreadNew+0xca>
          mem = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	61bb      	str	r3, [r7, #24]
 8007d68:	e001      	b.n	8007d6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d110      	bne.n	8007d96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d7c:	9202      	str	r2, [sp, #8]
 8007d7e:	9301      	str	r3, [sp, #4]
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	6a3a      	ldr	r2, [r7, #32]
 8007d88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f001 fda8 	bl	80098e0 <xTaskCreateStatic>
 8007d90:	4603      	mov	r3, r0
 8007d92:	613b      	str	r3, [r7, #16]
 8007d94:	e013      	b.n	8007dbe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d110      	bne.n	8007dbe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	f107 0310 	add.w	r3, r7, #16
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f001 fdf6 	bl	80099a0 <xTaskCreate>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d001      	beq.n	8007dbe <osThreadNew+0x11a>
            hTask = NULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007dbe:	693b      	ldr	r3, [r7, #16]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3728      	adds	r7, #40	@ 0x28
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f003 f991 	bl	800b0f8 <pvTimerGetTimerID>
 8007dd6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <TimerCallback+0x22>
    callb->func (callb->arg);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	6852      	ldr	r2, [r2, #4]
 8007de6:	4610      	mov	r0, r2
 8007de8:	4798      	blx	r3
  }
}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08c      	sub	sp, #48	@ 0x30
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	607a      	str	r2, [r7, #4]
 8007dfe:	603b      	str	r3, [r7, #0]
 8007e00:	460b      	mov	r3, r1
 8007e02:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e08:	f3ef 8305 	mrs	r3, IPSR
 8007e0c:	613b      	str	r3, [r7, #16]
  return(result);
 8007e0e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d163      	bne.n	8007edc <osTimerNew+0xe8>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d060      	beq.n	8007edc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007e1a:	2008      	movs	r0, #8
 8007e1c:	f003 fbde 	bl	800b5dc <pvPortMalloc>
 8007e20:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d059      	beq.n	8007edc <osTimerNew+0xe8>
      callb->func = func;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007e34:	7afb      	ldrb	r3, [r7, #11]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d102      	bne.n	8007e40 <osTimerNew+0x4c>
        reload = pdFALSE;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	61fb      	str	r3, [r7, #28]
 8007e3e:	e001      	b.n	8007e44 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8007e40:	2301      	movs	r3, #1
 8007e42:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007e44:	f04f 33ff 	mov.w	r3, #4294967295
 8007e48:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01c      	beq.n	8007e8e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <osTimerNew+0x6e>
          name = attr->name;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d006      	beq.n	8007e78 <osTimerNew+0x84>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007e70:	d902      	bls.n	8007e78 <osTimerNew+0x84>
          mem = 1;
 8007e72:	2301      	movs	r3, #1
 8007e74:	61bb      	str	r3, [r7, #24]
 8007e76:	e00c      	b.n	8007e92 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d108      	bne.n	8007e92 <osTimerNew+0x9e>
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d104      	bne.n	8007e92 <osTimerNew+0x9e>
            mem = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61bb      	str	r3, [r7, #24]
 8007e8c:	e001      	b.n	8007e92 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d10c      	bne.n	8007eb2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	4b12      	ldr	r3, [pc, #72]	@ (8007ee8 <osTimerNew+0xf4>)
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	69fa      	ldr	r2, [r7, #28]
 8007ea6:	2101      	movs	r1, #1
 8007ea8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007eaa:	f002 fd98 	bl	800a9de <xTimerCreateStatic>
 8007eae:	6238      	str	r0, [r7, #32]
 8007eb0:	e00b      	b.n	8007eca <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d108      	bne.n	8007eca <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee8 <osTimerNew+0xf4>)
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ec4:	f002 fd6a 	bl	800a99c <xTimerCreate>
 8007ec8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d105      	bne.n	8007edc <osTimerNew+0xe8>
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <osTimerNew+0xe8>
        vPortFree (callb);
 8007ed6:	6978      	ldr	r0, [r7, #20]
 8007ed8:	f003 fc4e 	bl	800b778 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007edc:	6a3b      	ldr	r3, [r7, #32]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3728      	adds	r7, #40	@ 0x28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	08007dc9 	.word	0x08007dc9

08007eec <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af02      	add	r7, sp, #8
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007efa:	f3ef 8305 	mrs	r3, IPSR
 8007efe:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f00:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <osTimerStart+0x22>
    stat = osErrorISR;
 8007f06:	f06f 0305 	mvn.w	r3, #5
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e017      	b.n	8007f3e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d103      	bne.n	8007f1c <osTimerStart+0x30>
    stat = osErrorParameter;
 8007f14:	f06f 0303 	mvn.w	r3, #3
 8007f18:	617b      	str	r3, [r7, #20]
 8007f1a:	e010      	b.n	8007f3e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	2300      	movs	r3, #0
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	2104      	movs	r1, #4
 8007f26:	6938      	ldr	r0, [r7, #16]
 8007f28:	f002 fdd6 	bl	800aad8 <xTimerGenericCommand>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d102      	bne.n	8007f38 <osTimerStart+0x4c>
      stat = osOK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	e002      	b.n	8007f3e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007f38:	f06f 0302 	mvn.w	r3, #2
 8007f3c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007f3e:	697b      	ldr	r3, [r7, #20]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f54:	f3ef 8305 	mrs	r3, IPSR
 8007f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f5a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d174      	bne.n	800804a <osMutexNew+0x102>
    if (attr != NULL) {
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <osMutexNew+0x26>
      type = attr->attr_bits;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	61bb      	str	r3, [r7, #24]
 8007f6c:	e001      	b.n	8007f72 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d002      	beq.n	8007f82 <osMutexNew+0x3a>
      rmtx = 1U;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	e001      	b.n	8007f86 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	f003 0308 	and.w	r3, r3, #8
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d15c      	bne.n	800804a <osMutexNew+0x102>
      mem = -1;
 8007f90:	f04f 33ff 	mov.w	r3, #4294967295
 8007f94:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d015      	beq.n	8007fc8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d006      	beq.n	8007fb2 <osMutexNew+0x6a>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	2b4f      	cmp	r3, #79	@ 0x4f
 8007faa:	d902      	bls.n	8007fb2 <osMutexNew+0x6a>
          mem = 1;
 8007fac:	2301      	movs	r3, #1
 8007fae:	613b      	str	r3, [r7, #16]
 8007fb0:	e00c      	b.n	8007fcc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d108      	bne.n	8007fcc <osMutexNew+0x84>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d104      	bne.n	8007fcc <osMutexNew+0x84>
            mem = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	613b      	str	r3, [r7, #16]
 8007fc6:	e001      	b.n	8007fcc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d112      	bne.n	8007ff8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	2004      	movs	r0, #4
 8007fe0:	f000 fd11 	bl	8008a06 <xQueueCreateMutexStatic>
 8007fe4:	61f8      	str	r0, [r7, #28]
 8007fe6:	e016      	b.n	8008016 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4619      	mov	r1, r3
 8007fee:	2001      	movs	r0, #1
 8007ff0:	f000 fd09 	bl	8008a06 <xQueueCreateMutexStatic>
 8007ff4:	61f8      	str	r0, [r7, #28]
 8007ff6:	e00e      	b.n	8008016 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d004      	beq.n	800800e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008004:	2004      	movs	r0, #4
 8008006:	f000 fce6 	bl	80089d6 <xQueueCreateMutex>
 800800a:	61f8      	str	r0, [r7, #28]
 800800c:	e003      	b.n	8008016 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800800e:	2001      	movs	r0, #1
 8008010:	f000 fce1 	bl	80089d6 <xQueueCreateMutex>
 8008014:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00c      	beq.n	8008036 <osMutexNew+0xee>
        if (attr != NULL) {
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <osMutexNew+0xe2>
          name = attr->name;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	e001      	b.n	800802e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	69f8      	ldr	r0, [r7, #28]
 8008032:	f001 fbcd 	bl	80097d0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d006      	beq.n	800804a <osMutexNew+0x102>
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	f043 0301 	orr.w	r3, r3, #1
 8008048:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800804a:	69fb      	ldr	r3, [r7, #28]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3720      	adds	r7, #32
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f023 0301 	bic.w	r3, r3, #1
 8008064:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008072:	f3ef 8305 	mrs	r3, IPSR
 8008076:	60bb      	str	r3, [r7, #8]
  return(result);
 8008078:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800807e:	f06f 0305 	mvn.w	r3, #5
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	e02c      	b.n	80080e0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d103      	bne.n	8008094 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800808c:	f06f 0303 	mvn.w	r3, #3
 8008090:	617b      	str	r3, [r7, #20]
 8008092:	e025      	b.n	80080e0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d011      	beq.n	80080be <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6938      	ldr	r0, [r7, #16]
 800809e:	f000 fd02 	bl	8008aa6 <xQueueTakeMutexRecursive>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d01b      	beq.n	80080e0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80080ae:	f06f 0301 	mvn.w	r3, #1
 80080b2:	617b      	str	r3, [r7, #20]
 80080b4:	e014      	b.n	80080e0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80080b6:	f06f 0302 	mvn.w	r3, #2
 80080ba:	617b      	str	r3, [r7, #20]
 80080bc:	e010      	b.n	80080e0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6938      	ldr	r0, [r7, #16]
 80080c2:	f001 f8a7 	bl	8009214 <xQueueSemaphoreTake>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d009      	beq.n	80080e0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d003      	beq.n	80080da <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80080d2:	f06f 0301 	mvn.w	r3, #1
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	e002      	b.n	80080e0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80080da:	f06f 0302 	mvn.w	r3, #2
 80080de:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80080e0:	697b      	ldr	r3, [r7, #20]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b086      	sub	sp, #24
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f023 0301 	bic.w	r3, r3, #1
 80080f8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f003 0301 	and.w	r3, r3, #1
 8008100:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008106:	f3ef 8305 	mrs	r3, IPSR
 800810a:	60bb      	str	r3, [r7, #8]
  return(result);
 800810c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <osMutexRelease+0x30>
    stat = osErrorISR;
 8008112:	f06f 0305 	mvn.w	r3, #5
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	e01f      	b.n	800815a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d103      	bne.n	8008128 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008120:	f06f 0303 	mvn.w	r3, #3
 8008124:	617b      	str	r3, [r7, #20]
 8008126:	e018      	b.n	800815a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d009      	beq.n	8008142 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800812e:	6938      	ldr	r0, [r7, #16]
 8008130:	f000 fc84 	bl	8008a3c <xQueueGiveMutexRecursive>
 8008134:	4603      	mov	r3, r0
 8008136:	2b01      	cmp	r3, #1
 8008138:	d00f      	beq.n	800815a <osMutexRelease+0x70>
        stat = osErrorResource;
 800813a:	f06f 0302 	mvn.w	r3, #2
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e00b      	b.n	800815a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008142:	2300      	movs	r3, #0
 8008144:	2200      	movs	r2, #0
 8008146:	2100      	movs	r1, #0
 8008148:	6938      	ldr	r0, [r7, #16]
 800814a:	f000 fd51 	bl	8008bf0 <xQueueGenericSend>
 800814e:	4603      	mov	r3, r0
 8008150:	2b01      	cmp	r3, #1
 8008152:	d002      	beq.n	800815a <osMutexRelease+0x70>
        stat = osErrorResource;
 8008154:	f06f 0302 	mvn.w	r3, #2
 8008158:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800815a:	697b      	ldr	r3, [r7, #20]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008164:	b580      	push	{r7, lr}
 8008166:	b08a      	sub	sp, #40	@ 0x28
 8008168:	af02      	add	r7, sp, #8
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008170:	2300      	movs	r3, #0
 8008172:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008174:	f3ef 8305 	mrs	r3, IPSR
 8008178:	613b      	str	r3, [r7, #16]
  return(result);
 800817a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800817c:	2b00      	cmp	r3, #0
 800817e:	d175      	bne.n	800826c <osSemaphoreNew+0x108>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d072      	beq.n	800826c <osSemaphoreNew+0x108>
 8008186:	68ba      	ldr	r2, [r7, #8]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	429a      	cmp	r2, r3
 800818c:	d86e      	bhi.n	800826c <osSemaphoreNew+0x108>
    mem = -1;
 800818e:	f04f 33ff 	mov.w	r3, #4294967295
 8008192:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d015      	beq.n	80081c6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d006      	beq.n	80081b0 <osSemaphoreNew+0x4c>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	2b4f      	cmp	r3, #79	@ 0x4f
 80081a8:	d902      	bls.n	80081b0 <osSemaphoreNew+0x4c>
        mem = 1;
 80081aa:	2301      	movs	r3, #1
 80081ac:	61bb      	str	r3, [r7, #24]
 80081ae:	e00c      	b.n	80081ca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d108      	bne.n	80081ca <osSemaphoreNew+0x66>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d104      	bne.n	80081ca <osSemaphoreNew+0x66>
          mem = 0;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61bb      	str	r3, [r7, #24]
 80081c4:	e001      	b.n	80081ca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d0:	d04c      	beq.n	800826c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d128      	bne.n	800822a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d10a      	bne.n	80081f4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	2203      	movs	r2, #3
 80081e4:	9200      	str	r2, [sp, #0]
 80081e6:	2200      	movs	r2, #0
 80081e8:	2100      	movs	r1, #0
 80081ea:	2001      	movs	r0, #1
 80081ec:	f000 fafe 	bl	80087ec <xQueueGenericCreateStatic>
 80081f0:	61f8      	str	r0, [r7, #28]
 80081f2:	e005      	b.n	8008200 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80081f4:	2203      	movs	r2, #3
 80081f6:	2100      	movs	r1, #0
 80081f8:	2001      	movs	r0, #1
 80081fa:	f000 fb74 	bl	80088e6 <xQueueGenericCreate>
 80081fe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d022      	beq.n	800824c <osSemaphoreNew+0xe8>
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01f      	beq.n	800824c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800820c:	2300      	movs	r3, #0
 800820e:	2200      	movs	r2, #0
 8008210:	2100      	movs	r1, #0
 8008212:	69f8      	ldr	r0, [r7, #28]
 8008214:	f000 fcec 	bl	8008bf0 <xQueueGenericSend>
 8008218:	4603      	mov	r3, r0
 800821a:	2b01      	cmp	r3, #1
 800821c:	d016      	beq.n	800824c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800821e:	69f8      	ldr	r0, [r7, #28]
 8008220:	f001 f98a 	bl	8009538 <vQueueDelete>
            hSemaphore = NULL;
 8008224:	2300      	movs	r3, #0
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	e010      	b.n	800824c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d108      	bne.n	8008242 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	461a      	mov	r2, r3
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 fc6b 	bl	8008b14 <xQueueCreateCountingSemaphoreStatic>
 800823e:	61f8      	str	r0, [r7, #28]
 8008240:	e004      	b.n	800824c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008242:	68b9      	ldr	r1, [r7, #8]
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f000 fc9e 	bl	8008b86 <xQueueCreateCountingSemaphore>
 800824a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00c      	beq.n	800826c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	617b      	str	r3, [r7, #20]
 800825e:	e001      	b.n	8008264 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008260:	2300      	movs	r3, #0
 8008262:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008264:	6979      	ldr	r1, [r7, #20]
 8008266:	69f8      	ldr	r0, [r7, #28]
 8008268:	f001 fab2 	bl	80097d0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800826c:	69fb      	ldr	r3, [r7, #28]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3720      	adds	r7, #32
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
	...

08008278 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008286:	2300      	movs	r3, #0
 8008288:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d103      	bne.n	8008298 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008290:	f06f 0303 	mvn.w	r3, #3
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	e039      	b.n	800830c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008298:	f3ef 8305 	mrs	r3, IPSR
 800829c:	60fb      	str	r3, [r7, #12]
  return(result);
 800829e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d022      	beq.n	80082ea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80082aa:	f06f 0303 	mvn.w	r3, #3
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	e02c      	b.n	800830c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80082b6:	f107 0308 	add.w	r3, r7, #8
 80082ba:	461a      	mov	r2, r3
 80082bc:	2100      	movs	r1, #0
 80082be:	6938      	ldr	r0, [r7, #16]
 80082c0:	f001 f8b8 	bl	8009434 <xQueueReceiveFromISR>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d003      	beq.n	80082d2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80082ca:	f06f 0302 	mvn.w	r3, #2
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e01c      	b.n	800830c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d019      	beq.n	800830c <osSemaphoreAcquire+0x94>
 80082d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008318 <osSemaphoreAcquire+0xa0>)
 80082da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	e010      	b.n	800830c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6938      	ldr	r0, [r7, #16]
 80082ee:	f000 ff91 	bl	8009214 <xQueueSemaphoreTake>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d009      	beq.n	800830c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80082fe:	f06f 0301 	mvn.w	r3, #1
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e002      	b.n	800830c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008306:	f06f 0302 	mvn.w	r3, #2
 800830a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800830c:	697b      	ldr	r3, [r7, #20]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	e000ed04 	.word	0xe000ed04

0800831c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008328:	2300      	movs	r3, #0
 800832a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d103      	bne.n	800833a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008332:	f06f 0303 	mvn.w	r3, #3
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	e02c      	b.n	8008394 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800833a:	f3ef 8305 	mrs	r3, IPSR
 800833e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008340:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008342:	2b00      	cmp	r3, #0
 8008344:	d01a      	beq.n	800837c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008346:	2300      	movs	r3, #0
 8008348:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800834a:	f107 0308 	add.w	r3, r7, #8
 800834e:	4619      	mov	r1, r3
 8008350:	6938      	ldr	r0, [r7, #16]
 8008352:	f000 fded 	bl	8008f30 <xQueueGiveFromISR>
 8008356:	4603      	mov	r3, r0
 8008358:	2b01      	cmp	r3, #1
 800835a:	d003      	beq.n	8008364 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800835c:	f06f 0302 	mvn.w	r3, #2
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	e017      	b.n	8008394 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d014      	beq.n	8008394 <osSemaphoreRelease+0x78>
 800836a:	4b0d      	ldr	r3, [pc, #52]	@ (80083a0 <osSemaphoreRelease+0x84>)
 800836c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008370:	601a      	str	r2, [r3, #0]
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	e00b      	b.n	8008394 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800837c:	2300      	movs	r3, #0
 800837e:	2200      	movs	r2, #0
 8008380:	2100      	movs	r1, #0
 8008382:	6938      	ldr	r0, [r7, #16]
 8008384:	f000 fc34 	bl	8008bf0 <xQueueGenericSend>
 8008388:	4603      	mov	r3, r0
 800838a:	2b01      	cmp	r3, #1
 800838c:	d002      	beq.n	8008394 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800838e:	f06f 0302 	mvn.w	r3, #2
 8008392:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008394:	697b      	ldr	r3, [r7, #20]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08a      	sub	sp, #40	@ 0x28
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083b4:	f3ef 8305 	mrs	r3, IPSR
 80083b8:	613b      	str	r3, [r7, #16]
  return(result);
 80083ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d15f      	bne.n	8008480 <osMessageQueueNew+0xdc>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d05c      	beq.n	8008480 <osMessageQueueNew+0xdc>
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d059      	beq.n	8008480 <osMessageQueueNew+0xdc>
    mem = -1;
 80083cc:	f04f 33ff 	mov.w	r3, #4294967295
 80083d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d029      	beq.n	800842c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d012      	beq.n	8008406 <osMessageQueueNew+0x62>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	2b4f      	cmp	r3, #79	@ 0x4f
 80083e6:	d90e      	bls.n	8008406 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00a      	beq.n	8008406 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	695a      	ldr	r2, [r3, #20]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	68b9      	ldr	r1, [r7, #8]
 80083f8:	fb01 f303 	mul.w	r3, r1, r3
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d302      	bcc.n	8008406 <osMessageQueueNew+0x62>
        mem = 1;
 8008400:	2301      	movs	r3, #1
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	e014      	b.n	8008430 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d110      	bne.n	8008430 <osMessageQueueNew+0x8c>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d10c      	bne.n	8008430 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800841a:	2b00      	cmp	r3, #0
 800841c:	d108      	bne.n	8008430 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	695b      	ldr	r3, [r3, #20]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d104      	bne.n	8008430 <osMessageQueueNew+0x8c>
          mem = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	61bb      	str	r3, [r7, #24]
 800842a:	e001      	b.n	8008430 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800842c:	2300      	movs	r3, #0
 800842e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d10b      	bne.n	800844e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691a      	ldr	r2, [r3, #16]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	2100      	movs	r1, #0
 8008440:	9100      	str	r1, [sp, #0]
 8008442:	68b9      	ldr	r1, [r7, #8]
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 f9d1 	bl	80087ec <xQueueGenericCreateStatic>
 800844a:	61f8      	str	r0, [r7, #28]
 800844c:	e008      	b.n	8008460 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d105      	bne.n	8008460 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008454:	2200      	movs	r2, #0
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f000 fa44 	bl	80088e6 <xQueueGenericCreate>
 800845e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00c      	beq.n	8008480 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d003      	beq.n	8008474 <osMessageQueueNew+0xd0>
        name = attr->name;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	e001      	b.n	8008478 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008478:	6979      	ldr	r1, [r7, #20]
 800847a:	69f8      	ldr	r0, [r7, #28]
 800847c:	f001 f9a8 	bl	80097d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008480:	69fb      	ldr	r3, [r7, #28]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3720      	adds	r7, #32
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800849e:	2300      	movs	r3, #0
 80084a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084a2:	f3ef 8305 	mrs	r3, IPSR
 80084a6:	617b      	str	r3, [r7, #20]
  return(result);
 80084a8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d028      	beq.n	8008500 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d005      	beq.n	80084c0 <osMessageQueueGet+0x34>
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <osMessageQueueGet+0x34>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d003      	beq.n	80084c8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80084c0:	f06f 0303 	mvn.w	r3, #3
 80084c4:	61fb      	str	r3, [r7, #28]
 80084c6:	e037      	b.n	8008538 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80084c8:	2300      	movs	r3, #0
 80084ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80084cc:	f107 0310 	add.w	r3, r7, #16
 80084d0:	461a      	mov	r2, r3
 80084d2:	68b9      	ldr	r1, [r7, #8]
 80084d4:	69b8      	ldr	r0, [r7, #24]
 80084d6:	f000 ffad 	bl	8009434 <xQueueReceiveFromISR>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d003      	beq.n	80084e8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80084e0:	f06f 0302 	mvn.w	r3, #2
 80084e4:	61fb      	str	r3, [r7, #28]
 80084e6:	e027      	b.n	8008538 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d024      	beq.n	8008538 <osMessageQueueGet+0xac>
 80084ee:	4b15      	ldr	r3, [pc, #84]	@ (8008544 <osMessageQueueGet+0xb8>)
 80084f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	e01b      	b.n	8008538 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <osMessageQueueGet+0x80>
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d103      	bne.n	8008514 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800850c:	f06f 0303 	mvn.w	r3, #3
 8008510:	61fb      	str	r3, [r7, #28]
 8008512:	e011      	b.n	8008538 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	69b8      	ldr	r0, [r7, #24]
 800851a:	f000 fd99 	bl	8009050 <xQueueReceive>
 800851e:	4603      	mov	r3, r0
 8008520:	2b01      	cmp	r3, #1
 8008522:	d009      	beq.n	8008538 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800852a:	f06f 0301 	mvn.w	r3, #1
 800852e:	61fb      	str	r3, [r7, #28]
 8008530:	e002      	b.n	8008538 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008532:	f06f 0302 	mvn.w	r3, #2
 8008536:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008538:	69fb      	ldr	r3, [r7, #28]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3720      	adds	r7, #32
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4a07      	ldr	r2, [pc, #28]	@ (8008574 <vApplicationGetIdleTaskMemory+0x2c>)
 8008558:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4a06      	ldr	r2, [pc, #24]	@ (8008578 <vApplicationGetIdleTaskMemory+0x30>)
 800855e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2280      	movs	r2, #128	@ 0x80
 8008564:	601a      	str	r2, [r3, #0]
}
 8008566:	bf00      	nop
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20040914 	.word	0x20040914
 8008578:	200409bc 	.word	0x200409bc

0800857c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4a07      	ldr	r2, [pc, #28]	@ (80085a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800858c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	4a06      	ldr	r2, [pc, #24]	@ (80085ac <vApplicationGetTimerTaskMemory+0x30>)
 8008592:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800859a:	601a      	str	r2, [r3, #0]
}
 800859c:	bf00      	nop
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr
 80085a8:	20040bbc 	.word	0x20040bbc
 80085ac:	20040c64 	.word	0x20040c64

080085b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f103 0208 	add.w	r2, r3, #8
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f04f 32ff 	mov.w	r2, #4294967295
 80085c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f103 0208 	add.w	r2, r3, #8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f103 0208 	add.w	r2, r3, #8
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085fe:	bf00      	nop
 8008600:	370c      	adds	r7, #12
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800860a:	b480      	push	{r7}
 800860c:	b085      	sub	sp, #20
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	683a      	ldr	r2, [r7, #0]
 800862e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	601a      	str	r2, [r3, #0]
}
 8008646:	bf00      	nop
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr

08008652 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008668:	d103      	bne.n	8008672 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e00c      	b.n	800868c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	3308      	adds	r3, #8
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	e002      	b.n	8008680 <vListInsert+0x2e>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	429a      	cmp	r2, r3
 800868a:	d2f6      	bcs.n	800867a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	1c5a      	adds	r2, r3, #1
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	601a      	str	r2, [r3, #0]
}
 80086b8:	bf00      	nop
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	6892      	ldr	r2, [r2, #8]
 80086da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6852      	ldr	r2, [r2, #4]
 80086e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d103      	bne.n	80086f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	1e5a      	subs	r2, r3, #1
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d10b      	bne.n	8008744 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800873e:	bf00      	nop
 8008740:	bf00      	nop
 8008742:	e7fd      	b.n	8008740 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008744:	f002 fe28 	bl	800b398 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008750:	68f9      	ldr	r1, [r7, #12]
 8008752:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008754:	fb01 f303 	mul.w	r3, r1, r3
 8008758:	441a      	add	r2, r3
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008774:	3b01      	subs	r3, #1
 8008776:	68f9      	ldr	r1, [r7, #12]
 8008778:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800877a:	fb01 f303 	mul.w	r3, r1, r3
 800877e:	441a      	add	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	22ff      	movs	r2, #255	@ 0xff
 8008788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	22ff      	movs	r2, #255	@ 0xff
 8008790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d114      	bne.n	80087c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d01a      	beq.n	80087d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3310      	adds	r3, #16
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 fcf6 	bl	800a198 <xTaskRemoveFromEventList>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d012      	beq.n	80087d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80087b2:	4b0d      	ldr	r3, [pc, #52]	@ (80087e8 <xQueueGenericReset+0xd0>)
 80087b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087b8:	601a      	str	r2, [r3, #0]
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	e009      	b.n	80087d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3310      	adds	r3, #16
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff fef1 	bl	80085b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3324      	adds	r3, #36	@ 0x24
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff feec 	bl	80085b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087d8:	f002 fe10 	bl	800b3fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087dc:	2301      	movs	r3, #1
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	e000ed04 	.word	0xe000ed04

080087ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08e      	sub	sp, #56	@ 0x38
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10b      	bne.n	8008818 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008812:	bf00      	nop
 8008814:	bf00      	nop
 8008816:	e7fd      	b.n	8008814 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10b      	bne.n	8008836 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008830:	bf00      	nop
 8008832:	bf00      	nop
 8008834:	e7fd      	b.n	8008832 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d002      	beq.n	8008842 <xQueueGenericCreateStatic+0x56>
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <xQueueGenericCreateStatic+0x5a>
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <xQueueGenericCreateStatic+0x5c>
 8008846:	2300      	movs	r3, #0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10b      	bne.n	8008864 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800884c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008850:	f383 8811 	msr	BASEPRI, r3
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	623b      	str	r3, [r7, #32]
}
 800885e:	bf00      	nop
 8008860:	bf00      	nop
 8008862:	e7fd      	b.n	8008860 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d102      	bne.n	8008870 <xQueueGenericCreateStatic+0x84>
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <xQueueGenericCreateStatic+0x88>
 8008870:	2301      	movs	r3, #1
 8008872:	e000      	b.n	8008876 <xQueueGenericCreateStatic+0x8a>
 8008874:	2300      	movs	r3, #0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10b      	bne.n	8008892 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	61fb      	str	r3, [r7, #28]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008892:	2350      	movs	r3, #80	@ 0x50
 8008894:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b50      	cmp	r3, #80	@ 0x50
 800889a:	d00b      	beq.n	80088b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	61bb      	str	r3, [r7, #24]
}
 80088ae:	bf00      	nop
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80088ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00d      	beq.n	80088dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80088c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80088cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	4613      	mov	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	68b9      	ldr	r1, [r7, #8]
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f000 f840 	bl	800895c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80088de:	4618      	mov	r0, r3
 80088e0:	3730      	adds	r7, #48	@ 0x30
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b08a      	sub	sp, #40	@ 0x28
 80088ea:	af02      	add	r7, sp, #8
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	4613      	mov	r3, r2
 80088f2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10b      	bne.n	8008912 <xQueueGenericCreate+0x2c>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	613b      	str	r3, [r7, #16]
}
 800890c:	bf00      	nop
 800890e:	bf00      	nop
 8008910:	e7fd      	b.n	800890e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	fb02 f303 	mul.w	r3, r2, r3
 800891a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	3350      	adds	r3, #80	@ 0x50
 8008920:	4618      	mov	r0, r3
 8008922:	f002 fe5b 	bl	800b5dc <pvPortMalloc>
 8008926:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d011      	beq.n	8008952 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800892e:	69bb      	ldr	r3, [r7, #24]
 8008930:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	3350      	adds	r3, #80	@ 0x50
 8008936:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008940:	79fa      	ldrb	r2, [r7, #7]
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	4613      	mov	r3, r2
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f805 	bl	800895c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008952:	69bb      	ldr	r3, [r7, #24]
	}
 8008954:	4618      	mov	r0, r3
 8008956:	3720      	adds	r7, #32
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
 8008968:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d103      	bne.n	8008978 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	e002      	b.n	800897e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800898a:	2101      	movs	r1, #1
 800898c:	69b8      	ldr	r0, [r7, #24]
 800898e:	f7ff fec3 	bl	8008718 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	78fa      	ldrb	r2, [r7, #3]
 8008996:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800899a:	bf00      	nop
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00e      	beq.n	80089ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80089c2:	2300      	movs	r3, #0
 80089c4:	2200      	movs	r2, #0
 80089c6:	2100      	movs	r1, #0
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 f911 	bl	8008bf0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80089ce:	bf00      	nop
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b086      	sub	sp, #24
 80089da:	af00      	add	r7, sp, #0
 80089dc:	4603      	mov	r3, r0
 80089de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80089e0:	2301      	movs	r3, #1
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	2300      	movs	r3, #0
 80089e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80089e8:	79fb      	ldrb	r3, [r7, #7]
 80089ea:	461a      	mov	r2, r3
 80089ec:	6939      	ldr	r1, [r7, #16]
 80089ee:	6978      	ldr	r0, [r7, #20]
 80089f0:	f7ff ff79 	bl	80088e6 <xQueueGenericCreate>
 80089f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80089f6:	68f8      	ldr	r0, [r7, #12]
 80089f8:	f7ff ffd3 	bl	80089a2 <prvInitialiseMutex>

		return xNewQueue;
 80089fc:	68fb      	ldr	r3, [r7, #12]
	}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3718      	adds	r7, #24
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b088      	sub	sp, #32
 8008a0a:	af02      	add	r7, sp, #8
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	6039      	str	r1, [r7, #0]
 8008a10:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008a12:	2301      	movs	r3, #1
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	2300      	movs	r3, #0
 8008a18:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2200      	movs	r2, #0
 8008a22:	6939      	ldr	r1, [r7, #16]
 8008a24:	6978      	ldr	r0, [r7, #20]
 8008a26:	f7ff fee1 	bl	80087ec <xQueueGenericCreateStatic>
 8008a2a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f7ff ffb8 	bl	80089a2 <prvInitialiseMutex>

		return xNewQueue;
 8008a32:	68fb      	ldr	r3, [r7, #12]
	}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008a3c:	b590      	push	{r4, r7, lr}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d10b      	bne.n	8008a66 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	60fb      	str	r3, [r7, #12]
}
 8008a60:	bf00      	nop
 8008a62:	bf00      	nop
 8008a64:	e7fd      	b.n	8008a62 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	689c      	ldr	r4, [r3, #8]
 8008a6a:	f001 fd5b 	bl	800a524 <xTaskGetCurrentTaskHandle>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	429c      	cmp	r4, r3
 8008a72:	d111      	bne.n	8008a98 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	1e5a      	subs	r2, r3, #1
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d105      	bne.n	8008a92 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008a86:	2300      	movs	r3, #0
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	6938      	ldr	r0, [r7, #16]
 8008a8e:	f000 f8af 	bl	8008bf0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008a92:	2301      	movs	r3, #1
 8008a94:	617b      	str	r3, [r7, #20]
 8008a96:	e001      	b.n	8008a9c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008a9c:	697b      	ldr	r3, [r7, #20]
	}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd90      	pop	{r4, r7, pc}

08008aa6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008aa6:	b590      	push	{r4, r7, lr}
 8008aa8:	b087      	sub	sp, #28
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
 8008aae:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10b      	bne.n	8008ad2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	60fb      	str	r3, [r7, #12]
}
 8008acc:	bf00      	nop
 8008ace:	bf00      	nop
 8008ad0:	e7fd      	b.n	8008ace <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	689c      	ldr	r4, [r3, #8]
 8008ad6:	f001 fd25 	bl	800a524 <xTaskGetCurrentTaskHandle>
 8008ada:	4603      	mov	r3, r0
 8008adc:	429c      	cmp	r4, r3
 8008ade:	d107      	bne.n	8008af0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	1c5a      	adds	r2, r3, #1
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008aea:	2301      	movs	r3, #1
 8008aec:	617b      	str	r3, [r7, #20]
 8008aee:	e00c      	b.n	8008b0a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6938      	ldr	r0, [r7, #16]
 8008af4:	f000 fb8e 	bl	8009214 <xQueueSemaphoreTake>
 8008af8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d004      	beq.n	8008b0a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	1c5a      	adds	r2, r3, #1
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008b0a:	697b      	ldr	r3, [r7, #20]
	}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	371c      	adds	r7, #28
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd90      	pop	{r4, r7, pc}

08008b14 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08a      	sub	sp, #40	@ 0x28
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10b      	bne.n	8008b3e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	61bb      	str	r3, [r7, #24]
}
 8008b38:	bf00      	nop
 8008b3a:	bf00      	nop
 8008b3c:	e7fd      	b.n	8008b3a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d90b      	bls.n	8008b5e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	617b      	str	r3, [r7, #20]
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	e7fd      	b.n	8008b5a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008b5e:	2302      	movs	r3, #2
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	2100      	movs	r1, #0
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f7ff fe3f 	bl	80087ec <xQueueGenericCreateStatic>
 8008b6e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d002      	beq.n	8008b7c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b7c:	69fb      	ldr	r3, [r7, #28]
	}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3720      	adds	r7, #32
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b086      	sub	sp, #24
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10b      	bne.n	8008bae <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	613b      	str	r3, [r7, #16]
}
 8008ba8:	bf00      	nop
 8008baa:	bf00      	nop
 8008bac:	e7fd      	b.n	8008baa <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d90b      	bls.n	8008bce <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	60fb      	str	r3, [r7, #12]
}
 8008bc8:	bf00      	nop
 8008bca:	bf00      	nop
 8008bcc:	e7fd      	b.n	8008bca <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008bce:	2202      	movs	r2, #2
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff fe87 	bl	80088e6 <xQueueGenericCreate>
 8008bd8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008be6:	697b      	ldr	r3, [r7, #20]
	}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08e      	sub	sp, #56	@ 0x38
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10b      	bne.n	8008c24 <xQueueGenericSend+0x34>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008c1e:	bf00      	nop
 8008c20:	bf00      	nop
 8008c22:	e7fd      	b.n	8008c20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d103      	bne.n	8008c32 <xQueueGenericSend+0x42>
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <xQueueGenericSend+0x46>
 8008c32:	2301      	movs	r3, #1
 8008c34:	e000      	b.n	8008c38 <xQueueGenericSend+0x48>
 8008c36:	2300      	movs	r3, #0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10b      	bne.n	8008c54 <xQueueGenericSend+0x64>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c40:	f383 8811 	msr	BASEPRI, r3
 8008c44:	f3bf 8f6f 	isb	sy
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c4e:	bf00      	nop
 8008c50:	bf00      	nop
 8008c52:	e7fd      	b.n	8008c50 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d103      	bne.n	8008c62 <xQueueGenericSend+0x72>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d101      	bne.n	8008c66 <xQueueGenericSend+0x76>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <xQueueGenericSend+0x78>
 8008c66:	2300      	movs	r3, #0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10b      	bne.n	8008c84 <xQueueGenericSend+0x94>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	623b      	str	r3, [r7, #32]
}
 8008c7e:	bf00      	nop
 8008c80:	bf00      	nop
 8008c82:	e7fd      	b.n	8008c80 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c84:	f001 fc5e 	bl	800a544 <xTaskGetSchedulerState>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d102      	bne.n	8008c94 <xQueueGenericSend+0xa4>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d101      	bne.n	8008c98 <xQueueGenericSend+0xa8>
 8008c94:	2301      	movs	r3, #1
 8008c96:	e000      	b.n	8008c9a <xQueueGenericSend+0xaa>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <xQueueGenericSend+0xc6>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	61fb      	str	r3, [r7, #28]
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	e7fd      	b.n	8008cb2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008cb6:	f002 fb6f 	bl	800b398 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d302      	bcc.n	8008ccc <xQueueGenericSend+0xdc>
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d129      	bne.n	8008d20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cd2:	f000 fc6d 	bl	80095b0 <prvCopyDataToQueue>
 8008cd6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d010      	beq.n	8008d02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ce2:	3324      	adds	r3, #36	@ 0x24
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 fa57 	bl	800a198 <xTaskRemoveFromEventList>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d013      	beq.n	8008d18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8008df0 <xQueueGenericSend+0x200>)
 8008cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	f3bf 8f6f 	isb	sy
 8008d00:	e00a      	b.n	8008d18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008d02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d007      	beq.n	8008d18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008d08:	4b39      	ldr	r3, [pc, #228]	@ (8008df0 <xQueueGenericSend+0x200>)
 8008d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008d18:	f002 fb70 	bl	800b3fc <vPortExitCritical>
				return pdPASS;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e063      	b.n	8008de8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d103      	bne.n	8008d2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008d26:	f002 fb69 	bl	800b3fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e05c      	b.n	8008de8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d106      	bne.n	8008d42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d34:	f107 0314 	add.w	r3, r7, #20
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f001 fa91 	bl	800a260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d42:	f002 fb5b 	bl	800b3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d46:	f000 fff9 	bl	8009d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d4a:	f002 fb25 	bl	800b398 <vPortEnterCritical>
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d54:	b25b      	sxtb	r3, r3
 8008d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5a:	d103      	bne.n	8008d64 <xQueueGenericSend+0x174>
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d6a:	b25b      	sxtb	r3, r3
 8008d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d70:	d103      	bne.n	8008d7a <xQueueGenericSend+0x18a>
 8008d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d7a:	f002 fb3f 	bl	800b3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d7e:	1d3a      	adds	r2, r7, #4
 8008d80:	f107 0314 	add.w	r3, r7, #20
 8008d84:	4611      	mov	r1, r2
 8008d86:	4618      	mov	r0, r3
 8008d88:	f001 fa80 	bl	800a28c <xTaskCheckForTimeOut>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d124      	bne.n	8008ddc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d94:	f000 fd04 	bl	80097a0 <prvIsQueueFull>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d018      	beq.n	8008dd0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da0:	3310      	adds	r3, #16
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	4611      	mov	r1, r2
 8008da6:	4618      	mov	r0, r3
 8008da8:	f001 f9a4 	bl	800a0f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008dac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dae:	f000 fc8f 	bl	80096d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008db2:	f000 ffd1 	bl	8009d58 <xTaskResumeAll>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f47f af7c 	bne.w	8008cb6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008df0 <xQueueGenericSend+0x200>)
 8008dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	e772      	b.n	8008cb6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008dd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dd2:	f000 fc7d 	bl	80096d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008dd6:	f000 ffbf 	bl	8009d58 <xTaskResumeAll>
 8008dda:	e76c      	b.n	8008cb6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008ddc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008dde:	f000 fc77 	bl	80096d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008de2:	f000 ffb9 	bl	8009d58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008de6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3738      	adds	r7, #56	@ 0x38
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b090      	sub	sp, #64	@ 0x40
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10b      	bne.n	8008e24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008e1e:	bf00      	nop
 8008e20:	bf00      	nop
 8008e22:	e7fd      	b.n	8008e20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d103      	bne.n	8008e32 <xQueueGenericSendFromISR+0x3e>
 8008e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d101      	bne.n	8008e36 <xQueueGenericSendFromISR+0x42>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e000      	b.n	8008e38 <xQueueGenericSendFromISR+0x44>
 8008e36:	2300      	movs	r3, #0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d10b      	bne.n	8008e54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e40:	f383 8811 	msr	BASEPRI, r3
 8008e44:	f3bf 8f6f 	isb	sy
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e4e:	bf00      	nop
 8008e50:	bf00      	nop
 8008e52:	e7fd      	b.n	8008e50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d103      	bne.n	8008e62 <xQueueGenericSendFromISR+0x6e>
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d101      	bne.n	8008e66 <xQueueGenericSendFromISR+0x72>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e000      	b.n	8008e68 <xQueueGenericSendFromISR+0x74>
 8008e66:	2300      	movs	r3, #0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10b      	bne.n	8008e84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	623b      	str	r3, [r7, #32]
}
 8008e7e:	bf00      	nop
 8008e80:	bf00      	nop
 8008e82:	e7fd      	b.n	8008e80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e84:	f002 fb68 	bl	800b558 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e88:	f3ef 8211 	mrs	r2, BASEPRI
 8008e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e90:	f383 8811 	msr	BASEPRI, r3
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	61fa      	str	r2, [r7, #28]
 8008e9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ea2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d302      	bcc.n	8008eb6 <xQueueGenericSendFromISR+0xc2>
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d12f      	bne.n	8008f16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ebc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ecc:	f000 fb70 	bl	80095b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ed0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed8:	d112      	bne.n	8008f00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d016      	beq.n	8008f10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee4:	3324      	adds	r3, #36	@ 0x24
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f001 f956 	bl	800a198 <xTaskRemoveFromEventList>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00e      	beq.n	8008f10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	e007      	b.n	8008f10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008f00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008f04:	3301      	adds	r3, #1
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	b25a      	sxtb	r2, r3
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008f10:	2301      	movs	r3, #1
 8008f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008f14:	e001      	b.n	8008f1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008f24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3740      	adds	r7, #64	@ 0x40
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08e      	sub	sp, #56	@ 0x38
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10b      	bne.n	8008f5c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	623b      	str	r3, [r7, #32]
}
 8008f56:	bf00      	nop
 8008f58:	bf00      	nop
 8008f5a:	e7fd      	b.n	8008f58 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00b      	beq.n	8008f7c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	61fb      	str	r3, [r7, #28]
}
 8008f76:	bf00      	nop
 8008f78:	bf00      	nop
 8008f7a:	e7fd      	b.n	8008f78 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d103      	bne.n	8008f8c <xQueueGiveFromISR+0x5c>
 8008f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <xQueueGiveFromISR+0x60>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e000      	b.n	8008f92 <xQueueGiveFromISR+0x62>
 8008f90:	2300      	movs	r3, #0
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10b      	bne.n	8008fae <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	61bb      	str	r3, [r7, #24]
}
 8008fa8:	bf00      	nop
 8008faa:	bf00      	nop
 8008fac:	e7fd      	b.n	8008faa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fae:	f002 fad3 	bl	800b558 <vPortValidateInterruptPriority>
	__asm volatile
 8008fb2:	f3ef 8211 	mrs	r2, BASEPRI
 8008fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	617a      	str	r2, [r7, #20]
 8008fc8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008fca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d22b      	bcs.n	8009036 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fe4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ff0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff8:	d112      	bne.n	8009020 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d016      	beq.n	8009030 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009004:	3324      	adds	r3, #36	@ 0x24
 8009006:	4618      	mov	r0, r3
 8009008:	f001 f8c6 	bl	800a198 <xTaskRemoveFromEventList>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00e      	beq.n	8009030 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00b      	beq.n	8009030 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2201      	movs	r2, #1
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	e007      	b.n	8009030 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009024:	3301      	adds	r3, #1
 8009026:	b2db      	uxtb	r3, r3
 8009028:	b25a      	sxtb	r2, r3
 800902a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800902c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009030:	2301      	movs	r3, #1
 8009032:	637b      	str	r3, [r7, #52]	@ 0x34
 8009034:	e001      	b.n	800903a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009036:	2300      	movs	r3, #0
 8009038:	637b      	str	r3, [r7, #52]	@ 0x34
 800903a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800903c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f383 8811 	msr	BASEPRI, r3
}
 8009044:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009048:	4618      	mov	r0, r3
 800904a:	3738      	adds	r7, #56	@ 0x38
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08c      	sub	sp, #48	@ 0x30
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800905c:	2300      	movs	r3, #0
 800905e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10b      	bne.n	8009082 <xQueueReceive+0x32>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	623b      	str	r3, [r7, #32]
}
 800907c:	bf00      	nop
 800907e:	bf00      	nop
 8009080:	e7fd      	b.n	800907e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d103      	bne.n	8009090 <xQueueReceive+0x40>
 8009088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <xQueueReceive+0x44>
 8009090:	2301      	movs	r3, #1
 8009092:	e000      	b.n	8009096 <xQueueReceive+0x46>
 8009094:	2300      	movs	r3, #0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10b      	bne.n	80090b2 <xQueueReceive+0x62>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	61fb      	str	r3, [r7, #28]
}
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
 80090b0:	e7fd      	b.n	80090ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090b2:	f001 fa47 	bl	800a544 <xTaskGetSchedulerState>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <xQueueReceive+0x72>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <xQueueReceive+0x76>
 80090c2:	2301      	movs	r3, #1
 80090c4:	e000      	b.n	80090c8 <xQueueReceive+0x78>
 80090c6:	2300      	movs	r3, #0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d10b      	bne.n	80090e4 <xQueueReceive+0x94>
	__asm volatile
 80090cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d0:	f383 8811 	msr	BASEPRI, r3
 80090d4:	f3bf 8f6f 	isb	sy
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	61bb      	str	r3, [r7, #24]
}
 80090de:	bf00      	nop
 80090e0:	bf00      	nop
 80090e2:	e7fd      	b.n	80090e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090e4:	f002 f958 	bl	800b398 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d01f      	beq.n	8009134 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090f8:	f000 fac4 	bl	8009684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fe:	1e5a      	subs	r2, r3, #1
 8009100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009102:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00f      	beq.n	800912c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800910c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910e:	3310      	adds	r3, #16
 8009110:	4618      	mov	r0, r3
 8009112:	f001 f841 	bl	800a198 <xTaskRemoveFromEventList>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d007      	beq.n	800912c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800911c:	4b3c      	ldr	r3, [pc, #240]	@ (8009210 <xQueueReceive+0x1c0>)
 800911e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800912c:	f002 f966 	bl	800b3fc <vPortExitCritical>
				return pdPASS;
 8009130:	2301      	movs	r3, #1
 8009132:	e069      	b.n	8009208 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d103      	bne.n	8009142 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800913a:	f002 f95f 	bl	800b3fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800913e:	2300      	movs	r3, #0
 8009140:	e062      	b.n	8009208 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d106      	bne.n	8009156 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009148:	f107 0310 	add.w	r3, r7, #16
 800914c:	4618      	mov	r0, r3
 800914e:	f001 f887 	bl	800a260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009152:	2301      	movs	r3, #1
 8009154:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009156:	f002 f951 	bl	800b3fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800915a:	f000 fdef 	bl	8009d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800915e:	f002 f91b 	bl	800b398 <vPortEnterCritical>
 8009162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009164:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009168:	b25b      	sxtb	r3, r3
 800916a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800916e:	d103      	bne.n	8009178 <xQueueReceive+0x128>
 8009170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800917e:	b25b      	sxtb	r3, r3
 8009180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009184:	d103      	bne.n	800918e <xQueueReceive+0x13e>
 8009186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800918e:	f002 f935 	bl	800b3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009192:	1d3a      	adds	r2, r7, #4
 8009194:	f107 0310 	add.w	r3, r7, #16
 8009198:	4611      	mov	r1, r2
 800919a:	4618      	mov	r0, r3
 800919c:	f001 f876 	bl	800a28c <xTaskCheckForTimeOut>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d123      	bne.n	80091ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091a8:	f000 fae4 	bl	8009774 <prvIsQueueEmpty>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d017      	beq.n	80091e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b4:	3324      	adds	r3, #36	@ 0x24
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 ff9a 	bl	800a0f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80091c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091c2:	f000 fa85 	bl	80096d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80091c6:	f000 fdc7 	bl	8009d58 <xTaskResumeAll>
 80091ca:	4603      	mov	r3, r0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d189      	bne.n	80090e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80091d0:	4b0f      	ldr	r3, [pc, #60]	@ (8009210 <xQueueReceive+0x1c0>)
 80091d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	e780      	b.n	80090e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091e4:	f000 fa74 	bl	80096d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091e8:	f000 fdb6 	bl	8009d58 <xTaskResumeAll>
 80091ec:	e77a      	b.n	80090e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091f0:	f000 fa6e 	bl	80096d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091f4:	f000 fdb0 	bl	8009d58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091fa:	f000 fabb 	bl	8009774 <prvIsQueueEmpty>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	f43f af6f 	beq.w	80090e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009206:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009208:	4618      	mov	r0, r3
 800920a:	3730      	adds	r7, #48	@ 0x30
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	e000ed04 	.word	0xe000ed04

08009214 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b08e      	sub	sp, #56	@ 0x38
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800921e:	2300      	movs	r3, #0
 8009220:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009226:	2300      	movs	r3, #0
 8009228:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800922a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10b      	bne.n	8009248 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	623b      	str	r3, [r7, #32]
}
 8009242:	bf00      	nop
 8009244:	bf00      	nop
 8009246:	e7fd      	b.n	8009244 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800924a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00b      	beq.n	8009268 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	61fb      	str	r3, [r7, #28]
}
 8009262:	bf00      	nop
 8009264:	bf00      	nop
 8009266:	e7fd      	b.n	8009264 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009268:	f001 f96c 	bl	800a544 <xTaskGetSchedulerState>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d102      	bne.n	8009278 <xQueueSemaphoreTake+0x64>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d101      	bne.n	800927c <xQueueSemaphoreTake+0x68>
 8009278:	2301      	movs	r3, #1
 800927a:	e000      	b.n	800927e <xQueueSemaphoreTake+0x6a>
 800927c:	2300      	movs	r3, #0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10b      	bne.n	800929a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8009282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009286:	f383 8811 	msr	BASEPRI, r3
 800928a:	f3bf 8f6f 	isb	sy
 800928e:	f3bf 8f4f 	dsb	sy
 8009292:	61bb      	str	r3, [r7, #24]
}
 8009294:	bf00      	nop
 8009296:	bf00      	nop
 8009298:	e7fd      	b.n	8009296 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800929a:	f002 f87d 	bl	800b398 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800929e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80092a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d024      	beq.n	80092f4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80092aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ac:	1e5a      	subs	r2, r3, #1
 80092ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d104      	bne.n	80092c4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80092ba:	f001 fabd 	bl	800a838 <pvTaskIncrementMutexHeldCount>
 80092be:	4602      	mov	r2, r0
 80092c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00f      	beq.n	80092ec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ce:	3310      	adds	r3, #16
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 ff61 	bl	800a198 <xTaskRemoveFromEventList>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d007      	beq.n	80092ec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092dc:	4b54      	ldr	r3, [pc, #336]	@ (8009430 <xQueueSemaphoreTake+0x21c>)
 80092de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	f3bf 8f4f 	dsb	sy
 80092e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092ec:	f002 f886 	bl	800b3fc <vPortExitCritical>
				return pdPASS;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e098      	b.n	8009426 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d112      	bne.n	8009320 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80092fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00b      	beq.n	8009318 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	617b      	str	r3, [r7, #20]
}
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	e7fd      	b.n	8009314 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009318:	f002 f870 	bl	800b3fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800931c:	2300      	movs	r3, #0
 800931e:	e082      	b.n	8009426 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009322:	2b00      	cmp	r3, #0
 8009324:	d106      	bne.n	8009334 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009326:	f107 030c 	add.w	r3, r7, #12
 800932a:	4618      	mov	r0, r3
 800932c:	f000 ff98 	bl	800a260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009330:	2301      	movs	r3, #1
 8009332:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009334:	f002 f862 	bl	800b3fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009338:	f000 fd00 	bl	8009d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800933c:	f002 f82c 	bl	800b398 <vPortEnterCritical>
 8009340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009342:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009346:	b25b      	sxtb	r3, r3
 8009348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934c:	d103      	bne.n	8009356 <xQueueSemaphoreTake+0x142>
 800934e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800935c:	b25b      	sxtb	r3, r3
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009362:	d103      	bne.n	800936c <xQueueSemaphoreTake+0x158>
 8009364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800936c:	f002 f846 	bl	800b3fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009370:	463a      	mov	r2, r7
 8009372:	f107 030c 	add.w	r3, r7, #12
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f000 ff87 	bl	800a28c <xTaskCheckForTimeOut>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d132      	bne.n	80093ea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009384:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009386:	f000 f9f5 	bl	8009774 <prvIsQueueEmpty>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d026      	beq.n	80093de <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d109      	bne.n	80093ac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009398:	f001 fffe 	bl	800b398 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800939c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	4618      	mov	r0, r3
 80093a2:	f001 f8ed 	bl	800a580 <xTaskPriorityInherit>
 80093a6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80093a8:	f002 f828 	bl	800b3fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ae:	3324      	adds	r3, #36	@ 0x24
 80093b0:	683a      	ldr	r2, [r7, #0]
 80093b2:	4611      	mov	r1, r2
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 fe9d 	bl	800a0f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093bc:	f000 f988 	bl	80096d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093c0:	f000 fcca 	bl	8009d58 <xTaskResumeAll>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f47f af67 	bne.w	800929a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80093cc:	4b18      	ldr	r3, [pc, #96]	@ (8009430 <xQueueSemaphoreTake+0x21c>)
 80093ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	e75d      	b.n	800929a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80093de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093e0:	f000 f976 	bl	80096d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093e4:	f000 fcb8 	bl	8009d58 <xTaskResumeAll>
 80093e8:	e757      	b.n	800929a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80093ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093ec:	f000 f970 	bl	80096d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093f0:	f000 fcb2 	bl	8009d58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093f6:	f000 f9bd 	bl	8009774 <prvIsQueueEmpty>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f43f af4c 	beq.w	800929a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00d      	beq.n	8009424 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009408:	f001 ffc6 	bl	800b398 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800940c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800940e:	f000 f8b7 	bl	8009580 <prvGetDisinheritPriorityAfterTimeout>
 8009412:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800941a:	4618      	mov	r0, r3
 800941c:	f001 f988 	bl	800a730 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009420:	f001 ffec 	bl	800b3fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009426:	4618      	mov	r0, r3
 8009428:	3738      	adds	r7, #56	@ 0x38
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08e      	sub	sp, #56	@ 0x38
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	623b      	str	r3, [r7, #32]
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	e7fd      	b.n	800945e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d103      	bne.n	8009470 <xQueueReceiveFromISR+0x3c>
 8009468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <xQueueReceiveFromISR+0x40>
 8009470:	2301      	movs	r3, #1
 8009472:	e000      	b.n	8009476 <xQueueReceiveFromISR+0x42>
 8009474:	2300      	movs	r3, #0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10b      	bne.n	8009492 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	61fb      	str	r3, [r7, #28]
}
 800948c:	bf00      	nop
 800948e:	bf00      	nop
 8009490:	e7fd      	b.n	800948e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009492:	f002 f861 	bl	800b558 <vPortValidateInterruptPriority>
	__asm volatile
 8009496:	f3ef 8211 	mrs	r2, BASEPRI
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	61ba      	str	r2, [r7, #24]
 80094ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80094ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80094b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d02f      	beq.n	800951e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80094c8:	68b9      	ldr	r1, [r7, #8]
 80094ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094cc:	f000 f8da 	bl	8009684 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80094d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d2:	1e5a      	subs	r2, r3, #1
 80094d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80094d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e0:	d112      	bne.n	8009508 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d016      	beq.n	8009518 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	3310      	adds	r3, #16
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 fe52 	bl	800a198 <xTaskRemoveFromEventList>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00e      	beq.n	8009518 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00b      	beq.n	8009518 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	601a      	str	r2, [r3, #0]
 8009506:	e007      	b.n	8009518 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800950c:	3301      	adds	r3, #1
 800950e:	b2db      	uxtb	r3, r3
 8009510:	b25a      	sxtb	r2, r3
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009518:	2301      	movs	r3, #1
 800951a:	637b      	str	r3, [r7, #52]	@ 0x34
 800951c:	e001      	b.n	8009522 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800951e:	2300      	movs	r3, #0
 8009520:	637b      	str	r3, [r7, #52]	@ 0x34
 8009522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009524:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f383 8811 	msr	BASEPRI, r3
}
 800952c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800952e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009530:	4618      	mov	r0, r3
 8009532:	3738      	adds	r7, #56	@ 0x38
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10b      	bne.n	8009562 <vQueueDelete+0x2a>
	__asm volatile
 800954a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	60bb      	str	r3, [r7, #8]
}
 800955c:	bf00      	nop
 800955e:	bf00      	nop
 8009560:	e7fd      	b.n	800955e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 f95e 	bl	8009824 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800956e:	2b00      	cmp	r3, #0
 8009570:	d102      	bne.n	8009578 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f002 f900 	bl	800b778 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009578:	bf00      	nop
 800957a:	3710      	adds	r7, #16
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	d006      	beq.n	800959e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	e001      	b.n	80095a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800959e:	2300      	movs	r3, #0
 80095a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80095a2:	68fb      	ldr	r3, [r7, #12]
	}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3714      	adds	r7, #20
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80095bc:	2300      	movs	r3, #0
 80095be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10d      	bne.n	80095ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d14d      	bne.n	8009672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	4618      	mov	r0, r3
 80095dc:	f001 f838 	bl	800a650 <xTaskPriorityDisinherit>
 80095e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	609a      	str	r2, [r3, #8]
 80095e8:	e043      	b.n	8009672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d119      	bne.n	8009624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6858      	ldr	r0, [r3, #4]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f8:	461a      	mov	r2, r3
 80095fa:	68b9      	ldr	r1, [r7, #8]
 80095fc:	f002 fa60 	bl	800bac0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009608:	441a      	add	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	429a      	cmp	r2, r3
 8009618:	d32b      	bcc.n	8009672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	605a      	str	r2, [r3, #4]
 8009622:	e026      	b.n	8009672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	68d8      	ldr	r0, [r3, #12]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962c:	461a      	mov	r2, r3
 800962e:	68b9      	ldr	r1, [r7, #8]
 8009630:	f002 fa46 	bl	800bac0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	68da      	ldr	r2, [r3, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963c:	425b      	negs	r3, r3
 800963e:	441a      	add	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	429a      	cmp	r2, r3
 800964e:	d207      	bcs.n	8009660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	689a      	ldr	r2, [r3, #8]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009658:	425b      	negs	r3, r3
 800965a:	441a      	add	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2b02      	cmp	r3, #2
 8009664:	d105      	bne.n	8009672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	3b01      	subs	r3, #1
 8009670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800967a:	697b      	ldr	r3, [r7, #20]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009692:	2b00      	cmp	r3, #0
 8009694:	d018      	beq.n	80096c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969e:	441a      	add	r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68da      	ldr	r2, [r3, #12]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d303      	bcc.n	80096b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68d9      	ldr	r1, [r3, #12]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c0:	461a      	mov	r2, r3
 80096c2:	6838      	ldr	r0, [r7, #0]
 80096c4:	f002 f9fc 	bl	800bac0 <memcpy>
	}
}
 80096c8:	bf00      	nop
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80096d8:	f001 fe5e 	bl	800b398 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80096e4:	e011      	b.n	800970a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d012      	beq.n	8009714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3324      	adds	r3, #36	@ 0x24
 80096f2:	4618      	mov	r0, r3
 80096f4:	f000 fd50 	bl	800a198 <xTaskRemoveFromEventList>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80096fe:	f000 fe29 	bl	800a354 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	3b01      	subs	r3, #1
 8009706:	b2db      	uxtb	r3, r3
 8009708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800970a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800970e:	2b00      	cmp	r3, #0
 8009710:	dce9      	bgt.n	80096e6 <prvUnlockQueue+0x16>
 8009712:	e000      	b.n	8009716 <prvUnlockQueue+0x46>
					break;
 8009714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	22ff      	movs	r2, #255	@ 0xff
 800971a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800971e:	f001 fe6d 	bl	800b3fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009722:	f001 fe39 	bl	800b398 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800972c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800972e:	e011      	b.n	8009754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d012      	beq.n	800975e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	3310      	adds	r3, #16
 800973c:	4618      	mov	r0, r3
 800973e:	f000 fd2b 	bl	800a198 <xTaskRemoveFromEventList>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009748:	f000 fe04 	bl	800a354 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800974c:	7bbb      	ldrb	r3, [r7, #14]
 800974e:	3b01      	subs	r3, #1
 8009750:	b2db      	uxtb	r3, r3
 8009752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009758:	2b00      	cmp	r3, #0
 800975a:	dce9      	bgt.n	8009730 <prvUnlockQueue+0x60>
 800975c:	e000      	b.n	8009760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800975e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	22ff      	movs	r2, #255	@ 0xff
 8009764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009768:	f001 fe48 	bl	800b3fc <vPortExitCritical>
}
 800976c:	bf00      	nop
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800977c:	f001 fe0c 	bl	800b398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009784:	2b00      	cmp	r3, #0
 8009786:	d102      	bne.n	800978e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009788:	2301      	movs	r3, #1
 800978a:	60fb      	str	r3, [r7, #12]
 800978c:	e001      	b.n	8009792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800978e:	2300      	movs	r3, #0
 8009790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009792:	f001 fe33 	bl	800b3fc <vPortExitCritical>

	return xReturn;
 8009796:	68fb      	ldr	r3, [r7, #12]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097a8:	f001 fdf6 	bl	800b398 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d102      	bne.n	80097be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80097b8:	2301      	movs	r3, #1
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	e001      	b.n	80097c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097c2:	f001 fe1b 	bl	800b3fc <vPortExitCritical>

	return xReturn;
 80097c6:	68fb      	ldr	r3, [r7, #12]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80097da:	2300      	movs	r3, #0
 80097dc:	60fb      	str	r3, [r7, #12]
 80097de:	e014      	b.n	800980a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80097e0:	4a0f      	ldr	r2, [pc, #60]	@ (8009820 <vQueueAddToRegistry+0x50>)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10b      	bne.n	8009804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80097ec:	490c      	ldr	r1, [pc, #48]	@ (8009820 <vQueueAddToRegistry+0x50>)
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80097f6:	4a0a      	ldr	r2, [pc, #40]	@ (8009820 <vQueueAddToRegistry+0x50>)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	4413      	add	r3, r2
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009802:	e006      	b.n	8009812 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	3301      	adds	r3, #1
 8009808:	60fb      	str	r3, [r7, #12]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b07      	cmp	r3, #7
 800980e:	d9e7      	bls.n	80097e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009810:	bf00      	nop
 8009812:	bf00      	nop
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	20041064 	.word	0x20041064

08009824 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800982c:	2300      	movs	r3, #0
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	e016      	b.n	8009860 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009832:	4a10      	ldr	r2, [pc, #64]	@ (8009874 <vQueueUnregisterQueue+0x50>)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	00db      	lsls	r3, r3, #3
 8009838:	4413      	add	r3, r2
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	429a      	cmp	r2, r3
 8009840:	d10b      	bne.n	800985a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009842:	4a0c      	ldr	r2, [pc, #48]	@ (8009874 <vQueueUnregisterQueue+0x50>)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2100      	movs	r1, #0
 8009848:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800984c:	4a09      	ldr	r2, [pc, #36]	@ (8009874 <vQueueUnregisterQueue+0x50>)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	4413      	add	r3, r2
 8009854:	2200      	movs	r2, #0
 8009856:	605a      	str	r2, [r3, #4]
				break;
 8009858:	e006      	b.n	8009868 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3301      	adds	r3, #1
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b07      	cmp	r3, #7
 8009864:	d9e5      	bls.n	8009832 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009866:	bf00      	nop
 8009868:	bf00      	nop
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	20041064 	.word	0x20041064

08009878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009878:	b580      	push	{r7, lr}
 800987a:	b086      	sub	sp, #24
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009888:	f001 fd86 	bl	800b398 <vPortEnterCritical>
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009892:	b25b      	sxtb	r3, r3
 8009894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009898:	d103      	bne.n	80098a2 <vQueueWaitForMessageRestricted+0x2a>
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098a8:	b25b      	sxtb	r3, r3
 80098aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ae:	d103      	bne.n	80098b8 <vQueueWaitForMessageRestricted+0x40>
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098b8:	f001 fda0 	bl	800b3fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d106      	bne.n	80098d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	3324      	adds	r3, #36	@ 0x24
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	68b9      	ldr	r1, [r7, #8]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 fc37 	bl	800a140 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80098d2:	6978      	ldr	r0, [r7, #20]
 80098d4:	f7ff fefc 	bl	80096d0 <prvUnlockQueue>
	}
 80098d8:	bf00      	nop
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08e      	sub	sp, #56	@ 0x38
 80098e4:	af04      	add	r7, sp, #16
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80098ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10b      	bne.n	800990c <xTaskCreateStatic+0x2c>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	623b      	str	r3, [r7, #32]
}
 8009906:	bf00      	nop
 8009908:	bf00      	nop
 800990a:	e7fd      	b.n	8009908 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10b      	bne.n	800992a <xTaskCreateStatic+0x4a>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	61fb      	str	r3, [r7, #28]
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop
 8009928:	e7fd      	b.n	8009926 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800992a:	23a8      	movs	r3, #168	@ 0xa8
 800992c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2ba8      	cmp	r3, #168	@ 0xa8
 8009932:	d00b      	beq.n	800994c <xTaskCreateStatic+0x6c>
	__asm volatile
 8009934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009938:	f383 8811 	msr	BASEPRI, r3
 800993c:	f3bf 8f6f 	isb	sy
 8009940:	f3bf 8f4f 	dsb	sy
 8009944:	61bb      	str	r3, [r7, #24]
}
 8009946:	bf00      	nop
 8009948:	bf00      	nop
 800994a:	e7fd      	b.n	8009948 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800994c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800994e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009950:	2b00      	cmp	r3, #0
 8009952:	d01e      	beq.n	8009992 <xTaskCreateStatic+0xb2>
 8009954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009956:	2b00      	cmp	r3, #0
 8009958:	d01b      	beq.n	8009992 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800995a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800995c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009962:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009966:	2202      	movs	r2, #2
 8009968:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800996c:	2300      	movs	r3, #0
 800996e:	9303      	str	r3, [sp, #12]
 8009970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009972:	9302      	str	r3, [sp, #8]
 8009974:	f107 0314 	add.w	r3, r7, #20
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 f851 	bl	8009a2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800998a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800998c:	f000 f8f6 	bl	8009b7c <prvAddNewTaskToReadyList>
 8009990:	e001      	b.n	8009996 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009992:	2300      	movs	r3, #0
 8009994:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009996:	697b      	ldr	r3, [r7, #20]
	}
 8009998:	4618      	mov	r0, r3
 800999a:	3728      	adds	r7, #40	@ 0x28
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08c      	sub	sp, #48	@ 0x30
 80099a4:	af04      	add	r7, sp, #16
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	4613      	mov	r3, r2
 80099ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80099b0:	88fb      	ldrh	r3, [r7, #6]
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	4618      	mov	r0, r3
 80099b6:	f001 fe11 	bl	800b5dc <pvPortMalloc>
 80099ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d00e      	beq.n	80099e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80099c2:	20a8      	movs	r0, #168	@ 0xa8
 80099c4:	f001 fe0a 	bl	800b5dc <pvPortMalloc>
 80099c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d003      	beq.n	80099d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80099d6:	e005      	b.n	80099e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80099d8:	6978      	ldr	r0, [r7, #20]
 80099da:	f001 fecd 	bl	800b778 <vPortFree>
 80099de:	e001      	b.n	80099e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80099e0:	2300      	movs	r3, #0
 80099e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d017      	beq.n	8009a1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	2200      	movs	r2, #0
 80099ee:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80099f2:	88fa      	ldrh	r2, [r7, #6]
 80099f4:	2300      	movs	r3, #0
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	9302      	str	r3, [sp, #8]
 80099fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	68b9      	ldr	r1, [r7, #8]
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f000 f80f 	bl	8009a2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a0e:	69f8      	ldr	r0, [r7, #28]
 8009a10:	f000 f8b4 	bl	8009b7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a14:	2301      	movs	r3, #1
 8009a16:	61bb      	str	r3, [r7, #24]
 8009a18:	e002      	b.n	8009a20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a20:	69bb      	ldr	r3, [r7, #24]
	}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3720      	adds	r7, #32
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
	...

08009a2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b088      	sub	sp, #32
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
 8009a38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	461a      	mov	r2, r3
 8009a44:	21a5      	movs	r1, #165	@ 0xa5
 8009a46:	f001 ffb7 	bl	800b9b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009a54:	3b01      	subs	r3, #1
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	f023 0307 	bic.w	r3, r3, #7
 8009a62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	f003 0307 	and.w	r3, r3, #7
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00b      	beq.n	8009a86 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a72:	f383 8811 	msr	BASEPRI, r3
 8009a76:	f3bf 8f6f 	isb	sy
 8009a7a:	f3bf 8f4f 	dsb	sy
 8009a7e:	617b      	str	r3, [r7, #20]
}
 8009a80:	bf00      	nop
 8009a82:	bf00      	nop
 8009a84:	e7fd      	b.n	8009a82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d01f      	beq.n	8009acc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61fb      	str	r3, [r7, #28]
 8009a90:	e012      	b.n	8009ab8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009a92:	68ba      	ldr	r2, [r7, #8]
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	4413      	add	r3, r2
 8009a98:	7819      	ldrb	r1, [r3, #0]
 8009a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	3334      	adds	r3, #52	@ 0x34
 8009aa2:	460a      	mov	r2, r1
 8009aa4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009aa6:	68ba      	ldr	r2, [r7, #8]
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	4413      	add	r3, r2
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d006      	beq.n	8009ac0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	61fb      	str	r3, [r7, #28]
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	2b0f      	cmp	r3, #15
 8009abc:	d9e9      	bls.n	8009a92 <prvInitialiseNewTask+0x66>
 8009abe:	e000      	b.n	8009ac2 <prvInitialiseNewTask+0x96>
			{
				break;
 8009ac0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009aca:	e003      	b.n	8009ad4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad6:	2b37      	cmp	r3, #55	@ 0x37
 8009ad8:	d901      	bls.n	8009ade <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ada:	2337      	movs	r3, #55	@ 0x37
 8009adc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ae2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ae8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aec:	2200      	movs	r2, #0
 8009aee:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af2:	3304      	adds	r3, #4
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fe fd7b 	bl	80085f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afc:	3318      	adds	r3, #24
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fe fd76 	bl	80085f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b18:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2c:	3354      	adds	r3, #84	@ 0x54
 8009b2e:	224c      	movs	r2, #76	@ 0x4c
 8009b30:	2100      	movs	r1, #0
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 ff40 	bl	800b9b8 <memset>
 8009b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8009b70 <prvInitialiseNewTask+0x144>)
 8009b3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b40:	4a0c      	ldr	r2, [pc, #48]	@ (8009b74 <prvInitialiseNewTask+0x148>)
 8009b42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b46:	4a0c      	ldr	r2, [pc, #48]	@ (8009b78 <prvInitialiseNewTask+0x14c>)
 8009b48:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	68f9      	ldr	r1, [r7, #12]
 8009b4e:	69b8      	ldr	r0, [r7, #24]
 8009b50:	f001 faf4 	bl	800b13c <pxPortInitialiseStack>
 8009b54:	4602      	mov	r2, r0
 8009b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b66:	bf00      	nop
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	200422b0 	.word	0x200422b0
 8009b74:	20042318 	.word	0x20042318
 8009b78:	20042380 	.word	0x20042380

08009b7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009b84:	f001 fc08 	bl	800b398 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009b88:	4b2d      	ldr	r3, [pc, #180]	@ (8009c40 <prvAddNewTaskToReadyList+0xc4>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	4a2c      	ldr	r2, [pc, #176]	@ (8009c40 <prvAddNewTaskToReadyList+0xc4>)
 8009b90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009b92:	4b2c      	ldr	r3, [pc, #176]	@ (8009c44 <prvAddNewTaskToReadyList+0xc8>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d109      	bne.n	8009bae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8009c44 <prvAddNewTaskToReadyList+0xc8>)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ba0:	4b27      	ldr	r3, [pc, #156]	@ (8009c40 <prvAddNewTaskToReadyList+0xc4>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d110      	bne.n	8009bca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ba8:	f000 fbf8 	bl	800a39c <prvInitialiseTaskLists>
 8009bac:	e00d      	b.n	8009bca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009bae:	4b26      	ldr	r3, [pc, #152]	@ (8009c48 <prvAddNewTaskToReadyList+0xcc>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d109      	bne.n	8009bca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009bb6:	4b23      	ldr	r3, [pc, #140]	@ (8009c44 <prvAddNewTaskToReadyList+0xc8>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d802      	bhi.n	8009bca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009bc4:	4a1f      	ldr	r2, [pc, #124]	@ (8009c44 <prvAddNewTaskToReadyList+0xc8>)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009bca:	4b20      	ldr	r3, [pc, #128]	@ (8009c4c <prvAddNewTaskToReadyList+0xd0>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8009c4c <prvAddNewTaskToReadyList+0xd0>)
 8009bd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c4c <prvAddNewTaskToReadyList+0xd0>)
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009be0:	4b1b      	ldr	r3, [pc, #108]	@ (8009c50 <prvAddNewTaskToReadyList+0xd4>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d903      	bls.n	8009bf0 <prvAddNewTaskToReadyList+0x74>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bec:	4a18      	ldr	r2, [pc, #96]	@ (8009c50 <prvAddNewTaskToReadyList+0xd4>)
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4a15      	ldr	r2, [pc, #84]	@ (8009c54 <prvAddNewTaskToReadyList+0xd8>)
 8009bfe:	441a      	add	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	3304      	adds	r3, #4
 8009c04:	4619      	mov	r1, r3
 8009c06:	4610      	mov	r0, r2
 8009c08:	f7fe fcff 	bl	800860a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c0c:	f001 fbf6 	bl	800b3fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c10:	4b0d      	ldr	r3, [pc, #52]	@ (8009c48 <prvAddNewTaskToReadyList+0xcc>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d00e      	beq.n	8009c36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c18:	4b0a      	ldr	r3, [pc, #40]	@ (8009c44 <prvAddNewTaskToReadyList+0xc8>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d207      	bcs.n	8009c36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c26:	4b0c      	ldr	r3, [pc, #48]	@ (8009c58 <prvAddNewTaskToReadyList+0xdc>)
 8009c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c36:	bf00      	nop
 8009c38:	3708      	adds	r7, #8
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	20041578 	.word	0x20041578
 8009c44:	200410a4 	.word	0x200410a4
 8009c48:	20041584 	.word	0x20041584
 8009c4c:	20041594 	.word	0x20041594
 8009c50:	20041580 	.word	0x20041580
 8009c54:	200410a8 	.word	0x200410a8
 8009c58:	e000ed04 	.word	0xe000ed04

08009c5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b08a      	sub	sp, #40	@ 0x28
 8009c60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c62:	2300      	movs	r3, #0
 8009c64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c66:	2300      	movs	r3, #0
 8009c68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c6a:	463a      	mov	r2, r7
 8009c6c:	1d39      	adds	r1, r7, #4
 8009c6e:	f107 0308 	add.w	r3, r7, #8
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7fe fc68 	bl	8008548 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68ba      	ldr	r2, [r7, #8]
 8009c7e:	9202      	str	r2, [sp, #8]
 8009c80:	9301      	str	r3, [sp, #4]
 8009c82:	2300      	movs	r3, #0
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	2300      	movs	r3, #0
 8009c88:	460a      	mov	r2, r1
 8009c8a:	4924      	ldr	r1, [pc, #144]	@ (8009d1c <vTaskStartScheduler+0xc0>)
 8009c8c:	4824      	ldr	r0, [pc, #144]	@ (8009d20 <vTaskStartScheduler+0xc4>)
 8009c8e:	f7ff fe27 	bl	80098e0 <xTaskCreateStatic>
 8009c92:	4603      	mov	r3, r0
 8009c94:	4a23      	ldr	r2, [pc, #140]	@ (8009d24 <vTaskStartScheduler+0xc8>)
 8009c96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c98:	4b22      	ldr	r3, [pc, #136]	@ (8009d24 <vTaskStartScheduler+0xc8>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	617b      	str	r3, [r7, #20]
 8009ca4:	e001      	b.n	8009caa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d102      	bne.n	8009cb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009cb0:	f000 fe2a 	bl	800a908 <xTimerCreateTimerTask>
 8009cb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d11b      	bne.n	8009cf4 <vTaskStartScheduler+0x98>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc0:	f383 8811 	msr	BASEPRI, r3
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	f3bf 8f4f 	dsb	sy
 8009ccc:	613b      	str	r3, [r7, #16]
}
 8009cce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009cd0:	4b15      	ldr	r3, [pc, #84]	@ (8009d28 <vTaskStartScheduler+0xcc>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3354      	adds	r3, #84	@ 0x54
 8009cd6:	4a15      	ldr	r2, [pc, #84]	@ (8009d2c <vTaskStartScheduler+0xd0>)
 8009cd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009cda:	4b15      	ldr	r3, [pc, #84]	@ (8009d30 <vTaskStartScheduler+0xd4>)
 8009cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009ce2:	4b14      	ldr	r3, [pc, #80]	@ (8009d34 <vTaskStartScheduler+0xd8>)
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ce8:	4b13      	ldr	r3, [pc, #76]	@ (8009d38 <vTaskStartScheduler+0xdc>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009cee:	f001 faaf 	bl	800b250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009cf2:	e00f      	b.n	8009d14 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cfa:	d10b      	bne.n	8009d14 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d00:	f383 8811 	msr	BASEPRI, r3
 8009d04:	f3bf 8f6f 	isb	sy
 8009d08:	f3bf 8f4f 	dsb	sy
 8009d0c:	60fb      	str	r3, [r7, #12]
}
 8009d0e:	bf00      	nop
 8009d10:	bf00      	nop
 8009d12:	e7fd      	b.n	8009d10 <vTaskStartScheduler+0xb4>
}
 8009d14:	bf00      	nop
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	0800bc28 	.word	0x0800bc28
 8009d20:	0800a36d 	.word	0x0800a36d
 8009d24:	2004159c 	.word	0x2004159c
 8009d28:	200410a4 	.word	0x200410a4
 8009d2c:	20040028 	.word	0x20040028
 8009d30:	20041598 	.word	0x20041598
 8009d34:	20041584 	.word	0x20041584
 8009d38:	2004157c 	.word	0x2004157c

08009d3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009d40:	4b04      	ldr	r3, [pc, #16]	@ (8009d54 <vTaskSuspendAll+0x18>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	3301      	adds	r3, #1
 8009d46:	4a03      	ldr	r2, [pc, #12]	@ (8009d54 <vTaskSuspendAll+0x18>)
 8009d48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009d4a:	bf00      	nop
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	200415a0 	.word	0x200415a0

08009d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d62:	2300      	movs	r3, #0
 8009d64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d66:	4b42      	ldr	r3, [pc, #264]	@ (8009e70 <xTaskResumeAll+0x118>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10b      	bne.n	8009d86 <xTaskResumeAll+0x2e>
	__asm volatile
 8009d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	603b      	str	r3, [r7, #0]
}
 8009d80:	bf00      	nop
 8009d82:	bf00      	nop
 8009d84:	e7fd      	b.n	8009d82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d86:	f001 fb07 	bl	800b398 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d8a:	4b39      	ldr	r3, [pc, #228]	@ (8009e70 <xTaskResumeAll+0x118>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	4a37      	ldr	r2, [pc, #220]	@ (8009e70 <xTaskResumeAll+0x118>)
 8009d92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d94:	4b36      	ldr	r3, [pc, #216]	@ (8009e70 <xTaskResumeAll+0x118>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d162      	bne.n	8009e62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d9c:	4b35      	ldr	r3, [pc, #212]	@ (8009e74 <xTaskResumeAll+0x11c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d05e      	beq.n	8009e62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009da4:	e02f      	b.n	8009e06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da6:	4b34      	ldr	r3, [pc, #208]	@ (8009e78 <xTaskResumeAll+0x120>)
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3318      	adds	r3, #24
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe fc86 	bl	80086c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3304      	adds	r3, #4
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fe fc81 	bl	80086c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dc6:	4b2d      	ldr	r3, [pc, #180]	@ (8009e7c <xTaskResumeAll+0x124>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d903      	bls.n	8009dd6 <xTaskResumeAll+0x7e>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd2:	4a2a      	ldr	r2, [pc, #168]	@ (8009e7c <xTaskResumeAll+0x124>)
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dda:	4613      	mov	r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4413      	add	r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4a27      	ldr	r2, [pc, #156]	@ (8009e80 <xTaskResumeAll+0x128>)
 8009de4:	441a      	add	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3304      	adds	r3, #4
 8009dea:	4619      	mov	r1, r3
 8009dec:	4610      	mov	r0, r2
 8009dee:	f7fe fc0c 	bl	800860a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df6:	4b23      	ldr	r3, [pc, #140]	@ (8009e84 <xTaskResumeAll+0x12c>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d302      	bcc.n	8009e06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009e00:	4b21      	ldr	r3, [pc, #132]	@ (8009e88 <xTaskResumeAll+0x130>)
 8009e02:	2201      	movs	r2, #1
 8009e04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e06:	4b1c      	ldr	r3, [pc, #112]	@ (8009e78 <xTaskResumeAll+0x120>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1cb      	bne.n	8009da6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009e14:	f000 fb66 	bl	800a4e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e18:	4b1c      	ldr	r3, [pc, #112]	@ (8009e8c <xTaskResumeAll+0x134>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d010      	beq.n	8009e46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009e24:	f000 f846 	bl	8009eb4 <xTaskIncrementTick>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d002      	beq.n	8009e34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009e2e:	4b16      	ldr	r3, [pc, #88]	@ (8009e88 <xTaskResumeAll+0x130>)
 8009e30:	2201      	movs	r2, #1
 8009e32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3b01      	subs	r3, #1
 8009e38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1f1      	bne.n	8009e24 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009e40:	4b12      	ldr	r3, [pc, #72]	@ (8009e8c <xTaskResumeAll+0x134>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e46:	4b10      	ldr	r3, [pc, #64]	@ (8009e88 <xTaskResumeAll+0x130>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d009      	beq.n	8009e62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e52:	4b0f      	ldr	r3, [pc, #60]	@ (8009e90 <xTaskResumeAll+0x138>)
 8009e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e58:	601a      	str	r2, [r3, #0]
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e62:	f001 facb 	bl	800b3fc <vPortExitCritical>

	return xAlreadyYielded;
 8009e66:	68bb      	ldr	r3, [r7, #8]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	200415a0 	.word	0x200415a0
 8009e74:	20041578 	.word	0x20041578
 8009e78:	20041538 	.word	0x20041538
 8009e7c:	20041580 	.word	0x20041580
 8009e80:	200410a8 	.word	0x200410a8
 8009e84:	200410a4 	.word	0x200410a4
 8009e88:	2004158c 	.word	0x2004158c
 8009e8c:	20041588 	.word	0x20041588
 8009e90:	e000ed04 	.word	0xe000ed04

08009e94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e9a:	4b05      	ldr	r3, [pc, #20]	@ (8009eb0 <xTaskGetTickCount+0x1c>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ea0:	687b      	ldr	r3, [r7, #4]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	2004157c 	.word	0x2004157c

08009eb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8009ffc <xTaskIncrementTick+0x148>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	f040 8090 	bne.w	8009fe8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009ec8:	4b4d      	ldr	r3, [pc, #308]	@ (800a000 <xTaskIncrementTick+0x14c>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ed0:	4a4b      	ldr	r2, [pc, #300]	@ (800a000 <xTaskIncrementTick+0x14c>)
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d121      	bne.n	8009f20 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009edc:	4b49      	ldr	r3, [pc, #292]	@ (800a004 <xTaskIncrementTick+0x150>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00b      	beq.n	8009efe <xTaskIncrementTick+0x4a>
	__asm volatile
 8009ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	603b      	str	r3, [r7, #0]
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	e7fd      	b.n	8009efa <xTaskIncrementTick+0x46>
 8009efe:	4b41      	ldr	r3, [pc, #260]	@ (800a004 <xTaskIncrementTick+0x150>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60fb      	str	r3, [r7, #12]
 8009f04:	4b40      	ldr	r3, [pc, #256]	@ (800a008 <xTaskIncrementTick+0x154>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a3e      	ldr	r2, [pc, #248]	@ (800a004 <xTaskIncrementTick+0x150>)
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	4a3e      	ldr	r2, [pc, #248]	@ (800a008 <xTaskIncrementTick+0x154>)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6013      	str	r3, [r2, #0]
 8009f12:	4b3e      	ldr	r3, [pc, #248]	@ (800a00c <xTaskIncrementTick+0x158>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	3301      	adds	r3, #1
 8009f18:	4a3c      	ldr	r2, [pc, #240]	@ (800a00c <xTaskIncrementTick+0x158>)
 8009f1a:	6013      	str	r3, [r2, #0]
 8009f1c:	f000 fae2 	bl	800a4e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009f20:	4b3b      	ldr	r3, [pc, #236]	@ (800a010 <xTaskIncrementTick+0x15c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	693a      	ldr	r2, [r7, #16]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d349      	bcc.n	8009fbe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f2a:	4b36      	ldr	r3, [pc, #216]	@ (800a004 <xTaskIncrementTick+0x150>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d104      	bne.n	8009f3e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f34:	4b36      	ldr	r3, [pc, #216]	@ (800a010 <xTaskIncrementTick+0x15c>)
 8009f36:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3a:	601a      	str	r2, [r3, #0]
					break;
 8009f3c:	e03f      	b.n	8009fbe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f3e:	4b31      	ldr	r3, [pc, #196]	@ (800a004 <xTaskIncrementTick+0x150>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d203      	bcs.n	8009f5e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f56:	4a2e      	ldr	r2, [pc, #184]	@ (800a010 <xTaskIncrementTick+0x15c>)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f5c:	e02f      	b.n	8009fbe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	3304      	adds	r3, #4
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fe fbae 	bl	80086c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d004      	beq.n	8009f7a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	3318      	adds	r3, #24
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7fe fba5 	bl	80086c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f7e:	4b25      	ldr	r3, [pc, #148]	@ (800a014 <xTaskIncrementTick+0x160>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d903      	bls.n	8009f8e <xTaskIncrementTick+0xda>
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8a:	4a22      	ldr	r2, [pc, #136]	@ (800a014 <xTaskIncrementTick+0x160>)
 8009f8c:	6013      	str	r3, [r2, #0]
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f92:	4613      	mov	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4413      	add	r3, r2
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4a1f      	ldr	r2, [pc, #124]	@ (800a018 <xTaskIncrementTick+0x164>)
 8009f9c:	441a      	add	r2, r3
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	f7fe fb30 	bl	800860a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fae:	4b1b      	ldr	r3, [pc, #108]	@ (800a01c <xTaskIncrementTick+0x168>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d3b8      	bcc.n	8009f2a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009fbc:	e7b5      	b.n	8009f2a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009fbe:	4b17      	ldr	r3, [pc, #92]	@ (800a01c <xTaskIncrementTick+0x168>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc4:	4914      	ldr	r1, [pc, #80]	@ (800a018 <xTaskIncrementTick+0x164>)
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	440b      	add	r3, r1
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d901      	bls.n	8009fda <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009fda:	4b11      	ldr	r3, [pc, #68]	@ (800a020 <xTaskIncrementTick+0x16c>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d007      	beq.n	8009ff2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	617b      	str	r3, [r7, #20]
 8009fe6:	e004      	b.n	8009ff2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009fe8:	4b0e      	ldr	r3, [pc, #56]	@ (800a024 <xTaskIncrementTick+0x170>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	3301      	adds	r3, #1
 8009fee:	4a0d      	ldr	r2, [pc, #52]	@ (800a024 <xTaskIncrementTick+0x170>)
 8009ff0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ff2:	697b      	ldr	r3, [r7, #20]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3718      	adds	r7, #24
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	200415a0 	.word	0x200415a0
 800a000:	2004157c 	.word	0x2004157c
 800a004:	20041530 	.word	0x20041530
 800a008:	20041534 	.word	0x20041534
 800a00c:	20041590 	.word	0x20041590
 800a010:	20041598 	.word	0x20041598
 800a014:	20041580 	.word	0x20041580
 800a018:	200410a8 	.word	0x200410a8
 800a01c:	200410a4 	.word	0x200410a4
 800a020:	2004158c 	.word	0x2004158c
 800a024:	20041588 	.word	0x20041588

0800a028 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a02e:	4b2b      	ldr	r3, [pc, #172]	@ (800a0dc <vTaskSwitchContext+0xb4>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a036:	4b2a      	ldr	r3, [pc, #168]	@ (800a0e0 <vTaskSwitchContext+0xb8>)
 800a038:	2201      	movs	r2, #1
 800a03a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a03c:	e047      	b.n	800a0ce <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a03e:	4b28      	ldr	r3, [pc, #160]	@ (800a0e0 <vTaskSwitchContext+0xb8>)
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a044:	4b27      	ldr	r3, [pc, #156]	@ (800a0e4 <vTaskSwitchContext+0xbc>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	60fb      	str	r3, [r7, #12]
 800a04a:	e011      	b.n	800a070 <vTaskSwitchContext+0x48>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10b      	bne.n	800a06a <vTaskSwitchContext+0x42>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	607b      	str	r3, [r7, #4]
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop
 800a068:	e7fd      	b.n	800a066 <vTaskSwitchContext+0x3e>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3b01      	subs	r3, #1
 800a06e:	60fb      	str	r3, [r7, #12]
 800a070:	491d      	ldr	r1, [pc, #116]	@ (800a0e8 <vTaskSwitchContext+0xc0>)
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	4613      	mov	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d0e3      	beq.n	800a04c <vTaskSwitchContext+0x24>
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	4613      	mov	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4a16      	ldr	r2, [pc, #88]	@ (800a0e8 <vTaskSwitchContext+0xc0>)
 800a090:	4413      	add	r3, r2
 800a092:	60bb      	str	r3, [r7, #8]
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	605a      	str	r2, [r3, #4]
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	685a      	ldr	r2, [r3, #4]
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d104      	bne.n	800a0b4 <vTaskSwitchContext+0x8c>
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	685a      	ldr	r2, [r3, #4]
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	605a      	str	r2, [r3, #4]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	4a0c      	ldr	r2, [pc, #48]	@ (800a0ec <vTaskSwitchContext+0xc4>)
 800a0bc:	6013      	str	r3, [r2, #0]
 800a0be:	4a09      	ldr	r2, [pc, #36]	@ (800a0e4 <vTaskSwitchContext+0xbc>)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0c4:	4b09      	ldr	r3, [pc, #36]	@ (800a0ec <vTaskSwitchContext+0xc4>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	3354      	adds	r3, #84	@ 0x54
 800a0ca:	4a09      	ldr	r2, [pc, #36]	@ (800a0f0 <vTaskSwitchContext+0xc8>)
 800a0cc:	6013      	str	r3, [r2, #0]
}
 800a0ce:	bf00      	nop
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	200415a0 	.word	0x200415a0
 800a0e0:	2004158c 	.word	0x2004158c
 800a0e4:	20041580 	.word	0x20041580
 800a0e8:	200410a8 	.word	0x200410a8
 800a0ec:	200410a4 	.word	0x200410a4
 800a0f0:	20040028 	.word	0x20040028

0800a0f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b084      	sub	sp, #16
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10b      	bne.n	800a11c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	60fb      	str	r3, [r7, #12]
}
 800a116:	bf00      	nop
 800a118:	bf00      	nop
 800a11a:	e7fd      	b.n	800a118 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a11c:	4b07      	ldr	r3, [pc, #28]	@ (800a13c <vTaskPlaceOnEventList+0x48>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3318      	adds	r3, #24
 800a122:	4619      	mov	r1, r3
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f7fe fa94 	bl	8008652 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a12a:	2101      	movs	r1, #1
 800a12c:	6838      	ldr	r0, [r7, #0]
 800a12e:	f000 fb97 	bl	800a860 <prvAddCurrentTaskToDelayedList>
}
 800a132:	bf00      	nop
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	200410a4 	.word	0x200410a4

0800a140 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10b      	bne.n	800a16a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	617b      	str	r3, [r7, #20]
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop
 800a168:	e7fd      	b.n	800a166 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a16a:	4b0a      	ldr	r3, [pc, #40]	@ (800a194 <vTaskPlaceOnEventListRestricted+0x54>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	3318      	adds	r3, #24
 800a170:	4619      	mov	r1, r3
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f7fe fa49 	bl	800860a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d002      	beq.n	800a184 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a17e:	f04f 33ff 	mov.w	r3, #4294967295
 800a182:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a184:	6879      	ldr	r1, [r7, #4]
 800a186:	68b8      	ldr	r0, [r7, #8]
 800a188:	f000 fb6a 	bl	800a860 <prvAddCurrentTaskToDelayedList>
	}
 800a18c:	bf00      	nop
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	200410a4 	.word	0x200410a4

0800a198 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b086      	sub	sp, #24
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d10b      	bne.n	800a1c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	60fb      	str	r3, [r7, #12]
}
 800a1c0:	bf00      	nop
 800a1c2:	bf00      	nop
 800a1c4:	e7fd      	b.n	800a1c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	3318      	adds	r3, #24
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f7fe fa7a 	bl	80086c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1d0:	4b1d      	ldr	r3, [pc, #116]	@ (800a248 <xTaskRemoveFromEventList+0xb0>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d11d      	bne.n	800a214 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	3304      	adds	r3, #4
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe fa71 	bl	80086c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e6:	4b19      	ldr	r3, [pc, #100]	@ (800a24c <xTaskRemoveFromEventList+0xb4>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d903      	bls.n	800a1f6 <xTaskRemoveFromEventList+0x5e>
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f2:	4a16      	ldr	r2, [pc, #88]	@ (800a24c <xTaskRemoveFromEventList+0xb4>)
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4a13      	ldr	r2, [pc, #76]	@ (800a250 <xTaskRemoveFromEventList+0xb8>)
 800a204:	441a      	add	r2, r3
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	3304      	adds	r3, #4
 800a20a:	4619      	mov	r1, r3
 800a20c:	4610      	mov	r0, r2
 800a20e:	f7fe f9fc 	bl	800860a <vListInsertEnd>
 800a212:	e005      	b.n	800a220 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	3318      	adds	r3, #24
 800a218:	4619      	mov	r1, r3
 800a21a:	480e      	ldr	r0, [pc, #56]	@ (800a254 <xTaskRemoveFromEventList+0xbc>)
 800a21c:	f7fe f9f5 	bl	800860a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a224:	4b0c      	ldr	r3, [pc, #48]	@ (800a258 <xTaskRemoveFromEventList+0xc0>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d905      	bls.n	800a23a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a22e:	2301      	movs	r3, #1
 800a230:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a232:	4b0a      	ldr	r3, [pc, #40]	@ (800a25c <xTaskRemoveFromEventList+0xc4>)
 800a234:	2201      	movs	r2, #1
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	e001      	b.n	800a23e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a23a:	2300      	movs	r3, #0
 800a23c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a23e:	697b      	ldr	r3, [r7, #20]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	200415a0 	.word	0x200415a0
 800a24c:	20041580 	.word	0x20041580
 800a250:	200410a8 	.word	0x200410a8
 800a254:	20041538 	.word	0x20041538
 800a258:	200410a4 	.word	0x200410a4
 800a25c:	2004158c 	.word	0x2004158c

0800a260 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a268:	4b06      	ldr	r3, [pc, #24]	@ (800a284 <vTaskInternalSetTimeOutState+0x24>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a270:	4b05      	ldr	r3, [pc, #20]	@ (800a288 <vTaskInternalSetTimeOutState+0x28>)
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	605a      	str	r2, [r3, #4]
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	20041590 	.word	0x20041590
 800a288:	2004157c 	.word	0x2004157c

0800a28c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b088      	sub	sp, #32
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10b      	bne.n	800a2b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	613b      	str	r3, [r7, #16]
}
 800a2ae:	bf00      	nop
 800a2b0:	bf00      	nop
 800a2b2:	e7fd      	b.n	800a2b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10b      	bne.n	800a2d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	60fb      	str	r3, [r7, #12]
}
 800a2cc:	bf00      	nop
 800a2ce:	bf00      	nop
 800a2d0:	e7fd      	b.n	800a2ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a2d2:	f001 f861 	bl	800b398 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a2d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a34c <xTaskCheckForTimeOut+0xc0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	69ba      	ldr	r2, [r7, #24]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ee:	d102      	bne.n	800a2f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	61fb      	str	r3, [r7, #28]
 800a2f4:	e023      	b.n	800a33e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	4b15      	ldr	r3, [pc, #84]	@ (800a350 <xTaskCheckForTimeOut+0xc4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d007      	beq.n	800a312 <xTaskCheckForTimeOut+0x86>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	69ba      	ldr	r2, [r7, #24]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d302      	bcc.n	800a312 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a30c:	2301      	movs	r3, #1
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	e015      	b.n	800a33e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	697a      	ldr	r2, [r7, #20]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d20b      	bcs.n	800a334 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	1ad2      	subs	r2, r2, r3
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7ff ff99 	bl	800a260 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a32e:	2300      	movs	r3, #0
 800a330:	61fb      	str	r3, [r7, #28]
 800a332:	e004      	b.n	800a33e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	2200      	movs	r2, #0
 800a338:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a33a:	2301      	movs	r3, #1
 800a33c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a33e:	f001 f85d 	bl	800b3fc <vPortExitCritical>

	return xReturn;
 800a342:	69fb      	ldr	r3, [r7, #28]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	2004157c 	.word	0x2004157c
 800a350:	20041590 	.word	0x20041590

0800a354 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a354:	b480      	push	{r7}
 800a356:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a358:	4b03      	ldr	r3, [pc, #12]	@ (800a368 <vTaskMissedYield+0x14>)
 800a35a:	2201      	movs	r2, #1
 800a35c:	601a      	str	r2, [r3, #0]
}
 800a35e:	bf00      	nop
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	2004158c 	.word	0x2004158c

0800a36c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a374:	f000 f852 	bl	800a41c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a378:	4b06      	ldr	r3, [pc, #24]	@ (800a394 <prvIdleTask+0x28>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d9f9      	bls.n	800a374 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a380:	4b05      	ldr	r3, [pc, #20]	@ (800a398 <prvIdleTask+0x2c>)
 800a382:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	f3bf 8f4f 	dsb	sy
 800a38c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a390:	e7f0      	b.n	800a374 <prvIdleTask+0x8>
 800a392:	bf00      	nop
 800a394:	200410a8 	.word	0x200410a8
 800a398:	e000ed04 	.word	0xe000ed04

0800a39c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	607b      	str	r3, [r7, #4]
 800a3a6:	e00c      	b.n	800a3c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4a12      	ldr	r2, [pc, #72]	@ (800a3fc <prvInitialiseTaskLists+0x60>)
 800a3b4:	4413      	add	r3, r2
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fe f8fa 	bl	80085b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	607b      	str	r3, [r7, #4]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b37      	cmp	r3, #55	@ 0x37
 800a3c6:	d9ef      	bls.n	800a3a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a3c8:	480d      	ldr	r0, [pc, #52]	@ (800a400 <prvInitialiseTaskLists+0x64>)
 800a3ca:	f7fe f8f1 	bl	80085b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3ce:	480d      	ldr	r0, [pc, #52]	@ (800a404 <prvInitialiseTaskLists+0x68>)
 800a3d0:	f7fe f8ee 	bl	80085b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a3d4:	480c      	ldr	r0, [pc, #48]	@ (800a408 <prvInitialiseTaskLists+0x6c>)
 800a3d6:	f7fe f8eb 	bl	80085b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a3da:	480c      	ldr	r0, [pc, #48]	@ (800a40c <prvInitialiseTaskLists+0x70>)
 800a3dc:	f7fe f8e8 	bl	80085b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3e0:	480b      	ldr	r0, [pc, #44]	@ (800a410 <prvInitialiseTaskLists+0x74>)
 800a3e2:	f7fe f8e5 	bl	80085b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a414 <prvInitialiseTaskLists+0x78>)
 800a3e8:	4a05      	ldr	r2, [pc, #20]	@ (800a400 <prvInitialiseTaskLists+0x64>)
 800a3ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a418 <prvInitialiseTaskLists+0x7c>)
 800a3ee:	4a05      	ldr	r2, [pc, #20]	@ (800a404 <prvInitialiseTaskLists+0x68>)
 800a3f0:	601a      	str	r2, [r3, #0]
}
 800a3f2:	bf00      	nop
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	200410a8 	.word	0x200410a8
 800a400:	20041508 	.word	0x20041508
 800a404:	2004151c 	.word	0x2004151c
 800a408:	20041538 	.word	0x20041538
 800a40c:	2004154c 	.word	0x2004154c
 800a410:	20041564 	.word	0x20041564
 800a414:	20041530 	.word	0x20041530
 800a418:	20041534 	.word	0x20041534

0800a41c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a422:	e019      	b.n	800a458 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a424:	f000 ffb8 	bl	800b398 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a428:	4b10      	ldr	r3, [pc, #64]	@ (800a46c <prvCheckTasksWaitingTermination+0x50>)
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3304      	adds	r3, #4
 800a434:	4618      	mov	r0, r3
 800a436:	f7fe f945 	bl	80086c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a43a:	4b0d      	ldr	r3, [pc, #52]	@ (800a470 <prvCheckTasksWaitingTermination+0x54>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	3b01      	subs	r3, #1
 800a440:	4a0b      	ldr	r2, [pc, #44]	@ (800a470 <prvCheckTasksWaitingTermination+0x54>)
 800a442:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a444:	4b0b      	ldr	r3, [pc, #44]	@ (800a474 <prvCheckTasksWaitingTermination+0x58>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3b01      	subs	r3, #1
 800a44a:	4a0a      	ldr	r2, [pc, #40]	@ (800a474 <prvCheckTasksWaitingTermination+0x58>)
 800a44c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a44e:	f000 ffd5 	bl	800b3fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 f810 	bl	800a478 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a458:	4b06      	ldr	r3, [pc, #24]	@ (800a474 <prvCheckTasksWaitingTermination+0x58>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e1      	bne.n	800a424 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a460:	bf00      	nop
 800a462:	bf00      	nop
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	2004154c 	.word	0x2004154c
 800a470:	20041578 	.word	0x20041578
 800a474:	20041560 	.word	0x20041560

0800a478 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	3354      	adds	r3, #84	@ 0x54
 800a484:	4618      	mov	r0, r3
 800a486:	f001 fa9f 	bl	800b9c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a490:	2b00      	cmp	r3, #0
 800a492:	d108      	bne.n	800a4a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a498:	4618      	mov	r0, r3
 800a49a:	f001 f96d 	bl	800b778 <vPortFree>
				vPortFree( pxTCB );
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f001 f96a 	bl	800b778 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a4a4:	e019      	b.n	800a4da <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d103      	bne.n	800a4b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f001 f961 	bl	800b778 <vPortFree>
	}
 800a4b6:	e010      	b.n	800a4da <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d00b      	beq.n	800a4da <prvDeleteTCB+0x62>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	60fb      	str	r3, [r7, #12]
}
 800a4d4:	bf00      	nop
 800a4d6:	bf00      	nop
 800a4d8:	e7fd      	b.n	800a4d6 <prvDeleteTCB+0x5e>
	}
 800a4da:	bf00      	nop
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
	...

0800a4e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a51c <prvResetNextTaskUnblockTime+0x38>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d104      	bne.n	800a4fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a520 <prvResetNextTaskUnblockTime+0x3c>)
 800a4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4fc:	e008      	b.n	800a510 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4fe:	4b07      	ldr	r3, [pc, #28]	@ (800a51c <prvResetNextTaskUnblockTime+0x38>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68db      	ldr	r3, [r3, #12]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	4a04      	ldr	r2, [pc, #16]	@ (800a520 <prvResetNextTaskUnblockTime+0x3c>)
 800a50e:	6013      	str	r3, [r2, #0]
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	20041530 	.word	0x20041530
 800a520:	20041598 	.word	0x20041598

0800a524 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a52a:	4b05      	ldr	r3, [pc, #20]	@ (800a540 <xTaskGetCurrentTaskHandle+0x1c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a530:	687b      	ldr	r3, [r7, #4]
	}
 800a532:	4618      	mov	r0, r3
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	200410a4 	.word	0x200410a4

0800a544 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a54a:	4b0b      	ldr	r3, [pc, #44]	@ (800a578 <xTaskGetSchedulerState+0x34>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d102      	bne.n	800a558 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a552:	2301      	movs	r3, #1
 800a554:	607b      	str	r3, [r7, #4]
 800a556:	e008      	b.n	800a56a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a558:	4b08      	ldr	r3, [pc, #32]	@ (800a57c <xTaskGetSchedulerState+0x38>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d102      	bne.n	800a566 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a560:	2302      	movs	r3, #2
 800a562:	607b      	str	r3, [r7, #4]
 800a564:	e001      	b.n	800a56a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a566:	2300      	movs	r3, #0
 800a568:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a56a:	687b      	ldr	r3, [r7, #4]
	}
 800a56c:	4618      	mov	r0, r3
 800a56e:	370c      	adds	r7, #12
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	20041584 	.word	0x20041584
 800a57c:	200415a0 	.word	0x200415a0

0800a580 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a58c:	2300      	movs	r3, #0
 800a58e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d051      	beq.n	800a63a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a59a:	4b2a      	ldr	r3, [pc, #168]	@ (800a644 <xTaskPriorityInherit+0xc4>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d241      	bcs.n	800a628 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	699b      	ldr	r3, [r3, #24]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	db06      	blt.n	800a5ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5ac:	4b25      	ldr	r3, [pc, #148]	@ (800a644 <xTaskPriorityInherit+0xc4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	6959      	ldr	r1, [r3, #20]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5c2:	4613      	mov	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	4413      	add	r3, r2
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	4a1f      	ldr	r2, [pc, #124]	@ (800a648 <xTaskPriorityInherit+0xc8>)
 800a5cc:	4413      	add	r3, r2
 800a5ce:	4299      	cmp	r1, r3
 800a5d0:	d122      	bne.n	800a618 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fe f874 	bl	80086c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a5dc:	4b19      	ldr	r3, [pc, #100]	@ (800a644 <xTaskPriorityInherit+0xc4>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5ea:	4b18      	ldr	r3, [pc, #96]	@ (800a64c <xTaskPriorityInherit+0xcc>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d903      	bls.n	800a5fa <xTaskPriorityInherit+0x7a>
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5f6:	4a15      	ldr	r2, [pc, #84]	@ (800a64c <xTaskPriorityInherit+0xcc>)
 800a5f8:	6013      	str	r3, [r2, #0]
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5fe:	4613      	mov	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4413      	add	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	4a10      	ldr	r2, [pc, #64]	@ (800a648 <xTaskPriorityInherit+0xc8>)
 800a608:	441a      	add	r2, r3
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	3304      	adds	r3, #4
 800a60e:	4619      	mov	r1, r3
 800a610:	4610      	mov	r0, r2
 800a612:	f7fd fffa 	bl	800860a <vListInsertEnd>
 800a616:	e004      	b.n	800a622 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a618:	4b0a      	ldr	r3, [pc, #40]	@ (800a644 <xTaskPriorityInherit+0xc4>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a622:	2301      	movs	r3, #1
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	e008      	b.n	800a63a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a62c:	4b05      	ldr	r3, [pc, #20]	@ (800a644 <xTaskPriorityInherit+0xc4>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a632:	429a      	cmp	r2, r3
 800a634:	d201      	bcs.n	800a63a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a636:	2301      	movs	r3, #1
 800a638:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a63a:	68fb      	ldr	r3, [r7, #12]
	}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	200410a4 	.word	0x200410a4
 800a648:	200410a8 	.word	0x200410a8
 800a64c:	20041580 	.word	0x20041580

0800a650 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d058      	beq.n	800a718 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a666:	4b2f      	ldr	r3, [pc, #188]	@ (800a724 <xTaskPriorityDisinherit+0xd4>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	693a      	ldr	r2, [r7, #16]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d00b      	beq.n	800a688 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a674:	f383 8811 	msr	BASEPRI, r3
 800a678:	f3bf 8f6f 	isb	sy
 800a67c:	f3bf 8f4f 	dsb	sy
 800a680:	60fb      	str	r3, [r7, #12]
}
 800a682:	bf00      	nop
 800a684:	bf00      	nop
 800a686:	e7fd      	b.n	800a684 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10b      	bne.n	800a6a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	60bb      	str	r3, [r7, #8]
}
 800a6a2:	bf00      	nop
 800a6a4:	bf00      	nop
 800a6a6:	e7fd      	b.n	800a6a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6ac:	1e5a      	subs	r2, r3, #1
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d02c      	beq.n	800a718 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d128      	bne.n	800a718 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fd fffa 	bl	80086c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a728 <xTaskPriorityDisinherit+0xd8>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d903      	bls.n	800a6f8 <xTaskPriorityDisinherit+0xa8>
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f4:	4a0c      	ldr	r2, [pc, #48]	@ (800a728 <xTaskPriorityDisinherit+0xd8>)
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4a09      	ldr	r2, [pc, #36]	@ (800a72c <xTaskPriorityDisinherit+0xdc>)
 800a706:	441a      	add	r2, r3
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	f7fd ff7b 	bl	800860a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a714:	2301      	movs	r3, #1
 800a716:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a718:	697b      	ldr	r3, [r7, #20]
	}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	200410a4 	.word	0x200410a4
 800a728:	20041580 	.word	0x20041580
 800a72c:	200410a8 	.word	0x200410a8

0800a730 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a73e:	2301      	movs	r3, #1
 800a740:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d06c      	beq.n	800a822 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d10b      	bne.n	800a768 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	60fb      	str	r3, [r7, #12]
}
 800a762:	bf00      	nop
 800a764:	bf00      	nop
 800a766:	e7fd      	b.n	800a764 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d902      	bls.n	800a778 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	61fb      	str	r3, [r7, #28]
 800a776:	e002      	b.n	800a77e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a77c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a782:	69fa      	ldr	r2, [r7, #28]
 800a784:	429a      	cmp	r2, r3
 800a786:	d04c      	beq.n	800a822 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	429a      	cmp	r2, r3
 800a790:	d147      	bne.n	800a822 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a792:	4b26      	ldr	r3, [pc, #152]	@ (800a82c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	69ba      	ldr	r2, [r7, #24]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d10b      	bne.n	800a7b4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	60bb      	str	r3, [r7, #8]
}
 800a7ae:	bf00      	nop
 800a7b0:	bf00      	nop
 800a7b2:	e7fd      	b.n	800a7b0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	69fa      	ldr	r2, [r7, #28]
 800a7be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	699b      	ldr	r3, [r3, #24]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	db04      	blt.n	800a7d2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	6959      	ldr	r1, [r3, #20]
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	4613      	mov	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	4413      	add	r3, r2
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	4a13      	ldr	r2, [pc, #76]	@ (800a830 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a7e2:	4413      	add	r3, r2
 800a7e4:	4299      	cmp	r1, r3
 800a7e6:	d11c      	bne.n	800a822 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	3304      	adds	r3, #4
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7fd ff69 	bl	80086c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7f6:	4b0f      	ldr	r3, [pc, #60]	@ (800a834 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d903      	bls.n	800a806 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a802:	4a0c      	ldr	r2, [pc, #48]	@ (800a834 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a804:	6013      	str	r3, [r2, #0]
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a80a:	4613      	mov	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4a07      	ldr	r2, [pc, #28]	@ (800a830 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a814:	441a      	add	r2, r3
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	3304      	adds	r3, #4
 800a81a:	4619      	mov	r1, r3
 800a81c:	4610      	mov	r0, r2
 800a81e:	f7fd fef4 	bl	800860a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a822:	bf00      	nop
 800a824:	3720      	adds	r7, #32
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	200410a4 	.word	0x200410a4
 800a830:	200410a8 	.word	0x200410a8
 800a834:	20041580 	.word	0x20041580

0800a838 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a838:	b480      	push	{r7}
 800a83a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a83c:	4b07      	ldr	r3, [pc, #28]	@ (800a85c <pvTaskIncrementMutexHeldCount+0x24>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d004      	beq.n	800a84e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a844:	4b05      	ldr	r3, [pc, #20]	@ (800a85c <pvTaskIncrementMutexHeldCount+0x24>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a84a:	3201      	adds	r2, #1
 800a84c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a84e:	4b03      	ldr	r3, [pc, #12]	@ (800a85c <pvTaskIncrementMutexHeldCount+0x24>)
 800a850:	681b      	ldr	r3, [r3, #0]
	}
 800a852:	4618      	mov	r0, r3
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	200410a4 	.word	0x200410a4

0800a860 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a86a:	4b21      	ldr	r3, [pc, #132]	@ (800a8f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a870:	4b20      	ldr	r3, [pc, #128]	@ (800a8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	3304      	adds	r3, #4
 800a876:	4618      	mov	r0, r3
 800a878:	f7fd ff24 	bl	80086c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a882:	d10a      	bne.n	800a89a <prvAddCurrentTaskToDelayedList+0x3a>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d007      	beq.n	800a89a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a88a:	4b1a      	ldr	r3, [pc, #104]	@ (800a8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3304      	adds	r3, #4
 800a890:	4619      	mov	r1, r3
 800a892:	4819      	ldr	r0, [pc, #100]	@ (800a8f8 <prvAddCurrentTaskToDelayedList+0x98>)
 800a894:	f7fd feb9 	bl	800860a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a898:	e026      	b.n	800a8e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4413      	add	r3, r2
 800a8a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8a2:	4b14      	ldr	r3, [pc, #80]	@ (800a8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	68ba      	ldr	r2, [r7, #8]
 800a8a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8aa:	68ba      	ldr	r2, [r7, #8]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d209      	bcs.n	800a8c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8b2:	4b12      	ldr	r3, [pc, #72]	@ (800a8fc <prvAddCurrentTaskToDelayedList+0x9c>)
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	4619      	mov	r1, r3
 800a8be:	4610      	mov	r0, r2
 800a8c0:	f7fd fec7 	bl	8008652 <vListInsert>
}
 800a8c4:	e010      	b.n	800a8e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8c6:	4b0e      	ldr	r3, [pc, #56]	@ (800a900 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a8f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3304      	adds	r3, #4
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	4610      	mov	r0, r2
 800a8d4:	f7fd febd 	bl	8008652 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a904 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d202      	bcs.n	800a8e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a8e2:	4a08      	ldr	r2, [pc, #32]	@ (800a904 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	6013      	str	r3, [r2, #0]
}
 800a8e8:	bf00      	nop
 800a8ea:	3710      	adds	r7, #16
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	2004157c 	.word	0x2004157c
 800a8f4:	200410a4 	.word	0x200410a4
 800a8f8:	20041564 	.word	0x20041564
 800a8fc:	20041534 	.word	0x20041534
 800a900:	20041530 	.word	0x20041530
 800a904:	20041598 	.word	0x20041598

0800a908 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08a      	sub	sp, #40	@ 0x28
 800a90c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a90e:	2300      	movs	r3, #0
 800a910:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a912:	f000 fbb1 	bl	800b078 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a916:	4b1d      	ldr	r3, [pc, #116]	@ (800a98c <xTimerCreateTimerTask+0x84>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d021      	beq.n	800a962 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a922:	2300      	movs	r3, #0
 800a924:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a926:	1d3a      	adds	r2, r7, #4
 800a928:	f107 0108 	add.w	r1, r7, #8
 800a92c:	f107 030c 	add.w	r3, r7, #12
 800a930:	4618      	mov	r0, r3
 800a932:	f7fd fe23 	bl	800857c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a936:	6879      	ldr	r1, [r7, #4]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	9202      	str	r2, [sp, #8]
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	2302      	movs	r3, #2
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	2300      	movs	r3, #0
 800a946:	460a      	mov	r2, r1
 800a948:	4911      	ldr	r1, [pc, #68]	@ (800a990 <xTimerCreateTimerTask+0x88>)
 800a94a:	4812      	ldr	r0, [pc, #72]	@ (800a994 <xTimerCreateTimerTask+0x8c>)
 800a94c:	f7fe ffc8 	bl	80098e0 <xTaskCreateStatic>
 800a950:	4603      	mov	r3, r0
 800a952:	4a11      	ldr	r2, [pc, #68]	@ (800a998 <xTimerCreateTimerTask+0x90>)
 800a954:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a956:	4b10      	ldr	r3, [pc, #64]	@ (800a998 <xTimerCreateTimerTask+0x90>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d001      	beq.n	800a962 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a95e:	2301      	movs	r3, #1
 800a960:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10b      	bne.n	800a980 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96c:	f383 8811 	msr	BASEPRI, r3
 800a970:	f3bf 8f6f 	isb	sy
 800a974:	f3bf 8f4f 	dsb	sy
 800a978:	613b      	str	r3, [r7, #16]
}
 800a97a:	bf00      	nop
 800a97c:	bf00      	nop
 800a97e:	e7fd      	b.n	800a97c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a980:	697b      	ldr	r3, [r7, #20]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	200415d4 	.word	0x200415d4
 800a990:	0800bc30 	.word	0x0800bc30
 800a994:	0800ac11 	.word	0x0800ac11
 800a998:	200415d8 	.word	0x200415d8

0800a99c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b088      	sub	sp, #32
 800a9a0:	af02      	add	r7, sp, #8
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
 800a9a8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a9aa:	202c      	movs	r0, #44	@ 0x2c
 800a9ac:	f000 fe16 	bl	800b5dc <pvPortMalloc>
 800a9b0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00d      	beq.n	800a9d4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	9301      	str	r3, [sp, #4]
 800a9c4:	6a3b      	ldr	r3, [r7, #32]
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	68b9      	ldr	r1, [r7, #8]
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f000 f845 	bl	800aa5e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800a9d4:	697b      	ldr	r3, [r7, #20]
	}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3718      	adds	r7, #24
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b08a      	sub	sp, #40	@ 0x28
 800a9e2:	af02      	add	r7, sp, #8
 800a9e4:	60f8      	str	r0, [r7, #12]
 800a9e6:	60b9      	str	r1, [r7, #8]
 800a9e8:	607a      	str	r2, [r7, #4]
 800a9ea:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800a9ec:	232c      	movs	r3, #44	@ 0x2c
 800a9ee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	2b2c      	cmp	r3, #44	@ 0x2c
 800a9f4:	d00b      	beq.n	800aa0e <xTimerCreateStatic+0x30>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	61bb      	str	r3, [r7, #24]
}
 800aa08:	bf00      	nop
 800aa0a:	bf00      	nop
 800aa0c:	e7fd      	b.n	800aa0a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aa0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800aa10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10b      	bne.n	800aa2e <xTimerCreateStatic+0x50>
	__asm volatile
 800aa16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1a:	f383 8811 	msr	BASEPRI, r3
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f3bf 8f4f 	dsb	sy
 800aa26:	617b      	str	r3, [r7, #20]
}
 800aa28:	bf00      	nop
 800aa2a:	bf00      	nop
 800aa2c:	e7fd      	b.n	800aa2a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800aa2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa30:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00d      	beq.n	800aa54 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	9301      	str	r3, [sp, #4]
 800aa44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f000 f805 	bl	800aa5e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800aa54:	69fb      	ldr	r3, [r7, #28]
	}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3720      	adds	r7, #32
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}

0800aa5e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b086      	sub	sp, #24
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	60f8      	str	r0, [r7, #12]
 800aa66:	60b9      	str	r1, [r7, #8]
 800aa68:	607a      	str	r2, [r7, #4]
 800aa6a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d10b      	bne.n	800aa8a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800aa72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	617b      	str	r3, [r7, #20]
}
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop
 800aa88:	e7fd      	b.n	800aa86 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01e      	beq.n	800aace <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800aa90:	f000 faf2 	bl	800b078 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800aa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa8:	6a3a      	ldr	r2, [r7, #32]
 800aaaa:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800aaac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaae:	3304      	adds	r3, #4
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fd fd9d 	bl	80085f0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d008      	beq.n	800aace <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800aabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aac2:	f043 0304 	orr.w	r3, r3, #4
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800aace:	bf00      	nop
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
	...

0800aad8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b08a      	sub	sp, #40	@ 0x28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aae6:	2300      	movs	r3, #0
 800aae8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10b      	bne.n	800ab08 <xTimerGenericCommand+0x30>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaf4:	f383 8811 	msr	BASEPRI, r3
 800aaf8:	f3bf 8f6f 	isb	sy
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	623b      	str	r3, [r7, #32]
}
 800ab02:	bf00      	nop
 800ab04:	bf00      	nop
 800ab06:	e7fd      	b.n	800ab04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab08:	4b19      	ldr	r3, [pc, #100]	@ (800ab70 <xTimerGenericCommand+0x98>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d02a      	beq.n	800ab66 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	2b05      	cmp	r3, #5
 800ab20:	dc18      	bgt.n	800ab54 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab22:	f7ff fd0f 	bl	800a544 <xTaskGetSchedulerState>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d109      	bne.n	800ab40 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab2c:	4b10      	ldr	r3, [pc, #64]	@ (800ab70 <xTimerGenericCommand+0x98>)
 800ab2e:	6818      	ldr	r0, [r3, #0]
 800ab30:	f107 0110 	add.w	r1, r7, #16
 800ab34:	2300      	movs	r3, #0
 800ab36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab38:	f7fe f85a 	bl	8008bf0 <xQueueGenericSend>
 800ab3c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab3e:	e012      	b.n	800ab66 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab40:	4b0b      	ldr	r3, [pc, #44]	@ (800ab70 <xTimerGenericCommand+0x98>)
 800ab42:	6818      	ldr	r0, [r3, #0]
 800ab44:	f107 0110 	add.w	r1, r7, #16
 800ab48:	2300      	movs	r3, #0
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f7fe f850 	bl	8008bf0 <xQueueGenericSend>
 800ab50:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab52:	e008      	b.n	800ab66 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab54:	4b06      	ldr	r3, [pc, #24]	@ (800ab70 <xTimerGenericCommand+0x98>)
 800ab56:	6818      	ldr	r0, [r3, #0]
 800ab58:	f107 0110 	add.w	r1, r7, #16
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	f7fe f948 	bl	8008df4 <xQueueGenericSendFromISR>
 800ab64:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3728      	adds	r7, #40	@ 0x28
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	200415d4 	.word	0x200415d4

0800ab74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af02      	add	r7, sp, #8
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab7e:	4b23      	ldr	r3, [pc, #140]	@ (800ac0c <prvProcessExpiredTimer+0x98>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fd fd99 	bl	80086c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab98:	f003 0304 	and.w	r3, r3, #4
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d023      	beq.n	800abe8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	699a      	ldr	r2, [r3, #24]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	18d1      	adds	r1, r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	6978      	ldr	r0, [r7, #20]
 800abae:	f000 f8d5 	bl	800ad5c <prvInsertTimerInActiveList>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d020      	beq.n	800abfa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abb8:	2300      	movs	r3, #0
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	2300      	movs	r3, #0
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	2100      	movs	r1, #0
 800abc2:	6978      	ldr	r0, [r7, #20]
 800abc4:	f7ff ff88 	bl	800aad8 <xTimerGenericCommand>
 800abc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d114      	bne.n	800abfa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	60fb      	str	r3, [r7, #12]
}
 800abe2:	bf00      	nop
 800abe4:	bf00      	nop
 800abe6:	e7fd      	b.n	800abe4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abee:	f023 0301 	bic.w	r3, r3, #1
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	6978      	ldr	r0, [r7, #20]
 800ac00:	4798      	blx	r3
}
 800ac02:	bf00      	nop
 800ac04:	3718      	adds	r7, #24
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	200415cc 	.word	0x200415cc

0800ac10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac18:	f107 0308 	add.w	r3, r7, #8
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f000 f859 	bl	800acd4 <prvGetNextExpireTime>
 800ac22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	4619      	mov	r1, r3
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f000 f805 	bl	800ac38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac2e:	f000 f8d7 	bl	800ade0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac32:	bf00      	nop
 800ac34:	e7f0      	b.n	800ac18 <prvTimerTask+0x8>
	...

0800ac38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac42:	f7ff f87b 	bl	8009d3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac46:	f107 0308 	add.w	r3, r7, #8
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 f866 	bl	800ad1c <prvSampleTimeNow>
 800ac50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d130      	bne.n	800acba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10a      	bne.n	800ac74 <prvProcessTimerOrBlockTask+0x3c>
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d806      	bhi.n	800ac74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac66:	f7ff f877 	bl	8009d58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac6a:	68f9      	ldr	r1, [r7, #12]
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f7ff ff81 	bl	800ab74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac72:	e024      	b.n	800acbe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d008      	beq.n	800ac8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac7a:	4b13      	ldr	r3, [pc, #76]	@ (800acc8 <prvProcessTimerOrBlockTask+0x90>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d101      	bne.n	800ac88 <prvProcessTimerOrBlockTask+0x50>
 800ac84:	2301      	movs	r3, #1
 800ac86:	e000      	b.n	800ac8a <prvProcessTimerOrBlockTask+0x52>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac8c:	4b0f      	ldr	r3, [pc, #60]	@ (800accc <prvProcessTimerOrBlockTask+0x94>)
 800ac8e:	6818      	ldr	r0, [r3, #0]
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	f7fe fded 	bl	8009878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac9e:	f7ff f85b 	bl	8009d58 <xTaskResumeAll>
 800aca2:	4603      	mov	r3, r0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10a      	bne.n	800acbe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aca8:	4b09      	ldr	r3, [pc, #36]	@ (800acd0 <prvProcessTimerOrBlockTask+0x98>)
 800acaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	f3bf 8f6f 	isb	sy
}
 800acb8:	e001      	b.n	800acbe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800acba:	f7ff f84d 	bl	8009d58 <xTaskResumeAll>
}
 800acbe:	bf00      	nop
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	200415d0 	.word	0x200415d0
 800accc:	200415d4 	.word	0x200415d4
 800acd0:	e000ed04 	.word	0xe000ed04

0800acd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800acdc:	4b0e      	ldr	r3, [pc, #56]	@ (800ad18 <prvGetNextExpireTime+0x44>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <prvGetNextExpireTime+0x16>
 800ace6:	2201      	movs	r2, #1
 800ace8:	e000      	b.n	800acec <prvGetNextExpireTime+0x18>
 800acea:	2200      	movs	r2, #0
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d105      	bne.n	800ad04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acf8:	4b07      	ldr	r3, [pc, #28]	@ (800ad18 <prvGetNextExpireTime+0x44>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	60fb      	str	r3, [r7, #12]
 800ad02:	e001      	b.n	800ad08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad04:	2300      	movs	r3, #0
 800ad06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad08:	68fb      	ldr	r3, [r7, #12]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3714      	adds	r7, #20
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop
 800ad18:	200415cc 	.word	0x200415cc

0800ad1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad24:	f7ff f8b6 	bl	8009e94 <xTaskGetTickCount>
 800ad28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad58 <prvSampleTimeNow+0x3c>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d205      	bcs.n	800ad40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad34:	f000 f93a 	bl	800afac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	601a      	str	r2, [r3, #0]
 800ad3e:	e002      	b.n	800ad46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad46:	4a04      	ldr	r2, [pc, #16]	@ (800ad58 <prvSampleTimeNow+0x3c>)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	200415dc 	.word	0x200415dc

0800ad5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
 800ad68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d812      	bhi.n	800ada8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	1ad2      	subs	r2, r2, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d302      	bcc.n	800ad96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad90:	2301      	movs	r3, #1
 800ad92:	617b      	str	r3, [r7, #20]
 800ad94:	e01b      	b.n	800adce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad96:	4b10      	ldr	r3, [pc, #64]	@ (800add8 <prvInsertTimerInActiveList+0x7c>)
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4610      	mov	r0, r2
 800ada2:	f7fd fc56 	bl	8008652 <vListInsert>
 800ada6:	e012      	b.n	800adce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d206      	bcs.n	800adbe <prvInsertTimerInActiveList+0x62>
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d302      	bcc.n	800adbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800adb8:	2301      	movs	r3, #1
 800adba:	617b      	str	r3, [r7, #20]
 800adbc:	e007      	b.n	800adce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800adbe:	4b07      	ldr	r3, [pc, #28]	@ (800addc <prvInsertTimerInActiveList+0x80>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	3304      	adds	r3, #4
 800adc6:	4619      	mov	r1, r3
 800adc8:	4610      	mov	r0, r2
 800adca:	f7fd fc42 	bl	8008652 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800adce:	697b      	ldr	r3, [r7, #20]
}
 800add0:	4618      	mov	r0, r3
 800add2:	3718      	adds	r7, #24
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}
 800add8:	200415d0 	.word	0x200415d0
 800addc:	200415cc 	.word	0x200415cc

0800ade0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b08e      	sub	sp, #56	@ 0x38
 800ade4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ade6:	e0ce      	b.n	800af86 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	da19      	bge.n	800ae22 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800adee:	1d3b      	adds	r3, r7, #4
 800adf0:	3304      	adds	r3, #4
 800adf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800adf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10b      	bne.n	800ae12 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	61fb      	str	r3, [r7, #28]
}
 800ae0c:	bf00      	nop
 800ae0e:	bf00      	nop
 800ae10:	e7fd      	b.n	800ae0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae18:	6850      	ldr	r0, [r2, #4]
 800ae1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae1c:	6892      	ldr	r2, [r2, #8]
 800ae1e:	4611      	mov	r1, r2
 800ae20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f2c0 80ae 	blt.w	800af86 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d004      	beq.n	800ae40 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae38:	3304      	adds	r3, #4
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fd fc42 	bl	80086c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae40:	463b      	mov	r3, r7
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7ff ff6a 	bl	800ad1c <prvSampleTimeNow>
 800ae48:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b09      	cmp	r3, #9
 800ae4e:	f200 8097 	bhi.w	800af80 <prvProcessReceivedCommands+0x1a0>
 800ae52:	a201      	add	r2, pc, #4	@ (adr r2, 800ae58 <prvProcessReceivedCommands+0x78>)
 800ae54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae58:	0800ae81 	.word	0x0800ae81
 800ae5c:	0800ae81 	.word	0x0800ae81
 800ae60:	0800ae81 	.word	0x0800ae81
 800ae64:	0800aef7 	.word	0x0800aef7
 800ae68:	0800af0b 	.word	0x0800af0b
 800ae6c:	0800af57 	.word	0x0800af57
 800ae70:	0800ae81 	.word	0x0800ae81
 800ae74:	0800ae81 	.word	0x0800ae81
 800ae78:	0800aef7 	.word	0x0800aef7
 800ae7c:	0800af0b 	.word	0x0800af0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae86:	f043 0301 	orr.w	r3, r3, #1
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	18d1      	adds	r1, r2, r3
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aea0:	f7ff ff5c 	bl	800ad5c <prvInsertTimerInActiveList>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d06c      	beq.n	800af84 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aeaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aeb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d061      	beq.n	800af84 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aec0:	68ba      	ldr	r2, [r7, #8]
 800aec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	441a      	add	r2, r3
 800aec8:	2300      	movs	r3, #0
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	2300      	movs	r3, #0
 800aece:	2100      	movs	r1, #0
 800aed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aed2:	f7ff fe01 	bl	800aad8 <xTimerGenericCommand>
 800aed6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aed8:	6a3b      	ldr	r3, [r7, #32]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d152      	bne.n	800af84 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	61bb      	str	r3, [r7, #24]
}
 800aef0:	bf00      	nop
 800aef2:	bf00      	nop
 800aef4:	e7fd      	b.n	800aef2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aefc:	f023 0301 	bic.w	r3, r3, #1
 800af00:	b2da      	uxtb	r2, r3
 800af02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800af08:	e03d      	b.n	800af86 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af10:	f043 0301 	orr.w	r3, r3, #1
 800af14:	b2da      	uxtb	r2, r3
 800af16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10b      	bne.n	800af42 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	617b      	str	r3, [r7, #20]
}
 800af3c:	bf00      	nop
 800af3e:	bf00      	nop
 800af40:	e7fd      	b.n	800af3e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af48:	18d1      	adds	r1, r2, r3
 800af4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af50:	f7ff ff04 	bl	800ad5c <prvInsertTimerInActiveList>
					break;
 800af54:	e017      	b.n	800af86 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af5c:	f003 0302 	and.w	r3, r3, #2
 800af60:	2b00      	cmp	r3, #0
 800af62:	d103      	bne.n	800af6c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800af64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af66:	f000 fc07 	bl	800b778 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af6a:	e00c      	b.n	800af86 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af72:	f023 0301 	bic.w	r3, r3, #1
 800af76:	b2da      	uxtb	r2, r3
 800af78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800af7e:	e002      	b.n	800af86 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800af80:	bf00      	nop
 800af82:	e000      	b.n	800af86 <prvProcessReceivedCommands+0x1a6>
					break;
 800af84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af86:	4b08      	ldr	r3, [pc, #32]	@ (800afa8 <prvProcessReceivedCommands+0x1c8>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	1d39      	adds	r1, r7, #4
 800af8c:	2200      	movs	r2, #0
 800af8e:	4618      	mov	r0, r3
 800af90:	f7fe f85e 	bl	8009050 <xQueueReceive>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	f47f af26 	bne.w	800ade8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800af9c:	bf00      	nop
 800af9e:	bf00      	nop
 800afa0:	3730      	adds	r7, #48	@ 0x30
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	200415d4 	.word	0x200415d4

0800afac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b088      	sub	sp, #32
 800afb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afb2:	e049      	b.n	800b048 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afb4:	4b2e      	ldr	r3, [pc, #184]	@ (800b070 <prvSwitchTimerLists+0xc4>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afbe:	4b2c      	ldr	r3, [pc, #176]	@ (800b070 <prvSwitchTimerLists+0xc4>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	3304      	adds	r3, #4
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fd fb79 	bl	80086c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	6a1b      	ldr	r3, [r3, #32]
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afe0:	f003 0304 	and.w	r3, r3, #4
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d02f      	beq.n	800b048 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	699b      	ldr	r3, [r3, #24]
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	4413      	add	r3, r2
 800aff0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d90e      	bls.n	800b018 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b006:	4b1a      	ldr	r3, [pc, #104]	@ (800b070 <prvSwitchTimerLists+0xc4>)
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	3304      	adds	r3, #4
 800b00e:	4619      	mov	r1, r3
 800b010:	4610      	mov	r0, r2
 800b012:	f7fd fb1e 	bl	8008652 <vListInsert>
 800b016:	e017      	b.n	800b048 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b018:	2300      	movs	r3, #0
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	2300      	movs	r3, #0
 800b01e:	693a      	ldr	r2, [r7, #16]
 800b020:	2100      	movs	r1, #0
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f7ff fd58 	bl	800aad8 <xTimerGenericCommand>
 800b028:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10b      	bne.n	800b048 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b034:	f383 8811 	msr	BASEPRI, r3
 800b038:	f3bf 8f6f 	isb	sy
 800b03c:	f3bf 8f4f 	dsb	sy
 800b040:	603b      	str	r3, [r7, #0]
}
 800b042:	bf00      	nop
 800b044:	bf00      	nop
 800b046:	e7fd      	b.n	800b044 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b048:	4b09      	ldr	r3, [pc, #36]	@ (800b070 <prvSwitchTimerLists+0xc4>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d1b0      	bne.n	800afb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b052:	4b07      	ldr	r3, [pc, #28]	@ (800b070 <prvSwitchTimerLists+0xc4>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b058:	4b06      	ldr	r3, [pc, #24]	@ (800b074 <prvSwitchTimerLists+0xc8>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a04      	ldr	r2, [pc, #16]	@ (800b070 <prvSwitchTimerLists+0xc4>)
 800b05e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b060:	4a04      	ldr	r2, [pc, #16]	@ (800b074 <prvSwitchTimerLists+0xc8>)
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	6013      	str	r3, [r2, #0]
}
 800b066:	bf00      	nop
 800b068:	3718      	adds	r7, #24
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	200415cc 	.word	0x200415cc
 800b074:	200415d0 	.word	0x200415d0

0800b078 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b07e:	f000 f98b 	bl	800b398 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b082:	4b15      	ldr	r3, [pc, #84]	@ (800b0d8 <prvCheckForValidListAndQueue+0x60>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d120      	bne.n	800b0cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b08a:	4814      	ldr	r0, [pc, #80]	@ (800b0dc <prvCheckForValidListAndQueue+0x64>)
 800b08c:	f7fd fa90 	bl	80085b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b090:	4813      	ldr	r0, [pc, #76]	@ (800b0e0 <prvCheckForValidListAndQueue+0x68>)
 800b092:	f7fd fa8d 	bl	80085b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b096:	4b13      	ldr	r3, [pc, #76]	@ (800b0e4 <prvCheckForValidListAndQueue+0x6c>)
 800b098:	4a10      	ldr	r2, [pc, #64]	@ (800b0dc <prvCheckForValidListAndQueue+0x64>)
 800b09a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b09c:	4b12      	ldr	r3, [pc, #72]	@ (800b0e8 <prvCheckForValidListAndQueue+0x70>)
 800b09e:	4a10      	ldr	r2, [pc, #64]	@ (800b0e0 <prvCheckForValidListAndQueue+0x68>)
 800b0a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	9300      	str	r3, [sp, #0]
 800b0a6:	4b11      	ldr	r3, [pc, #68]	@ (800b0ec <prvCheckForValidListAndQueue+0x74>)
 800b0a8:	4a11      	ldr	r2, [pc, #68]	@ (800b0f0 <prvCheckForValidListAndQueue+0x78>)
 800b0aa:	2110      	movs	r1, #16
 800b0ac:	200a      	movs	r0, #10
 800b0ae:	f7fd fb9d 	bl	80087ec <xQueueGenericCreateStatic>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	4a08      	ldr	r2, [pc, #32]	@ (800b0d8 <prvCheckForValidListAndQueue+0x60>)
 800b0b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b0b8:	4b07      	ldr	r3, [pc, #28]	@ (800b0d8 <prvCheckForValidListAndQueue+0x60>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d005      	beq.n	800b0cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b0c0:	4b05      	ldr	r3, [pc, #20]	@ (800b0d8 <prvCheckForValidListAndQueue+0x60>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	490b      	ldr	r1, [pc, #44]	@ (800b0f4 <prvCheckForValidListAndQueue+0x7c>)
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fe fb82 	bl	80097d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0cc:	f000 f996 	bl	800b3fc <vPortExitCritical>
}
 800b0d0:	bf00      	nop
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	200415d4 	.word	0x200415d4
 800b0dc:	200415a4 	.word	0x200415a4
 800b0e0:	200415b8 	.word	0x200415b8
 800b0e4:	200415cc 	.word	0x200415cc
 800b0e8:	200415d0 	.word	0x200415d0
 800b0ec:	20041680 	.word	0x20041680
 800b0f0:	200415e0 	.word	0x200415e0
 800b0f4:	0800bc38 	.word	0x0800bc38

0800b0f8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b086      	sub	sp, #24
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10b      	bne.n	800b122 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800b10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b10e:	f383 8811 	msr	BASEPRI, r3
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	60fb      	str	r3, [r7, #12]
}
 800b11c:	bf00      	nop
 800b11e:	bf00      	nop
 800b120:	e7fd      	b.n	800b11e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b122:	f000 f939 	bl	800b398 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	69db      	ldr	r3, [r3, #28]
 800b12a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b12c:	f000 f966 	bl	800b3fc <vPortExitCritical>

	return pvReturn;
 800b130:	693b      	ldr	r3, [r7, #16]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
	...

0800b13c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	3b04      	subs	r3, #4
 800b14c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3b04      	subs	r3, #4
 800b15a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	f023 0201 	bic.w	r2, r3, #1
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3b04      	subs	r3, #4
 800b16a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b16c:	4a0c      	ldr	r2, [pc, #48]	@ (800b1a0 <pxPortInitialiseStack+0x64>)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3b14      	subs	r3, #20
 800b176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3b04      	subs	r3, #4
 800b182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f06f 0202 	mvn.w	r2, #2
 800b18a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3b20      	subs	r3, #32
 800b190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b192:	68fb      	ldr	r3, [r7, #12]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	0800b1a5 	.word	0x0800b1a5

0800b1a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b1ae:	4b13      	ldr	r3, [pc, #76]	@ (800b1fc <prvTaskExitError+0x58>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b6:	d00b      	beq.n	800b1d0 <prvTaskExitError+0x2c>
	__asm volatile
 800b1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1bc:	f383 8811 	msr	BASEPRI, r3
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	60fb      	str	r3, [r7, #12]
}
 800b1ca:	bf00      	nop
 800b1cc:	bf00      	nop
 800b1ce:	e7fd      	b.n	800b1cc <prvTaskExitError+0x28>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	60bb      	str	r3, [r7, #8]
}
 800b1e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1e4:	bf00      	nop
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d0fc      	beq.n	800b1e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1ec:	bf00      	nop
 800b1ee:	bf00      	nop
 800b1f0:	3714      	adds	r7, #20
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
 800b1fa:	bf00      	nop
 800b1fc:	20040024 	.word	0x20040024

0800b200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b200:	4b07      	ldr	r3, [pc, #28]	@ (800b220 <pxCurrentTCBConst2>)
 800b202:	6819      	ldr	r1, [r3, #0]
 800b204:	6808      	ldr	r0, [r1, #0]
 800b206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b20a:	f380 8809 	msr	PSP, r0
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f04f 0000 	mov.w	r0, #0
 800b216:	f380 8811 	msr	BASEPRI, r0
 800b21a:	4770      	bx	lr
 800b21c:	f3af 8000 	nop.w

0800b220 <pxCurrentTCBConst2>:
 800b220:	200410a4 	.word	0x200410a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b224:	bf00      	nop
 800b226:	bf00      	nop

0800b228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b228:	4808      	ldr	r0, [pc, #32]	@ (800b24c <prvPortStartFirstTask+0x24>)
 800b22a:	6800      	ldr	r0, [r0, #0]
 800b22c:	6800      	ldr	r0, [r0, #0]
 800b22e:	f380 8808 	msr	MSP, r0
 800b232:	f04f 0000 	mov.w	r0, #0
 800b236:	f380 8814 	msr	CONTROL, r0
 800b23a:	b662      	cpsie	i
 800b23c:	b661      	cpsie	f
 800b23e:	f3bf 8f4f 	dsb	sy
 800b242:	f3bf 8f6f 	isb	sy
 800b246:	df00      	svc	0
 800b248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b24a:	bf00      	nop
 800b24c:	e000ed08 	.word	0xe000ed08

0800b250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b086      	sub	sp, #24
 800b254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b256:	4b47      	ldr	r3, [pc, #284]	@ (800b374 <xPortStartScheduler+0x124>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a47      	ldr	r2, [pc, #284]	@ (800b378 <xPortStartScheduler+0x128>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d10b      	bne.n	800b278 <xPortStartScheduler+0x28>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	613b      	str	r3, [r7, #16]
}
 800b272:	bf00      	nop
 800b274:	bf00      	nop
 800b276:	e7fd      	b.n	800b274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b278:	4b3e      	ldr	r3, [pc, #248]	@ (800b374 <xPortStartScheduler+0x124>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a3f      	ldr	r2, [pc, #252]	@ (800b37c <xPortStartScheduler+0x12c>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d10b      	bne.n	800b29a <xPortStartScheduler+0x4a>
	__asm volatile
 800b282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b286:	f383 8811 	msr	BASEPRI, r3
 800b28a:	f3bf 8f6f 	isb	sy
 800b28e:	f3bf 8f4f 	dsb	sy
 800b292:	60fb      	str	r3, [r7, #12]
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop
 800b298:	e7fd      	b.n	800b296 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b29a:	4b39      	ldr	r3, [pc, #228]	@ (800b380 <xPortStartScheduler+0x130>)
 800b29c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	22ff      	movs	r2, #255	@ 0xff
 800b2aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2b4:	78fb      	ldrb	r3, [r7, #3]
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	4b31      	ldr	r3, [pc, #196]	@ (800b384 <xPortStartScheduler+0x134>)
 800b2c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2c2:	4b31      	ldr	r3, [pc, #196]	@ (800b388 <xPortStartScheduler+0x138>)
 800b2c4:	2207      	movs	r2, #7
 800b2c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2c8:	e009      	b.n	800b2de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b2ca:	4b2f      	ldr	r3, [pc, #188]	@ (800b388 <xPortStartScheduler+0x138>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	4a2d      	ldr	r2, [pc, #180]	@ (800b388 <xPortStartScheduler+0x138>)
 800b2d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2d4:	78fb      	ldrb	r3, [r7, #3]
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2de:	78fb      	ldrb	r3, [r7, #3]
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b2e6:	2b80      	cmp	r3, #128	@ 0x80
 800b2e8:	d0ef      	beq.n	800b2ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2ea:	4b27      	ldr	r3, [pc, #156]	@ (800b388 <xPortStartScheduler+0x138>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f1c3 0307 	rsb	r3, r3, #7
 800b2f2:	2b04      	cmp	r3, #4
 800b2f4:	d00b      	beq.n	800b30e <xPortStartScheduler+0xbe>
	__asm volatile
 800b2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	60bb      	str	r3, [r7, #8]
}
 800b308:	bf00      	nop
 800b30a:	bf00      	nop
 800b30c:	e7fd      	b.n	800b30a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b30e:	4b1e      	ldr	r3, [pc, #120]	@ (800b388 <xPortStartScheduler+0x138>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	021b      	lsls	r3, r3, #8
 800b314:	4a1c      	ldr	r2, [pc, #112]	@ (800b388 <xPortStartScheduler+0x138>)
 800b316:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b318:	4b1b      	ldr	r3, [pc, #108]	@ (800b388 <xPortStartScheduler+0x138>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b320:	4a19      	ldr	r2, [pc, #100]	@ (800b388 <xPortStartScheduler+0x138>)
 800b322:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	b2da      	uxtb	r2, r3
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b32c:	4b17      	ldr	r3, [pc, #92]	@ (800b38c <xPortStartScheduler+0x13c>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a16      	ldr	r2, [pc, #88]	@ (800b38c <xPortStartScheduler+0x13c>)
 800b332:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b336:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b338:	4b14      	ldr	r3, [pc, #80]	@ (800b38c <xPortStartScheduler+0x13c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a13      	ldr	r2, [pc, #76]	@ (800b38c <xPortStartScheduler+0x13c>)
 800b33e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b342:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b344:	f000 f8da 	bl	800b4fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b348:	4b11      	ldr	r3, [pc, #68]	@ (800b390 <xPortStartScheduler+0x140>)
 800b34a:	2200      	movs	r2, #0
 800b34c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b34e:	f000 f8f9 	bl	800b544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b352:	4b10      	ldr	r3, [pc, #64]	@ (800b394 <xPortStartScheduler+0x144>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a0f      	ldr	r2, [pc, #60]	@ (800b394 <xPortStartScheduler+0x144>)
 800b358:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b35c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b35e:	f7ff ff63 	bl	800b228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b362:	f7fe fe61 	bl	800a028 <vTaskSwitchContext>
	prvTaskExitError();
 800b366:	f7ff ff1d 	bl	800b1a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3718      	adds	r7, #24
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	e000ed00 	.word	0xe000ed00
 800b378:	410fc271 	.word	0x410fc271
 800b37c:	410fc270 	.word	0x410fc270
 800b380:	e000e400 	.word	0xe000e400
 800b384:	200416d0 	.word	0x200416d0
 800b388:	200416d4 	.word	0x200416d4
 800b38c:	e000ed20 	.word	0xe000ed20
 800b390:	20040024 	.word	0x20040024
 800b394:	e000ef34 	.word	0xe000ef34

0800b398 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	607b      	str	r3, [r7, #4]
}
 800b3b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3b2:	4b10      	ldr	r3, [pc, #64]	@ (800b3f4 <vPortEnterCritical+0x5c>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	4a0e      	ldr	r2, [pc, #56]	@ (800b3f4 <vPortEnterCritical+0x5c>)
 800b3ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800b3f4 <vPortEnterCritical+0x5c>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d110      	bne.n	800b3e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b3f8 <vPortEnterCritical+0x60>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00b      	beq.n	800b3e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d2:	f383 8811 	msr	BASEPRI, r3
 800b3d6:	f3bf 8f6f 	isb	sy
 800b3da:	f3bf 8f4f 	dsb	sy
 800b3de:	603b      	str	r3, [r7, #0]
}
 800b3e0:	bf00      	nop
 800b3e2:	bf00      	nop
 800b3e4:	e7fd      	b.n	800b3e2 <vPortEnterCritical+0x4a>
	}
}
 800b3e6:	bf00      	nop
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	20040024 	.word	0x20040024
 800b3f8:	e000ed04 	.word	0xe000ed04

0800b3fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b402:	4b12      	ldr	r3, [pc, #72]	@ (800b44c <vPortExitCritical+0x50>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10b      	bne.n	800b422 <vPortExitCritical+0x26>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	607b      	str	r3, [r7, #4]
}
 800b41c:	bf00      	nop
 800b41e:	bf00      	nop
 800b420:	e7fd      	b.n	800b41e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b422:	4b0a      	ldr	r3, [pc, #40]	@ (800b44c <vPortExitCritical+0x50>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	3b01      	subs	r3, #1
 800b428:	4a08      	ldr	r2, [pc, #32]	@ (800b44c <vPortExitCritical+0x50>)
 800b42a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b42c:	4b07      	ldr	r3, [pc, #28]	@ (800b44c <vPortExitCritical+0x50>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d105      	bne.n	800b440 <vPortExitCritical+0x44>
 800b434:	2300      	movs	r3, #0
 800b436:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	f383 8811 	msr	BASEPRI, r3
}
 800b43e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	20040024 	.word	0x20040024

0800b450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b450:	f3ef 8009 	mrs	r0, PSP
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	4b15      	ldr	r3, [pc, #84]	@ (800b4b0 <pxCurrentTCBConst>)
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	f01e 0f10 	tst.w	lr, #16
 800b460:	bf08      	it	eq
 800b462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46a:	6010      	str	r0, [r2, #0]
 800b46c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b474:	f380 8811 	msr	BASEPRI, r0
 800b478:	f3bf 8f4f 	dsb	sy
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f7fe fdd2 	bl	800a028 <vTaskSwitchContext>
 800b484:	f04f 0000 	mov.w	r0, #0
 800b488:	f380 8811 	msr	BASEPRI, r0
 800b48c:	bc09      	pop	{r0, r3}
 800b48e:	6819      	ldr	r1, [r3, #0]
 800b490:	6808      	ldr	r0, [r1, #0]
 800b492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b496:	f01e 0f10 	tst.w	lr, #16
 800b49a:	bf08      	it	eq
 800b49c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4a0:	f380 8809 	msr	PSP, r0
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	f3af 8000 	nop.w

0800b4b0 <pxCurrentTCBConst>:
 800b4b0:	200410a4 	.word	0x200410a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop

0800b4b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	607b      	str	r3, [r7, #4]
}
 800b4d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4d2:	f7fe fcef 	bl	8009eb4 <xTaskIncrementTick>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d003      	beq.n	800b4e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4dc:	4b06      	ldr	r3, [pc, #24]	@ (800b4f8 <xPortSysTickHandler+0x40>)
 800b4de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4e2:	601a      	str	r2, [r3, #0]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	f383 8811 	msr	BASEPRI, r3
}
 800b4ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	e000ed04 	.word	0xe000ed04

0800b4fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b500:	4b0b      	ldr	r3, [pc, #44]	@ (800b530 <vPortSetupTimerInterrupt+0x34>)
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b506:	4b0b      	ldr	r3, [pc, #44]	@ (800b534 <vPortSetupTimerInterrupt+0x38>)
 800b508:	2200      	movs	r2, #0
 800b50a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b50c:	4b0a      	ldr	r3, [pc, #40]	@ (800b538 <vPortSetupTimerInterrupt+0x3c>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a0a      	ldr	r2, [pc, #40]	@ (800b53c <vPortSetupTimerInterrupt+0x40>)
 800b512:	fba2 2303 	umull	r2, r3, r2, r3
 800b516:	099b      	lsrs	r3, r3, #6
 800b518:	4a09      	ldr	r2, [pc, #36]	@ (800b540 <vPortSetupTimerInterrupt+0x44>)
 800b51a:	3b01      	subs	r3, #1
 800b51c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b51e:	4b04      	ldr	r3, [pc, #16]	@ (800b530 <vPortSetupTimerInterrupt+0x34>)
 800b520:	2207      	movs	r2, #7
 800b522:	601a      	str	r2, [r3, #0]
}
 800b524:	bf00      	nop
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop
 800b530:	e000e010 	.word	0xe000e010
 800b534:	e000e018 	.word	0xe000e018
 800b538:	20040018 	.word	0x20040018
 800b53c:	10624dd3 	.word	0x10624dd3
 800b540:	e000e014 	.word	0xe000e014

0800b544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b544:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b554 <vPortEnableVFP+0x10>
 800b548:	6801      	ldr	r1, [r0, #0]
 800b54a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b54e:	6001      	str	r1, [r0, #0]
 800b550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b552:	bf00      	nop
 800b554:	e000ed88 	.word	0xe000ed88

0800b558 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b55e:	f3ef 8305 	mrs	r3, IPSR
 800b562:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2b0f      	cmp	r3, #15
 800b568:	d915      	bls.n	800b596 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b56a:	4a18      	ldr	r2, [pc, #96]	@ (800b5cc <vPortValidateInterruptPriority+0x74>)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	4413      	add	r3, r2
 800b570:	781b      	ldrb	r3, [r3, #0]
 800b572:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b574:	4b16      	ldr	r3, [pc, #88]	@ (800b5d0 <vPortValidateInterruptPriority+0x78>)
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	7afa      	ldrb	r2, [r7, #11]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d20b      	bcs.n	800b596 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
 800b58a:	f3bf 8f4f 	dsb	sy
 800b58e:	607b      	str	r3, [r7, #4]
}
 800b590:	bf00      	nop
 800b592:	bf00      	nop
 800b594:	e7fd      	b.n	800b592 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b596:	4b0f      	ldr	r3, [pc, #60]	@ (800b5d4 <vPortValidateInterruptPriority+0x7c>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b59e:	4b0e      	ldr	r3, [pc, #56]	@ (800b5d8 <vPortValidateInterruptPriority+0x80>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d90b      	bls.n	800b5be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	603b      	str	r3, [r7, #0]
}
 800b5b8:	bf00      	nop
 800b5ba:	bf00      	nop
 800b5bc:	e7fd      	b.n	800b5ba <vPortValidateInterruptPriority+0x62>
	}
 800b5be:	bf00      	nop
 800b5c0:	3714      	adds	r7, #20
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	e000e3f0 	.word	0xe000e3f0
 800b5d0:	200416d0 	.word	0x200416d0
 800b5d4:	e000ed0c 	.word	0xe000ed0c
 800b5d8:	200416d4 	.word	0x200416d4

0800b5dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b08a      	sub	sp, #40	@ 0x28
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5e8:	f7fe fba8 	bl	8009d3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5ec:	4b5c      	ldr	r3, [pc, #368]	@ (800b760 <pvPortMalloc+0x184>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5f4:	f000 f924 	bl	800b840 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5f8:	4b5a      	ldr	r3, [pc, #360]	@ (800b764 <pvPortMalloc+0x188>)
 800b5fa:	681a      	ldr	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	4013      	ands	r3, r2
 800b600:	2b00      	cmp	r3, #0
 800b602:	f040 8095 	bne.w	800b730 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d01e      	beq.n	800b64a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b60c:	2208      	movs	r2, #8
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4413      	add	r3, r2
 800b612:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f003 0307 	and.w	r3, r3, #7
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d015      	beq.n	800b64a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f023 0307 	bic.w	r3, r3, #7
 800b624:	3308      	adds	r3, #8
 800b626:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f003 0307 	and.w	r3, r3, #7
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00b      	beq.n	800b64a <pvPortMalloc+0x6e>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b636:	f383 8811 	msr	BASEPRI, r3
 800b63a:	f3bf 8f6f 	isb	sy
 800b63e:	f3bf 8f4f 	dsb	sy
 800b642:	617b      	str	r3, [r7, #20]
}
 800b644:	bf00      	nop
 800b646:	bf00      	nop
 800b648:	e7fd      	b.n	800b646 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d06f      	beq.n	800b730 <pvPortMalloc+0x154>
 800b650:	4b45      	ldr	r3, [pc, #276]	@ (800b768 <pvPortMalloc+0x18c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	429a      	cmp	r2, r3
 800b658:	d86a      	bhi.n	800b730 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b65a:	4b44      	ldr	r3, [pc, #272]	@ (800b76c <pvPortMalloc+0x190>)
 800b65c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b65e:	4b43      	ldr	r3, [pc, #268]	@ (800b76c <pvPortMalloc+0x190>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b664:	e004      	b.n	800b670 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b668:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	429a      	cmp	r2, r3
 800b678:	d903      	bls.n	800b682 <pvPortMalloc+0xa6>
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1f1      	bne.n	800b666 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b682:	4b37      	ldr	r3, [pc, #220]	@ (800b760 <pvPortMalloc+0x184>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b688:	429a      	cmp	r2, r3
 800b68a:	d051      	beq.n	800b730 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b68c:	6a3b      	ldr	r3, [r7, #32]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2208      	movs	r2, #8
 800b692:	4413      	add	r3, r2
 800b694:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	6a3b      	ldr	r3, [r7, #32]
 800b69c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	1ad2      	subs	r2, r2, r3
 800b6a6:	2308      	movs	r3, #8
 800b6a8:	005b      	lsls	r3, r3, #1
 800b6aa:	429a      	cmp	r2, r3
 800b6ac:	d920      	bls.n	800b6f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4413      	add	r3, r2
 800b6b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	f003 0307 	and.w	r3, r3, #7
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00b      	beq.n	800b6d8 <pvPortMalloc+0xfc>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c4:	f383 8811 	msr	BASEPRI, r3
 800b6c8:	f3bf 8f6f 	isb	sy
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	613b      	str	r3, [r7, #16]
}
 800b6d2:	bf00      	nop
 800b6d4:	bf00      	nop
 800b6d6:	e7fd      	b.n	800b6d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	1ad2      	subs	r2, r2, r3
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6ea:	69b8      	ldr	r0, [r7, #24]
 800b6ec:	f000 f90a 	bl	800b904 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6f0:	4b1d      	ldr	r3, [pc, #116]	@ (800b768 <pvPortMalloc+0x18c>)
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	4a1b      	ldr	r2, [pc, #108]	@ (800b768 <pvPortMalloc+0x18c>)
 800b6fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b768 <pvPortMalloc+0x18c>)
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	4b1b      	ldr	r3, [pc, #108]	@ (800b770 <pvPortMalloc+0x194>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	429a      	cmp	r2, r3
 800b708:	d203      	bcs.n	800b712 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b70a:	4b17      	ldr	r3, [pc, #92]	@ (800b768 <pvPortMalloc+0x18c>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a18      	ldr	r2, [pc, #96]	@ (800b770 <pvPortMalloc+0x194>)
 800b710:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b714:	685a      	ldr	r2, [r3, #4]
 800b716:	4b13      	ldr	r3, [pc, #76]	@ (800b764 <pvPortMalloc+0x188>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	431a      	orrs	r2, r3
 800b71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b71e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b722:	2200      	movs	r2, #0
 800b724:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b726:	4b13      	ldr	r3, [pc, #76]	@ (800b774 <pvPortMalloc+0x198>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3301      	adds	r3, #1
 800b72c:	4a11      	ldr	r2, [pc, #68]	@ (800b774 <pvPortMalloc+0x198>)
 800b72e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b730:	f7fe fb12 	bl	8009d58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	f003 0307 	and.w	r3, r3, #7
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00b      	beq.n	800b756 <pvPortMalloc+0x17a>
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	60fb      	str	r3, [r7, #12]
}
 800b750:	bf00      	nop
 800b752:	bf00      	nop
 800b754:	e7fd      	b.n	800b752 <pvPortMalloc+0x176>
	return pvReturn;
 800b756:	69fb      	ldr	r3, [r7, #28]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3728      	adds	r7, #40	@ 0x28
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	20042298 	.word	0x20042298
 800b764:	200422ac 	.word	0x200422ac
 800b768:	2004229c 	.word	0x2004229c
 800b76c:	20042290 	.word	0x20042290
 800b770:	200422a0 	.word	0x200422a0
 800b774:	200422a4 	.word	0x200422a4

0800b778 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b086      	sub	sp, #24
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d04f      	beq.n	800b82a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b78a:	2308      	movs	r3, #8
 800b78c:	425b      	negs	r3, r3
 800b78e:	697a      	ldr	r2, [r7, #20]
 800b790:	4413      	add	r3, r2
 800b792:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	685a      	ldr	r2, [r3, #4]
 800b79c:	4b25      	ldr	r3, [pc, #148]	@ (800b834 <vPortFree+0xbc>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10b      	bne.n	800b7be <vPortFree+0x46>
	__asm volatile
 800b7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7aa:	f383 8811 	msr	BASEPRI, r3
 800b7ae:	f3bf 8f6f 	isb	sy
 800b7b2:	f3bf 8f4f 	dsb	sy
 800b7b6:	60fb      	str	r3, [r7, #12]
}
 800b7b8:	bf00      	nop
 800b7ba:	bf00      	nop
 800b7bc:	e7fd      	b.n	800b7ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00b      	beq.n	800b7de <vPortFree+0x66>
	__asm volatile
 800b7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ca:	f383 8811 	msr	BASEPRI, r3
 800b7ce:	f3bf 8f6f 	isb	sy
 800b7d2:	f3bf 8f4f 	dsb	sy
 800b7d6:	60bb      	str	r3, [r7, #8]
}
 800b7d8:	bf00      	nop
 800b7da:	bf00      	nop
 800b7dc:	e7fd      	b.n	800b7da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	4b14      	ldr	r3, [pc, #80]	@ (800b834 <vPortFree+0xbc>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d01e      	beq.n	800b82a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d11a      	bne.n	800b82a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	685a      	ldr	r2, [r3, #4]
 800b7f8:	4b0e      	ldr	r3, [pc, #56]	@ (800b834 <vPortFree+0xbc>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	43db      	mvns	r3, r3
 800b7fe:	401a      	ands	r2, r3
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b804:	f7fe fa9a 	bl	8009d3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	4b0a      	ldr	r3, [pc, #40]	@ (800b838 <vPortFree+0xc0>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4413      	add	r3, r2
 800b812:	4a09      	ldr	r2, [pc, #36]	@ (800b838 <vPortFree+0xc0>)
 800b814:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b816:	6938      	ldr	r0, [r7, #16]
 800b818:	f000 f874 	bl	800b904 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b81c:	4b07      	ldr	r3, [pc, #28]	@ (800b83c <vPortFree+0xc4>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3301      	adds	r3, #1
 800b822:	4a06      	ldr	r2, [pc, #24]	@ (800b83c <vPortFree+0xc4>)
 800b824:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b826:	f7fe fa97 	bl	8009d58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b82a:	bf00      	nop
 800b82c:	3718      	adds	r7, #24
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	200422ac 	.word	0x200422ac
 800b838:	2004229c 	.word	0x2004229c
 800b83c:	200422a8 	.word	0x200422a8

0800b840 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b846:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b84a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b84c:	4b27      	ldr	r3, [pc, #156]	@ (800b8ec <prvHeapInit+0xac>)
 800b84e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f003 0307 	and.w	r3, r3, #7
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00c      	beq.n	800b874 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3307      	adds	r3, #7
 800b85e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f023 0307 	bic.w	r3, r3, #7
 800b866:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	4a1f      	ldr	r2, [pc, #124]	@ (800b8ec <prvHeapInit+0xac>)
 800b870:	4413      	add	r3, r2
 800b872:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b878:	4a1d      	ldr	r2, [pc, #116]	@ (800b8f0 <prvHeapInit+0xb0>)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b87e:	4b1c      	ldr	r3, [pc, #112]	@ (800b8f0 <prvHeapInit+0xb0>)
 800b880:	2200      	movs	r2, #0
 800b882:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	4413      	add	r3, r2
 800b88a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b88c:	2208      	movs	r2, #8
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	1a9b      	subs	r3, r3, r2
 800b892:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f023 0307 	bic.w	r3, r3, #7
 800b89a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	4a15      	ldr	r2, [pc, #84]	@ (800b8f4 <prvHeapInit+0xb4>)
 800b8a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8a2:	4b14      	ldr	r3, [pc, #80]	@ (800b8f4 <prvHeapInit+0xb4>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8aa:	4b12      	ldr	r3, [pc, #72]	@ (800b8f4 <prvHeapInit+0xb4>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	1ad2      	subs	r2, r2, r3
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f4 <prvHeapInit+0xb4>)
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	4a0a      	ldr	r2, [pc, #40]	@ (800b8f8 <prvHeapInit+0xb8>)
 800b8ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	4a09      	ldr	r2, [pc, #36]	@ (800b8fc <prvHeapInit+0xbc>)
 800b8d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8d8:	4b09      	ldr	r3, [pc, #36]	@ (800b900 <prvHeapInit+0xc0>)
 800b8da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b8de:	601a      	str	r2, [r3, #0]
}
 800b8e0:	bf00      	nop
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr
 800b8ec:	200416d8 	.word	0x200416d8
 800b8f0:	20042290 	.word	0x20042290
 800b8f4:	20042298 	.word	0x20042298
 800b8f8:	200422a0 	.word	0x200422a0
 800b8fc:	2004229c 	.word	0x2004229c
 800b900:	200422ac 	.word	0x200422ac

0800b904 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b90c:	4b28      	ldr	r3, [pc, #160]	@ (800b9b0 <prvInsertBlockIntoFreeList+0xac>)
 800b90e:	60fb      	str	r3, [r7, #12]
 800b910:	e002      	b.n	800b918 <prvInsertBlockIntoFreeList+0x14>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d8f7      	bhi.n	800b912 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	4413      	add	r3, r2
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	429a      	cmp	r2, r3
 800b932:	d108      	bne.n	800b946 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	441a      	add	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	68ba      	ldr	r2, [r7, #8]
 800b950:	441a      	add	r2, r3
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	429a      	cmp	r2, r3
 800b958:	d118      	bne.n	800b98c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	4b15      	ldr	r3, [pc, #84]	@ (800b9b4 <prvInsertBlockIntoFreeList+0xb0>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	429a      	cmp	r2, r3
 800b964:	d00d      	beq.n	800b982 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	685a      	ldr	r2, [r3, #4]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	441a      	add	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	601a      	str	r2, [r3, #0]
 800b980:	e008      	b.n	800b994 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b982:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b4 <prvInsertBlockIntoFreeList+0xb0>)
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	601a      	str	r2, [r3, #0]
 800b98a:	e003      	b.n	800b994 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d002      	beq.n	800b9a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9a2:	bf00      	nop
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	20042290 	.word	0x20042290
 800b9b4:	20042298 	.word	0x20042298

0800b9b8 <memset>:
 800b9b8:	4402      	add	r2, r0
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d100      	bne.n	800b9c2 <memset+0xa>
 800b9c0:	4770      	bx	lr
 800b9c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b9c6:	e7f9      	b.n	800b9bc <memset+0x4>

0800b9c8 <_reclaim_reent>:
 800b9c8:	4b29      	ldr	r3, [pc, #164]	@ (800ba70 <_reclaim_reent+0xa8>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4283      	cmp	r3, r0
 800b9ce:	b570      	push	{r4, r5, r6, lr}
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	d04b      	beq.n	800ba6c <_reclaim_reent+0xa4>
 800b9d4:	69c3      	ldr	r3, [r0, #28]
 800b9d6:	b1ab      	cbz	r3, 800ba04 <_reclaim_reent+0x3c>
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	b16b      	cbz	r3, 800b9f8 <_reclaim_reent+0x30>
 800b9dc:	2500      	movs	r5, #0
 800b9de:	69e3      	ldr	r3, [r4, #28]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	5959      	ldr	r1, [r3, r5]
 800b9e4:	2900      	cmp	r1, #0
 800b9e6:	d13b      	bne.n	800ba60 <_reclaim_reent+0x98>
 800b9e8:	3504      	adds	r5, #4
 800b9ea:	2d80      	cmp	r5, #128	@ 0x80
 800b9ec:	d1f7      	bne.n	800b9de <_reclaim_reent+0x16>
 800b9ee:	69e3      	ldr	r3, [r4, #28]
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	68d9      	ldr	r1, [r3, #12]
 800b9f4:	f000 f872 	bl	800badc <_free_r>
 800b9f8:	69e3      	ldr	r3, [r4, #28]
 800b9fa:	6819      	ldr	r1, [r3, #0]
 800b9fc:	b111      	cbz	r1, 800ba04 <_reclaim_reent+0x3c>
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f000 f86c 	bl	800badc <_free_r>
 800ba04:	6961      	ldr	r1, [r4, #20]
 800ba06:	b111      	cbz	r1, 800ba0e <_reclaim_reent+0x46>
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f000 f867 	bl	800badc <_free_r>
 800ba0e:	69e1      	ldr	r1, [r4, #28]
 800ba10:	b111      	cbz	r1, 800ba18 <_reclaim_reent+0x50>
 800ba12:	4620      	mov	r0, r4
 800ba14:	f000 f862 	bl	800badc <_free_r>
 800ba18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ba1a:	b111      	cbz	r1, 800ba22 <_reclaim_reent+0x5a>
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f000 f85d 	bl	800badc <_free_r>
 800ba22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba24:	b111      	cbz	r1, 800ba2c <_reclaim_reent+0x64>
 800ba26:	4620      	mov	r0, r4
 800ba28:	f000 f858 	bl	800badc <_free_r>
 800ba2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ba2e:	b111      	cbz	r1, 800ba36 <_reclaim_reent+0x6e>
 800ba30:	4620      	mov	r0, r4
 800ba32:	f000 f853 	bl	800badc <_free_r>
 800ba36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ba38:	b111      	cbz	r1, 800ba40 <_reclaim_reent+0x78>
 800ba3a:	4620      	mov	r0, r4
 800ba3c:	f000 f84e 	bl	800badc <_free_r>
 800ba40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ba42:	b111      	cbz	r1, 800ba4a <_reclaim_reent+0x82>
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 f849 	bl	800badc <_free_r>
 800ba4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ba4c:	b111      	cbz	r1, 800ba54 <_reclaim_reent+0x8c>
 800ba4e:	4620      	mov	r0, r4
 800ba50:	f000 f844 	bl	800badc <_free_r>
 800ba54:	6a23      	ldr	r3, [r4, #32]
 800ba56:	b14b      	cbz	r3, 800ba6c <_reclaim_reent+0xa4>
 800ba58:	4620      	mov	r0, r4
 800ba5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba5e:	4718      	bx	r3
 800ba60:	680e      	ldr	r6, [r1, #0]
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 f83a 	bl	800badc <_free_r>
 800ba68:	4631      	mov	r1, r6
 800ba6a:	e7bb      	b.n	800b9e4 <_reclaim_reent+0x1c>
 800ba6c:	bd70      	pop	{r4, r5, r6, pc}
 800ba6e:	bf00      	nop
 800ba70:	20040028 	.word	0x20040028

0800ba74 <__libc_init_array>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	4d0d      	ldr	r5, [pc, #52]	@ (800baac <__libc_init_array+0x38>)
 800ba78:	4c0d      	ldr	r4, [pc, #52]	@ (800bab0 <__libc_init_array+0x3c>)
 800ba7a:	1b64      	subs	r4, r4, r5
 800ba7c:	10a4      	asrs	r4, r4, #2
 800ba7e:	2600      	movs	r6, #0
 800ba80:	42a6      	cmp	r6, r4
 800ba82:	d109      	bne.n	800ba98 <__libc_init_array+0x24>
 800ba84:	4d0b      	ldr	r5, [pc, #44]	@ (800bab4 <__libc_init_array+0x40>)
 800ba86:	4c0c      	ldr	r4, [pc, #48]	@ (800bab8 <__libc_init_array+0x44>)
 800ba88:	f000 f87e 	bl	800bb88 <_init>
 800ba8c:	1b64      	subs	r4, r4, r5
 800ba8e:	10a4      	asrs	r4, r4, #2
 800ba90:	2600      	movs	r6, #0
 800ba92:	42a6      	cmp	r6, r4
 800ba94:	d105      	bne.n	800baa2 <__libc_init_array+0x2e>
 800ba96:	bd70      	pop	{r4, r5, r6, pc}
 800ba98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba9c:	4798      	blx	r3
 800ba9e:	3601      	adds	r6, #1
 800baa0:	e7ee      	b.n	800ba80 <__libc_init_array+0xc>
 800baa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa6:	4798      	blx	r3
 800baa8:	3601      	adds	r6, #1
 800baaa:	e7f2      	b.n	800ba92 <__libc_init_array+0x1e>
 800baac:	0800bd8c 	.word	0x0800bd8c
 800bab0:	0800bd8c 	.word	0x0800bd8c
 800bab4:	0800bd8c 	.word	0x0800bd8c
 800bab8:	0800bd90 	.word	0x0800bd90

0800babc <__retarget_lock_acquire_recursive>:
 800babc:	4770      	bx	lr

0800babe <__retarget_lock_release_recursive>:
 800babe:	4770      	bx	lr

0800bac0 <memcpy>:
 800bac0:	440a      	add	r2, r1
 800bac2:	4291      	cmp	r1, r2
 800bac4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bac8:	d100      	bne.n	800bacc <memcpy+0xc>
 800baca:	4770      	bx	lr
 800bacc:	b510      	push	{r4, lr}
 800bace:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bad6:	4291      	cmp	r1, r2
 800bad8:	d1f9      	bne.n	800bace <memcpy+0xe>
 800bada:	bd10      	pop	{r4, pc}

0800badc <_free_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4605      	mov	r5, r0
 800bae0:	2900      	cmp	r1, #0
 800bae2:	d041      	beq.n	800bb68 <_free_r+0x8c>
 800bae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bae8:	1f0c      	subs	r4, r1, #4
 800baea:	2b00      	cmp	r3, #0
 800baec:	bfb8      	it	lt
 800baee:	18e4      	addlt	r4, r4, r3
 800baf0:	f000 f83e 	bl	800bb70 <__malloc_lock>
 800baf4:	4a1d      	ldr	r2, [pc, #116]	@ (800bb6c <_free_r+0x90>)
 800baf6:	6813      	ldr	r3, [r2, #0]
 800baf8:	b933      	cbnz	r3, 800bb08 <_free_r+0x2c>
 800bafa:	6063      	str	r3, [r4, #4]
 800bafc:	6014      	str	r4, [r2, #0]
 800bafe:	4628      	mov	r0, r5
 800bb00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb04:	f000 b83a 	b.w	800bb7c <__malloc_unlock>
 800bb08:	42a3      	cmp	r3, r4
 800bb0a:	d908      	bls.n	800bb1e <_free_r+0x42>
 800bb0c:	6820      	ldr	r0, [r4, #0]
 800bb0e:	1821      	adds	r1, r4, r0
 800bb10:	428b      	cmp	r3, r1
 800bb12:	bf01      	itttt	eq
 800bb14:	6819      	ldreq	r1, [r3, #0]
 800bb16:	685b      	ldreq	r3, [r3, #4]
 800bb18:	1809      	addeq	r1, r1, r0
 800bb1a:	6021      	streq	r1, [r4, #0]
 800bb1c:	e7ed      	b.n	800bafa <_free_r+0x1e>
 800bb1e:	461a      	mov	r2, r3
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	b10b      	cbz	r3, 800bb28 <_free_r+0x4c>
 800bb24:	42a3      	cmp	r3, r4
 800bb26:	d9fa      	bls.n	800bb1e <_free_r+0x42>
 800bb28:	6811      	ldr	r1, [r2, #0]
 800bb2a:	1850      	adds	r0, r2, r1
 800bb2c:	42a0      	cmp	r0, r4
 800bb2e:	d10b      	bne.n	800bb48 <_free_r+0x6c>
 800bb30:	6820      	ldr	r0, [r4, #0]
 800bb32:	4401      	add	r1, r0
 800bb34:	1850      	adds	r0, r2, r1
 800bb36:	4283      	cmp	r3, r0
 800bb38:	6011      	str	r1, [r2, #0]
 800bb3a:	d1e0      	bne.n	800bafe <_free_r+0x22>
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	6053      	str	r3, [r2, #4]
 800bb42:	4408      	add	r0, r1
 800bb44:	6010      	str	r0, [r2, #0]
 800bb46:	e7da      	b.n	800bafe <_free_r+0x22>
 800bb48:	d902      	bls.n	800bb50 <_free_r+0x74>
 800bb4a:	230c      	movs	r3, #12
 800bb4c:	602b      	str	r3, [r5, #0]
 800bb4e:	e7d6      	b.n	800bafe <_free_r+0x22>
 800bb50:	6820      	ldr	r0, [r4, #0]
 800bb52:	1821      	adds	r1, r4, r0
 800bb54:	428b      	cmp	r3, r1
 800bb56:	bf04      	itt	eq
 800bb58:	6819      	ldreq	r1, [r3, #0]
 800bb5a:	685b      	ldreq	r3, [r3, #4]
 800bb5c:	6063      	str	r3, [r4, #4]
 800bb5e:	bf04      	itt	eq
 800bb60:	1809      	addeq	r1, r1, r0
 800bb62:	6021      	streq	r1, [r4, #0]
 800bb64:	6054      	str	r4, [r2, #4]
 800bb66:	e7ca      	b.n	800bafe <_free_r+0x22>
 800bb68:	bd38      	pop	{r3, r4, r5, pc}
 800bb6a:	bf00      	nop
 800bb6c:	200423ec 	.word	0x200423ec

0800bb70 <__malloc_lock>:
 800bb70:	4801      	ldr	r0, [pc, #4]	@ (800bb78 <__malloc_lock+0x8>)
 800bb72:	f7ff bfa3 	b.w	800babc <__retarget_lock_acquire_recursive>
 800bb76:	bf00      	nop
 800bb78:	200423e8 	.word	0x200423e8

0800bb7c <__malloc_unlock>:
 800bb7c:	4801      	ldr	r0, [pc, #4]	@ (800bb84 <__malloc_unlock+0x8>)
 800bb7e:	f7ff bf9e 	b.w	800babe <__retarget_lock_release_recursive>
 800bb82:	bf00      	nop
 800bb84:	200423e8 	.word	0x200423e8

0800bb88 <_init>:
 800bb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8a:	bf00      	nop
 800bb8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb8e:	bc08      	pop	{r3}
 800bb90:	469e      	mov	lr, r3
 800bb92:	4770      	bx	lr

0800bb94 <_fini>:
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb96:	bf00      	nop
 800bb98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb9a:	bc08      	pop	{r3}
 800bb9c:	469e      	mov	lr, r3
 800bb9e:	4770      	bx	lr
