
cv04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4f0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800b6b0  0800b6b0  0000c6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b878  0800b878  0000d060  2**0
                  CONTENTS
  4 .ARM          00000008  0800b878  0800b878  0000c878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b880  0800b880  0000d060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b880  0800b880  0000c880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b884  0800b884  0000c884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20040000  0800b888  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002364  20040060  0800b8e8  0000d060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200423c4  0800b8e8  0000d3c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028b3c  00000000  00000000  0000d090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bb9  00000000  00000000  00035bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002048  00000000  00000000  0003a788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000190c  00000000  00000000  0003c7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ac0  00000000  00000000  0003e0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002490a  00000000  00000000  00042b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012738b  00000000  00000000  000674a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018e831  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008f30  00000000  00000000  0018e874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001977a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040060 	.word	0x20040060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b698 	.word	0x0800b698

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040064 	.word	0x20040064
 80001fc:	0800b698 	.word	0x0800b698

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	@ 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2uiz>:
 800099c:	004a      	lsls	r2, r1, #1
 800099e:	d211      	bcs.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009a4:	d211      	bcs.n	80009ca <__aeabi_d2uiz+0x2e>
 80009a6:	d50d      	bpl.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d40e      	bmi.n	80009d0 <__aeabi_d2uiz+0x34>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ce:	d102      	bne.n	80009d6 <__aeabi_d2uiz+0x3a>
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295
 80009f0:	f000 b96a 	b.w	8000cc8 <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	9d08      	ldr	r5, [sp, #32]
 8000a12:	460c      	mov	r4, r1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d14e      	bne.n	8000ab6 <__udivmoddi4+0xaa>
 8000a18:	4694      	mov	ip, r2
 8000a1a:	458c      	cmp	ip, r1
 8000a1c:	4686      	mov	lr, r0
 8000a1e:	fab2 f282 	clz	r2, r2
 8000a22:	d962      	bls.n	8000aea <__udivmoddi4+0xde>
 8000a24:	b14a      	cbz	r2, 8000a3a <__udivmoddi4+0x2e>
 8000a26:	f1c2 0320 	rsb	r3, r2, #32
 8000a2a:	4091      	lsls	r1, r2
 8000a2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a34:	4319      	orrs	r1, r3
 8000a36:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3e:	fa1f f68c 	uxth.w	r6, ip
 8000a42:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a46:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a4a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a52:	fb04 f106 	mul.w	r1, r4, r6
 8000a56:	4299      	cmp	r1, r3
 8000a58:	d90a      	bls.n	8000a70 <__udivmoddi4+0x64>
 8000a5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a62:	f080 8112 	bcs.w	8000c8a <__udivmoddi4+0x27e>
 8000a66:	4299      	cmp	r1, r3
 8000a68:	f240 810f 	bls.w	8000c8a <__udivmoddi4+0x27e>
 8000a6c:	3c02      	subs	r4, #2
 8000a6e:	4463      	add	r3, ip
 8000a70:	1a59      	subs	r1, r3, r1
 8000a72:	fa1f f38e 	uxth.w	r3, lr
 8000a76:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a82:	fb00 f606 	mul.w	r6, r0, r6
 8000a86:	429e      	cmp	r6, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x94>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a92:	f080 80fc 	bcs.w	8000c8e <__udivmoddi4+0x282>
 8000a96:	429e      	cmp	r6, r3
 8000a98:	f240 80f9 	bls.w	8000c8e <__udivmoddi4+0x282>
 8000a9c:	4463      	add	r3, ip
 8000a9e:	3802      	subs	r0, #2
 8000aa0:	1b9b      	subs	r3, r3, r6
 8000aa2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	b11d      	cbz	r5, 8000ab2 <__udivmoddi4+0xa6>
 8000aaa:	40d3      	lsrs	r3, r2
 8000aac:	2200      	movs	r2, #0
 8000aae:	e9c5 3200 	strd	r3, r2, [r5]
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	428b      	cmp	r3, r1
 8000ab8:	d905      	bls.n	8000ac6 <__udivmoddi4+0xba>
 8000aba:	b10d      	cbz	r5, 8000ac0 <__udivmoddi4+0xb4>
 8000abc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4608      	mov	r0, r1
 8000ac4:	e7f5      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000ac6:	fab3 f183 	clz	r1, r3
 8000aca:	2900      	cmp	r1, #0
 8000acc:	d146      	bne.n	8000b5c <__udivmoddi4+0x150>
 8000ace:	42a3      	cmp	r3, r4
 8000ad0:	d302      	bcc.n	8000ad8 <__udivmoddi4+0xcc>
 8000ad2:	4290      	cmp	r0, r2
 8000ad4:	f0c0 80f0 	bcc.w	8000cb8 <__udivmoddi4+0x2ac>
 8000ad8:	1a86      	subs	r6, r0, r2
 8000ada:	eb64 0303 	sbc.w	r3, r4, r3
 8000ade:	2001      	movs	r0, #1
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d0e6      	beq.n	8000ab2 <__udivmoddi4+0xa6>
 8000ae4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ae8:	e7e3      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	f040 8090 	bne.w	8000c10 <__udivmoddi4+0x204>
 8000af0:	eba1 040c 	sub.w	r4, r1, ip
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	fa1f f78c 	uxth.w	r7, ip
 8000afc:	2101      	movs	r1, #1
 8000afe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b06:	fb08 4416 	mls	r4, r8, r6, r4
 8000b0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b0e:	fb07 f006 	mul.w	r0, r7, r6
 8000b12:	4298      	cmp	r0, r3
 8000b14:	d908      	bls.n	8000b28 <__udivmoddi4+0x11c>
 8000b16:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b1e:	d202      	bcs.n	8000b26 <__udivmoddi4+0x11a>
 8000b20:	4298      	cmp	r0, r3
 8000b22:	f200 80cd 	bhi.w	8000cc0 <__udivmoddi4+0x2b4>
 8000b26:	4626      	mov	r6, r4
 8000b28:	1a1c      	subs	r4, r3, r0
 8000b2a:	fa1f f38e 	uxth.w	r3, lr
 8000b2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b32:	fb08 4410 	mls	r4, r8, r0, r4
 8000b36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3a:	fb00 f707 	mul.w	r7, r0, r7
 8000b3e:	429f      	cmp	r7, r3
 8000b40:	d908      	bls.n	8000b54 <__udivmoddi4+0x148>
 8000b42:	eb1c 0303 	adds.w	r3, ip, r3
 8000b46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b4a:	d202      	bcs.n	8000b52 <__udivmoddi4+0x146>
 8000b4c:	429f      	cmp	r7, r3
 8000b4e:	f200 80b0 	bhi.w	8000cb2 <__udivmoddi4+0x2a6>
 8000b52:	4620      	mov	r0, r4
 8000b54:	1bdb      	subs	r3, r3, r7
 8000b56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5a:	e7a5      	b.n	8000aa8 <__udivmoddi4+0x9c>
 8000b5c:	f1c1 0620 	rsb	r6, r1, #32
 8000b60:	408b      	lsls	r3, r1
 8000b62:	fa22 f706 	lsr.w	r7, r2, r6
 8000b66:	431f      	orrs	r7, r3
 8000b68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b70:	ea43 030c 	orr.w	r3, r3, ip
 8000b74:	40f4      	lsrs	r4, r6
 8000b76:	fa00 f801 	lsl.w	r8, r0, r1
 8000b7a:	0c38      	lsrs	r0, r7, #16
 8000b7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b80:	fbb4 fef0 	udiv	lr, r4, r0
 8000b84:	fa1f fc87 	uxth.w	ip, r7
 8000b88:	fb00 441e 	mls	r4, r0, lr, r4
 8000b8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b90:	fb0e f90c 	mul.w	r9, lr, ip
 8000b94:	45a1      	cmp	r9, r4
 8000b96:	fa02 f201 	lsl.w	r2, r2, r1
 8000b9a:	d90a      	bls.n	8000bb2 <__udivmoddi4+0x1a6>
 8000b9c:	193c      	adds	r4, r7, r4
 8000b9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ba2:	f080 8084 	bcs.w	8000cae <__udivmoddi4+0x2a2>
 8000ba6:	45a1      	cmp	r9, r4
 8000ba8:	f240 8081 	bls.w	8000cae <__udivmoddi4+0x2a2>
 8000bac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb0:	443c      	add	r4, r7
 8000bb2:	eba4 0409 	sub.w	r4, r4, r9
 8000bb6:	fa1f f983 	uxth.w	r9, r3
 8000bba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bbe:	fb00 4413 	mls	r4, r0, r3, r4
 8000bc2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bca:	45a4      	cmp	ip, r4
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x1d2>
 8000bce:	193c      	adds	r4, r7, r4
 8000bd0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bd4:	d267      	bcs.n	8000ca6 <__udivmoddi4+0x29a>
 8000bd6:	45a4      	cmp	ip, r4
 8000bd8:	d965      	bls.n	8000ca6 <__udivmoddi4+0x29a>
 8000bda:	3b02      	subs	r3, #2
 8000bdc:	443c      	add	r4, r7
 8000bde:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000be2:	fba0 9302 	umull	r9, r3, r0, r2
 8000be6:	eba4 040c 	sub.w	r4, r4, ip
 8000bea:	429c      	cmp	r4, r3
 8000bec:	46ce      	mov	lr, r9
 8000bee:	469c      	mov	ip, r3
 8000bf0:	d351      	bcc.n	8000c96 <__udivmoddi4+0x28a>
 8000bf2:	d04e      	beq.n	8000c92 <__udivmoddi4+0x286>
 8000bf4:	b155      	cbz	r5, 8000c0c <__udivmoddi4+0x200>
 8000bf6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bfa:	eb64 040c 	sbc.w	r4, r4, ip
 8000bfe:	fa04 f606 	lsl.w	r6, r4, r6
 8000c02:	40cb      	lsrs	r3, r1
 8000c04:	431e      	orrs	r6, r3
 8000c06:	40cc      	lsrs	r4, r1
 8000c08:	e9c5 6400 	strd	r6, r4, [r5]
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	e750      	b.n	8000ab2 <__udivmoddi4+0xa6>
 8000c10:	f1c2 0320 	rsb	r3, r2, #32
 8000c14:	fa20 f103 	lsr.w	r1, r0, r3
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c20:	4094      	lsls	r4, r2
 8000c22:	430c      	orrs	r4, r1
 8000c24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c2c:	fa1f f78c 	uxth.w	r7, ip
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3110 	mls	r1, r8, r0, r3
 8000c38:	0c23      	lsrs	r3, r4, #16
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb00 f107 	mul.w	r1, r0, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x24c>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c4e:	d22c      	bcs.n	8000caa <__udivmoddi4+0x29e>
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d92a      	bls.n	8000caa <__udivmoddi4+0x29e>
 8000c54:	3802      	subs	r0, #2
 8000c56:	4463      	add	r3, ip
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c60:	fb08 3311 	mls	r3, r8, r1, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb01 f307 	mul.w	r3, r1, r7
 8000c6c:	42a3      	cmp	r3, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x276>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c78:	d213      	bcs.n	8000ca2 <__udivmoddi4+0x296>
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	d911      	bls.n	8000ca2 <__udivmoddi4+0x296>
 8000c7e:	3902      	subs	r1, #2
 8000c80:	4464      	add	r4, ip
 8000c82:	1ae4      	subs	r4, r4, r3
 8000c84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c88:	e739      	b.n	8000afe <__udivmoddi4+0xf2>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	e6f0      	b.n	8000a70 <__udivmoddi4+0x64>
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e706      	b.n	8000aa0 <__udivmoddi4+0x94>
 8000c92:	45c8      	cmp	r8, r9
 8000c94:	d2ae      	bcs.n	8000bf4 <__udivmoddi4+0x1e8>
 8000c96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c9e:	3801      	subs	r0, #1
 8000ca0:	e7a8      	b.n	8000bf4 <__udivmoddi4+0x1e8>
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	e7ed      	b.n	8000c82 <__udivmoddi4+0x276>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	e799      	b.n	8000bde <__udivmoddi4+0x1d2>
 8000caa:	4630      	mov	r0, r6
 8000cac:	e7d4      	b.n	8000c58 <__udivmoddi4+0x24c>
 8000cae:	46d6      	mov	lr, sl
 8000cb0:	e77f      	b.n	8000bb2 <__udivmoddi4+0x1a6>
 8000cb2:	4463      	add	r3, ip
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	e74d      	b.n	8000b54 <__udivmoddi4+0x148>
 8000cb8:	4606      	mov	r6, r0
 8000cba:	4623      	mov	r3, r4
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	e70f      	b.n	8000ae0 <__udivmoddi4+0xd4>
 8000cc0:	3e02      	subs	r6, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	e730      	b.n	8000b28 <__udivmoddi4+0x11c>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_idiv0>:
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd0:	f001 f981 	bl	8001fd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd4:	f000 f896 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd8:	f000 fb22 	bl	8001320 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000cdc:	f000 f984 	bl	8000fe8 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000ce0:	f000 f9d0 	bl	8001084 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ce4:	f000 faee 	bl	80012c4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000ce8:	f000 fab6 	bl	8001258 <MX_TIM7_Init>
  MX_ADC1_Init();
 8000cec:	f000 f8de 	bl	8000eac <MX_ADC1_Init>
  MX_TIM3_Init();
 8000cf0:	f000 fa14 	bl	800111c <MX_TIM3_Init>
  MX_DAC1_Init();
 8000cf4:	f000 f944 	bl	8000f80 <MX_DAC1_Init>
  MX_TIM4_Init();
 8000cf8:	f000 fa5e 	bl	80011b8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000cfc:	4829      	ldr	r0, [pc, #164]	@ (8000da4 <main+0xd8>)
 8000cfe:	f005 f8df 	bl	8005ec0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000d02:	4829      	ldr	r0, [pc, #164]	@ (8000da8 <main+0xdc>)
 8000d04:	f005 f8dc 	bl	8005ec0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000d08:	4828      	ldr	r0, [pc, #160]	@ (8000dac <main+0xe0>)
 8000d0a:	f005 f8d9 	bl	8005ec0 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000d0e:	4828      	ldr	r0, [pc, #160]	@ (8000db0 <main+0xe4>)
 8000d10:	f001 fd18 	bl	8002744 <HAL_ADC_Start_IT>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000d14:	2100      	movs	r1, #0
 8000d16:	4827      	ldr	r0, [pc, #156]	@ (8000db4 <main+0xe8>)
 8000d18:	f002 fe42 	bl	80039a0 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d1c:	f006 fe7c 	bl	8007a18 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommunicationMutex */
  CommunicationMutexHandle = osMutexNew(&CommunicationMutex_attributes);
 8000d20:	4825      	ldr	r0, [pc, #148]	@ (8000db8 <main+0xec>)
 8000d22:	f006 ff55 	bl	8007bd0 <osMutexNew>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4a24      	ldr	r2, [pc, #144]	@ (8000dbc <main+0xf0>)
 8000d2a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Semaphore1 */
  Semaphore1Handle = osSemaphoreNew(1, 0, &Semaphore1_attributes);
 8000d2c:	4a24      	ldr	r2, [pc, #144]	@ (8000dc0 <main+0xf4>)
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2001      	movs	r0, #1
 8000d32:	f007 f85b 	bl	8007dec <osSemaphoreNew>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4a22      	ldr	r2, [pc, #136]	@ (8000dc4 <main+0xf8>)
 8000d3a:	6013      	str	r3, [r2, #0]

  /* creation of RegulationSemaphore */
  RegulationSemaphoreHandle = osSemaphoreNew(1, 0, &RegulationSemaphore_attributes);
 8000d3c:	4a22      	ldr	r2, [pc, #136]	@ (8000dc8 <main+0xfc>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	2001      	movs	r0, #1
 8000d42:	f007 f853 	bl	8007dec <osSemaphoreNew>
 8000d46:	4603      	mov	r3, r0
 8000d48:	4a20      	ldr	r2, [pc, #128]	@ (8000dcc <main+0x100>)
 8000d4a:	6013      	str	r3, [r2, #0]

  /* creation of CommunicationSemaphore */
  CommunicationSemaphoreHandle = osSemaphoreNew(1, 0, &CommunicationSemaphore_attributes);
 8000d4c:	4a20      	ldr	r2, [pc, #128]	@ (8000dd0 <main+0x104>)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2001      	movs	r0, #1
 8000d52:	f007 f84b 	bl	8007dec <osSemaphoreNew>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd4 <main+0x108>)
 8000d5a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Fronta */
  FrontaHandle = osMessageQueueNew (1, sizeof(uint32_t), &Fronta_attributes);
 8000d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd8 <main+0x10c>)
 8000d5e:	2104      	movs	r1, #4
 8000d60:	2001      	movs	r0, #1
 8000d62:	f007 f963 	bl	800802c <osMessageQueueNew>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4a1c      	ldr	r2, [pc, #112]	@ (8000ddc <main+0x110>)
 8000d6a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Filtrace */
  FiltraceHandle = osThreadNew(StartFiltrace, NULL, &Filtrace_attributes);
 8000d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000de0 <main+0x114>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	481c      	ldr	r0, [pc, #112]	@ (8000de4 <main+0x118>)
 8000d72:	f006 fe9b 	bl	8007aac <osThreadNew>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <main+0x11c>)
 8000d7a:	6013      	str	r3, [r2, #0]

  /* creation of Regulace */
  RegulaceHandle = osThreadNew(StartRegulace, NULL, &Regulace_attributes);
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dec <main+0x120>)
 8000d7e:	2100      	movs	r1, #0
 8000d80:	481b      	ldr	r0, [pc, #108]	@ (8000df0 <main+0x124>)
 8000d82:	f006 fe93 	bl	8007aac <osThreadNew>
 8000d86:	4603      	mov	r3, r0
 8000d88:	4a1a      	ldr	r2, [pc, #104]	@ (8000df4 <main+0x128>)
 8000d8a:	6013      	str	r3, [r2, #0]

  /* creation of Communication */
  CommunicationHandle = osThreadNew(StartCommunication, NULL, &Communication_attributes);
 8000d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000df8 <main+0x12c>)
 8000d8e:	2100      	movs	r1, #0
 8000d90:	481a      	ldr	r0, [pc, #104]	@ (8000dfc <main+0x130>)
 8000d92:	f006 fe8b 	bl	8007aac <osThreadNew>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4a19      	ldr	r2, [pc, #100]	@ (8000e00 <main+0x134>)
 8000d9a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d9c:	f006 fe60 	bl	8007a60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <main+0xd4>
 8000da4:	200402ac 	.word	0x200402ac
 8000da8:	200402f8 	.word	0x200402f8
 8000dac:	20040344 	.word	0x20040344
 8000db0:	20040108 	.word	0x20040108
 8000db4:	20040170 	.word	0x20040170
 8000db8:	0800b7c8 	.word	0x0800b7c8
 8000dbc:	20040884 	.word	0x20040884
 8000dc0:	0800b7d8 	.word	0x0800b7d8
 8000dc4:	20040888 	.word	0x20040888
 8000dc8:	0800b7e8 	.word	0x0800b7e8
 8000dcc:	2004088c 	.word	0x2004088c
 8000dd0:	0800b7f8 	.word	0x0800b7f8
 8000dd4:	20040890 	.word	0x20040890
 8000dd8:	0800b7b0 	.word	0x0800b7b0
 8000ddc:	20040880 	.word	0x20040880
 8000de0:	0800b744 	.word	0x0800b744
 8000de4:	08001499 	.word	0x08001499
 8000de8:	20040874 	.word	0x20040874
 8000dec:	0800b768 	.word	0x0800b768
 8000df0:	08001561 	.word	0x08001561
 8000df4:	20040878 	.word	0x20040878
 8000df8:	0800b78c 	.word	0x0800b78c
 8000dfc:	080017bd 	.word	0x080017bd
 8000e00:	2004087c 	.word	0x2004087c

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b096      	sub	sp, #88	@ 0x58
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	2244      	movs	r2, #68	@ 0x44
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f00a fb58 	bl	800b4c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	463b      	mov	r3, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000e26:	2000      	movs	r0, #0
 8000e28:	f003 fb0c 	bl	8004444 <HAL_PWREx_ControlVoltageScaling>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000e32:	f000 fd4d 	bl	80018d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000e36:	2322      	movs	r3, #34	@ 0x22
 8000e38:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e40:	2301      	movs	r3, #1
 8000e42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e44:	2340      	movs	r3, #64	@ 0x40
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000e54:	231e      	movs	r3, #30
 8000e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fbaf 	bl	80045cc <HAL_RCC_OscConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e74:	f000 fd2c 	bl	80018d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e78:	230f      	movs	r3, #15
 8000e7a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2105      	movs	r1, #5
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 ffb4 	bl	8004e00 <HAL_RCC_ClockConfig>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e9e:	f000 fd17 	bl	80018d0 <Error_Handler>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	3758      	adds	r7, #88	@ 0x58
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000ec4:	4a2c      	ldr	r2, [pc, #176]	@ (8000f78 <MX_ADC1_Init+0xcc>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000eca:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ece:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed6:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000edc:	4b25      	ldr	r3, [pc, #148]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee2:	4b24      	ldr	r3, [pc, #144]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee8:	4b22      	ldr	r3, [pc, #136]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eee:	4b21      	ldr	r3, [pc, #132]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000f04:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000f08:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000f0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f20:	4b14      	ldr	r3, [pc, #80]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f28:	4812      	ldr	r0, [pc, #72]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000f2a:	f001 fac5 	bl	80024b8 <HAL_ADC_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000f34:	f000 fccc 	bl	80018d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000f38:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <MX_ADC1_Init+0xd0>)
 8000f3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f3c:	2306      	movs	r3, #6
 8000f3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f44:	237f      	movs	r3, #127	@ 0x7f
 8000f46:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	4619      	mov	r1, r3
 8000f54:	4807      	ldr	r0, [pc, #28]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000f56:	f001 fe7f 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000f60:	f000 fcb6 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f64:	217f      	movs	r1, #127	@ 0x7f
 8000f66:	4803      	ldr	r0, [pc, #12]	@ (8000f74 <MX_ADC1_Init+0xc8>)
 8000f68:	f002 fb84 	bl	8003674 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END ADC1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20040108 	.word	0x20040108
 8000f78:	50040000 	.word	0x50040000
 8000f7c:	21800100 	.word	0x21800100

08000f80 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2228      	movs	r2, #40	@ 0x28
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f00a fa9b 	bl	800b4c8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f92:	4b13      	ldr	r3, [pc, #76]	@ (8000fe0 <MX_DAC1_Init+0x60>)
 8000f94:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <MX_DAC1_Init+0x64>)
 8000f96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f98:	4811      	ldr	r0, [pc, #68]	@ (8000fe0 <MX_DAC1_Init+0x60>)
 8000f9a:	f002 fcdf 	bl	800395c <HAL_DAC_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000fa4:	f000 fc94 	bl	80018d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <MX_DAC1_Init+0x60>)
 8000fc8:	f002 fdc6 	bl	8003b58 <HAL_DAC_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 8000fd2:	f000 fc7d 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	@ 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20040170 	.word	0x20040170
 8000fe4:	40007400 	.word	0x40007400

08000fe8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fec:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8000fee:	4a23      	ldr	r2, [pc, #140]	@ (800107c <MX_LPUART1_UART_Init+0x94>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8000ff4:	4a22      	ldr	r2, [pc, #136]	@ (8001080 <MX_LPUART1_UART_Init+0x98>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8000ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ffe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b1a      	ldr	r3, [pc, #104]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001018:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8001020:	2200      	movs	r2, #0
 8001022:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001024:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8001026:	2200      	movs	r2, #0
 8001028:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 800102c:	2200      	movs	r2, #0
 800102e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001030:	4811      	ldr	r0, [pc, #68]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8001032:	f005 fb93 	bl	800675c <HAL_UART_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800103c:	f000 fc48 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001040:	2100      	movs	r1, #0
 8001042:	480d      	ldr	r0, [pc, #52]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8001044:	f006 f92e 	bl	80072a4 <HAL_UARTEx_SetTxFifoThreshold>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800104e:	f000 fc3f 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001052:	2100      	movs	r1, #0
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8001056:	f006 f963 	bl	8007320 <HAL_UARTEx_SetRxFifoThreshold>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001060:	f000 fc36 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001064:	4804      	ldr	r0, [pc, #16]	@ (8001078 <MX_LPUART1_UART_Init+0x90>)
 8001066:	f006 f8e4 	bl	8007232 <HAL_UARTEx_DisableFifoMode>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001070:	f000 fc2e 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20040184 	.word	0x20040184
 800107c:	40008000 	.word	0x40008000
 8001080:	00033324 	.word	0x00033324

08001084 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001088:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 800108a:	4a23      	ldr	r2, [pc, #140]	@ (8001118 <MX_USART3_UART_Init+0x94>)
 800108c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ba:	4b16      	ldr	r3, [pc, #88]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c6:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010cc:	4811      	ldr	r0, [pc, #68]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 80010ce:	f005 fb45 	bl	800675c <HAL_UART_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010d8:	f000 fbfa 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010dc:	2100      	movs	r1, #0
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 80010e0:	f006 f8e0 	bl	80072a4 <HAL_UARTEx_SetTxFifoThreshold>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010ea:	f000 fbf1 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4808      	ldr	r0, [pc, #32]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 80010f2:	f006 f915 	bl	8007320 <HAL_UARTEx_SetRxFifoThreshold>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010fc:	f000 fbe8 	bl	80018d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	@ (8001114 <MX_USART3_UART_Init+0x90>)
 8001102:	f006 f896 	bl	8007232 <HAL_UARTEx_DisableFifoMode>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800110c:	f000 fbe0 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20040218 	.word	0x20040218
 8001118:	40004800 	.word	0x40004800

0800111c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800113a:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <MX_TIM3_Init+0x94>)
 800113c:	4a1d      	ldr	r2, [pc, #116]	@ (80011b4 <MX_TIM3_Init+0x98>)
 800113e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12-1;
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <MX_TIM3_Init+0x94>)
 8001142:	220b      	movs	r2, #11
 8001144:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b1a      	ldr	r3, [pc, #104]	@ (80011b0 <MX_TIM3_Init+0x94>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800114c:	4b18      	ldr	r3, [pc, #96]	@ (80011b0 <MX_TIM3_Init+0x94>)
 800114e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001152:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <MX_TIM3_Init+0x94>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800115a:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <MX_TIM3_Init+0x94>)
 800115c:	2280      	movs	r2, #128	@ 0x80
 800115e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001160:	4813      	ldr	r0, [pc, #76]	@ (80011b0 <MX_TIM3_Init+0x94>)
 8001162:	f004 fe55 	bl	8005e10 <HAL_TIM_Base_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800116c:	f000 fbb0 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001174:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <MX_TIM3_Init+0x94>)
 800117e:	f005 f816 	bl	80061ae <HAL_TIM_ConfigClockSource>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001188:	f000 fba2 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800118c:	2320      	movs	r3, #32
 800118e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_TIM3_Init+0x94>)
 800119a:	f005 fa39 	bl	8006610 <HAL_TIMEx_MasterConfigSynchronization>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011a4:	f000 fb94 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200402ac 	.word	0x200402ac
 80011b4:	40000400 	.word	0x40000400

080011b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0310 	add.w	r3, r7, #16
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <MX_TIM4_Init+0x98>)
 80011d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001254 <MX_TIM4_Init+0x9c>)
 80011da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6000-1;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <MX_TIM4_Init+0x98>)
 80011de:	f241 726f 	movw	r2, #5999	@ 0x176f
 80011e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <MX_TIM4_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80011ea:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <MX_TIM4_Init+0x98>)
 80011ec:	f242 720f 	movw	r2, #9999	@ 0x270f
 80011f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f2:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_TIM4_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_TIM4_Init+0x98>)
 80011fa:	2280      	movs	r2, #128	@ 0x80
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011fe:	4814      	ldr	r0, [pc, #80]	@ (8001250 <MX_TIM4_Init+0x98>)
 8001200:	f004 fe06 	bl	8005e10 <HAL_TIM_Base_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800120a:	f000 fb61 	bl	80018d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001212:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	480d      	ldr	r0, [pc, #52]	@ (8001250 <MX_TIM4_Init+0x98>)
 800121c:	f004 ffc7 	bl	80061ae <HAL_TIM_ConfigClockSource>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8001226:	f000 fb53 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800122a:	2320      	movs	r3, #32
 800122c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	@ (8001250 <MX_TIM4_Init+0x98>)
 8001238:	f005 f9ea 	bl	8006610 <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001242:	f000 fb45 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200402f8 	.word	0x200402f8
 8001254:	40000800 	.word	0x40000800

08001258 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001268:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <MX_TIM7_Init+0x64>)
 800126a:	4a15      	ldr	r2, [pc, #84]	@ (80012c0 <MX_TIM7_Init+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 240-1;
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <MX_TIM7_Init+0x64>)
 8001270:	22ef      	movs	r2, #239	@ 0xef
 8001272:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_TIM7_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_TIM7_Init+0x64>)
 800127c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001280:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_TIM7_Init+0x64>)
 8001284:	2280      	movs	r2, #128	@ 0x80
 8001286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <MX_TIM7_Init+0x64>)
 800128a:	f004 fdc1 	bl	8005e10 <HAL_TIM_Base_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001294:	f000 fb1c 	bl	80018d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001298:	2320      	movs	r3, #32
 800129a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_TIM7_Init+0x64>)
 80012a6:	f005 f9b3 	bl	8006610 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80012b0:	f000 fb0e 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20040344 	.word	0x20040344
 80012c0:	40001400 	.word	0x40001400

080012c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012c8:	4b14      	ldr	r3, [pc, #80]	@ (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d2:	2206      	movs	r2, #6
 80012d4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d8:	2202      	movs	r2, #2
 80012da:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012de:	2202      	movs	r2, #2
 80012e0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80012f4:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001302:	2201      	movs	r2, #1
 8001304:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001308:	f002 ff49 	bl	800419e <HAL_PCD_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001312:	f000 fadd 	bl	80018d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20040390 	.word	0x20040390

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	@ 0x30
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b4c      	ldr	r3, [pc, #304]	@ (8001468 <MX_GPIO_Init+0x148>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133a:	4a4b      	ldr	r2, [pc, #300]	@ (8001468 <MX_GPIO_Init+0x148>)
 800133c:	f043 0304 	orr.w	r3, r3, #4
 8001340:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001342:	4b49      	ldr	r3, [pc, #292]	@ (8001468 <MX_GPIO_Init+0x148>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001346:	f003 0304 	and.w	r3, r3, #4
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134e:	4b46      	ldr	r3, [pc, #280]	@ (8001468 <MX_GPIO_Init+0x148>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001352:	4a45      	ldr	r2, [pc, #276]	@ (8001468 <MX_GPIO_Init+0x148>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001358:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800135a:	4b43      	ldr	r3, [pc, #268]	@ (8001468 <MX_GPIO_Init+0x148>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	4b40      	ldr	r3, [pc, #256]	@ (8001468 <MX_GPIO_Init+0x148>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136a:	4a3f      	ldr	r2, [pc, #252]	@ (8001468 <MX_GPIO_Init+0x148>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001372:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <MX_GPIO_Init+0x148>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4b3a      	ldr	r3, [pc, #232]	@ (8001468 <MX_GPIO_Init+0x148>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	4a39      	ldr	r2, [pc, #228]	@ (8001468 <MX_GPIO_Init+0x148>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138a:	4b37      	ldr	r3, [pc, #220]	@ (8001468 <MX_GPIO_Init+0x148>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001396:	4b34      	ldr	r3, [pc, #208]	@ (8001468 <MX_GPIO_Init+0x148>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139a:	4a33      	ldr	r2, [pc, #204]	@ (8001468 <MX_GPIO_Init+0x148>)
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a2:	4b31      	ldr	r3, [pc, #196]	@ (8001468 <MX_GPIO_Init+0x148>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001468 <MX_GPIO_Init+0x148>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001468 <MX_GPIO_Init+0x148>)
 80013b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <MX_GPIO_Init+0x148>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80013c6:	f003 f8f1 	bl	80045ac <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80013d0:	4826      	ldr	r0, [pc, #152]	@ (800146c <MX_GPIO_Init+0x14c>)
 80013d2:	f002 fea9 	bl	8004128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2140      	movs	r1, #64	@ 0x40
 80013da:	4825      	ldr	r0, [pc, #148]	@ (8001470 <MX_GPIO_Init+0x150>)
 80013dc:	f002 fea4 	bl	8004128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	481f      	ldr	r0, [pc, #124]	@ (8001474 <MX_GPIO_Init+0x154>)
 80013f8:	f002 fd04 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80013fc:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4815      	ldr	r0, [pc, #84]	@ (800146c <MX_GPIO_Init+0x14c>)
 8001416:	f002 fcf5 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800141a:	2320      	movs	r3, #32
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	4810      	ldr	r0, [pc, #64]	@ (8001470 <MX_GPIO_Init+0x150>)
 800142e:	f002 fce9 	bl	8003e04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001432:	2340      	movs	r3, #64	@ 0x40
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	4809      	ldr	r0, [pc, #36]	@ (8001470 <MX_GPIO_Init+0x150>)
 800144a:	f002 fcdb 	bl	8003e04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2105      	movs	r1, #5
 8001452:	2028      	movs	r0, #40	@ 0x28
 8001454:	f002 fa58 	bl	8003908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001458:	2028      	movs	r0, #40	@ 0x28
 800145a:	f002 fa71 	bl	8003940 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	@ 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	48000400 	.word	0x48000400
 8001470:	48001800 	.word	0x48001800
 8001474:	48000800 	.word	0x48000800

08001478 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(Semaphore1Handle);
 8001480:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f006 fd8d 	bl	8007fa4 <osSemaphoreRelease>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20040888 	.word	0x20040888

08001498 <StartFiltrace>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFiltrace */
void StartFiltrace(void *argument)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0a2      	sub	sp, #136	@ 0x88
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
   // Proměnná pro aktuální vzorek
  uint32_t buffer[N] = {0}; // Kruhový buffer pro N vzorků, inicializován na 0
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2278      	movs	r2, #120	@ 0x78
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f00a f80d 	bl	800b4c8 <memset>
  int index = 0; // Index pro přístup do bufferu
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sum = 0; // Součet všech prvků v bufferu
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for (;;)
  {
    ADCInput = HAL_ADC_GetValue(&hadc1);
 80014b8:	4823      	ldr	r0, [pc, #140]	@ (8001548 <StartFiltrace+0xb0>)
 80014ba:	f001 f9f7 	bl	80028ac <HAL_ADC_GetValue>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a22      	ldr	r2, [pc, #136]	@ (800154c <StartFiltrace+0xb4>)
 80014c2:	6013      	str	r3, [r2, #0]

    sum -= buffer[index];
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	3388      	adds	r3, #136	@ 0x88
 80014ce:	443b      	add	r3, r7
 80014d0:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	60bb      	str	r3, [r7, #8]
    buffer[index] = ADCInput;
 80014d8:	4b1c      	ldr	r3, [pc, #112]	@ (800154c <StartFiltrace+0xb4>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	3388      	adds	r3, #136	@ 0x88
 80014e4:	443b      	add	r3, r7
 80014e6:	f843 2c7c 	str.w	r2, [r3, #-124]
    sum += ADCInput;
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	4b17      	ldr	r3, [pc, #92]	@ (800154c <StartFiltrace+0xb4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]

    index = (index + 1) % N;
 80014f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <StartFiltrace+0xb8>)
 80014fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001500:	4413      	add	r3, r2
 8001502:	1119      	asrs	r1, r3, #4
 8001504:	17d3      	asrs	r3, r2, #31
 8001506:	1ac9      	subs	r1, r1, r3
 8001508:	460b      	mov	r3, r1
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	1a5b      	subs	r3, r3, r1
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    xQueueOverwrite(FrontaHandle,&sum);
 8001516:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <StartFiltrace+0xbc>)
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	f107 0108 	add.w	r1, r7, #8
 800151e:	2302      	movs	r3, #2
 8001520:	2200      	movs	r2, #0
 8001522:	f007 f9a9 	bl	8008878 <xQueueGenericSend>
    FilterOutput = sum / N;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	4a09      	ldr	r2, [pc, #36]	@ (8001550 <StartFiltrace+0xb8>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	4a09      	ldr	r2, [pc, #36]	@ (8001558 <StartFiltrace+0xc0>)
 8001532:	6013      	str	r3, [r2, #0]
    //HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, DACOut);

    osSemaphoreAcquire(Semaphore1Handle, osWaitForever);
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <StartFiltrace+0xc4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	4618      	mov	r0, r3
 800153e:	f006 fcdf 	bl	8007f00 <osSemaphoreAcquire>
    ADCInput = HAL_ADC_GetValue(&hadc1);
 8001542:	bf00      	nop
 8001544:	e7b8      	b.n	80014b8 <StartFiltrace+0x20>
 8001546:	bf00      	nop
 8001548:	20040108 	.word	0x20040108
 800154c:	200400e4 	.word	0x200400e4
 8001550:	88888889 	.word	0x88888889
 8001554:	20040880 	.word	0x20040880
 8001558:	200400e0 	.word	0x200400e0
 800155c:	20040888 	.word	0x20040888

08001560 <StartRegulace>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRegulace */
void StartRegulace(void *argument)
{
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b09a      	sub	sp, #104	@ 0x68
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	double Tsampling;
	double Pterm;
	double PropGain;
	double Iterm;
	uint32_t ManipulatedVariable;
	uint32_t Umin = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t Umax = 4096;
 800156c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001570:	643b      	str	r3, [r7, #64]	@ 0x40
	double Epast=0,  Ipast=0;
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	Tsampling=0.02;
 800158a:	a38a      	add	r3, pc, #552	@ (adr r3, 80017b4 <StartRegulace+0x254>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	uint32_t StartTime;
	osStatus_t MutexStat;
	uint32_t SetPoint;
  for(;;)
  {
	  osSemaphoreAcquire(RegulationSemaphoreHandle, osWaitForever);
 8001594:	4b7a      	ldr	r3, [pc, #488]	@ (8001780 <StartRegulace+0x220>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f04f 31ff 	mov.w	r1, #4294967295
 800159c:	4618      	mov	r0, r3
 800159e:	f006 fcaf 	bl	8007f00 <osSemaphoreAcquire>
	  MutexStat=osMutexAcquire(CommunicationMutexHandle, 200);
 80015a2:	4b78      	ldr	r3, [pc, #480]	@ (8001784 <StartRegulace+0x224>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	21c8      	movs	r1, #200	@ 0xc8
 80015a8:	4618      	mov	r0, r3
 80015aa:	f006 fb97 	bl	8007cdc <osMutexAcquire>
 80015ae:	6378      	str	r0, [r7, #52]	@ 0x34
	  if (MutexStat==osOK){
 80015b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 80d9 	bne.w	800176a <StartRegulace+0x20a>
		  StartTime = TIM3->CNT;
 80015b8:	4b73      	ldr	r3, [pc, #460]	@ (8001788 <StartRegulace+0x228>)
 80015ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015bc:	633b      	str	r3, [r7, #48]	@ 0x30

		  Ti = ControlData.IntegralTimeConstant;
 80015be:	4b73      	ldr	r3, [pc, #460]	@ (800178c <StartRegulace+0x22c>)
 80015c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80015c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		  PropGain = ControlData.PropGain;
 80015c8:	4b70      	ldr	r3, [pc, #448]	@ (800178c <StartRegulace+0x22c>)
 80015ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80015ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  SetPoint = ControlData.Setpoint;
 80015d2:	4b6e      	ldr	r3, [pc, #440]	@ (800178c <StartRegulace+0x22c>)
 80015d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff f9de 	bl	800099c <__aeabi_d2uiz>
 80015e0:	4603      	mov	r3, r0
 80015e2:	61fb      	str	r3, [r7, #28]

	  	  osMessageQueueGet(FrontaHandle, &ControlledVariable, NULL, 2000);
 80015e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001790 <StartRegulace+0x230>)
 80015e6:	6818      	ldr	r0, [r3, #0]
 80015e8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80015ec:	2200      	movs	r2, #0
 80015ee:	4969      	ldr	r1, [pc, #420]	@ (8001794 <StartRegulace+0x234>)
 80015f0:	f006 fd90 	bl	8008114 <osMessageQueueGet>
	  	  ControlledVariable=ControlledVariable/N;
 80015f4:	4b67      	ldr	r3, [pc, #412]	@ (8001794 <StartRegulace+0x234>)
 80015f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b66      	ldr	r3, [pc, #408]	@ (8001798 <StartRegulace+0x238>)
 8001600:	f7ff f8e4 	bl	80007cc <__aeabi_ddiv>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4962      	ldr	r1, [pc, #392]	@ (8001794 <StartRegulace+0x234>)
 800160a:	e9c1 2300 	strd	r2, r3, [r1]
	  	  RPM=1400*ControlledVariable/1700.0;
 800160e:	4b61      	ldr	r3, [pc, #388]	@ (8001794 <StartRegulace+0x234>)
 8001610:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	4b60      	ldr	r3, [pc, #384]	@ (800179c <StartRegulace+0x23c>)
 800161a:	f7fe ffad 	bl	8000578 <__aeabi_dmul>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	a354      	add	r3, pc, #336	@ (adr r3, 8001778 <StartRegulace+0x218>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7ff f8ce 	bl	80007cc <__aeabi_ddiv>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	495a      	ldr	r1, [pc, #360]	@ (80017a0 <StartRegulace+0x240>)
 8001636:	e9c1 2300 	strd	r2, r3, [r1]
	  	  ControlError=SetPoint-RPM;
 800163a:	69f8      	ldr	r0, [r7, #28]
 800163c:	f7fe ff22 	bl	8000484 <__aeabi_ui2d>
 8001640:	4b57      	ldr	r3, [pc, #348]	@ (80017a0 <StartRegulace+0x240>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe fddf 	bl	8000208 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  	  Pterm=PropGain*ControlError;
 8001652:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001656:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800165a:	f7fe ff8d 	bl	8000578 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  	  Iterm=Ipast+0.5*PropGain*Tsampling*(ControlError+Epast)/Ti;
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	4b4e      	ldr	r3, [pc, #312]	@ (80017a4 <StartRegulace+0x244>)
 800166c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001670:	f7fe ff82 	bl	8000578 <__aeabi_dmul>
 8001674:	4602      	mov	r2, r0
 8001676:	460b      	mov	r3, r1
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001680:	f7fe ff7a 	bl	8000578 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4614      	mov	r4, r2
 800168a:	461d      	mov	r5, r3
 800168c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001690:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001694:	f7fe fdba 	bl	800020c <__adddf3>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	4620      	mov	r0, r4
 800169e:	4629      	mov	r1, r5
 80016a0:	f7fe ff6a 	bl	8000578 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80016b0:	f7ff f88c 	bl	80007cc <__aeabi_ddiv>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80016bc:	f7fe fda6 	bl	800020c <__adddf3>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	  	  ManipulatedVariable=Pterm+Iterm;
 80016c8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80016cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016d0:	f7fe fd9c 	bl	800020c <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff f95e 	bl	800099c <__aeabi_d2uiz>
 80016e0:	4603      	mov	r3, r0
 80016e2:	65fb      	str	r3, [r7, #92]	@ 0x5c

	  	  if (ManipulatedVariable>Umax) {
 80016e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80016e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d905      	bls.n	80016f8 <StartRegulace+0x198>
	  		  ManipulatedVariable=Umax;
 80016ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  		  Iterm=Ipast;
 80016f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80016f4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	  	  }
	  	  if (ManipulatedVariable<Umin) {
 80016f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80016fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d205      	bcs.n	800170c <StartRegulace+0x1ac>
	  		  ManipulatedVariable=Umin;
 8001700:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001702:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  		  Iterm=Ipast;
 8001704:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001708:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
	  	  }
	  	  DAC_OUTPUT=ManipulatedVariable;
 800170c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800170e:	f7fe feb9 	bl	8000484 <__aeabi_ui2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4924      	ldr	r1, [pc, #144]	@ (80017a8 <StartRegulace+0x248>)
 8001718:	e9c1 2300 	strd	r2, r3, [r1]
	  	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, ManipulatedVariable);
 800171c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	4822      	ldr	r0, [pc, #136]	@ (80017ac <StartRegulace+0x24c>)
 8001724:	f002 f9e8 	bl	8003af8 <HAL_DAC_SetValue>
	  	  Ipast=Iterm;
 8001728:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800172c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	  	  Epast=ControlError;
 8001730:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001734:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	  	  ControlData.ManipulatedVariable = ManipulatedVariable;
 8001738:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800173a:	f7fe fea3 	bl	8000484 <__aeabi_ui2d>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4912      	ldr	r1, [pc, #72]	@ (800178c <StartRegulace+0x22c>)
 8001744:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  	  ControlData.ControlError = ControlError;
 8001748:	4910      	ldr	r1, [pc, #64]	@ (800178c <StartRegulace+0x22c>)
 800174a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800174e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  	  ControlData.ControlledVariable = ControlledVariable;
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <StartRegulace+0x234>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	490c      	ldr	r1, [pc, #48]	@ (800178c <StartRegulace+0x22c>)
 800175a:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  	  ControlExecutionTime = TIM3->CNT - StartTime;
 800175e:	4b0a      	ldr	r3, [pc, #40]	@ (8001788 <StartRegulace+0x228>)
 8001760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a12      	ldr	r2, [pc, #72]	@ (80017b0 <StartRegulace+0x250>)
 8001768:	6013      	str	r3, [r2, #0]
	  }
	  osMutexRelease(CommunicationMutexHandle);
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <StartRegulace+0x224>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f006 faff 	bl	8007d72 <osMutexRelease>
	  osSemaphoreAcquire(RegulationSemaphoreHandle, osWaitForever);
 8001774:	e70e      	b.n	8001594 <StartRegulace+0x34>
 8001776:	bf00      	nop
 8001778:	00000000 	.word	0x00000000
 800177c:	409a9000 	.word	0x409a9000
 8001780:	2004088c 	.word	0x2004088c
 8001784:	20040884 	.word	0x20040884
 8001788:	40000400 	.word	0x40000400
 800178c:	20040080 	.word	0x20040080
 8001790:	20040880 	.word	0x20040880
 8001794:	200400e8 	.word	0x200400e8
 8001798:	403e0000 	.word	0x403e0000
 800179c:	4095e000 	.word	0x4095e000
 80017a0:	200400f8 	.word	0x200400f8
 80017a4:	3fe00000 	.word	0x3fe00000
 80017a8:	200400f0 	.word	0x200400f0
 80017ac:	20040170 	.word	0x20040170
 80017b0:	20040104 	.word	0x20040104
 80017b4:	47ae147b 	.word	0x47ae147b
 80017b8:	3f947ae1 	.word	0x3f947ae1

080017bc <StartCommunication>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommunication */
void StartCommunication(void *argument)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  uint32_t StartTime;
  osStatus_t MutexStat;
  for(;;)
  {
	  osSemaphoreAcquire(CommunicationSemaphoreHandle, osWaitForever);
 80017c4:	4b21      	ldr	r3, [pc, #132]	@ (800184c <StartCommunication+0x90>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	4618      	mov	r0, r3
 80017ce:	f006 fb97 	bl	8007f00 <osSemaphoreAcquire>
	  StartTime = TIM3->CNT;
 80017d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001850 <StartCommunication+0x94>)
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	60fb      	str	r3, [r7, #12]
	  MutexStat=osMutexAcquire(CommunicationMutexHandle, 200);
 80017d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <StartCommunication+0x98>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	21c8      	movs	r1, #200	@ 0xc8
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 fa7c 	bl	8007cdc <osMutexAcquire>
 80017e4:	60b8      	str	r0, [r7, #8]
	  if (MutexStat==osOK){
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d123      	bne.n	8001834 <StartCommunication+0x78>
		ControlData.Setpoint = GlobalSetpoint;
 80017ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001858 <StartCommunication+0x9c>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	491a      	ldr	r1, [pc, #104]	@ (800185c <StartCommunication+0xa0>)
 80017f4:	e9c1 2300 	strd	r2, r3, [r1]
		ControlData.PropGain = GlobalPropGain;
 80017f8:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <StartCommunication+0xa4>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	4917      	ldr	r1, [pc, #92]	@ (800185c <StartCommunication+0xa0>)
 8001800:	e9c1 2308 	strd	r2, r3, [r1, #32]
		ControlData.IntegralTimeConstant = GlobalIntergralTimeConstant;
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <StartCommunication+0xa8>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	4914      	ldr	r1, [pc, #80]	@ (800185c <StartCommunication+0xa0>)
 800180c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		GlobalControlError = ControlData.ControlError;
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <StartCommunication+0xa0>)
 8001812:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001816:	4914      	ldr	r1, [pc, #80]	@ (8001868 <StartCommunication+0xac>)
 8001818:	e9c1 2300 	strd	r2, r3, [r1]
		GlobalControlledVariable = ControlData.ControlledVariable;
 800181c:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <StartCommunication+0xa0>)
 800181e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001822:	4912      	ldr	r1, [pc, #72]	@ (800186c <StartCommunication+0xb0>)
 8001824:	e9c1 2300 	strd	r2, r3, [r1]
		GlobalManipulatedVariable = ControlData.ManipulatedVariable;
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <StartCommunication+0xa0>)
 800182a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800182e:	4910      	ldr	r1, [pc, #64]	@ (8001870 <StartCommunication+0xb4>)
 8001830:	e9c1 2300 	strd	r2, r3, [r1]
	  }
	  CommunicationExecutionTime = TIM3->CNT - StartTime;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <StartCommunication+0x94>)
 8001836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <StartCommunication+0xb8>)
 800183e:	6013      	str	r3, [r2, #0]
	  osMutexRelease(CommunicationMutexHandle);
 8001840:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <StartCommunication+0x98>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f006 fa94 	bl	8007d72 <osMutexRelease>
	  osSemaphoreAcquire(CommunicationSemaphoreHandle, osWaitForever);
 800184a:	e7bb      	b.n	80017c4 <StartCommunication+0x8>
 800184c:	20040890 	.word	0x20040890
 8001850:	40000400 	.word	0x40000400
 8001854:	20040884 	.word	0x20040884
 8001858:	200400d8 	.word	0x200400d8
 800185c:	20040080 	.word	0x20040080
 8001860:	200400b8 	.word	0x200400b8
 8001864:	200400b0 	.word	0x200400b0
 8001868:	200400c0 	.word	0x200400c0
 800186c:	200400d0 	.word	0x200400d0
 8001870:	200400c8 	.word	0x200400c8
 8001874:	20040100 	.word	0x20040100

08001878 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800188a:	f000 fbbd 	bl	8002008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim==&htim3){
	}
	if (htim==&htim7){
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a0b      	ldr	r2, [pc, #44]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d104      	bne.n	80018a0 <HAL_TIM_PeriodElapsedCallback+0x28>
		osSemaphoreRelease(RegulationSemaphoreHandle);
 8001896:	4b0b      	ldr	r3, [pc, #44]	@ (80018c4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f006 fb82 	bl	8007fa4 <osSemaphoreRelease>
	}
	if (htim==&htim4){
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a09      	ldr	r2, [pc, #36]	@ (80018c8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d104      	bne.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0x3a>
		osSemaphoreRelease(CommunicationSemaphoreHandle);
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f006 fb79 	bl	8007fa4 <osSemaphoreRelease>
	}
  /* USER CODE END Callback 1 */
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40001000 	.word	0x40001000
 80018c0:	20040344 	.word	0x20040344
 80018c4:	2004088c 	.word	0x2004088c
 80018c8:	200402f8 	.word	0x200402f8
 80018cc:	20040890 	.word	0x20040890

080018d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d4:	b672      	cpsid	i
}
 80018d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <Error_Handler+0x8>

080018dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <HAL_MspInit+0x4c>)
 80018e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e6:	4a10      	ldr	r2, [pc, #64]	@ (8001928 <HAL_MspInit+0x4c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <HAL_MspInit+0x4c>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_MspInit+0x4c>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	6593      	str	r3, [r2, #88]	@ 0x58
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <HAL_MspInit+0x4c>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	210f      	movs	r1, #15
 8001916:	f06f 0001 	mvn.w	r0, #1
 800191a:	f001 fff5 	bl	8003908 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000

0800192c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b0ae      	sub	sp, #184	@ 0xb8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	2294      	movs	r2, #148	@ 0x94
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f009 fdbb 	bl	800b4c8 <memset>
  if(hadc->Instance==ADC1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2b      	ldr	r2, [pc, #172]	@ (8001a04 <HAL_ADC_MspInit+0xd8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d14f      	bne.n	80019fc <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800195c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001960:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001962:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800196a:	2302      	movs	r3, #2
 800196c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8001972:	230c      	movs	r3, #12
 8001974:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001976:	2302      	movs	r3, #2
 8001978:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800197a:	2302      	movs	r3, #2
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800197e:	2302      	movs	r3, #2
 8001980:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001982:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	4618      	mov	r0, r3
 800198e:	f003 fd27 	bl	80053e0 <HAL_RCCEx_PeriphCLKConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001998:	f7ff ff9a 	bl	80018d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_ADC_MspInit+0xdc>)
 800199e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a0:	4a19      	ldr	r2, [pc, #100]	@ (8001a08 <HAL_ADC_MspInit+0xdc>)
 80019a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a8:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <HAL_ADC_MspInit+0xdc>)
 80019aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b14      	ldr	r3, [pc, #80]	@ (8001a08 <HAL_ADC_MspInit+0xdc>)
 80019b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b8:	4a13      	ldr	r2, [pc, #76]	@ (8001a08 <HAL_ADC_MspInit+0xdc>)
 80019ba:	f043 0301 	orr.w	r3, r3, #1
 80019be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c0:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_ADC_MspInit+0xdc>)
 80019c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019cc:	2308      	movs	r3, #8
 80019ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019d2:	230b      	movs	r3, #11
 80019d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019e2:	4619      	mov	r1, r3
 80019e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019e8:	f002 fa0c 	bl	8003e04 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 5, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2105      	movs	r1, #5
 80019f0:	2012      	movs	r0, #18
 80019f2:	f001 ff89 	bl	8003908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80019f6:	2012      	movs	r0, #18
 80019f8:	f001 ffa2 	bl	8003940 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019fc:	bf00      	nop
 80019fe:	37b8      	adds	r7, #184	@ 0xb8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	50040000 	.word	0x50040000
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	@ 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a19      	ldr	r2, [pc, #100]	@ (8001a90 <HAL_DAC_MspInit+0x84>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d12c      	bne.n	8001a88 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <HAL_DAC_MspInit+0x88>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	4a18      	ldr	r2, [pc, #96]	@ (8001a94 <HAL_DAC_MspInit+0x88>)
 8001a34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001a38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <HAL_DAC_MspInit+0x88>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <HAL_DAC_MspInit+0x88>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	4a12      	ldr	r2, [pc, #72]	@ (8001a94 <HAL_DAC_MspInit+0x88>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a52:	4b10      	ldr	r3, [pc, #64]	@ (8001a94 <HAL_DAC_MspInit+0x88>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a5e:	2310      	movs	r3, #16
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a62:	2303      	movs	r3, #3
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a74:	f002 f9c6 	bl	8003e04 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2105      	movs	r1, #5
 8001a7c:	2036      	movs	r0, #54	@ 0x36
 8001a7e:	f001 ff43 	bl	8003908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a82:	2036      	movs	r0, #54	@ 0x36
 8001a84:	f001 ff5c 	bl	8003940 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001a88:	bf00      	nop
 8001a8a:	3728      	adds	r7, #40	@ 0x28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40007400 	.word	0x40007400
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0b0      	sub	sp, #192	@ 0xc0
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab0:	f107 0318 	add.w	r3, r7, #24
 8001ab4:	2294      	movs	r2, #148	@ 0x94
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f009 fd05 	bl	800b4c8 <memset>
  if(huart->Instance==LPUART1)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a43      	ldr	r2, [pc, #268]	@ (8001bd0 <HAL_UART_MspInit+0x138>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d13e      	bne.n	8001b46 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ac8:	2320      	movs	r3, #32
 8001aca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad0:	f107 0318 	add.w	r3, r7, #24
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 fc83 	bl	80053e0 <HAL_RCCEx_PeriphCLKConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ae0:	f7ff fef6 	bl	80018d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae8:	4a3a      	ldr	r2, [pc, #232]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001af0:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001afc:	4b35      	ldr	r3, [pc, #212]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b00:	4a34      	ldr	r2, [pc, #208]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b08:	4b32      	ldr	r3, [pc, #200]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8001b14:	f002 fd4a 	bl	80045ac <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001b18:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001b1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b32:	2308      	movs	r3, #8
 8001b34:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b38:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4826      	ldr	r0, [pc, #152]	@ (8001bd8 <HAL_UART_MspInit+0x140>)
 8001b40:	f002 f960 	bl	8003e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b44:	e040      	b.n	8001bc8 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a24      	ldr	r2, [pc, #144]	@ (8001bdc <HAL_UART_MspInit+0x144>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d13b      	bne.n	8001bc8 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b50:	2304      	movs	r3, #4
 8001b52:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b54:	2300      	movs	r3, #0
 8001b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b58:	f107 0318 	add.w	r3, r7, #24
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f003 fc3f 	bl	80053e0 <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001b68:	f7ff feb2 	bl	80018d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b70:	4a18      	ldr	r2, [pc, #96]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001b72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b84:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b88:	4a12      	ldr	r2, [pc, #72]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001b8a:	f043 0308 	orr.w	r3, r3, #8
 8001b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_UART_MspInit+0x13c>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bbc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4807      	ldr	r0, [pc, #28]	@ (8001be0 <HAL_UART_MspInit+0x148>)
 8001bc4:	f002 f91e 	bl	8003e04 <HAL_GPIO_Init>
}
 8001bc8:	bf00      	nop
 8001bca:	37c0      	adds	r7, #192	@ 0xc0
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40008000 	.word	0x40008000
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	48001800 	.word	0x48001800
 8001bdc:	40004800 	.word	0x40004800
 8001be0:	48000c00 	.word	0x48000c00

08001be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a27      	ldr	r2, [pc, #156]	@ (8001c90 <HAL_TIM_Base_MspInit+0xac>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d114      	bne.n	8001c20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf6:	4b27      	ldr	r3, [pc, #156]	@ (8001c94 <HAL_TIM_Base_MspInit+0xb0>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bfa:	4a26      	ldr	r2, [pc, #152]	@ (8001c94 <HAL_TIM_Base_MspInit+0xb0>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c02:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <HAL_TIM_Base_MspInit+0xb0>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2105      	movs	r1, #5
 8001c12:	201d      	movs	r0, #29
 8001c14:	f001 fe78 	bl	8003908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c18:	201d      	movs	r0, #29
 8001c1a:	f001 fe91 	bl	8003940 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001c1e:	e032      	b.n	8001c86 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1c      	ldr	r2, [pc, #112]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d114      	bne.n	8001c54 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <HAL_TIM_Base_MspInit+0xb0>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2e:	4a19      	ldr	r2, [pc, #100]	@ (8001c94 <HAL_TIM_Base_MspInit+0xb0>)
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c36:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <HAL_TIM_Base_MspInit+0xb0>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2105      	movs	r1, #5
 8001c46:	201e      	movs	r0, #30
 8001c48:	f001 fe5e 	bl	8003908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c4c:	201e      	movs	r0, #30
 8001c4e:	f001 fe77 	bl	8003940 <HAL_NVIC_EnableIRQ>
}
 8001c52:	e018      	b.n	8001c86 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM7)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a10      	ldr	r2, [pc, #64]	@ (8001c9c <HAL_TIM_Base_MspInit+0xb8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d113      	bne.n	8001c86 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_TIM_Base_MspInit+0xb0>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	4a0c      	ldr	r2, [pc, #48]	@ (8001c94 <HAL_TIM_Base_MspInit+0xb0>)
 8001c64:	f043 0320 	orr.w	r3, r3, #32
 8001c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_TIM_Base_MspInit+0xb0>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2105      	movs	r1, #5
 8001c7a:	2037      	movs	r0, #55	@ 0x37
 8001c7c:	f001 fe44 	bl	8003908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c80:	2037      	movs	r0, #55	@ 0x37
 8001c82:	f001 fe5d 	bl	8003940 <HAL_NVIC_EnableIRQ>
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40000400 	.word	0x40000400
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40000800 	.word	0x40000800
 8001c9c:	40001400 	.word	0x40001400

08001ca0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b0b0      	sub	sp, #192	@ 0xc0
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cb8:	f107 0318 	add.w	r3, r7, #24
 8001cbc:	2294      	movs	r2, #148	@ 0x94
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f009 fc01 	bl	800b4c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cce:	d16c      	bne.n	8001daa <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001cd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fb7d 	bl	80053e0 <HAL_RCCEx_PeriphCLKConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001cec:	f7ff fdf0 	bl	80018d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b30      	ldr	r3, [pc, #192]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001d08:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d22:	230a      	movs	r3, #10
 8001d24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d32:	f002 f867 	bl	8003e04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001d36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d4a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d54:	f002 f856 	bl	8003e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d58:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d5c:	4a15      	ldr	r2, [pc, #84]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001d5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d64:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d70:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d114      	bne.n	8001da6 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d80:	4a0c      	ldr	r2, [pc, #48]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d88:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001d94:	f002 fbfa 	bl	800458c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9c:	4a05      	ldr	r2, [pc, #20]	@ (8001db4 <HAL_PCD_MspInit+0x114>)
 8001d9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001da2:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001da4:	e001      	b.n	8001daa <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001da6:	f002 fbf1 	bl	800458c <HAL_PWREx_EnableVddUSB>
}
 8001daa:	bf00      	nop
 8001dac:	37c0      	adds	r7, #192	@ 0xc0
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08e      	sub	sp, #56	@ 0x38
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dc6:	4b34      	ldr	r3, [pc, #208]	@ (8001e98 <HAL_InitTick+0xe0>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dca:	4a33      	ldr	r2, [pc, #204]	@ (8001e98 <HAL_InitTick+0xe0>)
 8001dcc:	f043 0310 	orr.w	r3, r3, #16
 8001dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dd2:	4b31      	ldr	r3, [pc, #196]	@ (8001e98 <HAL_InitTick+0xe0>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001dde:	f107 0210 	add.w	r2, r7, #16
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fa07 	bl	80051fc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001dee:	6a3b      	ldr	r3, [r7, #32]
 8001df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d103      	bne.n	8001e00 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001df8:	f003 f9d4 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8001dfc:	6378      	str	r0, [r7, #52]	@ 0x34
 8001dfe:	e004      	b.n	8001e0a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e00:	f003 f9d0 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8001e04:	4603      	mov	r3, r0
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e0c:	4a23      	ldr	r2, [pc, #140]	@ (8001e9c <HAL_InitTick+0xe4>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	0c9b      	lsrs	r3, r3, #18
 8001e14:	3b01      	subs	r3, #1
 8001e16:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e18:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <HAL_InitTick+0xe8>)
 8001e1a:	4a22      	ldr	r2, [pc, #136]	@ (8001ea4 <HAL_InitTick+0xec>)
 8001e1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001e1e:	4b20      	ldr	r3, [pc, #128]	@ (8001ea0 <HAL_InitTick+0xe8>)
 8001e20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e26:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea0 <HAL_InitTick+0xe8>)
 8001e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <HAL_InitTick+0xe8>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <HAL_InitTick+0xe8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <HAL_InitTick+0xe8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001e3e:	4818      	ldr	r0, [pc, #96]	@ (8001ea0 <HAL_InitTick+0xe8>)
 8001e40:	f003 ffe6 	bl	8005e10 <HAL_TIM_Base_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001e4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d11b      	bne.n	8001e8a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e52:	4813      	ldr	r0, [pc, #76]	@ (8001ea0 <HAL_InitTick+0xe8>)
 8001e54:	f004 f834 	bl	8005ec0 <HAL_TIM_Base_Start_IT>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001e5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d111      	bne.n	8001e8a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e66:	2036      	movs	r0, #54	@ 0x36
 8001e68:	f001 fd6a 	bl	8003940 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b0f      	cmp	r3, #15
 8001e70:	d808      	bhi.n	8001e84 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e72:	2200      	movs	r2, #0
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	2036      	movs	r0, #54	@ 0x36
 8001e78:	f001 fd46 	bl	8003908 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <HAL_InitTick+0xf0>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e002      	b.n	8001e8a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3738      	adds	r7, #56	@ 0x38
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	431bde83 	.word	0x431bde83
 8001ea0:	20040894 	.word	0x20040894
 8001ea4:	40001000 	.word	0x40001000
 8001ea8:	20040004 	.word	0x20040004

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <HardFault_Handler+0x4>

08001ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <MemManage_Handler+0x4>

08001ec4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <BusFault_Handler+0x4>

08001ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <UsageFault_Handler+0x4>

08001ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ee8:	4802      	ldr	r0, [pc, #8]	@ (8001ef4 <ADC1_IRQHandler+0x10>)
 8001eea:	f000 fcec 	bl	80028c6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20040108 	.word	0x20040108

08001ef8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001efc:	4802      	ldr	r0, [pc, #8]	@ (8001f08 <TIM3_IRQHandler+0x10>)
 8001efe:	f004 f84f 	bl	8005fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200402ac 	.word	0x200402ac

08001f0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f10:	4802      	ldr	r0, [pc, #8]	@ (8001f1c <TIM4_IRQHandler+0x10>)
 8001f12:	f004 f845 	bl	8005fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200402f8 	.word	0x200402f8

08001f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f28:	f002 f916 	bl	8004158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f34:	4803      	ldr	r0, [pc, #12]	@ (8001f44 <TIM6_DAC_IRQHandler+0x14>)
 8001f36:	f004 f833 	bl	8005fa0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001f3a:	4803      	ldr	r0, [pc, #12]	@ (8001f48 <TIM6_DAC_IRQHandler+0x18>)
 8001f3c:	f001 fd82 	bl	8003a44 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20040894 	.word	0x20040894
 8001f48:	20040170 	.word	0x20040170

08001f4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <TIM7_IRQHandler+0x10>)
 8001f52:	f004 f825 	bl	8005fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20040344 	.word	0x20040344

08001f60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <SystemInit+0x20>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6a:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <SystemInit+0x20>)
 8001f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f88:	f7ff ffea 	bl	8001f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f8c:	480c      	ldr	r0, [pc, #48]	@ (8001fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f8e:	490d      	ldr	r1, [pc, #52]	@ (8001fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f90:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc8 <LoopForever+0xe>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa4:	4c0a      	ldr	r4, [pc, #40]	@ (8001fd0 <LoopForever+0x16>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fb2:	f009 fae7 	bl	800b584 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fb6:	f7fe fe89 	bl	8000ccc <main>

08001fba <LoopForever>:

LoopForever:
    b LoopForever
 8001fba:	e7fe      	b.n	8001fba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fbc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001fc0:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001fc4:	20040060 	.word	0x20040060
  ldr r2, =_sidata
 8001fc8:	0800b888 	.word	0x0800b888
  ldr r2, =_sbss
 8001fcc:	20040060 	.word	0x20040060
  ldr r4, =_ebss
 8001fd0:	200423c4 	.word	0x200423c4

08001fd4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <CAN1_RX0_IRQHandler>

08001fd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f001 fc86 	bl	80038f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fe6:	2005      	movs	r0, #5
 8001fe8:	f7ff fee6 	bl	8001db8 <HAL_InitTick>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	e001      	b.n	8001ffc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ff8:	f7ff fc70 	bl	80018dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_IncTick+0x20>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_IncTick+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a04      	ldr	r2, [pc, #16]	@ (800202c <HAL_IncTick+0x24>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20040008 	.word	0x20040008
 800202c:	200408e0 	.word	0x200408e0

08002030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;
 8002034:	4b03      	ldr	r3, [pc, #12]	@ (8002044 <HAL_GetTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	200408e0 	.word	0x200408e0

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff ffee 	bl	8002030 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffde 	bl	8002030 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20040008 	.word	0x20040008

08002090 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	609a      	str	r2, [r3, #8]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	3360      	adds	r3, #96	@ 0x60
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b08      	ldr	r3, [pc, #32]	@ (800213c <LL_ADC_SetOffset+0x44>)
 800211a:	4013      	ands	r3, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	4313      	orrs	r3, r2
 8002128:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002130:	bf00      	nop
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	03fff000 	.word	0x03fff000

08002140 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3360      	adds	r3, #96	@ 0x60
 800214e:	461a      	mov	r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3360      	adds	r3, #96	@ 0x60
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	431a      	orrs	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	615a      	str	r2, [r3, #20]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b087      	sub	sp, #28
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3330      	adds	r3, #48	@ 0x30
 80021fe:	461a      	mov	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	4413      	add	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	211f      	movs	r1, #31
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	401a      	ands	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0e9b      	lsrs	r3, r3, #26
 8002226:	f003 011f 	and.w	r1, r3, #31
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	431a      	orrs	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800223a:	bf00      	nop
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002252:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3314      	adds	r3, #20
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	4413      	add	r3, r2
 800228a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	0d1b      	lsrs	r3, r3, #20
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	2107      	movs	r1, #7
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	401a      	ands	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	0d1b      	lsrs	r3, r3, #20
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	431a      	orrs	r2, r3
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022b6:	bf00      	nop
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	43db      	mvns	r3, r3
 80022de:	401a      	ands	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0318 	and.w	r3, r3, #24
 80022e6:	4908      	ldr	r1, [pc, #32]	@ (8002308 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022e8:	40d9      	lsrs	r1, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	400b      	ands	r3, r1
 80022ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f2:	431a      	orrs	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	0007ffff 	.word	0x0007ffff

0800230c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800231c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6093      	str	r3, [r2, #8]
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002344:	d101      	bne.n	800234a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002346:	2301      	movs	r3, #1
 8002348:	e000      	b.n	800234c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002368:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800236c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002394:	d101      	bne.n	800239a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023e4:	f043 0202 	orr.w	r2, r3, #2
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d101      	bne.n	8002410 <LL_ADC_IsEnabled+0x18>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <LL_ADC_IsEnabled+0x1a>
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d101      	bne.n	8002436 <LL_ADC_IsDisableOngoing+0x18>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <LL_ADC_IsDisableOngoing+0x1a>
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002454:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002458:	f043 0204 	orr.w	r2, r3, #4
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d101      	bne.n	8002484 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d101      	bne.n	80024aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024c4:	2300      	movs	r3, #0
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e129      	b.n	8002726 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d109      	bne.n	80024f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff fa23 	bl	800192c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff19 	bl	8002330 <LL_ADC_IsDeepPowerDownEnabled>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d004      	beq.n	800250e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff feff 	bl	800230c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff34 	bl	8002380 <LL_ADC_IsInternalRegulatorEnabled>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff18 	bl	8002358 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002528:	4b81      	ldr	r3, [pc, #516]	@ (8002730 <HAL_ADC_Init+0x278>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	4a81      	ldr	r2, [pc, #516]	@ (8002734 <HAL_ADC_Init+0x27c>)
 8002530:	fba2 2303 	umull	r2, r3, r2, r3
 8002534:	099b      	lsrs	r3, r3, #6
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800253c:	e002      	b.n	8002544 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	3b01      	subs	r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f9      	bne.n	800253e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff16 	bl	8002380 <LL_ADC_IsInternalRegulatorEnabled>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255e:	f043 0210 	orr.w	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff ff76 	bl	800246c <LL_ADC_REG_IsConversionOngoing>
 8002580:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 80c2 	bne.w	8002714 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	f040 80be 	bne.w	8002714 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80025a0:	f043 0202 	orr.w	r2, r3, #2
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff23 	bl	80023f8 <LL_ADC_IsEnabled>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10b      	bne.n	80025d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025b8:	485f      	ldr	r0, [pc, #380]	@ (8002738 <HAL_ADC_Init+0x280>)
 80025ba:	f7ff ff1d 	bl	80023f8 <LL_ADC_IsEnabled>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4619      	mov	r1, r3
 80025ca:	485c      	ldr	r0, [pc, #368]	@ (800273c <HAL_ADC_Init+0x284>)
 80025cc:	f7ff fd60 	bl	8002090 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7e5b      	ldrb	r3, [r3, #25]
 80025d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d106      	bne.n	800260c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002602:	3b01      	subs	r3, #1
 8002604:	045b      	lsls	r3, r3, #17
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002610:	2b00      	cmp	r3, #0
 8002612:	d009      	beq.n	8002628 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002618:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	4b44      	ldr	r3, [pc, #272]	@ (8002740 <HAL_ADC_Init+0x288>)
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	69b9      	ldr	r1, [r7, #24]
 8002638:	430b      	orrs	r3, r1
 800263a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff26 	bl	8002492 <LL_ADC_INJ_IsConversionOngoing>
 8002646:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d140      	bne.n	80026d0 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d13d      	bne.n	80026d0 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7e1b      	ldrb	r3, [r3, #24]
 800265c:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800265e:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002666:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002676:	f023 0306 	bic.w	r3, r3, #6
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	430b      	orrs	r3, r1
 8002682:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800268a:	2b01      	cmp	r3, #1
 800268c:	d118      	bne.n	80026c0 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026a4:	4311      	orrs	r1, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80026aa:	4311      	orrs	r1, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026b0:	430a      	orrs	r2, r1
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	611a      	str	r2, [r3, #16]
 80026be:	e007      	b.n	80026d0 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d10c      	bne.n	80026f2 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f023 010f 	bic.w	r1, r3, #15
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80026f0:	e007      	b.n	8002702 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 020f 	bic.w	r2, r2, #15
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002706:	f023 0303 	bic.w	r3, r3, #3
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	659a      	str	r2, [r3, #88]	@ 0x58
 8002712:	e007      	b.n	8002724 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002718:	f043 0210 	orr.w	r2, r3, #16
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002724:	7ffb      	ldrb	r3, [r7, #31]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3720      	adds	r7, #32
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20040000 	.word	0x20040000
 8002734:	053e2d63 	.word	0x053e2d63
 8002738:	50040000 	.word	0x50040000
 800273c:	50040300 	.word	0x50040300
 8002740:	fff0c007 	.word	0xfff0c007

08002744 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fe8b 	bl	800246c <LL_ADC_REG_IsConversionOngoing>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	f040 80a0 	bne.w	800289e <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_ADC_Start_IT+0x28>
 8002768:	2302      	movs	r3, #2
 800276a:	e09b      	b.n	80028a4 <HAL_ADC_Start_IT+0x160>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fe6b 	bl	8003450 <ADC_Enable>
 800277a:	4603      	mov	r3, r0
 800277c:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	2b00      	cmp	r3, #0
 8002782:	f040 8087 	bne.w	8002894 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800278e:	f023 0301 	bic.w	r3, r3, #1
 8002792:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d006      	beq.n	80027b4 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	f023 0206 	bic.w	r2, r3, #6
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027b2:	e002      	b.n	80027ba <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	221c      	movs	r2, #28
 80027c0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 021c 	bic.w	r2, r2, #28
 80027d8:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d108      	bne.n	80027f4 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0208 	orr.w	r2, r2, #8
 80027f0:	605a      	str	r2, [r3, #4]
          break;
 80027f2:	e008      	b.n	8002806 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f042 0204 	orr.w	r2, r2, #4
 8002802:	605a      	str	r2, [r3, #4]
          break;
 8002804:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280a:	2b00      	cmp	r3, #0
 800280c:	d107      	bne.n	800281e <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0210 	orr.w	r2, r2, #16
 800281c:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02d      	beq.n	8002888 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002830:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002834:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d110      	bne.n	8002866 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 0220 	bic.w	r2, r2, #32
 8002852:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002862:	605a      	str	r2, [r3, #4]
            break;
 8002864:	e010      	b.n	8002888 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002874:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0220 	orr.w	r2, r2, #32
 8002884:	605a      	str	r2, [r3, #4]
            break;
 8002886:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fdd9 	bl	8002444 <LL_ADC_REG_StartConversion>
 8002892:	e006      	b.n	80028a2 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 800289c:	e001      	b.n	80028a2 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800289e:	2302      	movs	r3, #2
 80028a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b088      	sub	sp, #32
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d017      	beq.n	800291c <HAL_ADC_IRQHandler+0x56>
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d105      	bne.n	800290e <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 ff38 	bl	8003784 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2202      	movs	r2, #2
 800291a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <HAL_ADC_IRQHandler+0x6a>
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d109      	bne.n	8002944 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002936:	2b00      	cmp	r3, #0
 8002938:	d05e      	beq.n	80029f8 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d059      	beq.n	80029f8 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	d105      	bne.n	800295c <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002954:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fc31 	bl	80021c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d03e      	beq.n	80029ea <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d135      	bne.n	80029ea <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d12e      	bne.n	80029ea <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff fd6b 	bl	800246c <LL_ADC_REG_IsConversionOngoing>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d11a      	bne.n	80029d2 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 020c 	bic.w	r2, r2, #12
 80029aa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d112      	bne.n	80029ea <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80029d0:	e00b      	b.n	80029ea <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d6:	f043 0210 	orr.w	r2, r3, #16
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fd44 	bl	8001478 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	220c      	movs	r2, #12
 80029f6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <HAL_ADC_IRQHandler+0x146>
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d072      	beq.n	8002afc <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d06d      	beq.n	8002afc <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fc02 	bl	8002246 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002a42:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fbbd 	bl	80021c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a4e:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d047      	beq.n	8002aee <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_ADC_IRQHandler+0x1b2>
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03f      	beq.n	8002aee <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d13a      	bne.n	8002aee <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a82:	2b40      	cmp	r3, #64	@ 0x40
 8002a84:	d133      	bne.n	8002aee <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d12e      	bne.n	8002aee <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff fcfc 	bl	8002492 <LL_ADC_INJ_IsConversionOngoing>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d11a      	bne.n	8002ad6 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002aae:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d112      	bne.n	8002aee <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ad4:	e00b      	b.n	8002aee <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ada:	f043 0210 	orr.w	r2, r3, #16
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fe20 	bl	8003734 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2260      	movs	r2, #96	@ 0x60
 8002afa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d011      	beq.n	8002b2a <HAL_ADC_IRQHandler+0x264>
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00c      	beq.n	8002b2a <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f886 	bl	8002c2e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2280      	movs	r2, #128	@ 0x80
 8002b28:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <HAL_ADC_IRQHandler+0x294>
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fe06 	bl	800375c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d012      	beq.n	8002b8a <HAL_ADC_IRQHandler+0x2c4>
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00d      	beq.n	8002b8a <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b72:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fdf8 	bl	8003770 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f003 0310 	and.w	r3, r3, #16
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d02a      	beq.n	8002bea <HAL_ADC_IRQHandler+0x324>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d025      	beq.n	8002bea <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d102      	bne.n	8002bac <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	e008      	b.n	8002bbe <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d10e      	bne.n	8002be2 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd4:	f043 0202 	orr.w	r2, r3, #2
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f830 	bl	8002c42 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d018      	beq.n	8002c26 <HAL_ADC_IRQHandler+0x360>
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d013      	beq.n	8002c26 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c02:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c0e:	f043 0208 	orr.w	r2, r3, #8
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fd91 	bl	8003748 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c26:	bf00      	nop
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b0b6      	sub	sp, #216	@ 0xd8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x22>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e3d5      	b.n	8003426 <HAL_ADC_ConfigChannel+0x7ce>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fbf0 	bl	800246c <LL_ADC_REG_IsConversionOngoing>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 83ba 	bne.w	8003408 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d824      	bhi.n	8002cee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	3b02      	subs	r3, #2
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d81b      	bhi.n	8002ce6 <HAL_ADC_ConfigChannel+0x8e>
 8002cae:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <HAL_ADC_ConfigChannel+0x5c>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002ccd 	.word	0x08002ccd
 8002cbc:	08002cd5 	.word	0x08002cd5
 8002cc0:	08002cdd 	.word	0x08002cdd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002cc4:	230c      	movs	r3, #12
 8002cc6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cca:	e010      	b.n	8002cee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002ccc:	2312      	movs	r3, #18
 8002cce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cd2:	e00c      	b.n	8002cee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002cd4:	2318      	movs	r3, #24
 8002cd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cda:	e008      	b.n	8002cee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002ce4:	e003      	b.n	8002cee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002cec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002cfc:	f7ff fa77 	bl	80021ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fbb1 	bl	800246c <LL_ADC_REG_IsConversionOngoing>
 8002d0a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fbbd 	bl	8002492 <LL_ADC_INJ_IsConversionOngoing>
 8002d18:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 81bf 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 81ba 	bne.w	80030a4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d38:	d10f      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6818      	ldr	r0, [r3, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7ff fa91 	bl	800226c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff fa25 	bl	80021a2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002d58:	e00e      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6819      	ldr	r1, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	461a      	mov	r2, r3
 8002d68:	f7ff fa80 	bl	800226c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fa15 	bl	80021a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d00a      	beq.n	8002db0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	6919      	ldr	r1, [r3, #16]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002daa:	f7ff f9a5 	bl	80020f8 <LL_ADC_SetOffset>
 8002dae:	e179      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff f9c2 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x184>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff f9b7 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	f003 021f 	and.w	r2, r3, #31
 8002dda:	e01e      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x1c2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff f9ac 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002dfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	e004      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002e0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002e12:	fab3 f383 	clz	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d105      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x1da>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	0e9b      	lsrs	r3, r3, #26
 8002e2c:	f003 031f 	and.w	r3, r3, #31
 8002e30:	e018      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x20c>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002e46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002e4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002e56:	2320      	movs	r3, #32
 8002e58:	e004      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002e5a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d106      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f97b 	bl	800216c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff f95f 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002e82:	4603      	mov	r3, r0
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x24a>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff f954 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	0e9b      	lsrs	r3, r3, #26
 8002e9c:	f003 021f 	and.w	r2, r3, #31
 8002ea0:	e01e      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x288>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff f949 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002ec8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002ed0:	2320      	movs	r3, #32
 8002ed2:	e004      	b.n	8002ede <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002ed4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d105      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x2a0>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	e018      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x2d2>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002f0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	e004      	b.n	8002f2a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002f20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f24:	fab3 f383 	clz	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d106      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff f918 	bl	800216c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2102      	movs	r1, #2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff f8fc 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x310>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2102      	movs	r1, #2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff f8f1 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	0e9b      	lsrs	r3, r3, #26
 8002f62:	f003 021f 	and.w	r2, r3, #31
 8002f66:	e01e      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x34e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2102      	movs	r1, #2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff f8e6 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f7e:	fa93 f3a3 	rbit	r3, r3
 8002f82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002f96:	2320      	movs	r3, #32
 8002f98:	e004      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x366>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0e9b      	lsrs	r3, r3, #26
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	e014      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x390>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	e004      	b.n	8002fe8 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002fde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fe2:	fab3 f383 	clz	r3, r3
 8002fe6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d106      	bne.n	8002ffa <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff f8b9 	bl	800216c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2103      	movs	r1, #3
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff f89d 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8003006:	4603      	mov	r3, r0
 8003008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <HAL_ADC_ConfigChannel+0x3ce>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2103      	movs	r1, #3
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff f892 	bl	8002140 <LL_ADC_GetOffsetChannel>
 800301c:	4603      	mov	r3, r0
 800301e:	0e9b      	lsrs	r3, r3, #26
 8003020:	f003 021f 	and.w	r2, r3, #31
 8003024:	e017      	b.n	8003056 <HAL_ADC_ConfigChannel+0x3fe>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2103      	movs	r1, #3
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff f887 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8003032:	4603      	mov	r3, r0
 8003034:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800303e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003040:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003048:	2320      	movs	r3, #32
 800304a:	e003      	b.n	8003054 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 800304c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305e:	2b00      	cmp	r3, #0
 8003060:	d105      	bne.n	800306e <HAL_ADC_ConfigChannel+0x416>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	e011      	b.n	8003092 <HAL_ADC_ConfigChannel+0x43a>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800307c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800307e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003080:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8003086:	2320      	movs	r3, #32
 8003088:	e003      	b.n	8003092 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800308a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003092:	429a      	cmp	r2, r3
 8003094:	d106      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	2103      	movs	r1, #3
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff f864 	bl	800216c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f9a5 	bl	80023f8 <LL_ADC_IsEnabled>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f040 813f 	bne.w	8003334 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6819      	ldr	r1, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f7ff f8fe 	bl	80022c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4a8e      	ldr	r2, [pc, #568]	@ (8003308 <HAL_ADC_ConfigChannel+0x6b0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	f040 8130 	bne.w	8003334 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x4a4>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	3301      	adds	r3, #1
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2b09      	cmp	r3, #9
 80030f2:	bf94      	ite	ls
 80030f4:	2301      	movls	r3, #1
 80030f6:	2300      	movhi	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e019      	b.n	8003130 <HAL_ADC_ConfigChannel+0x4d8>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003104:	fa93 f3a3 	rbit	r3, r3
 8003108:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800310a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800310e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e003      	b.n	8003120 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	3301      	adds	r3, #1
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2b09      	cmp	r3, #9
 8003128:	bf94      	ite	ls
 800312a:	2301      	movls	r3, #1
 800312c:	2300      	movhi	r3, #0
 800312e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003130:	2b00      	cmp	r3, #0
 8003132:	d079      	beq.n	8003228 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d107      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x4f8>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	3301      	adds	r3, #1
 8003148:	069b      	lsls	r3, r3, #26
 800314a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800314e:	e015      	b.n	800317c <HAL_ADC_ConfigChannel+0x524>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800315e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003160:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8003168:	2320      	movs	r3, #32
 800316a:	e003      	b.n	8003174 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800316c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	3301      	adds	r3, #1
 8003176:	069b      	lsls	r3, r3, #26
 8003178:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_ADC_ConfigChannel+0x544>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	0e9b      	lsrs	r3, r3, #26
 800318e:	3301      	adds	r3, #1
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	e017      	b.n	80031cc <HAL_ADC_ConfigChannel+0x574>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80031aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80031ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80031b4:	2320      	movs	r3, #32
 80031b6:	e003      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80031b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	3301      	adds	r3, #1
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	ea42 0103 	orr.w	r1, r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10a      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x59a>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	0e9b      	lsrs	r3, r3, #26
 80031e2:	3301      	adds	r3, #1
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	051b      	lsls	r3, r3, #20
 80031f0:	e018      	b.n	8003224 <HAL_ADC_ConfigChannel+0x5cc>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003202:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800320a:	2320      	movs	r3, #32
 800320c:	e003      	b.n	8003216 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800320e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	3301      	adds	r3, #1
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4613      	mov	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	4413      	add	r3, r2
 8003222:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003224:	430b      	orrs	r3, r1
 8003226:	e080      	b.n	800332a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003230:	2b00      	cmp	r3, #0
 8003232:	d107      	bne.n	8003244 <HAL_ADC_ConfigChannel+0x5ec>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	0e9b      	lsrs	r3, r3, #26
 800323a:	3301      	adds	r3, #1
 800323c:	069b      	lsls	r3, r3, #26
 800323e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003242:	e015      	b.n	8003270 <HAL_ADC_ConfigChannel+0x618>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324c:	fa93 f3a3 	rbit	r3, r3
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800325c:	2320      	movs	r3, #32
 800325e:	e003      	b.n	8003268 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003262:	fab3 f383 	clz	r3, r3
 8003266:	b2db      	uxtb	r3, r3
 8003268:	3301      	adds	r3, #1
 800326a:	069b      	lsls	r3, r3, #26
 800326c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x638>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	0e9b      	lsrs	r3, r3, #26
 8003282:	3301      	adds	r3, #1
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	2101      	movs	r1, #1
 800328a:	fa01 f303 	lsl.w	r3, r1, r3
 800328e:	e017      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x668>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	fa93 f3a3 	rbit	r3, r3
 800329c:	61bb      	str	r3, [r7, #24]
  return result;
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80032a8:	2320      	movs	r3, #32
 80032aa:	e003      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	3301      	adds	r3, #1
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	2101      	movs	r1, #1
 80032bc:	fa01 f303 	lsl.w	r3, r1, r3
 80032c0:	ea42 0103 	orr.w	r1, r2, r3
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x694>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	0e9b      	lsrs	r3, r3, #26
 80032d6:	3301      	adds	r3, #1
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	3b1e      	subs	r3, #30
 80032e4:	051b      	lsls	r3, r3, #20
 80032e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	e01d      	b.n	8003328 <HAL_ADC_ConfigChannel+0x6d0>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	60fb      	str	r3, [r7, #12]
  return result;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d103      	bne.n	800330c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003304:	2320      	movs	r3, #32
 8003306:	e005      	b.n	8003314 <HAL_ADC_ConfigChannel+0x6bc>
 8003308:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3301      	adds	r3, #1
 8003316:	f003 021f 	and.w	r2, r3, #31
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	3b1e      	subs	r3, #30
 8003322:	051b      	lsls	r3, r3, #20
 8003324:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003328:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800332e:	4619      	mov	r1, r3
 8003330:	f7fe ff9c 	bl	800226c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	4b3d      	ldr	r3, [pc, #244]	@ (8003430 <HAL_ADC_ConfigChannel+0x7d8>)
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d06c      	beq.n	800341a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003340:	483c      	ldr	r0, [pc, #240]	@ (8003434 <HAL_ADC_ConfigChannel+0x7dc>)
 8003342:	f7fe fecb 	bl	80020dc <LL_ADC_GetCommonPathInternalCh>
 8003346:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a3a      	ldr	r2, [pc, #232]	@ (8003438 <HAL_ADC_ConfigChannel+0x7e0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d127      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003354:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003358:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d121      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a35      	ldr	r2, [pc, #212]	@ (800343c <HAL_ADC_ConfigChannel+0x7e4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d157      	bne.n	800341a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800336a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800336e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003372:	4619      	mov	r1, r3
 8003374:	482f      	ldr	r0, [pc, #188]	@ (8003434 <HAL_ADC_ConfigChannel+0x7dc>)
 8003376:	f7fe fe9e 	bl	80020b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800337a:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <HAL_ADC_ConfigChannel+0x7e8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	099b      	lsrs	r3, r3, #6
 8003380:	4a30      	ldr	r2, [pc, #192]	@ (8003444 <HAL_ADC_ConfigChannel+0x7ec>)
 8003382:	fba2 2303 	umull	r2, r3, r2, r3
 8003386:	099b      	lsrs	r3, r3, #6
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003394:	e002      	b.n	800339c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	3b01      	subs	r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f9      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033a2:	e03a      	b.n	800341a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a27      	ldr	r2, [pc, #156]	@ (8003448 <HAL_ADC_ConfigChannel+0x7f0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d113      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10d      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1f      	ldr	r2, [pc, #124]	@ (800343c <HAL_ADC_ConfigChannel+0x7e4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d12a      	bne.n	800341a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033cc:	4619      	mov	r1, r3
 80033ce:	4819      	ldr	r0, [pc, #100]	@ (8003434 <HAL_ADC_ConfigChannel+0x7dc>)
 80033d0:	f7fe fe71 	bl	80020b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033d4:	e021      	b.n	800341a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1c      	ldr	r2, [pc, #112]	@ (800344c <HAL_ADC_ConfigChannel+0x7f4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d11c      	bne.n	800341a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d116      	bne.n	800341a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a12      	ldr	r2, [pc, #72]	@ (800343c <HAL_ADC_ConfigChannel+0x7e4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d111      	bne.n	800341a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80033fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033fe:	4619      	mov	r1, r3
 8003400:	480c      	ldr	r0, [pc, #48]	@ (8003434 <HAL_ADC_ConfigChannel+0x7dc>)
 8003402:	f7fe fe58 	bl	80020b6 <LL_ADC_SetCommonPathInternalCh>
 8003406:	e008      	b.n	800341a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003422:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003426:	4618      	mov	r0, r3
 8003428:	37d8      	adds	r7, #216	@ 0xd8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	80080000 	.word	0x80080000
 8003434:	50040300 	.word	0x50040300
 8003438:	c7520000 	.word	0xc7520000
 800343c:	50040000 	.word	0x50040000
 8003440:	20040000 	.word	0x20040000
 8003444:	053e2d63 	.word	0x053e2d63
 8003448:	cb840000 	.word	0xcb840000
 800344c:	80000001 	.word	0x80000001

08003450 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe ffc9 	bl	80023f8 <LL_ADC_IsEnabled>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d169      	bne.n	8003540 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	4b36      	ldr	r3, [pc, #216]	@ (800354c <ADC_Enable+0xfc>)
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347e:	f043 0210 	orr.w	r2, r3, #16
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e055      	b.n	8003542 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fe ff84 	bl	80023a8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034a0:	482b      	ldr	r0, [pc, #172]	@ (8003550 <ADC_Enable+0x100>)
 80034a2:	f7fe fe1b 	bl	80020dc <LL_ADC_GetCommonPathInternalCh>
 80034a6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80034a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034b0:	4b28      	ldr	r3, [pc, #160]	@ (8003554 <ADC_Enable+0x104>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	099b      	lsrs	r3, r3, #6
 80034b6:	4a28      	ldr	r2, [pc, #160]	@ (8003558 <ADC_Enable+0x108>)
 80034b8:	fba2 2303 	umull	r2, r3, r2, r3
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034ca:	e002      	b.n	80034d2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f9      	bne.n	80034cc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80034d8:	f7fe fdaa 	bl	8002030 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034de:	e028      	b.n	8003532 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe ff87 	bl	80023f8 <LL_ADC_IsEnabled>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d104      	bne.n	80034fa <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe ff57 	bl	80023a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034fa:	f7fe fd99 	bl	8002030 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d914      	bls.n	8003532 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b01      	cmp	r3, #1
 8003514:	d00d      	beq.n	8003532 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351a:	f043 0210 	orr.w	r2, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003526:	f043 0201 	orr.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e007      	b.n	8003542 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d1cf      	bne.n	80034e0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	8000003f 	.word	0x8000003f
 8003550:	50040300 	.word	0x50040300
 8003554:	20040000 	.word	0x20040000
 8003558:	053e2d63 	.word	0x053e2d63

0800355c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe ff58 	bl	800241e <LL_ADC_IsDisableOngoing>
 800356e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe ff3f 	bl	80023f8 <LL_ADC_IsEnabled>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d047      	beq.n	8003610 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d144      	bne.n	8003610 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f003 030d 	and.w	r3, r3, #13
 8003590:	2b01      	cmp	r3, #1
 8003592:	d10c      	bne.n	80035ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe ff19 	bl	80023d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2203      	movs	r2, #3
 80035a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035a6:	f7fe fd43 	bl	8002030 <HAL_GetTick>
 80035aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035ac:	e029      	b.n	8003602 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b2:	f043 0210 	orr.w	r2, r3, #16
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035be:	f043 0201 	orr.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e023      	b.n	8003612 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035ca:	f7fe fd31 	bl	8002030 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d914      	bls.n	8003602 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00d      	beq.n	8003602 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ea:	f043 0210 	orr.w	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f6:	f043 0201 	orr.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e007      	b.n	8003612 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1dc      	bne.n	80035ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <LL_ADC_StartCalibration>:
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800362c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003636:	4313      	orrs	r3, r2
 8003638:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <LL_ADC_IsCalibrationOnGoing>:
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800365c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003660:	d101      	bne.n	8003666 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_ADCEx_Calibration_Start+0x1c>
 800368c:	2302      	movs	r3, #2
 800368e:	e04d      	b.n	800372c <HAL_ADCEx_Calibration_Start+0xb8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff5f 	bl	800355c <ADC_Disable>
 800369e:	4603      	mov	r3, r0
 80036a0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d136      	bne.n	8003716 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80036b0:	f023 0302 	bic.w	r3, r3, #2
 80036b4:	f043 0202 	orr.w	r2, r3, #2
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6839      	ldr	r1, [r7, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff ffa9 	bl	800361a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036c8:	e014      	b.n	80036f4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	3301      	adds	r3, #1
 80036ce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 80036d6:	d30d      	bcc.n	80036f4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036dc:	f023 0312 	bic.w	r3, r3, #18
 80036e0:	f043 0210 	orr.w	r2, r3, #16
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e01b      	b.n	800372c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ffa7 	bl	800364c <LL_ADC_IsCalibrationOnGoing>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e2      	bne.n	80036ca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003708:	f023 0303 	bic.w	r3, r3, #3
 800370c:	f043 0201 	orr.w	r2, r3, #1
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	659a      	str	r2, [r3, #88]	@ 0x58
 8003714:	e005      	b.n	8003722 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371a:	f043 0210 	orr.w	r2, r3, #16
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a8:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <__NVIC_SetPriorityGrouping+0x44>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037b4:	4013      	ands	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80037c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ca:	4a04      	ldr	r2, [pc, #16]	@ (80037dc <__NVIC_SetPriorityGrouping+0x44>)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	60d3      	str	r3, [r2, #12]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e4:	4b04      	ldr	r3, [pc, #16]	@ (80037f8 <__NVIC_GetPriorityGrouping+0x18>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 0307 	and.w	r3, r3, #7
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	2b00      	cmp	r3, #0
 800380c:	db0b      	blt.n	8003826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	f003 021f 	and.w	r2, r3, #31
 8003814:	4907      	ldr	r1, [pc, #28]	@ (8003834 <__NVIC_EnableIRQ+0x38>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2001      	movs	r0, #1
 800381e:	fa00 f202 	lsl.w	r2, r0, r2
 8003822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000e100 	.word	0xe000e100

08003838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	2b00      	cmp	r3, #0
 800384a:	db0a      	blt.n	8003862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	490c      	ldr	r1, [pc, #48]	@ (8003884 <__NVIC_SetPriority+0x4c>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	0112      	lsls	r2, r2, #4
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	440b      	add	r3, r1
 800385c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003860:	e00a      	b.n	8003878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4908      	ldr	r1, [pc, #32]	@ (8003888 <__NVIC_SetPriority+0x50>)
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	3b04      	subs	r3, #4
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	440b      	add	r3, r1
 8003876:	761a      	strb	r2, [r3, #24]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000e100 	.word	0xe000e100
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	@ 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f1c3 0307 	rsb	r3, r3, #7
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	bf28      	it	cs
 80038aa:	2304      	movcs	r3, #4
 80038ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d902      	bls.n	80038bc <NVIC_EncodePriority+0x30>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3b03      	subs	r3, #3
 80038ba:	e000      	b.n	80038be <NVIC_EncodePriority+0x32>
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	401a      	ands	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d4:	f04f 31ff 	mov.w	r1, #4294967295
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	43d9      	mvns	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e4:	4313      	orrs	r3, r2
         );
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3724      	adds	r7, #36	@ 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ff4c 	bl	8003798 <__NVIC_SetPriorityGrouping>
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800391a:	f7ff ff61 	bl	80037e0 <__NVIC_GetPriorityGrouping>
 800391e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	6978      	ldr	r0, [r7, #20]
 8003926:	f7ff ffb1 	bl	800388c <NVIC_EncodePriority>
 800392a:	4602      	mov	r2, r0
 800392c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ff80 	bl	8003838 <__NVIC_SetPriority>
}
 8003938:	bf00      	nop
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ff54 	bl	80037fc <__NVIC_EnableIRQ>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e014      	b.n	8003998 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	791b      	ldrb	r3, [r3, #4]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fe f844 	bl	8001a0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	795b      	ldrb	r3, [r3, #5]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_DAC_Start+0x16>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e040      	b.n	8003a38 <HAL_DAC_Start+0x98>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6819      	ldr	r1, [r3, #0]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2201      	movs	r2, #1
 80039d0:	409a      	lsls	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10f      	bne.n	8003a00 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d11d      	bne.n	8003a2a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	e014      	b.n	8003a2a <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2102      	movs	r1, #2
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d107      	bne.n	8003a2a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0202 	orr.w	r2, r2, #2
 8003a28:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a5a:	d120      	bne.n	8003a9e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a6a:	d118      	bne.n	8003a9e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f043 0201 	orr.w	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a96:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f852 	bl	8003b42 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aac:	d120      	bne.n	8003af0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003abc:	d118      	bne.n	8003af0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	f043 0202 	orr.w	r2, r3, #2
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003ad8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003ae8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f980 	bl	8003df0 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d105      	bne.n	8003b22 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e004      	b.n	8003b2c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4413      	add	r3, r2
 8003b28:	3314      	adds	r3, #20
 8003b2a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	371c      	adds	r7, #28
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003b4a:	bf00      	nop
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
	...

08003b58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	795b      	ldrb	r3, [r3, #5]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_DAC_ConfigChannel+0x1c>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e137      	b.n	8003de4 <HAL_DAC_ConfigChannel+0x28c>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	f040 8081 	bne.w	8003c8c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003b8a:	f7fe fa51 	bl	8002030 <HAL_GetTick>
 8003b8e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d140      	bne.n	8003c18 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b96:	e018      	b.n	8003bca <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b98:	f7fe fa4a 	bl	8002030 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d911      	bls.n	8003bca <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	f043 0208 	orr.w	r2, r3, #8
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e10c      	b.n	8003de4 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1df      	bne.n	8003b98 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f7fe fa35 	bl	8002048 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	69d2      	ldr	r2, [r2, #28]
 8003be6:	641a      	str	r2, [r3, #64]	@ 0x40
 8003be8:	e023      	b.n	8003c32 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003bea:	f7fe fa21 	bl	8002030 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d90f      	bls.n	8003c18 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da0a      	bge.n	8003c18 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f043 0208 	orr.w	r2, r3, #8
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2203      	movs	r2, #3
 8003c12:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0e5      	b.n	8003de4 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	dbe3      	blt.n	8003bea <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7fe fa10 	bl	8002048 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	69d2      	ldr	r2, [r2, #28]
 8003c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	ea02 0103 	and.w	r1, r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6a1a      	ldr	r2, [r3, #32]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0310 	and.w	r3, r3, #16
 8003c56:	409a      	lsls	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	21ff      	movs	r1, #255	@ 0xff
 8003c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	ea02 0103 	and.w	r1, r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f003 0310 	and.w	r3, r3, #16
 8003c82:	409a      	lsls	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d11d      	bne.n	8003cd0 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9a:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	221f      	movs	r2, #31
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd6:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2207      	movs	r2, #7
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6819      	ldr	r1, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f003 0310 	and.w	r3, r3, #16
 8003d24:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43da      	mvns	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	400a      	ands	r2, r1
 8003d34:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d74:	d104      	bne.n	8003d80 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d7c:	61fb      	str	r3, [r7, #28]
 8003d7e:	e018      	b.n	8003db2 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003d8e:	61fb      	str	r3, [r7, #28]
 8003d90:	e00f      	b.n	8003db2 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8003d92:	f001 f9fb 	bl	800518c <HAL_RCC_GetHCLKFreq>
 8003d96:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4a14      	ldr	r2, [pc, #80]	@ (8003dec <HAL_DAC_ConfigChannel+0x294>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d904      	bls.n	8003daa <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	e003      	b.n	8003db2 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003db0:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	22c0      	movs	r2, #192	@ 0xc0
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43da      	mvns	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	400a      	ands	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	04c4b400 	.word	0x04c4b400

08003df0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e12:	e166      	b.n	80040e2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	2101      	movs	r1, #1
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e20:	4013      	ands	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 8158 	beq.w	80040dc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d005      	beq.n	8003e44 <HAL_GPIO_Init+0x40>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0303 	and.w	r3, r3, #3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d130      	bne.n	8003ea6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	2203      	movs	r2, #3
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0201 	and.w	r2, r3, #1
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d017      	beq.n	8003ee2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d123      	bne.n	8003f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	08da      	lsrs	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3208      	adds	r2, #8
 8003ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	220f      	movs	r2, #15
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	08da      	lsrs	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3208      	adds	r2, #8
 8003f30:	6939      	ldr	r1, [r7, #16]
 8003f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	2203      	movs	r2, #3
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 0203 	and.w	r2, r3, #3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80b2 	beq.w	80040dc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f78:	4b61      	ldr	r3, [pc, #388]	@ (8004100 <HAL_GPIO_Init+0x2fc>)
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f7c:	4a60      	ldr	r2, [pc, #384]	@ (8004100 <HAL_GPIO_Init+0x2fc>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f84:	4b5e      	ldr	r3, [pc, #376]	@ (8004100 <HAL_GPIO_Init+0x2fc>)
 8003f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f90:	4a5c      	ldr	r2, [pc, #368]	@ (8004104 <HAL_GPIO_Init+0x300>)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	089b      	lsrs	r3, r3, #2
 8003f96:	3302      	adds	r3, #2
 8003f98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	220f      	movs	r2, #15
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003fba:	d02b      	beq.n	8004014 <HAL_GPIO_Init+0x210>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a52      	ldr	r2, [pc, #328]	@ (8004108 <HAL_GPIO_Init+0x304>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d025      	beq.n	8004010 <HAL_GPIO_Init+0x20c>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a51      	ldr	r2, [pc, #324]	@ (800410c <HAL_GPIO_Init+0x308>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d01f      	beq.n	800400c <HAL_GPIO_Init+0x208>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a50      	ldr	r2, [pc, #320]	@ (8004110 <HAL_GPIO_Init+0x30c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d019      	beq.n	8004008 <HAL_GPIO_Init+0x204>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a4f      	ldr	r2, [pc, #316]	@ (8004114 <HAL_GPIO_Init+0x310>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <HAL_GPIO_Init+0x200>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a4e      	ldr	r2, [pc, #312]	@ (8004118 <HAL_GPIO_Init+0x314>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d00d      	beq.n	8004000 <HAL_GPIO_Init+0x1fc>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a4d      	ldr	r2, [pc, #308]	@ (800411c <HAL_GPIO_Init+0x318>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <HAL_GPIO_Init+0x1f8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a4c      	ldr	r2, [pc, #304]	@ (8004120 <HAL_GPIO_Init+0x31c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d101      	bne.n	8003ff8 <HAL_GPIO_Init+0x1f4>
 8003ff4:	2307      	movs	r3, #7
 8003ff6:	e00e      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	e00c      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8003ffc:	2306      	movs	r3, #6
 8003ffe:	e00a      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8004000:	2305      	movs	r3, #5
 8004002:	e008      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8004004:	2304      	movs	r3, #4
 8004006:	e006      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8004008:	2303      	movs	r3, #3
 800400a:	e004      	b.n	8004016 <HAL_GPIO_Init+0x212>
 800400c:	2302      	movs	r3, #2
 800400e:	e002      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <HAL_GPIO_Init+0x212>
 8004014:	2300      	movs	r3, #0
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	f002 0203 	and.w	r2, r2, #3
 800401c:	0092      	lsls	r2, r2, #2
 800401e:	4093      	lsls	r3, r2
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004026:	4937      	ldr	r1, [pc, #220]	@ (8004104 <HAL_GPIO_Init+0x300>)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3302      	adds	r3, #2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004034:	4b3b      	ldr	r3, [pc, #236]	@ (8004124 <HAL_GPIO_Init+0x320>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	43db      	mvns	r3, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004058:	4a32      	ldr	r2, [pc, #200]	@ (8004124 <HAL_GPIO_Init+0x320>)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800405e:	4b31      	ldr	r3, [pc, #196]	@ (8004124 <HAL_GPIO_Init+0x320>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004082:	4a28      	ldr	r2, [pc, #160]	@ (8004124 <HAL_GPIO_Init+0x320>)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004088:	4b26      	ldr	r3, [pc, #152]	@ (8004124 <HAL_GPIO_Init+0x320>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	43db      	mvns	r3, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004124 <HAL_GPIO_Init+0x320>)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004124 <HAL_GPIO_Init+0x320>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4013      	ands	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040d6:	4a13      	ldr	r2, [pc, #76]	@ (8004124 <HAL_GPIO_Init+0x320>)
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3301      	adds	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f47f ae91 	bne.w	8003e14 <HAL_GPIO_Init+0x10>
  }
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40021000 	.word	0x40021000
 8004104:	40010000 	.word	0x40010000
 8004108:	48000400 	.word	0x48000400
 800410c:	48000800 	.word	0x48000800
 8004110:	48000c00 	.word	0x48000c00
 8004114:	48001000 	.word	0x48001000
 8004118:	48001400 	.word	0x48001400
 800411c:	48001800 	.word	0x48001800
 8004120:	48001c00 	.word	0x48001c00
 8004124:	40010400 	.word	0x40010400

08004128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	807b      	strh	r3, [r7, #2]
 8004134:	4613      	mov	r3, r2
 8004136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004138:	787b      	ldrb	r3, [r7, #1]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800413e:	887a      	ldrh	r2, [r7, #2]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004144:	e002      	b.n	800414c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004146:	887a      	ldrh	r2, [r7, #2]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004162:	4b08      	ldr	r3, [pc, #32]	@ (8004184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800416e:	4a05      	ldr	r2, [pc, #20]	@ (8004184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 f806 	bl	8004188 <HAL_GPIO_EXTI_Callback>
  }
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40010400 	.word	0x40010400

08004188 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b086      	sub	sp, #24
 80041a2:	af02      	add	r7, sp, #8
 80041a4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e101      	b.n	80043b4 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fd fd6b 	bl	8001ca0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2203      	movs	r2, #3
 80041ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f003 f958 	bl	8007492 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	7c1a      	ldrb	r2, [r3, #16]
 80041ea:	f88d 2000 	strb.w	r2, [sp]
 80041ee:	3304      	adds	r3, #4
 80041f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041f2:	f003 f921 	bl	8007438 <USB_CoreInit>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d005      	beq.n	8004208 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0d5      	b.n	80043b4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f003 f950 	bl	80074b4 <USB_SetCurrentMode>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2202      	movs	r2, #2
 800421e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e0c6      	b.n	80043b4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004226:	2300      	movs	r3, #0
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	e04a      	b.n	80042c2 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800422c:	7bfa      	ldrb	r2, [r7, #15]
 800422e:	6879      	ldr	r1, [r7, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4413      	add	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	3315      	adds	r3, #21
 800423c:	2201      	movs	r2, #1
 800423e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004240:	7bfa      	ldrb	r2, [r7, #15]
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	3314      	adds	r3, #20
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004254:	7bfa      	ldrb	r2, [r7, #15]
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	b298      	uxth	r0, r3
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	332e      	adds	r3, #46	@ 0x2e
 8004268:	4602      	mov	r2, r0
 800426a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800426c:	7bfa      	ldrb	r2, [r7, #15]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	4413      	add	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	3318      	adds	r3, #24
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004280:	7bfa      	ldrb	r2, [r7, #15]
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	440b      	add	r3, r1
 800428e:	331c      	adds	r3, #28
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	3320      	adds	r3, #32
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	3324      	adds	r3, #36	@ 0x24
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	3301      	adds	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	791b      	ldrb	r3, [r3, #4]
 80042c6:	7bfa      	ldrb	r2, [r7, #15]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d3af      	bcc.n	800422c <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042cc:	2300      	movs	r3, #0
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	e044      	b.n	800435c <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	4413      	add	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80042fe:	7bfa      	ldrb	r2, [r7, #15]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	3301      	adds	r3, #1
 800435a:	73fb      	strb	r3, [r7, #15]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	791b      	ldrb	r3, [r3, #4]
 8004360:	7bfa      	ldrb	r2, [r7, #15]
 8004362:	429a      	cmp	r2, r3
 8004364:	d3b5      	bcc.n	80042d2 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	7c1a      	ldrb	r2, [r3, #16]
 800436e:	f88d 2000 	strb.w	r2, [sp]
 8004372:	3304      	adds	r3, #4
 8004374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004376:	f003 f8e9 	bl	800754c <USB_DevInit>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e013      	b.n	80043b4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7b1b      	ldrb	r3, [r3, #12]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d102      	bne.n	80043a8 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f80a 	bl	80043bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f003 fa8e 	bl	80078ce <USB_DevDisconnect>

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ee:	f043 0303 	orr.w	r3, r3, #3
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004408:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <HAL_PWREx_GetVoltageRange+0x3c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004410:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004414:	d102      	bne.n	800441c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800441a:	e00b      	b.n	8004434 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800441c:	4b08      	ldr	r3, [pc, #32]	@ (8004440 <HAL_PWREx_GetVoltageRange+0x3c>)
 800441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004426:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800442a:	d102      	bne.n	8004432 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800442c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004430:	e000      	b.n	8004434 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004432:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40007000 	.word	0x40007000

08004444 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d141      	bne.n	80044d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004452:	4b4b      	ldr	r3, [pc, #300]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445e:	d131      	bne.n	80044c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004460:	4b47      	ldr	r3, [pc, #284]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004462:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004466:	4a46      	ldr	r2, [pc, #280]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800446c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004470:	4b43      	ldr	r3, [pc, #268]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004478:	4a41      	ldr	r2, [pc, #260]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800447a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800447e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004480:	4b40      	ldr	r3, [pc, #256]	@ (8004584 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2232      	movs	r2, #50	@ 0x32
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	4a3f      	ldr	r2, [pc, #252]	@ (8004588 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	0c9b      	lsrs	r3, r3, #18
 8004492:	3301      	adds	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004496:	e002      	b.n	800449e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3b01      	subs	r3, #1
 800449c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800449e:	4b38      	ldr	r3, [pc, #224]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044aa:	d102      	bne.n	80044b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f2      	bne.n	8004498 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044b2:	4b33      	ldr	r3, [pc, #204]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044be:	d158      	bne.n	8004572 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e057      	b.n	8004574 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ca:	4a2d      	ldr	r2, [pc, #180]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044d4:	e04d      	b.n	8004572 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044dc:	d141      	bne.n	8004562 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80044de:	4b28      	ldr	r3, [pc, #160]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80044e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ea:	d131      	bne.n	8004550 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044ec:	4b24      	ldr	r3, [pc, #144]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044f2:	4a23      	ldr	r2, [pc, #140]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80044fc:	4b20      	ldr	r3, [pc, #128]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004504:	4a1e      	ldr	r2, [pc, #120]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800450a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800450c:	4b1d      	ldr	r3, [pc, #116]	@ (8004584 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2232      	movs	r2, #50	@ 0x32
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	4a1c      	ldr	r2, [pc, #112]	@ (8004588 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004518:	fba2 2303 	umull	r2, r3, r2, r3
 800451c:	0c9b      	lsrs	r3, r3, #18
 800451e:	3301      	adds	r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004522:	e002      	b.n	800452a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3b01      	subs	r3, #1
 8004528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800452a:	4b15      	ldr	r3, [pc, #84]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004536:	d102      	bne.n	800453e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f2      	bne.n	8004524 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800453e:	4b10      	ldr	r3, [pc, #64]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800454a:	d112      	bne.n	8004572 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e011      	b.n	8004574 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004550:	4b0b      	ldr	r3, [pc, #44]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004552:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004556:	4a0a      	ldr	r2, [pc, #40]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800455c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004560:	e007      	b.n	8004572 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004562:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800456a:	4a05      	ldr	r2, [pc, #20]	@ (8004580 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800456c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004570:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	40007000 	.word	0x40007000
 8004584:	20040000 	.word	0x20040000
 8004588:	431bde83 	.word	0x431bde83

0800458c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	4a04      	ldr	r2, [pc, #16]	@ (80045a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004596:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800459a:	6053      	str	r3, [r2, #4]
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40007000 	.word	0x40007000

080045ac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80045b0:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4a04      	ldr	r2, [pc, #16]	@ (80045c8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80045b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ba:	6053      	str	r3, [r2, #4]
}
 80045bc:	bf00      	nop
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40007000 	.word	0x40007000

080045cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b088      	sub	sp, #32
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f000 bc08 	b.w	8004df0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045e0:	4b96      	ldr	r3, [pc, #600]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045ea:	4b94      	ldr	r3, [pc, #592]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80e4 	beq.w	80047ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d007      	beq.n	8004618 <HAL_RCC_OscConfig+0x4c>
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b0c      	cmp	r3, #12
 800460c:	f040 808b 	bne.w	8004726 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b01      	cmp	r3, #1
 8004614:	f040 8087 	bne.w	8004726 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004618:	4b88      	ldr	r3, [pc, #544]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_OscConfig+0x64>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e3df      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	4b81      	ldr	r3, [pc, #516]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <HAL_RCC_OscConfig+0x7e>
 8004640:	4b7e      	ldr	r3, [pc, #504]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004648:	e005      	b.n	8004656 <HAL_RCC_OscConfig+0x8a>
 800464a:	4b7c      	ldr	r3, [pc, #496]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 800464c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004656:	4293      	cmp	r3, r2
 8004658:	d223      	bcs.n	80046a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fdfe 	bl	8005260 <RCC_SetFlashLatencyFromMSIRange>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e3c0      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800466e:	4b73      	ldr	r3, [pc, #460]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a72      	ldr	r2, [pc, #456]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004674:	f043 0308 	orr.w	r3, r3, #8
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b70      	ldr	r3, [pc, #448]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	496d      	ldr	r1, [pc, #436]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004688:	4313      	orrs	r3, r2
 800468a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800468c:	4b6b      	ldr	r3, [pc, #428]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	4968      	ldr	r1, [pc, #416]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
 80046a0:	e025      	b.n	80046ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046a2:	4b66      	ldr	r3, [pc, #408]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a65      	ldr	r2, [pc, #404]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 80046a8:	f043 0308 	orr.w	r3, r3, #8
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4b63      	ldr	r3, [pc, #396]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	4960      	ldr	r1, [pc, #384]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046c0:	4b5e      	ldr	r3, [pc, #376]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	495b      	ldr	r1, [pc, #364]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fdbe 	bl	8005260 <RCC_SetFlashLatencyFromMSIRange>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e380      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ee:	f000 fcc1 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 80046f2:	4602      	mov	r2, r0
 80046f4:	4b51      	ldr	r3, [pc, #324]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	4950      	ldr	r1, [pc, #320]	@ (8004840 <HAL_RCC_OscConfig+0x274>)
 8004700:	5ccb      	ldrb	r3, [r1, r3]
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	fa22 f303 	lsr.w	r3, r2, r3
 800470a:	4a4e      	ldr	r2, [pc, #312]	@ (8004844 <HAL_RCC_OscConfig+0x278>)
 800470c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800470e:	4b4e      	ldr	r3, [pc, #312]	@ (8004848 <HAL_RCC_OscConfig+0x27c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fd fb50 	bl	8001db8 <HAL_InitTick>
 8004718:	4603      	mov	r3, r0
 800471a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d052      	beq.n	80047c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	e364      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d032      	beq.n	8004794 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800472e:	4b43      	ldr	r3, [pc, #268]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a42      	ldr	r2, [pc, #264]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800473a:	f7fd fc79 	bl	8002030 <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004740:	e008      	b.n	8004754 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004742:	f7fd fc75 	bl	8002030 <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d901      	bls.n	8004754 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e34d      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004754:	4b39      	ldr	r3, [pc, #228]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0f0      	beq.n	8004742 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004760:	4b36      	ldr	r3, [pc, #216]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a35      	ldr	r2, [pc, #212]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004766:	f043 0308 	orr.w	r3, r3, #8
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b33      	ldr	r3, [pc, #204]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	4930      	ldr	r1, [pc, #192]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800477e:	4b2f      	ldr	r3, [pc, #188]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69db      	ldr	r3, [r3, #28]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	492b      	ldr	r1, [pc, #172]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
 8004792:	e01a      	b.n	80047ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004794:	4b29      	ldr	r3, [pc, #164]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a28      	ldr	r2, [pc, #160]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80047a0:	f7fd fc46 	bl	8002030 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80047a8:	f7fd fc42 	bl	8002030 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e31a      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047ba:	4b20      	ldr	r3, [pc, #128]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x1dc>
 80047c6:	e000      	b.n	80047ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d073      	beq.n	80048be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_OscConfig+0x21c>
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	2b0c      	cmp	r3, #12
 80047e0:	d10e      	bne.n	8004800 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d10b      	bne.n	8004800 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e8:	4b14      	ldr	r3, [pc, #80]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d063      	beq.n	80048bc <HAL_RCC_OscConfig+0x2f0>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d15f      	bne.n	80048bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e2f7      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004808:	d106      	bne.n	8004818 <HAL_RCC_OscConfig+0x24c>
 800480a:	4b0c      	ldr	r3, [pc, #48]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a0b      	ldr	r2, [pc, #44]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004814:	6013      	str	r3, [r2, #0]
 8004816:	e025      	b.n	8004864 <HAL_RCC_OscConfig+0x298>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004820:	d114      	bne.n	800484c <HAL_RCC_OscConfig+0x280>
 8004822:	4b06      	ldr	r3, [pc, #24]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a05      	ldr	r2, [pc, #20]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	4b03      	ldr	r3, [pc, #12]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a02      	ldr	r2, [pc, #8]	@ (800483c <HAL_RCC_OscConfig+0x270>)
 8004834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004838:	6013      	str	r3, [r2, #0]
 800483a:	e013      	b.n	8004864 <HAL_RCC_OscConfig+0x298>
 800483c:	40021000 	.word	0x40021000
 8004840:	0800b808 	.word	0x0800b808
 8004844:	20040000 	.word	0x20040000
 8004848:	20040004 	.word	0x20040004
 800484c:	4ba0      	ldr	r3, [pc, #640]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a9f      	ldr	r2, [pc, #636]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	4b9d      	ldr	r3, [pc, #628]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a9c      	ldr	r2, [pc, #624]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 800485e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d013      	beq.n	8004894 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fd fbe0 	bl	8002030 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004874:	f7fd fbdc 	bl	8002030 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	@ 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e2b4      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004886:	4b92      	ldr	r3, [pc, #584]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0x2a8>
 8004892:	e014      	b.n	80048be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fd fbcc 	bl	8002030 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800489c:	f7fd fbc8 	bl	8002030 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	@ 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e2a0      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048ae:	4b88      	ldr	r3, [pc, #544]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x2d0>
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d060      	beq.n	800498c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_OscConfig+0x310>
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	d119      	bne.n	800490a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d116      	bne.n	800490a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048dc:	4b7c      	ldr	r3, [pc, #496]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <HAL_RCC_OscConfig+0x328>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e27d      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048f4:	4b76      	ldr	r3, [pc, #472]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	4973      	ldr	r1, [pc, #460]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004904:	4313      	orrs	r3, r2
 8004906:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004908:	e040      	b.n	800498c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d023      	beq.n	800495a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004912:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a6e      	ldr	r2, [pc, #440]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800491c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491e:	f7fd fb87 	bl	8002030 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004926:	f7fd fb83 	bl	8002030 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e25b      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004938:	4b65      	ldr	r3, [pc, #404]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004944:	4b62      	ldr	r3, [pc, #392]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	061b      	lsls	r3, r3, #24
 8004952:	495f      	ldr	r1, [pc, #380]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004954:	4313      	orrs	r3, r2
 8004956:	604b      	str	r3, [r1, #4]
 8004958:	e018      	b.n	800498c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800495a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a5c      	ldr	r2, [pc, #368]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004966:	f7fd fb63 	bl	8002030 <HAL_GetTick>
 800496a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800496e:	f7fd fb5f 	bl	8002030 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e237      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004980:	4b53      	ldr	r3, [pc, #332]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f0      	bne.n	800496e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d03c      	beq.n	8004a12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01c      	beq.n	80049da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a0:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 80049a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049a6:	4a4a      	ldr	r2, [pc, #296]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b0:	f7fd fb3e 	bl	8002030 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b8:	f7fd fb3a 	bl	8002030 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e212      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049ca:	4b41      	ldr	r3, [pc, #260]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 80049cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0ef      	beq.n	80049b8 <HAL_RCC_OscConfig+0x3ec>
 80049d8:	e01b      	b.n	8004a12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049da:	4b3d      	ldr	r3, [pc, #244]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 80049dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049e0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 80049e2:	f023 0301 	bic.w	r3, r3, #1
 80049e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ea:	f7fd fb21 	bl	8002030 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f2:	f7fd fb1d 	bl	8002030 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e1f5      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a04:	4b32      	ldr	r3, [pc, #200]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1ef      	bne.n	80049f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80a6 	beq.w	8004b6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a20:	2300      	movs	r3, #0
 8004a22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a24:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10d      	bne.n	8004a4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a30:	4b27      	ldr	r3, [pc, #156]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a34:	4a26      	ldr	r2, [pc, #152]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a3c:	4b24      	ldr	r3, [pc, #144]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a4c:	4b21      	ldr	r3, [pc, #132]	@ (8004ad4 <HAL_RCC_OscConfig+0x508>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d118      	bne.n	8004a8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a58:	4b1e      	ldr	r3, [pc, #120]	@ (8004ad4 <HAL_RCC_OscConfig+0x508>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ad4 <HAL_RCC_OscConfig+0x508>)
 8004a5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a64:	f7fd fae4 	bl	8002030 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6c:	f7fd fae0 	bl	8002030 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e1b8      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ad4 <HAL_RCC_OscConfig+0x508>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d108      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x4d8>
 8004a92:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a98:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004aa2:	e029      	b.n	8004af8 <HAL_RCC_OscConfig+0x52c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b05      	cmp	r3, #5
 8004aaa:	d115      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x50c>
 8004aac:	4b08      	ldr	r3, [pc, #32]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab2:	4a07      	ldr	r2, [pc, #28]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004ab4:	f043 0304 	orr.w	r3, r3, #4
 8004ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004abc:	4b04      	ldr	r3, [pc, #16]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac2:	4a03      	ldr	r2, [pc, #12]	@ (8004ad0 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004acc:	e014      	b.n	8004af8 <HAL_RCC_OscConfig+0x52c>
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40007000 	.word	0x40007000
 8004ad8:	4b9d      	ldr	r3, [pc, #628]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ade:	4a9c      	ldr	r2, [pc, #624]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004ae0:	f023 0301 	bic.w	r3, r3, #1
 8004ae4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ae8:	4b99      	ldr	r3, [pc, #612]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aee:	4a98      	ldr	r2, [pc, #608]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004af0:	f023 0304 	bic.w	r3, r3, #4
 8004af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d016      	beq.n	8004b2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b00:	f7fd fa96 	bl	8002030 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b06:	e00a      	b.n	8004b1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b08:	f7fd fa92 	bl	8002030 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e168      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b1e:	4b8c      	ldr	r3, [pc, #560]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0ed      	beq.n	8004b08 <HAL_RCC_OscConfig+0x53c>
 8004b2c:	e015      	b.n	8004b5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2e:	f7fd fa7f 	bl	8002030 <HAL_GetTick>
 8004b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b34:	e00a      	b.n	8004b4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b36:	f7fd fa7b 	bl	8002030 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e151      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b4c:	4b80      	ldr	r3, [pc, #512]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1ed      	bne.n	8004b36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b5a:	7ffb      	ldrb	r3, [r7, #31]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d105      	bne.n	8004b6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b60:	4b7b      	ldr	r3, [pc, #492]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b64:	4a7a      	ldr	r2, [pc, #488]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0320 	and.w	r3, r3, #32
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d03c      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01c      	beq.n	8004bba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b80:	4b73      	ldr	r3, [pc, #460]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b86:	4a72      	ldr	r2, [pc, #456]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b90:	f7fd fa4e 	bl	8002030 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b98:	f7fd fa4a 	bl	8002030 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e122      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004baa:	4b69      	ldr	r3, [pc, #420]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004bac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0ef      	beq.n	8004b98 <HAL_RCC_OscConfig+0x5cc>
 8004bb8:	e01b      	b.n	8004bf2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bba:	4b65      	ldr	r3, [pc, #404]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bc0:	4a63      	ldr	r2, [pc, #396]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bca:	f7fd fa31 	bl	8002030 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bd2:	f7fd fa2d 	bl	8002030 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e105      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004be4:	4b5a      	ldr	r3, [pc, #360]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1ef      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80f9 	beq.w	8004dee <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	f040 80cf 	bne.w	8004da4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c06:	4b52      	ldr	r3, [pc, #328]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	f003 0203 	and.w	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d12c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c24:	3b01      	subs	r3, #1
 8004c26:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d123      	bne.n	8004c74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c36:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d11b      	bne.n	8004c74 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c46:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d113      	bne.n	8004c74 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d109      	bne.n	8004c74 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d071      	beq.n	8004d58 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b0c      	cmp	r3, #12
 8004c78:	d068      	beq.n	8004d4c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c7a:	4b35      	ldr	r3, [pc, #212]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d105      	bne.n	8004c92 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c86:	4b32      	ldr	r3, [pc, #200]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e0ac      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c96:	4b2e      	ldr	r3, [pc, #184]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004c9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ca0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ca2:	f7fd f9c5 	bl	8002030 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004caa:	f7fd f9c1 	bl	8002030 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e099      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f0      	bne.n	8004caa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc8:	4b21      	ldr	r3, [pc, #132]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	4b21      	ldr	r3, [pc, #132]	@ (8004d54 <HAL_RCC_OscConfig+0x788>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	0112      	lsls	r2, r2, #4
 8004cdc:	4311      	orrs	r1, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ce2:	0212      	lsls	r2, r2, #8
 8004ce4:	4311      	orrs	r1, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cea:	0852      	lsrs	r2, r2, #1
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0552      	lsls	r2, r2, #21
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004cf6:	0852      	lsrs	r2, r2, #1
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	0652      	lsls	r2, r2, #25
 8004cfc:	4311      	orrs	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004d02:	06d2      	lsls	r2, r2, #27
 8004d04:	430a      	orrs	r2, r1
 8004d06:	4912      	ldr	r1, [pc, #72]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d0c:	4b10      	ldr	r3, [pc, #64]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0f      	ldr	r2, [pc, #60]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d18:	4b0d      	ldr	r3, [pc, #52]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d24:	f7fd f984 	bl	8002030 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd f980 	bl	8002030 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e058      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	4b04      	ldr	r3, [pc, #16]	@ (8004d50 <HAL_RCC_OscConfig+0x784>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d4a:	e050      	b.n	8004dee <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e04f      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
 8004d50:	40021000 	.word	0x40021000
 8004d54:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d58:	4b27      	ldr	r3, [pc, #156]	@ (8004df8 <HAL_RCC_OscConfig+0x82c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d144      	bne.n	8004dee <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d64:	4b24      	ldr	r3, [pc, #144]	@ (8004df8 <HAL_RCC_OscConfig+0x82c>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a23      	ldr	r2, [pc, #140]	@ (8004df8 <HAL_RCC_OscConfig+0x82c>)
 8004d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d70:	4b21      	ldr	r3, [pc, #132]	@ (8004df8 <HAL_RCC_OscConfig+0x82c>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4a20      	ldr	r2, [pc, #128]	@ (8004df8 <HAL_RCC_OscConfig+0x82c>)
 8004d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d7c:	f7fd f958 	bl	8002030 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d82:	e008      	b.n	8004d96 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d84:	f7fd f954 	bl	8002030 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e02c      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d96:	4b18      	ldr	r3, [pc, #96]	@ (8004df8 <HAL_RCC_OscConfig+0x82c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0f0      	beq.n	8004d84 <HAL_RCC_OscConfig+0x7b8>
 8004da2:	e024      	b.n	8004dee <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b0c      	cmp	r3, #12
 8004da8:	d01f      	beq.n	8004dea <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004daa:	4b13      	ldr	r3, [pc, #76]	@ (8004df8 <HAL_RCC_OscConfig+0x82c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a12      	ldr	r2, [pc, #72]	@ (8004df8 <HAL_RCC_OscConfig+0x82c>)
 8004db0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db6:	f7fd f93b 	bl	8002030 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dbe:	f7fd f937 	bl	8002030 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e00f      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd0:	4b09      	ldr	r3, [pc, #36]	@ (8004df8 <HAL_RCC_OscConfig+0x82c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f0      	bne.n	8004dbe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ddc:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <HAL_RCC_OscConfig+0x82c>)
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	4905      	ldr	r1, [pc, #20]	@ (8004df8 <HAL_RCC_OscConfig+0x82c>)
 8004de2:	4b06      	ldr	r3, [pc, #24]	@ (8004dfc <HAL_RCC_OscConfig+0x830>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	60cb      	str	r3, [r1, #12]
 8004de8:	e001      	b.n	8004dee <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3720      	adds	r7, #32
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	feeefffc 	.word	0xfeeefffc

08004e00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e11d      	b.n	8005054 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e18:	4b90      	ldr	r3, [pc, #576]	@ (800505c <HAL_RCC_ClockConfig+0x25c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d910      	bls.n	8004e48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e26:	4b8d      	ldr	r3, [pc, #564]	@ (800505c <HAL_RCC_ClockConfig+0x25c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f023 020f 	bic.w	r2, r3, #15
 8004e2e:	498b      	ldr	r1, [pc, #556]	@ (800505c <HAL_RCC_ClockConfig+0x25c>)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e36:	4b89      	ldr	r3, [pc, #548]	@ (800505c <HAL_RCC_ClockConfig+0x25c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d001      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e105      	b.n	8005054 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d010      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	4b81      	ldr	r3, [pc, #516]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d908      	bls.n	8004e76 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e64:	4b7e      	ldr	r3, [pc, #504]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	497b      	ldr	r1, [pc, #492]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d079      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d11e      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e8a:	4b75      	ldr	r3, [pc, #468]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e0dc      	b.n	8005054 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004e9a:	f000 fa3b 	bl	8005314 <RCC_GetSysClockFreqFromPLLSource>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4a70      	ldr	r2, [pc, #448]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d946      	bls.n	8004f34 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ea6:	4b6e      	ldr	r3, [pc, #440]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d140      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eb2:	4b6b      	ldr	r3, [pc, #428]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004eba:	4a69      	ldr	r2, [pc, #420]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ec0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ec2:	2380      	movs	r3, #128	@ 0x80
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	e035      	b.n	8004f34 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ed0:	4b63      	ldr	r3, [pc, #396]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d115      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0b9      	b.n	8005054 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d107      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ee8:	4b5d      	ldr	r3, [pc, #372]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d109      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0ad      	b.n	8005054 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ef8:	4b59      	ldr	r3, [pc, #356]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0a5      	b.n	8005054 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004f08:	f000 f8b4 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	4a55      	ldr	r2, [pc, #340]	@ (8005064 <HAL_RCC_ClockConfig+0x264>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d90f      	bls.n	8004f34 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004f14:	4b52      	ldr	r3, [pc, #328]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d109      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f20:	4b4f      	ldr	r3, [pc, #316]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f28:	4a4d      	ldr	r2, [pc, #308]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f2e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f30:	2380      	movs	r3, #128	@ 0x80
 8004f32:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f34:	4b4a      	ldr	r3, [pc, #296]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f023 0203 	bic.w	r2, r3, #3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4947      	ldr	r1, [pc, #284]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f46:	f7fd f873 	bl	8002030 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4c:	e00a      	b.n	8004f64 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f4e:	f7fd f86f 	bl	8002030 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e077      	b.n	8005054 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f64:	4b3e      	ldr	r3, [pc, #248]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 020c 	and.w	r2, r3, #12
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d1eb      	bne.n	8004f4e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b80      	cmp	r3, #128	@ 0x80
 8004f7a:	d105      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f7c:	4b38      	ldr	r3, [pc, #224]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4a37      	ldr	r2, [pc, #220]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004f82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f86:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d010      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	4b31      	ldr	r3, [pc, #196]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d208      	bcs.n	8004fb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	492b      	ldr	r1, [pc, #172]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb6:	4b29      	ldr	r3, [pc, #164]	@ (800505c <HAL_RCC_ClockConfig+0x25c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d210      	bcs.n	8004fe6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc4:	4b25      	ldr	r3, [pc, #148]	@ (800505c <HAL_RCC_ClockConfig+0x25c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f023 020f 	bic.w	r2, r3, #15
 8004fcc:	4923      	ldr	r1, [pc, #140]	@ (800505c <HAL_RCC_ClockConfig+0x25c>)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd4:	4b21      	ldr	r3, [pc, #132]	@ (800505c <HAL_RCC_ClockConfig+0x25c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d001      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e036      	b.n	8005054 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0304 	and.w	r3, r3, #4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d008      	beq.n	8005004 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	4918      	ldr	r1, [pc, #96]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8005000:	4313      	orrs	r3, r2
 8005002:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d009      	beq.n	8005024 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005010:	4b13      	ldr	r3, [pc, #76]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4910      	ldr	r1, [pc, #64]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005024:	f000 f826 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <HAL_RCC_ClockConfig+0x260>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f003 030f 	and.w	r3, r3, #15
 8005034:	490c      	ldr	r1, [pc, #48]	@ (8005068 <HAL_RCC_ClockConfig+0x268>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
 8005040:	4a0a      	ldr	r2, [pc, #40]	@ (800506c <HAL_RCC_ClockConfig+0x26c>)
 8005042:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005044:	4b0a      	ldr	r3, [pc, #40]	@ (8005070 <HAL_RCC_ClockConfig+0x270>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f7fc feb5 	bl	8001db8 <HAL_InitTick>
 800504e:	4603      	mov	r3, r0
 8005050:	73fb      	strb	r3, [r7, #15]

  return status;
 8005052:	7bfb      	ldrb	r3, [r7, #15]
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40022000 	.word	0x40022000
 8005060:	40021000 	.word	0x40021000
 8005064:	04c4b400 	.word	0x04c4b400
 8005068:	0800b808 	.word	0x0800b808
 800506c:	20040000 	.word	0x20040000
 8005070:	20040004 	.word	0x20040004

08005074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005074:	b480      	push	{r7}
 8005076:	b089      	sub	sp, #36	@ 0x24
 8005078:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800507a:	2300      	movs	r3, #0
 800507c:	61fb      	str	r3, [r7, #28]
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005082:	4b3e      	ldr	r3, [pc, #248]	@ (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800508c:	4b3b      	ldr	r3, [pc, #236]	@ (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x34>
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b0c      	cmp	r3, #12
 80050a0:	d121      	bne.n	80050e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d11e      	bne.n	80050e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050a8:	4b34      	ldr	r3, [pc, #208]	@ (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d107      	bne.n	80050c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050b4:	4b31      	ldr	r3, [pc, #196]	@ (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 80050b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050ba:	0a1b      	lsrs	r3, r3, #8
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	61fb      	str	r3, [r7, #28]
 80050c2:	e005      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050c4:	4b2d      	ldr	r3, [pc, #180]	@ (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005180 <HAL_RCC_GetSysClockFreq+0x10c>)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10d      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050e4:	e00a      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d102      	bne.n	80050f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050ec:	4b25      	ldr	r3, [pc, #148]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x110>)
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e004      	b.n	80050fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d101      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050f8:	4b23      	ldr	r3, [pc, #140]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x114>)
 80050fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b0c      	cmp	r3, #12
 8005100:	d134      	bne.n	800516c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005102:	4b1e      	ldr	r3, [pc, #120]	@ (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d003      	beq.n	800511a <HAL_RCC_GetSysClockFreq+0xa6>
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d003      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0xac>
 8005118:	e005      	b.n	8005126 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800511a:	4b1a      	ldr	r3, [pc, #104]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x110>)
 800511c:	617b      	str	r3, [r7, #20]
      break;
 800511e:	e005      	b.n	800512c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005120:	4b19      	ldr	r3, [pc, #100]	@ (8005188 <HAL_RCC_GetSysClockFreq+0x114>)
 8005122:	617b      	str	r3, [r7, #20]
      break;
 8005124:	e002      	b.n	800512c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	617b      	str	r3, [r7, #20]
      break;
 800512a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800512c:	4b13      	ldr	r3, [pc, #76]	@ (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	3301      	adds	r3, #1
 8005138:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800513a:	4b10      	ldr	r3, [pc, #64]	@ (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	0a1b      	lsrs	r3, r3, #8
 8005140:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	fb03 f202 	mul.w	r2, r3, r2
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005152:	4b0a      	ldr	r3, [pc, #40]	@ (800517c <HAL_RCC_GetSysClockFreq+0x108>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	0e5b      	lsrs	r3, r3, #25
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	3301      	adds	r3, #1
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	fbb2 f3f3 	udiv	r3, r2, r3
 800516a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800516c:	69bb      	ldr	r3, [r7, #24]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3724      	adds	r7, #36	@ 0x24
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000
 8005180:	0800b820 	.word	0x0800b820
 8005184:	00f42400 	.word	0x00f42400
 8005188:	007a1200 	.word	0x007a1200

0800518c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005190:	4b03      	ldr	r3, [pc, #12]	@ (80051a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005192:	681b      	ldr	r3, [r3, #0]
}
 8005194:	4618      	mov	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	20040000 	.word	0x20040000

080051a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051a8:	f7ff fff0 	bl	800518c <HAL_RCC_GetHCLKFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b06      	ldr	r3, [pc, #24]	@ (80051c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4904      	ldr	r1, [pc, #16]	@ (80051cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	f003 031f 	and.w	r3, r3, #31
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40021000 	.word	0x40021000
 80051cc:	0800b818 	.word	0x0800b818

080051d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051d4:	f7ff ffda 	bl	800518c <HAL_RCC_GetHCLKFreq>
 80051d8:	4602      	mov	r2, r0
 80051da:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	0adb      	lsrs	r3, r3, #11
 80051e0:	f003 0307 	and.w	r3, r3, #7
 80051e4:	4904      	ldr	r1, [pc, #16]	@ (80051f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051e6:	5ccb      	ldrb	r3, [r1, r3]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40021000 	.word	0x40021000
 80051f8:	0800b818 	.word	0x0800b818

080051fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	220f      	movs	r2, #15
 800520a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800520c:	4b12      	ldr	r3, [pc, #72]	@ (8005258 <HAL_RCC_GetClockConfig+0x5c>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 0203 	and.w	r2, r3, #3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005218:	4b0f      	ldr	r3, [pc, #60]	@ (8005258 <HAL_RCC_GetClockConfig+0x5c>)
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005224:	4b0c      	ldr	r3, [pc, #48]	@ (8005258 <HAL_RCC_GetClockConfig+0x5c>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005230:	4b09      	ldr	r3, [pc, #36]	@ (8005258 <HAL_RCC_GetClockConfig+0x5c>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	08db      	lsrs	r3, r3, #3
 8005236:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800523e:	4b07      	ldr	r3, [pc, #28]	@ (800525c <HAL_RCC_GetClockConfig+0x60>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 020f 	and.w	r2, r3, #15
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40021000 	.word	0x40021000
 800525c:	40022000 	.word	0x40022000

08005260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005268:	2300      	movs	r3, #0
 800526a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800526c:	4b27      	ldr	r3, [pc, #156]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800526e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005278:	f7ff f8c4 	bl	8004404 <HAL_PWREx_GetVoltageRange>
 800527c:	6178      	str	r0, [r7, #20]
 800527e:	e014      	b.n	80052aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005280:	4b22      	ldr	r3, [pc, #136]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005284:	4a21      	ldr	r2, [pc, #132]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800528a:	6593      	str	r3, [r2, #88]	@ 0x58
 800528c:	4b1f      	ldr	r3, [pc, #124]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005298:	f7ff f8b4 	bl	8004404 <HAL_PWREx_GetVoltageRange>
 800529c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800529e:	4b1b      	ldr	r3, [pc, #108]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052a2:	4a1a      	ldr	r2, [pc, #104]	@ (800530c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80052a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052b0:	d10b      	bne.n	80052ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b80      	cmp	r3, #128	@ 0x80
 80052b6:	d913      	bls.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80052bc:	d902      	bls.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052be:	2302      	movs	r3, #2
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	e00d      	b.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052c4:	2301      	movs	r3, #1
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	e00a      	b.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80052ce:	d902      	bls.n	80052d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80052d0:	2302      	movs	r3, #2
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	e004      	b.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b70      	cmp	r3, #112	@ 0x70
 80052da:	d101      	bne.n	80052e0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052dc:	2301      	movs	r3, #1
 80052de:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f023 020f 	bic.w	r2, r3, #15
 80052e8:	4909      	ldr	r1, [pc, #36]	@ (8005310 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052f0:	4b07      	ldr	r3, [pc, #28]	@ (8005310 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d001      	beq.n	8005302 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40021000 	.word	0x40021000
 8005310:	40022000 	.word	0x40022000

08005314 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800531a:	4b2d      	ldr	r3, [pc, #180]	@ (80053d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b03      	cmp	r3, #3
 8005328:	d00b      	beq.n	8005342 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b03      	cmp	r3, #3
 800532e:	d825      	bhi.n	800537c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d008      	beq.n	8005348 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b02      	cmp	r3, #2
 800533a:	d11f      	bne.n	800537c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800533c:	4b25      	ldr	r3, [pc, #148]	@ (80053d4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800533e:	613b      	str	r3, [r7, #16]
    break;
 8005340:	e01f      	b.n	8005382 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005342:	4b25      	ldr	r3, [pc, #148]	@ (80053d8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005344:	613b      	str	r3, [r7, #16]
    break;
 8005346:	e01c      	b.n	8005382 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005348:	4b21      	ldr	r3, [pc, #132]	@ (80053d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d107      	bne.n	8005364 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005354:	4b1e      	ldr	r3, [pc, #120]	@ (80053d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005356:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	f003 030f 	and.w	r3, r3, #15
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e005      	b.n	8005370 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005364:	4b1a      	ldr	r3, [pc, #104]	@ (80053d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	091b      	lsrs	r3, r3, #4
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005370:	4a1a      	ldr	r2, [pc, #104]	@ (80053dc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005378:	613b      	str	r3, [r7, #16]
    break;
 800537a:	e002      	b.n	8005382 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	613b      	str	r3, [r7, #16]
    break;
 8005380:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005382:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	091b      	lsrs	r3, r3, #4
 8005388:	f003 030f 	and.w	r3, r3, #15
 800538c:	3301      	adds	r3, #1
 800538e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005390:	4b0f      	ldr	r3, [pc, #60]	@ (80053d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	0a1b      	lsrs	r3, r3, #8
 8005396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	fb03 f202 	mul.w	r2, r3, r2
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053a8:	4b09      	ldr	r3, [pc, #36]	@ (80053d0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	0e5b      	lsrs	r3, r3, #25
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	3301      	adds	r3, #1
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80053c2:	683b      	ldr	r3, [r7, #0]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	40021000 	.word	0x40021000
 80053d4:	00f42400 	.word	0x00f42400
 80053d8:	007a1200 	.word	0x007a1200
 80053dc:	0800b820 	.word	0x0800b820

080053e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053e8:	2300      	movs	r3, #0
 80053ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053ec:	2300      	movs	r3, #0
 80053ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d040      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005400:	2b80      	cmp	r3, #128	@ 0x80
 8005402:	d02a      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005404:	2b80      	cmp	r3, #128	@ 0x80
 8005406:	d825      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005408:	2b60      	cmp	r3, #96	@ 0x60
 800540a:	d026      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800540c:	2b60      	cmp	r3, #96	@ 0x60
 800540e:	d821      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005410:	2b40      	cmp	r3, #64	@ 0x40
 8005412:	d006      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005414:	2b40      	cmp	r3, #64	@ 0x40
 8005416:	d81d      	bhi.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d009      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800541c:	2b20      	cmp	r3, #32
 800541e:	d010      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005420:	e018      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005422:	4b89      	ldr	r3, [pc, #548]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	4a88      	ldr	r2, [pc, #544]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800542c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800542e:	e015      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f000 fb02 	bl	8005a40 <RCCEx_PLLSAI1_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005440:	e00c      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3320      	adds	r3, #32
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fbed 	bl	8005c28 <RCCEx_PLLSAI2_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005452:	e003      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	74fb      	strb	r3, [r7, #19]
      break;
 8005458:	e000      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800545a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10b      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005462:	4b79      	ldr	r3, [pc, #484]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005464:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005468:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005470:	4975      	ldr	r1, [pc, #468]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005472:	4313      	orrs	r3, r2
 8005474:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005478:	e001      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547a:	7cfb      	ldrb	r3, [r7, #19]
 800547c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d047      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005492:	d030      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005498:	d82a      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800549a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800549e:	d02a      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80054a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054a4:	d824      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80054a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054aa:	d008      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0xde>
 80054ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054b0:	d81e      	bhi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xec>
 80054b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ba:	d010      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80054bc:	e018      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054be:	4b62      	ldr	r3, [pc, #392]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	4a61      	ldr	r2, [pc, #388]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054ca:	e015      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	2100      	movs	r1, #0
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 fab4 	bl	8005a40 <RCCEx_PLLSAI1_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054dc:	e00c      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3320      	adds	r3, #32
 80054e2:	2100      	movs	r1, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fb9f 	bl	8005c28 <RCCEx_PLLSAI2_Config>
 80054ea:	4603      	mov	r3, r0
 80054ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054ee:	e003      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	74fb      	strb	r3, [r7, #19]
      break;
 80054f4:	e000      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80054f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f8:	7cfb      	ldrb	r3, [r7, #19]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10b      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054fe:	4b52      	ldr	r3, [pc, #328]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005500:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005504:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550c:	494e      	ldr	r1, [pc, #312]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005514:	e001      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005516:	7cfb      	ldrb	r3, [r7, #19]
 8005518:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 809f 	beq.w	8005666 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005528:	2300      	movs	r3, #0
 800552a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800552c:	4b46      	ldr	r3, [pc, #280]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800552e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800553c:	2300      	movs	r3, #0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00d      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005542:	4b41      	ldr	r3, [pc, #260]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005546:	4a40      	ldr	r2, [pc, #256]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800554c:	6593      	str	r3, [r2, #88]	@ 0x58
 800554e:	4b3e      	ldr	r3, [pc, #248]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005556:	60bb      	str	r3, [r7, #8]
 8005558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555a:	2301      	movs	r3, #1
 800555c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800555e:	4b3b      	ldr	r3, [pc, #236]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a3a      	ldr	r2, [pc, #232]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005568:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800556a:	f7fc fd61 	bl	8002030 <HAL_GetTick>
 800556e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005570:	e009      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005572:	f7fc fd5d 	bl	8002030 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d902      	bls.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	74fb      	strb	r3, [r7, #19]
        break;
 8005584:	e005      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005586:	4b31      	ldr	r3, [pc, #196]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0ef      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005592:	7cfb      	ldrb	r3, [r7, #19]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d15b      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005598:	4b2b      	ldr	r3, [pc, #172]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01f      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d019      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055b6:	4b24      	ldr	r3, [pc, #144]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055c2:	4b21      	ldr	r3, [pc, #132]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c8:	4a1f      	ldr	r2, [pc, #124]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055e2:	4a19      	ldr	r2, [pc, #100]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d016      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f4:	f7fc fd1c 	bl	8002030 <HAL_GetTick>
 80055f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fa:	e00b      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055fc:	f7fc fd18 	bl	8002030 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560a:	4293      	cmp	r3, r2
 800560c:	d902      	bls.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	74fb      	strb	r3, [r7, #19]
            break;
 8005612:	e006      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005614:	4b0c      	ldr	r3, [pc, #48]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0ec      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005622:	7cfb      	ldrb	r3, [r7, #19]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10c      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005628:	4b07      	ldr	r3, [pc, #28]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005638:	4903      	ldr	r1, [pc, #12]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005640:	e008      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005642:	7cfb      	ldrb	r3, [r7, #19]
 8005644:	74bb      	strb	r3, [r7, #18]
 8005646:	e005      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005648:	40021000 	.word	0x40021000
 800564c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005650:	7cfb      	ldrb	r3, [r7, #19]
 8005652:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005654:	7c7b      	ldrb	r3, [r7, #17]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d105      	bne.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800565a:	4ba0      	ldr	r3, [pc, #640]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800565c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565e:	4a9f      	ldr	r2, [pc, #636]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005660:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005664:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005672:	4b9a      	ldr	r3, [pc, #616]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005678:	f023 0203 	bic.w	r2, r3, #3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005680:	4996      	ldr	r1, [pc, #600]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005694:	4b91      	ldr	r3, [pc, #580]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569a:	f023 020c 	bic.w	r2, r3, #12
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	498e      	ldr	r1, [pc, #568]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0304 	and.w	r3, r3, #4
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056b6:	4b89      	ldr	r3, [pc, #548]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c4:	4985      	ldr	r1, [pc, #532]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056d8:	4b80      	ldr	r3, [pc, #512]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e6:	497d      	ldr	r1, [pc, #500]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0310 	and.w	r3, r3, #16
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056fa:	4b78      	ldr	r3, [pc, #480]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005700:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005708:	4974      	ldr	r1, [pc, #464]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0320 	and.w	r3, r3, #32
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800571c:	4b6f      	ldr	r3, [pc, #444]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005722:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800572a:	496c      	ldr	r1, [pc, #432]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800573e:	4b67      	ldr	r3, [pc, #412]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005744:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800574c:	4963      	ldr	r1, [pc, #396]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005760:	4b5e      	ldr	r3, [pc, #376]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005766:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800576e:	495b      	ldr	r1, [pc, #364]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005782:	4b56      	ldr	r3, [pc, #344]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005788:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005790:	4952      	ldr	r1, [pc, #328]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057a4:	4b4d      	ldr	r3, [pc, #308]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b2:	494a      	ldr	r1, [pc, #296]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057c6:	4b45      	ldr	r3, [pc, #276]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d4:	4941      	ldr	r1, [pc, #260]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057e8:	4b3c      	ldr	r3, [pc, #240]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057ee:	f023 0203 	bic.w	r2, r3, #3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057f6:	4939      	ldr	r1, [pc, #228]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d028      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800580a:	4b34      	ldr	r3, [pc, #208]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005810:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005818:	4930      	ldr	r1, [pc, #192]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005824:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005828:	d106      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800582a:	4b2c      	ldr	r3, [pc, #176]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	4a2b      	ldr	r2, [pc, #172]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005830:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005834:	60d3      	str	r3, [r2, #12]
 8005836:	e011      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800583c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005840:	d10c      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3304      	adds	r3, #4
 8005846:	2101      	movs	r1, #1
 8005848:	4618      	mov	r0, r3
 800584a:	f000 f8f9 	bl	8005a40 <RCCEx_PLLSAI1_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005852:	7cfb      	ldrb	r3, [r7, #19]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005858:	7cfb      	ldrb	r3, [r7, #19]
 800585a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d04d      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800586c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005870:	d108      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005872:	4b1a      	ldr	r3, [pc, #104]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005874:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005878:	4a18      	ldr	r2, [pc, #96]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800587e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005882:	e012      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005884:	4b15      	ldr	r3, [pc, #84]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005886:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800588a:	4a14      	ldr	r2, [pc, #80]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005890:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005894:	4b11      	ldr	r3, [pc, #68]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800589a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058a2:	490e      	ldr	r1, [pc, #56]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058b2:	d106      	bne.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058b4:	4b09      	ldr	r3, [pc, #36]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	4a08      	ldr	r2, [pc, #32]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058be:	60d3      	str	r3, [r2, #12]
 80058c0:	e020      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058ca:	d109      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058cc:	4b03      	ldr	r3, [pc, #12]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4a02      	ldr	r2, [pc, #8]	@ (80058dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058d6:	60d3      	str	r3, [r2, #12]
 80058d8:	e014      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058e8:	d10c      	bne.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3304      	adds	r3, #4
 80058ee:	2101      	movs	r1, #1
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f8a5 	bl	8005a40 <RCCEx_PLLSAI1_Config>
 80058f6:	4603      	mov	r3, r0
 80058f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058fa:	7cfb      	ldrb	r3, [r7, #19]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005900:	7cfb      	ldrb	r3, [r7, #19]
 8005902:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d028      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005910:	4b4a      	ldr	r3, [pc, #296]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005916:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800591e:	4947      	ldr	r1, [pc, #284]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800592a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800592e:	d106      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005930:	4b42      	ldr	r3, [pc, #264]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a41      	ldr	r2, [pc, #260]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800593a:	60d3      	str	r3, [r2, #12]
 800593c:	e011      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005942:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005946:	d10c      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	2101      	movs	r1, #1
 800594e:	4618      	mov	r0, r3
 8005950:	f000 f876 	bl	8005a40 <RCCEx_PLLSAI1_Config>
 8005954:	4603      	mov	r3, r0
 8005956:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005958:	7cfb      	ldrb	r3, [r7, #19]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800595e:	7cfb      	ldrb	r3, [r7, #19]
 8005960:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01e      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800596e:	4b33      	ldr	r3, [pc, #204]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005974:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800597e:	492f      	ldr	r1, [pc, #188]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005990:	d10c      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3304      	adds	r3, #4
 8005996:	2102      	movs	r1, #2
 8005998:	4618      	mov	r0, r3
 800599a:	f000 f851 	bl	8005a40 <RCCEx_PLLSAI1_Config>
 800599e:	4603      	mov	r3, r0
 80059a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059a2:	7cfb      	ldrb	r3, [r7, #19]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80059a8:	7cfb      	ldrb	r3, [r7, #19]
 80059aa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00b      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059b8:	4b20      	ldr	r3, [pc, #128]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059be:	f023 0204 	bic.w	r2, r3, #4
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059c8:	491c      	ldr	r1, [pc, #112]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80059dc:	4b17      	ldr	r3, [pc, #92]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059e2:	f023 0218 	bic.w	r2, r3, #24
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ec:	4913      	ldr	r1, [pc, #76]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d017      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a00:	4b0e      	ldr	r3, [pc, #56]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a10:	490a      	ldr	r1, [pc, #40]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005a22:	d105      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a24:	4b05      	ldr	r3, [pc, #20]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	4a04      	ldr	r2, [pc, #16]	@ (8005a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a2e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a30:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3718      	adds	r7, #24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40021000 	.word	0x40021000

08005a40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a4e:	4b72      	ldr	r3, [pc, #456]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00e      	beq.n	8005a78 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	f003 0203 	and.w	r2, r3, #3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d103      	bne.n	8005a72 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d142      	bne.n	8005af8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
 8005a76:	e03f      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d018      	beq.n	8005ab2 <RCCEx_PLLSAI1_Config+0x72>
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d825      	bhi.n	8005ad0 <RCCEx_PLLSAI1_Config+0x90>
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d002      	beq.n	8005a8e <RCCEx_PLLSAI1_Config+0x4e>
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d009      	beq.n	8005aa0 <RCCEx_PLLSAI1_Config+0x60>
 8005a8c:	e020      	b.n	8005ad0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a8e:	4b62      	ldr	r3, [pc, #392]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d11d      	bne.n	8005ad6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a9e:	e01a      	b.n	8005ad6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005aa0:	4b5d      	ldr	r3, [pc, #372]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d116      	bne.n	8005ada <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ab0:	e013      	b.n	8005ada <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ab2:	4b59      	ldr	r3, [pc, #356]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10f      	bne.n	8005ade <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005abe:	4b56      	ldr	r3, [pc, #344]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005ace:	e006      	b.n	8005ade <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ad4:	e004      	b.n	8005ae0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ad6:	bf00      	nop
 8005ad8:	e002      	b.n	8005ae0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ada:	bf00      	nop
 8005adc:	e000      	b.n	8005ae0 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005ade:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d108      	bne.n	8005af8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005ae6:	4b4c      	ldr	r3, [pc, #304]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f023 0203 	bic.w	r2, r3, #3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4949      	ldr	r1, [pc, #292]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f040 8086 	bne.w	8005c0c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b00:	4b45      	ldr	r3, [pc, #276]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a44      	ldr	r2, [pc, #272]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0c:	f7fc fa90 	bl	8002030 <HAL_GetTick>
 8005b10:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b12:	e009      	b.n	8005b28 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b14:	f7fc fa8c 	bl	8002030 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d902      	bls.n	8005b28 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	73fb      	strb	r3, [r7, #15]
        break;
 8005b26:	e005      	b.n	8005b34 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b28:	4b3b      	ldr	r3, [pc, #236]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ef      	bne.n	8005b14 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d168      	bne.n	8005c0c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d113      	bne.n	8005b68 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b40:	4b35      	ldr	r3, [pc, #212]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	4b35      	ldr	r3, [pc, #212]	@ (8005c1c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6892      	ldr	r2, [r2, #8]
 8005b4c:	0211      	lsls	r1, r2, #8
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68d2      	ldr	r2, [r2, #12]
 8005b52:	06d2      	lsls	r2, r2, #27
 8005b54:	4311      	orrs	r1, r2
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6852      	ldr	r2, [r2, #4]
 8005b5a:	3a01      	subs	r2, #1
 8005b5c:	0112      	lsls	r2, r2, #4
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	492d      	ldr	r1, [pc, #180]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	610b      	str	r3, [r1, #16]
 8005b66:	e02d      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d115      	bne.n	8005b9a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b70:	691a      	ldr	r2, [r3, #16]
 8005b72:	4b2b      	ldr	r3, [pc, #172]	@ (8005c20 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6892      	ldr	r2, [r2, #8]
 8005b7a:	0211      	lsls	r1, r2, #8
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6912      	ldr	r2, [r2, #16]
 8005b80:	0852      	lsrs	r2, r2, #1
 8005b82:	3a01      	subs	r2, #1
 8005b84:	0552      	lsls	r2, r2, #21
 8005b86:	4311      	orrs	r1, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6852      	ldr	r2, [r2, #4]
 8005b8c:	3a01      	subs	r2, #1
 8005b8e:	0112      	lsls	r2, r2, #4
 8005b90:	430a      	orrs	r2, r1
 8005b92:	4921      	ldr	r1, [pc, #132]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	610b      	str	r3, [r1, #16]
 8005b98:	e014      	b.n	8005bc4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005b9c:	691a      	ldr	r2, [r3, #16]
 8005b9e:	4b21      	ldr	r3, [pc, #132]	@ (8005c24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6892      	ldr	r2, [r2, #8]
 8005ba6:	0211      	lsls	r1, r2, #8
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6952      	ldr	r2, [r2, #20]
 8005bac:	0852      	lsrs	r2, r2, #1
 8005bae:	3a01      	subs	r2, #1
 8005bb0:	0652      	lsls	r2, r2, #25
 8005bb2:	4311      	orrs	r1, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6852      	ldr	r2, [r2, #4]
 8005bb8:	3a01      	subs	r2, #1
 8005bba:	0112      	lsls	r2, r2, #4
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	4916      	ldr	r1, [pc, #88]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bc4:	4b14      	ldr	r3, [pc, #80]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a13      	ldr	r2, [pc, #76]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005bce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd0:	f7fc fa2e 	bl	8002030 <HAL_GetTick>
 8005bd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bd6:	e009      	b.n	8005bec <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bd8:	f7fc fa2a 	bl	8002030 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d902      	bls.n	8005bec <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	73fb      	strb	r3, [r7, #15]
          break;
 8005bea:	e005      	b.n	8005bf8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bec:	4b0a      	ldr	r3, [pc, #40]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0ef      	beq.n	8005bd8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bfe:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c00:	691a      	ldr	r2, [r3, #16]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	4904      	ldr	r1, [pc, #16]	@ (8005c18 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	07ff800f 	.word	0x07ff800f
 8005c20:	ff9f800f 	.word	0xff9f800f
 8005c24:	f9ff800f 	.word	0xf9ff800f

08005c28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c36:	4b72      	ldr	r3, [pc, #456]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00e      	beq.n	8005c60 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c42:	4b6f      	ldr	r3, [pc, #444]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0203 	and.w	r2, r3, #3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d103      	bne.n	8005c5a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
       ||
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d142      	bne.n	8005ce0 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	73fb      	strb	r3, [r7, #15]
 8005c5e:	e03f      	b.n	8005ce0 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d018      	beq.n	8005c9a <RCCEx_PLLSAI2_Config+0x72>
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d825      	bhi.n	8005cb8 <RCCEx_PLLSAI2_Config+0x90>
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d002      	beq.n	8005c76 <RCCEx_PLLSAI2_Config+0x4e>
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d009      	beq.n	8005c88 <RCCEx_PLLSAI2_Config+0x60>
 8005c74:	e020      	b.n	8005cb8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c76:	4b62      	ldr	r3, [pc, #392]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d11d      	bne.n	8005cbe <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c86:	e01a      	b.n	8005cbe <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c88:	4b5d      	ldr	r3, [pc, #372]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d116      	bne.n	8005cc2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c98:	e013      	b.n	8005cc2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c9a:	4b59      	ldr	r3, [pc, #356]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10f      	bne.n	8005cc6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ca6:	4b56      	ldr	r3, [pc, #344]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cb6:	e006      	b.n	8005cc6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	73fb      	strb	r3, [r7, #15]
      break;
 8005cbc:	e004      	b.n	8005cc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005cbe:	bf00      	nop
 8005cc0:	e002      	b.n	8005cc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005cc2:	bf00      	nop
 8005cc4:	e000      	b.n	8005cc8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005cc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d108      	bne.n	8005ce0 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005cce:	4b4c      	ldr	r3, [pc, #304]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f023 0203 	bic.w	r2, r3, #3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4949      	ldr	r1, [pc, #292]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f040 8086 	bne.w	8005df4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ce8:	4b45      	ldr	r3, [pc, #276]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a44      	ldr	r2, [pc, #272]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf4:	f7fc f99c 	bl	8002030 <HAL_GetTick>
 8005cf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cfa:	e009      	b.n	8005d10 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cfc:	f7fc f998 	bl	8002030 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d902      	bls.n	8005d10 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	73fb      	strb	r3, [r7, #15]
        break;
 8005d0e:	e005      	b.n	8005d1c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d10:	4b3b      	ldr	r3, [pc, #236]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1ef      	bne.n	8005cfc <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d168      	bne.n	8005df4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d113      	bne.n	8005d50 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d28:	4b35      	ldr	r3, [pc, #212]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d2a:	695a      	ldr	r2, [r3, #20]
 8005d2c:	4b35      	ldr	r3, [pc, #212]	@ (8005e04 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6892      	ldr	r2, [r2, #8]
 8005d34:	0211      	lsls	r1, r2, #8
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	68d2      	ldr	r2, [r2, #12]
 8005d3a:	06d2      	lsls	r2, r2, #27
 8005d3c:	4311      	orrs	r1, r2
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6852      	ldr	r2, [r2, #4]
 8005d42:	3a01      	subs	r2, #1
 8005d44:	0112      	lsls	r2, r2, #4
 8005d46:	430a      	orrs	r2, r1
 8005d48:	492d      	ldr	r1, [pc, #180]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	614b      	str	r3, [r1, #20]
 8005d4e:	e02d      	b.n	8005dac <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d115      	bne.n	8005d82 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d56:	4b2a      	ldr	r3, [pc, #168]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d58:	695a      	ldr	r2, [r3, #20]
 8005d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8005e08 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6892      	ldr	r2, [r2, #8]
 8005d62:	0211      	lsls	r1, r2, #8
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6912      	ldr	r2, [r2, #16]
 8005d68:	0852      	lsrs	r2, r2, #1
 8005d6a:	3a01      	subs	r2, #1
 8005d6c:	0552      	lsls	r2, r2, #21
 8005d6e:	4311      	orrs	r1, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6852      	ldr	r2, [r2, #4]
 8005d74:	3a01      	subs	r2, #1
 8005d76:	0112      	lsls	r2, r2, #4
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	4921      	ldr	r1, [pc, #132]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	614b      	str	r3, [r1, #20]
 8005d80:	e014      	b.n	8005dac <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d82:	4b1f      	ldr	r3, [pc, #124]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	4b21      	ldr	r3, [pc, #132]	@ (8005e0c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6892      	ldr	r2, [r2, #8]
 8005d8e:	0211      	lsls	r1, r2, #8
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6952      	ldr	r2, [r2, #20]
 8005d94:	0852      	lsrs	r2, r2, #1
 8005d96:	3a01      	subs	r2, #1
 8005d98:	0652      	lsls	r2, r2, #25
 8005d9a:	4311      	orrs	r1, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6852      	ldr	r2, [r2, #4]
 8005da0:	3a01      	subs	r2, #1
 8005da2:	0112      	lsls	r2, r2, #4
 8005da4:	430a      	orrs	r2, r1
 8005da6:	4916      	ldr	r1, [pc, #88]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005dac:	4b14      	ldr	r3, [pc, #80]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a13      	ldr	r2, [pc, #76]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005db6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db8:	f7fc f93a 	bl	8002030 <HAL_GetTick>
 8005dbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dbe:	e009      	b.n	8005dd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005dc0:	f7fc f936 	bl	8002030 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d902      	bls.n	8005dd4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	73fb      	strb	r3, [r7, #15]
          break;
 8005dd2:	e005      	b.n	8005de0 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0ef      	beq.n	8005dc0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005de6:	4b06      	ldr	r3, [pc, #24]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005de8:	695a      	ldr	r2, [r3, #20]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	4904      	ldr	r1, [pc, #16]	@ (8005e00 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40021000 	.word	0x40021000
 8005e04:	07ff800f 	.word	0x07ff800f
 8005e08:	ff9f800f 	.word	0xff9f800f
 8005e0c:	f9ff800f 	.word	0xf9ff800f

08005e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e049      	b.n	8005eb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fb fed4 	bl	8001be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2202      	movs	r2, #2
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f000 fa9e 	bl	8006390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d001      	beq.n	8005ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e04f      	b.n	8005f78 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0201 	orr.w	r2, r2, #1
 8005eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a23      	ldr	r2, [pc, #140]	@ (8005f84 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01d      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f02:	d018      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1f      	ldr	r2, [pc, #124]	@ (8005f88 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1e      	ldr	r2, [pc, #120]	@ (8005f8c <HAL_TIM_Base_Start_IT+0xcc>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00e      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1b      	ldr	r2, [pc, #108]	@ (8005f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_TIM_Base_Start_IT+0x76>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a19      	ldr	r2, [pc, #100]	@ (8005f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d115      	bne.n	8005f62 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	4b17      	ldr	r3, [pc, #92]	@ (8005f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b06      	cmp	r3, #6
 8005f46:	d015      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0xb4>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f4e:	d011      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f60:	e008      	b.n	8005f74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e000      	b.n	8005f76 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40000400 	.word	0x40000400
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	40000c00 	.word	0x40000c00
 8005f94:	40013400 	.word	0x40013400
 8005f98:	40014000 	.word	0x40014000
 8005f9c:	00010007 	.word	0x00010007

08005fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 0302 	and.w	r3, r3, #2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d020      	beq.n	8006004 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d01b      	beq.n	8006004 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0202 	mvn.w	r2, #2
 8005fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f9b2 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 8005ff0:	e005      	b.n	8005ffe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f9a4 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f9b5 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	f003 0304 	and.w	r3, r3, #4
 800600a:	2b00      	cmp	r3, #0
 800600c:	d020      	beq.n	8006050 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01b      	beq.n	8006050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0204 	mvn.w	r2, #4
 8006020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f98c 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f97e 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f98f 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f003 0308 	and.w	r3, r3, #8
 8006056:	2b00      	cmp	r3, #0
 8006058:	d020      	beq.n	800609c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01b      	beq.n	800609c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0208 	mvn.w	r2, #8
 800606c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2204      	movs	r2, #4
 8006072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f966 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 8006088:	e005      	b.n	8006096 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f958 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f969 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f003 0310 	and.w	r3, r3, #16
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d020      	beq.n	80060e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f003 0310 	and.w	r3, r3, #16
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01b      	beq.n	80060e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0210 	mvn.w	r2, #16
 80060b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2208      	movs	r2, #8
 80060be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f940 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 80060d4:	e005      	b.n	80060e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f932 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f943 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00c      	beq.n	800610c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d007      	beq.n	800610c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0201 	mvn.w	r2, #1
 8006104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fb fbb6 	bl	8001878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00c      	beq.n	800613a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006126:	2b00      	cmp	r3, #0
 8006128:	d007      	beq.n	800613a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fafd 	bl	8006734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00c      	beq.n	800615e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 faf5 	bl	8006748 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00c      	beq.n	8006182 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616e:	2b00      	cmp	r3, #0
 8006170:	d007      	beq.n	8006182 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800617a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f8fd 	bl	800637c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00c      	beq.n	80061a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f06f 0220 	mvn.w	r2, #32
 800619e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fabd 	bl	8006720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d101      	bne.n	80061ca <HAL_TIM_ConfigClockSource+0x1c>
 80061c6:	2302      	movs	r3, #2
 80061c8:	e0b6      	b.n	8006338 <HAL_TIM_ConfigClockSource+0x18a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2202      	movs	r2, #2
 80061d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061f4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006206:	d03e      	beq.n	8006286 <HAL_TIM_ConfigClockSource+0xd8>
 8006208:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800620c:	f200 8087 	bhi.w	800631e <HAL_TIM_ConfigClockSource+0x170>
 8006210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006214:	f000 8086 	beq.w	8006324 <HAL_TIM_ConfigClockSource+0x176>
 8006218:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800621c:	d87f      	bhi.n	800631e <HAL_TIM_ConfigClockSource+0x170>
 800621e:	2b70      	cmp	r3, #112	@ 0x70
 8006220:	d01a      	beq.n	8006258 <HAL_TIM_ConfigClockSource+0xaa>
 8006222:	2b70      	cmp	r3, #112	@ 0x70
 8006224:	d87b      	bhi.n	800631e <HAL_TIM_ConfigClockSource+0x170>
 8006226:	2b60      	cmp	r3, #96	@ 0x60
 8006228:	d050      	beq.n	80062cc <HAL_TIM_ConfigClockSource+0x11e>
 800622a:	2b60      	cmp	r3, #96	@ 0x60
 800622c:	d877      	bhi.n	800631e <HAL_TIM_ConfigClockSource+0x170>
 800622e:	2b50      	cmp	r3, #80	@ 0x50
 8006230:	d03c      	beq.n	80062ac <HAL_TIM_ConfigClockSource+0xfe>
 8006232:	2b50      	cmp	r3, #80	@ 0x50
 8006234:	d873      	bhi.n	800631e <HAL_TIM_ConfigClockSource+0x170>
 8006236:	2b40      	cmp	r3, #64	@ 0x40
 8006238:	d058      	beq.n	80062ec <HAL_TIM_ConfigClockSource+0x13e>
 800623a:	2b40      	cmp	r3, #64	@ 0x40
 800623c:	d86f      	bhi.n	800631e <HAL_TIM_ConfigClockSource+0x170>
 800623e:	2b30      	cmp	r3, #48	@ 0x30
 8006240:	d064      	beq.n	800630c <HAL_TIM_ConfigClockSource+0x15e>
 8006242:	2b30      	cmp	r3, #48	@ 0x30
 8006244:	d86b      	bhi.n	800631e <HAL_TIM_ConfigClockSource+0x170>
 8006246:	2b20      	cmp	r3, #32
 8006248:	d060      	beq.n	800630c <HAL_TIM_ConfigClockSource+0x15e>
 800624a:	2b20      	cmp	r3, #32
 800624c:	d867      	bhi.n	800631e <HAL_TIM_ConfigClockSource+0x170>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d05c      	beq.n	800630c <HAL_TIM_ConfigClockSource+0x15e>
 8006252:	2b10      	cmp	r3, #16
 8006254:	d05a      	beq.n	800630c <HAL_TIM_ConfigClockSource+0x15e>
 8006256:	e062      	b.n	800631e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006268:	f000 f9b2 	bl	80065d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800627a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	609a      	str	r2, [r3, #8]
      break;
 8006284:	e04f      	b.n	8006326 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006296:	f000 f99b 	bl	80065d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	689a      	ldr	r2, [r3, #8]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062a8:	609a      	str	r2, [r3, #8]
      break;
 80062aa:	e03c      	b.n	8006326 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062b8:	461a      	mov	r2, r3
 80062ba:	f000 f90f 	bl	80064dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2150      	movs	r1, #80	@ 0x50
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 f968 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 80062ca:	e02c      	b.n	8006326 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062d8:	461a      	mov	r2, r3
 80062da:	f000 f92e 	bl	800653a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2160      	movs	r1, #96	@ 0x60
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 f958 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 80062ea:	e01c      	b.n	8006326 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f8:	461a      	mov	r2, r3
 80062fa:	f000 f8ef 	bl	80064dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2140      	movs	r1, #64	@ 0x40
 8006304:	4618      	mov	r0, r3
 8006306:	f000 f948 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 800630a:	e00c      	b.n	8006326 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f000 f93f 	bl	800659a <TIM_ITRx_SetConfig>
      break;
 800631c:	e003      	b.n	8006326 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	73fb      	strb	r3, [r7, #15]
      break;
 8006322:	e000      	b.n	8006326 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006324:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006336:	7bfb      	ldrb	r3, [r7, #15]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a46      	ldr	r2, [pc, #280]	@ (80064bc <TIM_Base_SetConfig+0x12c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d013      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ae:	d00f      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a43      	ldr	r2, [pc, #268]	@ (80064c0 <TIM_Base_SetConfig+0x130>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00b      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a42      	ldr	r2, [pc, #264]	@ (80064c4 <TIM_Base_SetConfig+0x134>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d007      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a41      	ldr	r2, [pc, #260]	@ (80064c8 <TIM_Base_SetConfig+0x138>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d003      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a40      	ldr	r2, [pc, #256]	@ (80064cc <TIM_Base_SetConfig+0x13c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d108      	bne.n	80063e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a35      	ldr	r2, [pc, #212]	@ (80064bc <TIM_Base_SetConfig+0x12c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01f      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f0:	d01b      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a32      	ldr	r2, [pc, #200]	@ (80064c0 <TIM_Base_SetConfig+0x130>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d017      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a31      	ldr	r2, [pc, #196]	@ (80064c4 <TIM_Base_SetConfig+0x134>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a30      	ldr	r2, [pc, #192]	@ (80064c8 <TIM_Base_SetConfig+0x138>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00f      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2f      	ldr	r2, [pc, #188]	@ (80064cc <TIM_Base_SetConfig+0x13c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00b      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a2e      	ldr	r2, [pc, #184]	@ (80064d0 <TIM_Base_SetConfig+0x140>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a2d      	ldr	r2, [pc, #180]	@ (80064d4 <TIM_Base_SetConfig+0x144>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a2c      	ldr	r2, [pc, #176]	@ (80064d8 <TIM_Base_SetConfig+0x148>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d108      	bne.n	800643c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	4313      	orrs	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a16      	ldr	r2, [pc, #88]	@ (80064bc <TIM_Base_SetConfig+0x12c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00f      	beq.n	8006488 <TIM_Base_SetConfig+0xf8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a18      	ldr	r2, [pc, #96]	@ (80064cc <TIM_Base_SetConfig+0x13c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00b      	beq.n	8006488 <TIM_Base_SetConfig+0xf8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a17      	ldr	r2, [pc, #92]	@ (80064d0 <TIM_Base_SetConfig+0x140>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d007      	beq.n	8006488 <TIM_Base_SetConfig+0xf8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a16      	ldr	r2, [pc, #88]	@ (80064d4 <TIM_Base_SetConfig+0x144>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_Base_SetConfig+0xf8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a15      	ldr	r2, [pc, #84]	@ (80064d8 <TIM_Base_SetConfig+0x148>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d103      	bne.n	8006490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d105      	bne.n	80064ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f023 0201 	bic.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	611a      	str	r2, [r3, #16]
  }
}
 80064ae:	bf00      	nop
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00
 80064cc:	40013400 	.word	0x40013400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800

080064dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f023 0201 	bic.w	r2, r3, #1
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 030a 	bic.w	r3, r3, #10
 8006518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800653a:	b480      	push	{r7}
 800653c:	b087      	sub	sp, #28
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	f023 0210 	bic.w	r2, r3, #16
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006564:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	031b      	lsls	r3, r3, #12
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006576:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	621a      	str	r2, [r3, #32]
}
 800658e:	bf00      	nop
 8006590:	371c      	adds	r7, #28
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800659a:	b480      	push	{r7}
 800659c:	b085      	sub	sp, #20
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
 80065a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f043 0307 	orr.w	r3, r3, #7
 80065bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	609a      	str	r2, [r3, #8]
}
 80065c4:	bf00      	nop
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	021a      	lsls	r2, r3, #8
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	609a      	str	r2, [r3, #8]
}
 8006604:	bf00      	nop
 8006606:	371c      	adds	r7, #28
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006624:	2302      	movs	r3, #2
 8006626:	e068      	b.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a2e      	ldr	r2, [pc, #184]	@ (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d004      	beq.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a2d      	ldr	r2, [pc, #180]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d108      	bne.n	800666e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006662:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a1e      	ldr	r2, [pc, #120]	@ (8006708 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d01d      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800669a:	d018      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d013      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1a      	ldr	r2, [pc, #104]	@ (8006714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d00e      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a18      	ldr	r2, [pc, #96]	@ (8006718 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d009      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a13      	ldr	r2, [pc, #76]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d004      	beq.n	80066ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a14      	ldr	r2, [pc, #80]	@ (800671c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d10c      	bne.n	80066e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68ba      	ldr	r2, [r7, #8]
 80066e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40012c00 	.word	0x40012c00
 800670c:	40013400 	.word	0x40013400
 8006710:	40000400 	.word	0x40000400
 8006714:	40000800 	.word	0x40000800
 8006718:	40000c00 	.word	0x40000c00
 800671c:	40014000 	.word	0x40014000

08006720 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e042      	b.n	80067f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006774:	2b00      	cmp	r3, #0
 8006776:	d106      	bne.n	8006786 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7fb f989 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2224      	movs	r2, #36	@ 0x24
 800678a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0201 	bic.w	r2, r2, #1
 800679c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fb24 	bl	8006df4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f825 	bl	80067fc <UART_SetConfig>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e01b      	b.n	80067f4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685a      	ldr	r2, [r3, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0201 	orr.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fba3 	bl	8006f38 <UART_CheckIdleState>
 80067f2:	4603      	mov	r3, r0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006800:	b08c      	sub	sp, #48	@ 0x30
 8006802:	af00      	add	r7, sp, #0
 8006804:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006806:	2300      	movs	r3, #0
 8006808:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	431a      	orrs	r2, r3
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	431a      	orrs	r2, r3
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	69db      	ldr	r3, [r3, #28]
 8006820:	4313      	orrs	r3, r2
 8006822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	4baa      	ldr	r3, [pc, #680]	@ (8006ad4 <UART_SetConfig+0x2d8>)
 800682c:	4013      	ands	r3, r2
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	6812      	ldr	r2, [r2, #0]
 8006832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006834:	430b      	orrs	r3, r1
 8006836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	68da      	ldr	r2, [r3, #12]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a9f      	ldr	r2, [pc, #636]	@ (8006ad8 <UART_SetConfig+0x2dc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d004      	beq.n	8006868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	6a1b      	ldr	r3, [r3, #32]
 8006862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006864:	4313      	orrs	r3, r2
 8006866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006872:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800687c:	430b      	orrs	r3, r1
 800687e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006886:	f023 010f 	bic.w	r1, r3, #15
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a90      	ldr	r2, [pc, #576]	@ (8006adc <UART_SetConfig+0x2e0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d125      	bne.n	80068ec <UART_SetConfig+0xf0>
 80068a0:	4b8f      	ldr	r3, [pc, #572]	@ (8006ae0 <UART_SetConfig+0x2e4>)
 80068a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d81a      	bhi.n	80068e4 <UART_SetConfig+0xe8>
 80068ae:	a201      	add	r2, pc, #4	@ (adr r2, 80068b4 <UART_SetConfig+0xb8>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	080068c5 	.word	0x080068c5
 80068b8:	080068d5 	.word	0x080068d5
 80068bc:	080068cd 	.word	0x080068cd
 80068c0:	080068dd 	.word	0x080068dd
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ca:	e116      	b.n	8006afa <UART_SetConfig+0x2fe>
 80068cc:	2302      	movs	r3, #2
 80068ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068d2:	e112      	b.n	8006afa <UART_SetConfig+0x2fe>
 80068d4:	2304      	movs	r3, #4
 80068d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068da:	e10e      	b.n	8006afa <UART_SetConfig+0x2fe>
 80068dc:	2308      	movs	r3, #8
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e2:	e10a      	b.n	8006afa <UART_SetConfig+0x2fe>
 80068e4:	2310      	movs	r3, #16
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ea:	e106      	b.n	8006afa <UART_SetConfig+0x2fe>
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a7c      	ldr	r2, [pc, #496]	@ (8006ae4 <UART_SetConfig+0x2e8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d138      	bne.n	8006968 <UART_SetConfig+0x16c>
 80068f6:	4b7a      	ldr	r3, [pc, #488]	@ (8006ae0 <UART_SetConfig+0x2e4>)
 80068f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068fc:	f003 030c 	and.w	r3, r3, #12
 8006900:	2b0c      	cmp	r3, #12
 8006902:	d82d      	bhi.n	8006960 <UART_SetConfig+0x164>
 8006904:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0x110>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006941 	.word	0x08006941
 8006910:	08006961 	.word	0x08006961
 8006914:	08006961 	.word	0x08006961
 8006918:	08006961 	.word	0x08006961
 800691c:	08006951 	.word	0x08006951
 8006920:	08006961 	.word	0x08006961
 8006924:	08006961 	.word	0x08006961
 8006928:	08006961 	.word	0x08006961
 800692c:	08006949 	.word	0x08006949
 8006930:	08006961 	.word	0x08006961
 8006934:	08006961 	.word	0x08006961
 8006938:	08006961 	.word	0x08006961
 800693c:	08006959 	.word	0x08006959
 8006940:	2300      	movs	r3, #0
 8006942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006946:	e0d8      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006948:	2302      	movs	r3, #2
 800694a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694e:	e0d4      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006950:	2304      	movs	r3, #4
 8006952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006956:	e0d0      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006958:	2308      	movs	r3, #8
 800695a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695e:	e0cc      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006960:	2310      	movs	r3, #16
 8006962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006966:	e0c8      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ae8 <UART_SetConfig+0x2ec>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d125      	bne.n	80069be <UART_SetConfig+0x1c2>
 8006972:	4b5b      	ldr	r3, [pc, #364]	@ (8006ae0 <UART_SetConfig+0x2e4>)
 8006974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006978:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800697c:	2b30      	cmp	r3, #48	@ 0x30
 800697e:	d016      	beq.n	80069ae <UART_SetConfig+0x1b2>
 8006980:	2b30      	cmp	r3, #48	@ 0x30
 8006982:	d818      	bhi.n	80069b6 <UART_SetConfig+0x1ba>
 8006984:	2b20      	cmp	r3, #32
 8006986:	d00a      	beq.n	800699e <UART_SetConfig+0x1a2>
 8006988:	2b20      	cmp	r3, #32
 800698a:	d814      	bhi.n	80069b6 <UART_SetConfig+0x1ba>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <UART_SetConfig+0x19a>
 8006990:	2b10      	cmp	r3, #16
 8006992:	d008      	beq.n	80069a6 <UART_SetConfig+0x1aa>
 8006994:	e00f      	b.n	80069b6 <UART_SetConfig+0x1ba>
 8006996:	2300      	movs	r3, #0
 8006998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800699c:	e0ad      	b.n	8006afa <UART_SetConfig+0x2fe>
 800699e:	2302      	movs	r3, #2
 80069a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a4:	e0a9      	b.n	8006afa <UART_SetConfig+0x2fe>
 80069a6:	2304      	movs	r3, #4
 80069a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ac:	e0a5      	b.n	8006afa <UART_SetConfig+0x2fe>
 80069ae:	2308      	movs	r3, #8
 80069b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b4:	e0a1      	b.n	8006afa <UART_SetConfig+0x2fe>
 80069b6:	2310      	movs	r3, #16
 80069b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069bc:	e09d      	b.n	8006afa <UART_SetConfig+0x2fe>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a4a      	ldr	r2, [pc, #296]	@ (8006aec <UART_SetConfig+0x2f0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d125      	bne.n	8006a14 <UART_SetConfig+0x218>
 80069c8:	4b45      	ldr	r3, [pc, #276]	@ (8006ae0 <UART_SetConfig+0x2e4>)
 80069ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80069d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80069d4:	d016      	beq.n	8006a04 <UART_SetConfig+0x208>
 80069d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80069d8:	d818      	bhi.n	8006a0c <UART_SetConfig+0x210>
 80069da:	2b80      	cmp	r3, #128	@ 0x80
 80069dc:	d00a      	beq.n	80069f4 <UART_SetConfig+0x1f8>
 80069de:	2b80      	cmp	r3, #128	@ 0x80
 80069e0:	d814      	bhi.n	8006a0c <UART_SetConfig+0x210>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <UART_SetConfig+0x1f0>
 80069e6:	2b40      	cmp	r3, #64	@ 0x40
 80069e8:	d008      	beq.n	80069fc <UART_SetConfig+0x200>
 80069ea:	e00f      	b.n	8006a0c <UART_SetConfig+0x210>
 80069ec:	2300      	movs	r3, #0
 80069ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069f2:	e082      	b.n	8006afa <UART_SetConfig+0x2fe>
 80069f4:	2302      	movs	r3, #2
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069fa:	e07e      	b.n	8006afa <UART_SetConfig+0x2fe>
 80069fc:	2304      	movs	r3, #4
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a02:	e07a      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006a04:	2308      	movs	r3, #8
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a0a:	e076      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006a0c:	2310      	movs	r3, #16
 8006a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a12:	e072      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a35      	ldr	r2, [pc, #212]	@ (8006af0 <UART_SetConfig+0x2f4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d12a      	bne.n	8006a74 <UART_SetConfig+0x278>
 8006a1e:	4b30      	ldr	r3, [pc, #192]	@ (8006ae0 <UART_SetConfig+0x2e4>)
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a2c:	d01a      	beq.n	8006a64 <UART_SetConfig+0x268>
 8006a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a32:	d81b      	bhi.n	8006a6c <UART_SetConfig+0x270>
 8006a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a38:	d00c      	beq.n	8006a54 <UART_SetConfig+0x258>
 8006a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a3e:	d815      	bhi.n	8006a6c <UART_SetConfig+0x270>
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <UART_SetConfig+0x250>
 8006a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a48:	d008      	beq.n	8006a5c <UART_SetConfig+0x260>
 8006a4a:	e00f      	b.n	8006a6c <UART_SetConfig+0x270>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a52:	e052      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006a54:	2302      	movs	r3, #2
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5a:	e04e      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a62:	e04a      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006a64:	2308      	movs	r3, #8
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6a:	e046      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006a6c:	2310      	movs	r3, #16
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a72:	e042      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a17      	ldr	r2, [pc, #92]	@ (8006ad8 <UART_SetConfig+0x2dc>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d13a      	bne.n	8006af4 <UART_SetConfig+0x2f8>
 8006a7e:	4b18      	ldr	r3, [pc, #96]	@ (8006ae0 <UART_SetConfig+0x2e4>)
 8006a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a8c:	d01a      	beq.n	8006ac4 <UART_SetConfig+0x2c8>
 8006a8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a92:	d81b      	bhi.n	8006acc <UART_SetConfig+0x2d0>
 8006a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a98:	d00c      	beq.n	8006ab4 <UART_SetConfig+0x2b8>
 8006a9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a9e:	d815      	bhi.n	8006acc <UART_SetConfig+0x2d0>
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <UART_SetConfig+0x2b0>
 8006aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa8:	d008      	beq.n	8006abc <UART_SetConfig+0x2c0>
 8006aaa:	e00f      	b.n	8006acc <UART_SetConfig+0x2d0>
 8006aac:	2300      	movs	r3, #0
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab2:	e022      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aba:	e01e      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006abc:	2304      	movs	r3, #4
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac2:	e01a      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006ac4:	2308      	movs	r3, #8
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aca:	e016      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006acc:	2310      	movs	r3, #16
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ad2:	e012      	b.n	8006afa <UART_SetConfig+0x2fe>
 8006ad4:	cfff69f3 	.word	0xcfff69f3
 8006ad8:	40008000 	.word	0x40008000
 8006adc:	40013800 	.word	0x40013800
 8006ae0:	40021000 	.word	0x40021000
 8006ae4:	40004400 	.word	0x40004400
 8006ae8:	40004800 	.word	0x40004800
 8006aec:	40004c00 	.word	0x40004c00
 8006af0:	40005000 	.word	0x40005000
 8006af4:	2310      	movs	r3, #16
 8006af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4aae      	ldr	r2, [pc, #696]	@ (8006db8 <UART_SetConfig+0x5bc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	f040 8097 	bne.w	8006c34 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b0a:	2b08      	cmp	r3, #8
 8006b0c:	d823      	bhi.n	8006b56 <UART_SetConfig+0x35a>
 8006b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <UART_SetConfig+0x318>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b57 	.word	0x08006b57
 8006b1c:	08006b41 	.word	0x08006b41
 8006b20:	08006b57 	.word	0x08006b57
 8006b24:	08006b47 	.word	0x08006b47
 8006b28:	08006b57 	.word	0x08006b57
 8006b2c:	08006b57 	.word	0x08006b57
 8006b30:	08006b57 	.word	0x08006b57
 8006b34:	08006b4f 	.word	0x08006b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b38:	f7fe fb34 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8006b3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b3e:	e010      	b.n	8006b62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b40:	4b9e      	ldr	r3, [pc, #632]	@ (8006dbc <UART_SetConfig+0x5c0>)
 8006b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b44:	e00d      	b.n	8006b62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b46:	f7fe fa95 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 8006b4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b4c:	e009      	b.n	8006b62 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b54:	e005      	b.n	8006b62 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8130 	beq.w	8006dca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b6e:	4a94      	ldr	r2, [pc, #592]	@ (8006dc0 <UART_SetConfig+0x5c4>)
 8006b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b74:	461a      	mov	r2, r3
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	4613      	mov	r3, r2
 8006b84:	005b      	lsls	r3, r3, #1
 8006b86:	4413      	add	r3, r2
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d305      	bcc.n	8006b9a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d903      	bls.n	8006ba2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006ba0:	e113      	b.n	8006dca <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	60fa      	str	r2, [r7, #12]
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	4a84      	ldr	r2, [pc, #528]	@ (8006dc0 <UART_SetConfig+0x5c4>)
 8006bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	603b      	str	r3, [r7, #0]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bc4:	f7f9 ff0a 	bl	80009dc <__aeabi_uldivmod>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f04f 0200 	mov.w	r2, #0
 8006bd4:	f04f 0300 	mov.w	r3, #0
 8006bd8:	020b      	lsls	r3, r1, #8
 8006bda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006bde:	0202      	lsls	r2, r0, #8
 8006be0:	6979      	ldr	r1, [r7, #20]
 8006be2:	6849      	ldr	r1, [r1, #4]
 8006be4:	0849      	lsrs	r1, r1, #1
 8006be6:	2000      	movs	r0, #0
 8006be8:	460c      	mov	r4, r1
 8006bea:	4605      	mov	r5, r0
 8006bec:	eb12 0804 	adds.w	r8, r2, r4
 8006bf0:	eb43 0905 	adc.w	r9, r3, r5
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	469a      	mov	sl, r3
 8006bfc:	4693      	mov	fp, r2
 8006bfe:	4652      	mov	r2, sl
 8006c00:	465b      	mov	r3, fp
 8006c02:	4640      	mov	r0, r8
 8006c04:	4649      	mov	r1, r9
 8006c06:	f7f9 fee9 	bl	80009dc <__aeabi_uldivmod>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4613      	mov	r3, r2
 8006c10:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c18:	d308      	bcc.n	8006c2c <UART_SetConfig+0x430>
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c20:	d204      	bcs.n	8006c2c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6a3a      	ldr	r2, [r7, #32]
 8006c28:	60da      	str	r2, [r3, #12]
 8006c2a:	e0ce      	b.n	8006dca <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c32:	e0ca      	b.n	8006dca <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c3c:	d166      	bne.n	8006d0c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006c3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c42:	2b08      	cmp	r3, #8
 8006c44:	d827      	bhi.n	8006c96 <UART_SetConfig+0x49a>
 8006c46:	a201      	add	r2, pc, #4	@ (adr r2, 8006c4c <UART_SetConfig+0x450>)
 8006c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c79 	.word	0x08006c79
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	08006c97 	.word	0x08006c97
 8006c5c:	08006c87 	.word	0x08006c87
 8006c60:	08006c97 	.word	0x08006c97
 8006c64:	08006c97 	.word	0x08006c97
 8006c68:	08006c97 	.word	0x08006c97
 8006c6c:	08006c8f 	.word	0x08006c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c70:	f7fe fa98 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8006c74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c76:	e014      	b.n	8006ca2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c78:	f7fe faaa 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 8006c7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c7e:	e010      	b.n	8006ca2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c80:	4b4e      	ldr	r3, [pc, #312]	@ (8006dbc <UART_SetConfig+0x5c0>)
 8006c82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c84:	e00d      	b.n	8006ca2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c86:	f7fe f9f5 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 8006c8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c8c:	e009      	b.n	8006ca2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c94:	e005      	b.n	8006ca2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ca0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8090 	beq.w	8006dca <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cae:	4a44      	ldr	r2, [pc, #272]	@ (8006dc0 <UART_SetConfig+0x5c4>)
 8006cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cbc:	005a      	lsls	r2, r3, #1
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	085b      	lsrs	r3, r3, #1
 8006cc4:	441a      	add	r2, r3
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cce:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	2b0f      	cmp	r3, #15
 8006cd4:	d916      	bls.n	8006d04 <UART_SetConfig+0x508>
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cdc:	d212      	bcs.n	8006d04 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	f023 030f 	bic.w	r3, r3, #15
 8006ce6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	8bfb      	ldrh	r3, [r7, #30]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	8bfa      	ldrh	r2, [r7, #30]
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	e062      	b.n	8006dca <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006d0a:	e05e      	b.n	8006dca <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d0c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d828      	bhi.n	8006d66 <UART_SetConfig+0x56a>
 8006d14:	a201      	add	r2, pc, #4	@ (adr r2, 8006d1c <UART_SetConfig+0x520>)
 8006d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1a:	bf00      	nop
 8006d1c:	08006d41 	.word	0x08006d41
 8006d20:	08006d49 	.word	0x08006d49
 8006d24:	08006d51 	.word	0x08006d51
 8006d28:	08006d67 	.word	0x08006d67
 8006d2c:	08006d57 	.word	0x08006d57
 8006d30:	08006d67 	.word	0x08006d67
 8006d34:	08006d67 	.word	0x08006d67
 8006d38:	08006d67 	.word	0x08006d67
 8006d3c:	08006d5f 	.word	0x08006d5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d40:	f7fe fa30 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 8006d44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d46:	e014      	b.n	8006d72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d48:	f7fe fa42 	bl	80051d0 <HAL_RCC_GetPCLK2Freq>
 8006d4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d4e:	e010      	b.n	8006d72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d50:	4b1a      	ldr	r3, [pc, #104]	@ (8006dbc <UART_SetConfig+0x5c0>)
 8006d52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d54:	e00d      	b.n	8006d72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d56:	f7fe f98d 	bl	8005074 <HAL_RCC_GetSysClockFreq>
 8006d5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d5c:	e009      	b.n	8006d72 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d64:	e005      	b.n	8006d72 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d70:	bf00      	nop
    }

    if (pclk != 0U)
 8006d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d028      	beq.n	8006dca <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7c:	4a10      	ldr	r2, [pc, #64]	@ (8006dc0 <UART_SetConfig+0x5c4>)
 8006d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	441a      	add	r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	2b0f      	cmp	r3, #15
 8006da0:	d910      	bls.n	8006dc4 <UART_SetConfig+0x5c8>
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006da8:	d20c      	bcs.n	8006dc4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60da      	str	r2, [r3, #12]
 8006db4:	e009      	b.n	8006dca <UART_SetConfig+0x5ce>
 8006db6:	bf00      	nop
 8006db8:	40008000 	.word	0x40008000
 8006dbc:	00f42400 	.word	0x00f42400
 8006dc0:	0800b850 	.word	0x0800b850
      }
      else
      {
        ret = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2200      	movs	r2, #0
 8006de4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006de6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3730      	adds	r7, #48	@ 0x30
 8006dee:	46bd      	mov	sp, r7
 8006df0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d01a      	beq.n	8006f0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ef2:	d10a      	bne.n	8006f0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	605a      	str	r2, [r3, #4]
  }
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b098      	sub	sp, #96	@ 0x60
 8006f3c:	af02      	add	r7, sp, #8
 8006f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f48:	f7fb f872 	bl	8002030 <HAL_GetTick>
 8006f4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d12f      	bne.n	8006fbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f64:	2200      	movs	r2, #0
 8006f66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f88e 	bl	800708c <UART_WaitOnFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d022      	beq.n	8006fbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	461a      	mov	r2, r3
 8006f92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e6      	bne.n	8006f76 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e063      	b.n	8007084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d149      	bne.n	800705e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f857 	bl	800708c <UART_WaitOnFlagUntilTimeout>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d03c      	beq.n	800705e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	e853 3f00 	ldrex	r3, [r3]
 8006ff0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007002:	633b      	str	r3, [r7, #48]	@ 0x30
 8007004:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800700a:	e841 2300 	strex	r3, r2, [r1]
 800700e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1e6      	bne.n	8006fe4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3308      	adds	r3, #8
 800701c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	60fb      	str	r3, [r7, #12]
   return(result);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f023 0301 	bic.w	r3, r3, #1
 800702c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	3308      	adds	r3, #8
 8007034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007036:	61fa      	str	r2, [r7, #28]
 8007038:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	69b9      	ldr	r1, [r7, #24]
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	617b      	str	r3, [r7, #20]
   return(result);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e5      	bne.n	8007016 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2220      	movs	r2, #32
 800704e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e012      	b.n	8007084 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3758      	adds	r7, #88	@ 0x58
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	603b      	str	r3, [r7, #0]
 8007098:	4613      	mov	r3, r2
 800709a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800709c:	e04f      	b.n	800713e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a4:	d04b      	beq.n	800713e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070a6:	f7fa ffc3 	bl	8002030 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	69ba      	ldr	r2, [r7, #24]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d302      	bcc.n	80070bc <UART_WaitOnFlagUntilTimeout+0x30>
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e04e      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d037      	beq.n	800713e <UART_WaitOnFlagUntilTimeout+0xb2>
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b80      	cmp	r3, #128	@ 0x80
 80070d2:	d034      	beq.n	800713e <UART_WaitOnFlagUntilTimeout+0xb2>
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b40      	cmp	r3, #64	@ 0x40
 80070d8:	d031      	beq.n	800713e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	f003 0308 	and.w	r3, r3, #8
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d110      	bne.n	800710a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2208      	movs	r2, #8
 80070ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f838 	bl	8007166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2208      	movs	r2, #8
 80070fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e029      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	69db      	ldr	r3, [r3, #28]
 8007110:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007118:	d111      	bne.n	800713e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 f81e 	bl	8007166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e00f      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	69da      	ldr	r2, [r3, #28]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4013      	ands	r3, r2
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	429a      	cmp	r2, r3
 800714c:	bf0c      	ite	eq
 800714e:	2301      	moveq	r3, #1
 8007150:	2300      	movne	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	429a      	cmp	r2, r3
 800715a:	d0a0      	beq.n	800709e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007166:	b480      	push	{r7}
 8007168:	b095      	sub	sp, #84	@ 0x54
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800717c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800718c:	643b      	str	r3, [r7, #64]	@ 0x40
 800718e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007192:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800719a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e6      	bne.n	800716e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3308      	adds	r3, #8
 80071a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071b6:	f023 0301 	bic.w	r3, r3, #1
 80071ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3308      	adds	r3, #8
 80071c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e3      	bne.n	80071a0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d118      	bne.n	8007212 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f023 0310 	bic.w	r3, r3, #16
 80071f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007202:	6979      	ldr	r1, [r7, #20]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	e841 2300 	strex	r3, r2, [r1]
 800720a:	613b      	str	r3, [r7, #16]
   return(result);
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1e6      	bne.n	80071e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007226:	bf00      	nop
 8007228:	3754      	adds	r7, #84	@ 0x54
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007232:	b480      	push	{r7}
 8007234:	b085      	sub	sp, #20
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_UARTEx_DisableFifoMode+0x16>
 8007244:	2302      	movs	r3, #2
 8007246:	e027      	b.n	8007298 <HAL_UARTEx_DisableFifoMode+0x66>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2224      	movs	r2, #36	@ 0x24
 8007254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0201 	bic.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007276:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2220      	movs	r2, #32
 800728a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d101      	bne.n	80072bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80072b8:	2302      	movs	r3, #2
 80072ba:	e02d      	b.n	8007318 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2224      	movs	r2, #36	@ 0x24
 80072c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0201 	bic.w	r2, r2, #1
 80072e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	683a      	ldr	r2, [r7, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f84f 	bl	800739c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007334:	2302      	movs	r3, #2
 8007336:	e02d      	b.n	8007394 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2224      	movs	r2, #36	@ 0x24
 8007344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0201 	bic.w	r2, r2, #1
 800735e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 f811 	bl	800739c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d108      	bne.n	80073be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80073bc:	e031      	b.n	8007422 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80073be:	2308      	movs	r3, #8
 80073c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80073c2:	2308      	movs	r3, #8
 80073c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	0e5b      	lsrs	r3, r3, #25
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f003 0307 	and.w	r3, r3, #7
 80073d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	0f5b      	lsrs	r3, r3, #29
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f003 0307 	and.w	r3, r3, #7
 80073e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	7b3a      	ldrb	r2, [r7, #12]
 80073ea:	4911      	ldr	r1, [pc, #68]	@ (8007430 <UARTEx_SetNbDataToProcess+0x94>)
 80073ec:	5c8a      	ldrb	r2, [r1, r2]
 80073ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073f2:	7b3a      	ldrb	r2, [r7, #12]
 80073f4:	490f      	ldr	r1, [pc, #60]	@ (8007434 <UARTEx_SetNbDataToProcess+0x98>)
 80073f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80073fc:	b29a      	uxth	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	7b7a      	ldrb	r2, [r7, #13]
 8007408:	4909      	ldr	r1, [pc, #36]	@ (8007430 <UARTEx_SetNbDataToProcess+0x94>)
 800740a:	5c8a      	ldrb	r2, [r1, r2]
 800740c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007410:	7b7a      	ldrb	r2, [r7, #13]
 8007412:	4908      	ldr	r1, [pc, #32]	@ (8007434 <UARTEx_SetNbDataToProcess+0x98>)
 8007414:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007416:	fb93 f3f2 	sdiv	r3, r3, r2
 800741a:	b29a      	uxth	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007422:	bf00      	nop
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	0800b868 	.word	0x0800b868
 8007434:	0800b870 	.word	0x0800b870

08007438 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007438:	b084      	sub	sp, #16
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	f107 001c 	add.w	r0, r7, #28
 8007446:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa68 	bl	800792c <USB_CoreReset>
 800745c:	4603      	mov	r3, r0
 800745e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007460:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	639a      	str	r2, [r3, #56]	@ 0x38
 8007474:	e005      	b.n	8007482 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8007482:	7bfb      	ldrb	r3, [r7, #15]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800748e:	b004      	add	sp, #16
 8007490:	4770      	bx	lr

08007492 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f023 0201 	bic.w	r2, r3, #1
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d115      	bne.n	8007502 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074e2:	200a      	movs	r0, #10
 80074e4:	f7fa fdb0 	bl	8002048 <HAL_Delay>
      ms += 10U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	330a      	adds	r3, #10
 80074ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa0e 	bl	8007910 <USB_GetMode>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d01e      	beq.n	8007538 <USB_SetCurrentMode+0x84>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80074fe:	d9f0      	bls.n	80074e2 <USB_SetCurrentMode+0x2e>
 8007500:	e01a      	b.n	8007538 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d115      	bne.n	8007534 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007514:	200a      	movs	r0, #10
 8007516:	f7fa fd97 	bl	8002048 <HAL_Delay>
      ms += 10U;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	330a      	adds	r3, #10
 800751e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f9f5 	bl	8007910 <USB_GetMode>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <USB_SetCurrentMode+0x84>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007530:	d9f0      	bls.n	8007514 <USB_SetCurrentMode+0x60>
 8007532:	e001      	b.n	8007538 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e005      	b.n	8007544 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2bc8      	cmp	r3, #200	@ 0xc8
 800753c:	d101      	bne.n	8007542 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e000      	b.n	8007544 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800754c:	b084      	sub	sp, #16
 800754e:	b580      	push	{r7, lr}
 8007550:	b086      	sub	sp, #24
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800755a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800755e:	2300      	movs	r3, #0
 8007560:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007566:	2300      	movs	r3, #0
 8007568:	613b      	str	r3, [r7, #16]
 800756a:	e009      	b.n	8007580 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	3340      	adds	r3, #64	@ 0x40
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	2200      	movs	r2, #0
 8007578:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	3301      	adds	r3, #1
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	2b0e      	cmp	r3, #14
 8007584:	d9f2      	bls.n	800756c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007586:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800758a:	2b00      	cmp	r3, #0
 800758c:	d11c      	bne.n	80075c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800759c:	f043 0302 	orr.w	r3, r3, #2
 80075a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	e005      	b.n	80075d4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075da:	461a      	mov	r2, r3
 80075dc:	2300      	movs	r3, #0
 80075de:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075e0:	2103      	movs	r1, #3
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f95a 	bl	800789c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075e8:	2110      	movs	r1, #16
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f8f6 	bl	80077dc <USB_FlushTxFifo>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f920 	bl	8007840 <USB_FlushRxFifo>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007610:	461a      	mov	r2, r3
 8007612:	2300      	movs	r3, #0
 8007614:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800761c:	461a      	mov	r2, r3
 800761e:	2300      	movs	r3, #0
 8007620:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007628:	461a      	mov	r2, r3
 800762a:	2300      	movs	r3, #0
 800762c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800762e:	2300      	movs	r3, #0
 8007630:	613b      	str	r3, [r7, #16]
 8007632:	e043      	b.n	80076bc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007646:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800764a:	d118      	bne.n	800767e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800765e:	461a      	mov	r2, r3
 8007660:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	e013      	b.n	8007690 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007674:	461a      	mov	r2, r3
 8007676:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800767a:	6013      	str	r3, [r2, #0]
 800767c:	e008      	b.n	8007690 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800768a:	461a      	mov	r2, r3
 800768c:	2300      	movs	r3, #0
 800768e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800769c:	461a      	mov	r2, r3
 800769e:	2300      	movs	r3, #0
 80076a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ae:	461a      	mov	r2, r3
 80076b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	3301      	adds	r3, #1
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80076c0:	461a      	mov	r2, r3
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d3b5      	bcc.n	8007634 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076c8:	2300      	movs	r3, #0
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	e043      	b.n	8007756 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076e4:	d118      	bne.n	8007718 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f8:	461a      	mov	r2, r3
 80076fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	e013      	b.n	800772a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	015a      	lsls	r2, r3, #5
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	4413      	add	r3, r2
 800770a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770e:	461a      	mov	r2, r3
 8007710:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	e008      	b.n	800772a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007724:	461a      	mov	r2, r3
 8007726:	2300      	movs	r3, #0
 8007728:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	015a      	lsls	r2, r3, #5
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4413      	add	r3, r2
 8007732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007736:	461a      	mov	r2, r3
 8007738:	2300      	movs	r3, #0
 800773a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007748:	461a      	mov	r2, r3
 800774a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800774e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	3301      	adds	r3, #1
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800775a:	461a      	mov	r2, r3
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4293      	cmp	r3, r2
 8007760:	d3b5      	bcc.n	80076ce <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007774:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007782:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	f043 0210 	orr.w	r2, r3, #16
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	4b10      	ldr	r3, [pc, #64]	@ (80077d8 <USB_DevInit+0x28c>)
 8007796:	4313      	orrs	r3, r2
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800779c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	f043 0208 	orr.w	r2, r3, #8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d107      	bne.n	80077c8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077c0:	f043 0304 	orr.w	r3, r3, #4
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077d4:	b004      	add	sp, #16
 80077d6:	4770      	bx	lr
 80077d8:	803c3800 	.word	0x803c3800

080077dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3301      	adds	r3, #1
 80077ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077f6:	d901      	bls.n	80077fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e01b      	b.n	8007834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	2b00      	cmp	r3, #0
 8007802:	daf2      	bge.n	80077ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007804:	2300      	movs	r3, #0
 8007806:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	019b      	lsls	r3, r3, #6
 800780c:	f043 0220 	orr.w	r2, r3, #32
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	3301      	adds	r3, #1
 8007818:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007820:	d901      	bls.n	8007826 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e006      	b.n	8007834 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b20      	cmp	r3, #32
 8007830:	d0f0      	beq.n	8007814 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3714      	adds	r7, #20
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007848:	2300      	movs	r3, #0
 800784a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3301      	adds	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007858:	d901      	bls.n	800785e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800785a:	2303      	movs	r3, #3
 800785c:	e018      	b.n	8007890 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	2b00      	cmp	r3, #0
 8007864:	daf2      	bge.n	800784c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2210      	movs	r2, #16
 800786e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3301      	adds	r3, #1
 8007874:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800787c:	d901      	bls.n	8007882 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e006      	b.n	8007890 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b10      	cmp	r3, #16
 800788c:	d0f0      	beq.n	8007870 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	68f9      	ldr	r1, [r7, #12]
 80078b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80078bc:	4313      	orrs	r3, r2
 80078be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b085      	sub	sp, #20
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80078e8:	f023 0303 	bic.w	r3, r3, #3
 80078ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80078fc:	f043 0302 	orr.w	r3, r3, #2
 8007900:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	f003 0301 	and.w	r3, r3, #1
}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3301      	adds	r3, #1
 800793c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007944:	d901      	bls.n	800794a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e01b      	b.n	8007982 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	daf2      	bge.n	8007938 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f043 0201 	orr.w	r2, r3, #1
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3301      	adds	r3, #1
 8007966:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800796e:	d901      	bls.n	8007974 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e006      	b.n	8007982 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	f003 0301 	and.w	r3, r3, #1
 800797c:	2b01      	cmp	r3, #1
 800797e:	d0f0      	beq.n	8007962 <USB_CoreReset+0x36>

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
	...

08007990 <__NVIC_SetPriority>:
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	6039      	str	r1, [r7, #0]
 800799a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800799c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	db0a      	blt.n	80079ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	b2da      	uxtb	r2, r3
 80079a8:	490c      	ldr	r1, [pc, #48]	@ (80079dc <__NVIC_SetPriority+0x4c>)
 80079aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ae:	0112      	lsls	r2, r2, #4
 80079b0:	b2d2      	uxtb	r2, r2
 80079b2:	440b      	add	r3, r1
 80079b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80079b8:	e00a      	b.n	80079d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	4908      	ldr	r1, [pc, #32]	@ (80079e0 <__NVIC_SetPriority+0x50>)
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	f003 030f 	and.w	r3, r3, #15
 80079c6:	3b04      	subs	r3, #4
 80079c8:	0112      	lsls	r2, r2, #4
 80079ca:	b2d2      	uxtb	r2, r2
 80079cc:	440b      	add	r3, r1
 80079ce:	761a      	strb	r2, [r3, #24]
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	e000e100 	.word	0xe000e100
 80079e0:	e000ed00 	.word	0xe000ed00

080079e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80079e8:	4b05      	ldr	r3, [pc, #20]	@ (8007a00 <SysTick_Handler+0x1c>)
 80079ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80079ec:	f002 fbee 	bl	800a1cc <xTaskGetSchedulerState>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d001      	beq.n	80079fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80079f6:	f003 fae7 	bl	800afc8 <xPortSysTickHandler>
  }
}
 80079fa:	bf00      	nop
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	e000e010 	.word	0xe000e010

08007a04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007a08:	2100      	movs	r1, #0
 8007a0a:	f06f 0004 	mvn.w	r0, #4
 8007a0e:	f7ff ffbf 	bl	8007990 <__NVIC_SetPriority>
#endif
}
 8007a12:	bf00      	nop
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a1e:	f3ef 8305 	mrs	r3, IPSR
 8007a22:	603b      	str	r3, [r7, #0]
  return(result);
 8007a24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007a2a:	f06f 0305 	mvn.w	r3, #5
 8007a2e:	607b      	str	r3, [r7, #4]
 8007a30:	e00c      	b.n	8007a4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007a32:	4b0a      	ldr	r3, [pc, #40]	@ (8007a5c <osKernelInitialize+0x44>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d105      	bne.n	8007a46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007a3a:	4b08      	ldr	r3, [pc, #32]	@ (8007a5c <osKernelInitialize+0x44>)
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	607b      	str	r3, [r7, #4]
 8007a44:	e002      	b.n	8007a4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007a46:	f04f 33ff 	mov.w	r3, #4294967295
 8007a4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a4c:	687b      	ldr	r3, [r7, #4]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	200408e4 	.word	0x200408e4

08007a60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a66:	f3ef 8305 	mrs	r3, IPSR
 8007a6a:	603b      	str	r3, [r7, #0]
  return(result);
 8007a6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007a72:	f06f 0305 	mvn.w	r3, #5
 8007a76:	607b      	str	r3, [r7, #4]
 8007a78:	e010      	b.n	8007a9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007aa8 <osKernelStart+0x48>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d109      	bne.n	8007a96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007a82:	f7ff ffbf 	bl	8007a04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007a86:	4b08      	ldr	r3, [pc, #32]	@ (8007aa8 <osKernelStart+0x48>)
 8007a88:	2202      	movs	r2, #2
 8007a8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007a8c:	f001 ff2a 	bl	80098e4 <vTaskStartScheduler>
      stat = osOK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	607b      	str	r3, [r7, #4]
 8007a94:	e002      	b.n	8007a9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007a96:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007a9c:	687b      	ldr	r3, [r7, #4]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	200408e4 	.word	0x200408e4

08007aac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08e      	sub	sp, #56	@ 0x38
 8007ab0:	af04      	add	r7, sp, #16
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007abc:	f3ef 8305 	mrs	r3, IPSR
 8007ac0:	617b      	str	r3, [r7, #20]
  return(result);
 8007ac2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d17e      	bne.n	8007bc6 <osThreadNew+0x11a>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d07b      	beq.n	8007bc6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007ace:	2380      	movs	r3, #128	@ 0x80
 8007ad0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007ad2:	2318      	movs	r3, #24
 8007ad4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007ada:	f04f 33ff 	mov.w	r3, #4294967295
 8007ade:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d045      	beq.n	8007b72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <osThreadNew+0x48>
        name = attr->name;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d008      	beq.n	8007b1a <osThreadNew+0x6e>
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	2b38      	cmp	r3, #56	@ 0x38
 8007b0c:	d805      	bhi.n	8007b1a <osThreadNew+0x6e>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f003 0301 	and.w	r3, r3, #1
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <osThreadNew+0x72>
        return (NULL);
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	e054      	b.n	8007bc8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d003      	beq.n	8007b2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	089b      	lsrs	r3, r3, #2
 8007b2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00e      	beq.n	8007b54 <osThreadNew+0xa8>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	2ba7      	cmp	r3, #167	@ 0xa7
 8007b3c:	d90a      	bls.n	8007b54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d006      	beq.n	8007b54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <osThreadNew+0xa8>
        mem = 1;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	61bb      	str	r3, [r7, #24]
 8007b52:	e010      	b.n	8007b76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10c      	bne.n	8007b76 <osThreadNew+0xca>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d108      	bne.n	8007b76 <osThreadNew+0xca>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d104      	bne.n	8007b76 <osThreadNew+0xca>
          mem = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	61bb      	str	r3, [r7, #24]
 8007b70:	e001      	b.n	8007b76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007b72:	2300      	movs	r3, #0
 8007b74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d110      	bne.n	8007b9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007b84:	9202      	str	r2, [sp, #8]
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	6a3a      	ldr	r2, [r7, #32]
 8007b90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f001 fce8 	bl	8009568 <xTaskCreateStatic>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	613b      	str	r3, [r7, #16]
 8007b9c:	e013      	b.n	8007bc6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d110      	bne.n	8007bc6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	f107 0310 	add.w	r3, r7, #16
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f001 fd36 	bl	8009628 <xTaskCreate>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d001      	beq.n	8007bc6 <osThreadNew+0x11a>
            hTask = NULL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007bc6:	693b      	ldr	r3, [r7, #16]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3728      	adds	r7, #40	@ 0x28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bdc:	f3ef 8305 	mrs	r3, IPSR
 8007be0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007be2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d174      	bne.n	8007cd2 <osMutexNew+0x102>
    if (attr != NULL) {
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	61bb      	str	r3, [r7, #24]
 8007bf4:	e001      	b.n	8007bfa <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <osMutexNew+0x3a>
      rmtx = 1U;
 8007c04:	2301      	movs	r3, #1
 8007c06:	617b      	str	r3, [r7, #20]
 8007c08:	e001      	b.n	8007c0e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	f003 0308 	and.w	r3, r3, #8
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d15c      	bne.n	8007cd2 <osMutexNew+0x102>
      mem = -1;
 8007c18:	f04f 33ff 	mov.w	r3, #4294967295
 8007c1c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d015      	beq.n	8007c50 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d006      	beq.n	8007c3a <osMutexNew+0x6a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2b4f      	cmp	r3, #79	@ 0x4f
 8007c32:	d902      	bls.n	8007c3a <osMutexNew+0x6a>
          mem = 1;
 8007c34:	2301      	movs	r3, #1
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	e00c      	b.n	8007c54 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d108      	bne.n	8007c54 <osMutexNew+0x84>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d104      	bne.n	8007c54 <osMutexNew+0x84>
            mem = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	e001      	b.n	8007c54 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007c50:	2300      	movs	r3, #0
 8007c52:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d112      	bne.n	8007c80 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	4619      	mov	r1, r3
 8007c66:	2004      	movs	r0, #4
 8007c68:	f000 fd11 	bl	800868e <xQueueCreateMutexStatic>
 8007c6c:	61f8      	str	r0, [r7, #28]
 8007c6e:	e016      	b.n	8007c9e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	4619      	mov	r1, r3
 8007c76:	2001      	movs	r0, #1
 8007c78:	f000 fd09 	bl	800868e <xQueueCreateMutexStatic>
 8007c7c:	61f8      	str	r0, [r7, #28]
 8007c7e:	e00e      	b.n	8007c9e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10b      	bne.n	8007c9e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d004      	beq.n	8007c96 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007c8c:	2004      	movs	r0, #4
 8007c8e:	f000 fce6 	bl	800865e <xQueueCreateMutex>
 8007c92:	61f8      	str	r0, [r7, #28]
 8007c94:	e003      	b.n	8007c9e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007c96:	2001      	movs	r0, #1
 8007c98:	f000 fce1 	bl	800865e <xQueueCreateMutex>
 8007c9c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00c      	beq.n	8007cbe <osMutexNew+0xee>
        if (attr != NULL) {
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <osMutexNew+0xe2>
          name = attr->name;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	e001      	b.n	8007cb6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	69f8      	ldr	r0, [r7, #28]
 8007cba:	f001 fbcd 	bl	8009458 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d006      	beq.n	8007cd2 <osMutexNew+0x102>
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	f043 0301 	orr.w	r3, r3, #1
 8007cd0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007cd2:	69fb      	ldr	r3, [r7, #28]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f023 0301 	bic.w	r3, r3, #1
 8007cec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cfa:	f3ef 8305 	mrs	r3, IPSR
 8007cfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d00:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007d06:	f06f 0305 	mvn.w	r3, #5
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e02c      	b.n	8007d68 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d103      	bne.n	8007d1c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007d14:	f06f 0303 	mvn.w	r3, #3
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	e025      	b.n	8007d68 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d011      	beq.n	8007d46 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	6938      	ldr	r0, [r7, #16]
 8007d26:	f000 fd02 	bl	800872e <xQueueTakeMutexRecursive>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d01b      	beq.n	8007d68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007d36:	f06f 0301 	mvn.w	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]
 8007d3c:	e014      	b.n	8007d68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007d3e:	f06f 0302 	mvn.w	r3, #2
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	e010      	b.n	8007d68 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6938      	ldr	r0, [r7, #16]
 8007d4a:	f001 f8a7 	bl	8008e9c <xQueueSemaphoreTake>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d009      	beq.n	8007d68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007d5a:	f06f 0301 	mvn.w	r3, #1
 8007d5e:	617b      	str	r3, [r7, #20]
 8007d60:	e002      	b.n	8007d68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007d62:	f06f 0302 	mvn.w	r3, #2
 8007d66:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007d68:	697b      	ldr	r3, [r7, #20]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b086      	sub	sp, #24
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f003 0301 	and.w	r3, r3, #1
 8007d88:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d8e:	f3ef 8305 	mrs	r3, IPSR
 8007d92:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d94:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007d9a:	f06f 0305 	mvn.w	r3, #5
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	e01f      	b.n	8007de2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d103      	bne.n	8007db0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007da8:	f06f 0303 	mvn.w	r3, #3
 8007dac:	617b      	str	r3, [r7, #20]
 8007dae:	e018      	b.n	8007de2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007db6:	6938      	ldr	r0, [r7, #16]
 8007db8:	f000 fc84 	bl	80086c4 <xQueueGiveMutexRecursive>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d00f      	beq.n	8007de2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007dc2:	f06f 0302 	mvn.w	r3, #2
 8007dc6:	617b      	str	r3, [r7, #20]
 8007dc8:	e00b      	b.n	8007de2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2100      	movs	r1, #0
 8007dd0:	6938      	ldr	r0, [r7, #16]
 8007dd2:	f000 fd51 	bl	8008878 <xQueueGenericSend>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d002      	beq.n	8007de2 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007ddc:	f06f 0302 	mvn.w	r3, #2
 8007de0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007de2:	697b      	ldr	r3, [r7, #20]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b08a      	sub	sp, #40	@ 0x28
 8007df0:	af02      	add	r7, sp, #8
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dfc:	f3ef 8305 	mrs	r3, IPSR
 8007e00:	613b      	str	r3, [r7, #16]
  return(result);
 8007e02:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d175      	bne.n	8007ef4 <osSemaphoreNew+0x108>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d072      	beq.n	8007ef4 <osSemaphoreNew+0x108>
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d86e      	bhi.n	8007ef4 <osSemaphoreNew+0x108>
    mem = -1;
 8007e16:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d015      	beq.n	8007e4e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d006      	beq.n	8007e38 <osSemaphoreNew+0x4c>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	2b4f      	cmp	r3, #79	@ 0x4f
 8007e30:	d902      	bls.n	8007e38 <osSemaphoreNew+0x4c>
        mem = 1;
 8007e32:	2301      	movs	r3, #1
 8007e34:	61bb      	str	r3, [r7, #24]
 8007e36:	e00c      	b.n	8007e52 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d108      	bne.n	8007e52 <osSemaphoreNew+0x66>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d104      	bne.n	8007e52 <osSemaphoreNew+0x66>
          mem = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61bb      	str	r3, [r7, #24]
 8007e4c:	e001      	b.n	8007e52 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e58:	d04c      	beq.n	8007ef4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d128      	bne.n	8007eb2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d10a      	bne.n	8007e7c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	9200      	str	r2, [sp, #0]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	2100      	movs	r1, #0
 8007e72:	2001      	movs	r0, #1
 8007e74:	f000 fafe 	bl	8008474 <xQueueGenericCreateStatic>
 8007e78:	61f8      	str	r0, [r7, #28]
 8007e7a:	e005      	b.n	8007e88 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007e7c:	2203      	movs	r2, #3
 8007e7e:	2100      	movs	r1, #0
 8007e80:	2001      	movs	r0, #1
 8007e82:	f000 fb74 	bl	800856e <xQueueGenericCreate>
 8007e86:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d022      	beq.n	8007ed4 <osSemaphoreNew+0xe8>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01f      	beq.n	8007ed4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007e94:	2300      	movs	r3, #0
 8007e96:	2200      	movs	r2, #0
 8007e98:	2100      	movs	r1, #0
 8007e9a:	69f8      	ldr	r0, [r7, #28]
 8007e9c:	f000 fcec 	bl	8008878 <xQueueGenericSend>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d016      	beq.n	8007ed4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007ea6:	69f8      	ldr	r0, [r7, #28]
 8007ea8:	f001 f98a 	bl	80091c0 <vQueueDelete>
            hSemaphore = NULL;
 8007eac:	2300      	movs	r3, #0
 8007eae:	61fb      	str	r3, [r7, #28]
 8007eb0:	e010      	b.n	8007ed4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d108      	bne.n	8007eca <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	68b9      	ldr	r1, [r7, #8]
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 fc6b 	bl	800879c <xQueueCreateCountingSemaphoreStatic>
 8007ec6:	61f8      	str	r0, [r7, #28]
 8007ec8:	e004      	b.n	8007ed4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 fc9e 	bl	800880e <xQueueCreateCountingSemaphore>
 8007ed2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00c      	beq.n	8007ef4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	617b      	str	r3, [r7, #20]
 8007ee6:	e001      	b.n	8007eec <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007eec:	6979      	ldr	r1, [r7, #20]
 8007eee:	69f8      	ldr	r0, [r7, #28]
 8007ef0:	f001 fab2 	bl	8009458 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007ef4:	69fb      	ldr	r3, [r7, #28]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3720      	adds	r7, #32
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d103      	bne.n	8007f20 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007f18:	f06f 0303 	mvn.w	r3, #3
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	e039      	b.n	8007f94 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f20:	f3ef 8305 	mrs	r3, IPSR
 8007f24:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f26:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d022      	beq.n	8007f72 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d003      	beq.n	8007f3a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007f32:	f06f 0303 	mvn.w	r3, #3
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e02c      	b.n	8007f94 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007f3e:	f107 0308 	add.w	r3, r7, #8
 8007f42:	461a      	mov	r2, r3
 8007f44:	2100      	movs	r1, #0
 8007f46:	6938      	ldr	r0, [r7, #16]
 8007f48:	f001 f8b8 	bl	80090bc <xQueueReceiveFromISR>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d003      	beq.n	8007f5a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007f52:	f06f 0302 	mvn.w	r3, #2
 8007f56:	617b      	str	r3, [r7, #20]
 8007f58:	e01c      	b.n	8007f94 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d019      	beq.n	8007f94 <osSemaphoreAcquire+0x94>
 8007f60:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa0 <osSemaphoreAcquire+0xa0>)
 8007f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	e010      	b.n	8007f94 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6938      	ldr	r0, [r7, #16]
 8007f76:	f000 ff91 	bl	8008e9c <xQueueSemaphoreTake>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d009      	beq.n	8007f94 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007f86:	f06f 0301 	mvn.w	r3, #1
 8007f8a:	617b      	str	r3, [r7, #20]
 8007f8c:	e002      	b.n	8007f94 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007f8e:	f06f 0302 	mvn.w	r3, #2
 8007f92:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007f94:	697b      	ldr	r3, [r7, #20]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	e000ed04 	.word	0xe000ed04

08007fa4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d103      	bne.n	8007fc2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007fba:	f06f 0303 	mvn.w	r3, #3
 8007fbe:	617b      	str	r3, [r7, #20]
 8007fc0:	e02c      	b.n	800801c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fc2:	f3ef 8305 	mrs	r3, IPSR
 8007fc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d01a      	beq.n	8008004 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007fd2:	f107 0308 	add.w	r3, r7, #8
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6938      	ldr	r0, [r7, #16]
 8007fda:	f000 fded 	bl	8008bb8 <xQueueGiveFromISR>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d003      	beq.n	8007fec <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007fe4:	f06f 0302 	mvn.w	r3, #2
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	e017      	b.n	800801c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d014      	beq.n	800801c <osSemaphoreRelease+0x78>
 8007ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8008028 <osSemaphoreRelease+0x84>)
 8007ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ff8:	601a      	str	r2, [r3, #0]
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	e00b      	b.n	800801c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008004:	2300      	movs	r3, #0
 8008006:	2200      	movs	r2, #0
 8008008:	2100      	movs	r1, #0
 800800a:	6938      	ldr	r0, [r7, #16]
 800800c:	f000 fc34 	bl	8008878 <xQueueGenericSend>
 8008010:	4603      	mov	r3, r0
 8008012:	2b01      	cmp	r3, #1
 8008014:	d002      	beq.n	800801c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008016:	f06f 0302 	mvn.w	r3, #2
 800801a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800801c:	697b      	ldr	r3, [r7, #20]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3718      	adds	r7, #24
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	e000ed04 	.word	0xe000ed04

0800802c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800802c:	b580      	push	{r7, lr}
 800802e:	b08a      	sub	sp, #40	@ 0x28
 8008030:	af02      	add	r7, sp, #8
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008038:	2300      	movs	r3, #0
 800803a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800803c:	f3ef 8305 	mrs	r3, IPSR
 8008040:	613b      	str	r3, [r7, #16]
  return(result);
 8008042:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008044:	2b00      	cmp	r3, #0
 8008046:	d15f      	bne.n	8008108 <osMessageQueueNew+0xdc>
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d05c      	beq.n	8008108 <osMessageQueueNew+0xdc>
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d059      	beq.n	8008108 <osMessageQueueNew+0xdc>
    mem = -1;
 8008054:	f04f 33ff 	mov.w	r3, #4294967295
 8008058:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d029      	beq.n	80080b4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d012      	beq.n	800808e <osMessageQueueNew+0x62>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	2b4f      	cmp	r3, #79	@ 0x4f
 800806e:	d90e      	bls.n	800808e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	695a      	ldr	r2, [r3, #20]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	fb01 f303 	mul.w	r3, r1, r3
 8008084:	429a      	cmp	r2, r3
 8008086:	d302      	bcc.n	800808e <osMessageQueueNew+0x62>
        mem = 1;
 8008088:	2301      	movs	r3, #1
 800808a:	61bb      	str	r3, [r7, #24]
 800808c:	e014      	b.n	80080b8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d110      	bne.n	80080b8 <osMessageQueueNew+0x8c>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d10c      	bne.n	80080b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d108      	bne.n	80080b8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d104      	bne.n	80080b8 <osMessageQueueNew+0x8c>
          mem = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	61bb      	str	r3, [r7, #24]
 80080b2:	e001      	b.n	80080b8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d10b      	bne.n	80080d6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	2100      	movs	r1, #0
 80080c8:	9100      	str	r1, [sp, #0]
 80080ca:	68b9      	ldr	r1, [r7, #8]
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f000 f9d1 	bl	8008474 <xQueueGenericCreateStatic>
 80080d2:	61f8      	str	r0, [r7, #28]
 80080d4:	e008      	b.n	80080e8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d105      	bne.n	80080e8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80080dc:	2200      	movs	r2, #0
 80080de:	68b9      	ldr	r1, [r7, #8]
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 fa44 	bl	800856e <xQueueGenericCreate>
 80080e6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00c      	beq.n	8008108 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <osMessageQueueNew+0xd0>
        name = attr->name;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	e001      	b.n	8008100 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80080fc:	2300      	movs	r3, #0
 80080fe:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008100:	6979      	ldr	r1, [r7, #20]
 8008102:	69f8      	ldr	r0, [r7, #28]
 8008104:	f001 f9a8 	bl	8009458 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008108:	69fb      	ldr	r3, [r7, #28]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3720      	adds	r7, #32
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
	...

08008114 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
 8008120:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008126:	2300      	movs	r3, #0
 8008128:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800812a:	f3ef 8305 	mrs	r3, IPSR
 800812e:	617b      	str	r3, [r7, #20]
  return(result);
 8008130:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008132:	2b00      	cmp	r3, #0
 8008134:	d028      	beq.n	8008188 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d005      	beq.n	8008148 <osMessageQueueGet+0x34>
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <osMessageQueueGet+0x34>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008148:	f06f 0303 	mvn.w	r3, #3
 800814c:	61fb      	str	r3, [r7, #28]
 800814e:	e037      	b.n	80081c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008150:	2300      	movs	r3, #0
 8008152:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008154:	f107 0310 	add.w	r3, r7, #16
 8008158:	461a      	mov	r2, r3
 800815a:	68b9      	ldr	r1, [r7, #8]
 800815c:	69b8      	ldr	r0, [r7, #24]
 800815e:	f000 ffad 	bl	80090bc <xQueueReceiveFromISR>
 8008162:	4603      	mov	r3, r0
 8008164:	2b01      	cmp	r3, #1
 8008166:	d003      	beq.n	8008170 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008168:	f06f 0302 	mvn.w	r3, #2
 800816c:	61fb      	str	r3, [r7, #28]
 800816e:	e027      	b.n	80081c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d024      	beq.n	80081c0 <osMessageQueueGet+0xac>
 8008176:	4b15      	ldr	r3, [pc, #84]	@ (80081cc <osMessageQueueGet+0xb8>)
 8008178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	f3bf 8f4f 	dsb	sy
 8008182:	f3bf 8f6f 	isb	sy
 8008186:	e01b      	b.n	80081c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <osMessageQueueGet+0x80>
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d103      	bne.n	800819c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008194:	f06f 0303 	mvn.w	r3, #3
 8008198:	61fb      	str	r3, [r7, #28]
 800819a:	e011      	b.n	80081c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	69b8      	ldr	r0, [r7, #24]
 80081a2:	f000 fd99 	bl	8008cd8 <xQueueReceive>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d009      	beq.n	80081c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80081b2:	f06f 0301 	mvn.w	r3, #1
 80081b6:	61fb      	str	r3, [r7, #28]
 80081b8:	e002      	b.n	80081c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80081ba:	f06f 0302 	mvn.w	r3, #2
 80081be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80081c0:	69fb      	ldr	r3, [r7, #28]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3720      	adds	r7, #32
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	e000ed04 	.word	0xe000ed04

080081d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	4a07      	ldr	r2, [pc, #28]	@ (80081fc <vApplicationGetIdleTaskMemory+0x2c>)
 80081e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	4a06      	ldr	r2, [pc, #24]	@ (8008200 <vApplicationGetIdleTaskMemory+0x30>)
 80081e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2280      	movs	r2, #128	@ 0x80
 80081ec:	601a      	str	r2, [r3, #0]
}
 80081ee:	bf00      	nop
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	200408e8 	.word	0x200408e8
 8008200:	20040990 	.word	0x20040990

08008204 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4a07      	ldr	r2, [pc, #28]	@ (8008230 <vApplicationGetTimerTaskMemory+0x2c>)
 8008214:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	4a06      	ldr	r2, [pc, #24]	@ (8008234 <vApplicationGetTimerTaskMemory+0x30>)
 800821a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008222:	601a      	str	r2, [r3, #0]
}
 8008224:	bf00      	nop
 8008226:	3714      	adds	r7, #20
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr
 8008230:	20040b90 	.word	0x20040b90
 8008234:	20040c38 	.word	0x20040c38

08008238 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f103 0208 	add.w	r2, r3, #8
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f04f 32ff 	mov.w	r2, #4294967295
 8008250:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f103 0208 	add.w	r2, r3, #8
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f103 0208 	add.w	r2, r3, #8
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008292:	b480      	push	{r7}
 8008294:	b085      	sub	sp, #20
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
 800829a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	601a      	str	r2, [r3, #0]
}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082da:	b480      	push	{r7}
 80082dc:	b085      	sub	sp, #20
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f0:	d103      	bne.n	80082fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	60fb      	str	r3, [r7, #12]
 80082f8:	e00c      	b.n	8008314 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3308      	adds	r3, #8
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	e002      	b.n	8008308 <vListInsert+0x2e>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	429a      	cmp	r2, r3
 8008312:	d2f6      	bcs.n	8008302 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	601a      	str	r2, [r3, #0]
}
 8008340:	bf00      	nop
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	6892      	ldr	r2, [r2, #8]
 8008362:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6852      	ldr	r2, [r2, #4]
 800836c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	429a      	cmp	r2, r3
 8008376:	d103      	bne.n	8008380 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	689a      	ldr	r2, [r3, #8]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	1e5a      	subs	r2, r3, #1
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10b      	bne.n	80083cc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80083c6:	bf00      	nop
 80083c8:	bf00      	nop
 80083ca:	e7fd      	b.n	80083c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80083cc:	f002 fd6c 	bl	800aea8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d8:	68f9      	ldr	r1, [r7, #12]
 80083da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80083dc:	fb01 f303 	mul.w	r3, r1, r3
 80083e0:	441a      	add	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083fc:	3b01      	subs	r3, #1
 80083fe:	68f9      	ldr	r1, [r7, #12]
 8008400:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008402:	fb01 f303 	mul.w	r3, r1, r3
 8008406:	441a      	add	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	22ff      	movs	r2, #255	@ 0xff
 8008410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	22ff      	movs	r2, #255	@ 0xff
 8008418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d114      	bne.n	800844c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d01a      	beq.n	8008460 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3310      	adds	r3, #16
 800842e:	4618      	mov	r0, r3
 8008430:	f001 fcf6 	bl	8009e20 <xTaskRemoveFromEventList>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d012      	beq.n	8008460 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800843a:	4b0d      	ldr	r3, [pc, #52]	@ (8008470 <xQueueGenericReset+0xd0>)
 800843c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	f3bf 8f4f 	dsb	sy
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	e009      	b.n	8008460 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	3310      	adds	r3, #16
 8008450:	4618      	mov	r0, r3
 8008452:	f7ff fef1 	bl	8008238 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	3324      	adds	r3, #36	@ 0x24
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff feec 	bl	8008238 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008460:	f002 fd54 	bl	800af0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008464:	2301      	movs	r3, #1
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	e000ed04 	.word	0xe000ed04

08008474 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08e      	sub	sp, #56	@ 0x38
 8008478:	af02      	add	r7, sp, #8
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10b      	bne.n	80084a0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848c:	f383 8811 	msr	BASEPRI, r3
 8008490:	f3bf 8f6f 	isb	sy
 8008494:	f3bf 8f4f 	dsb	sy
 8008498:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800849a:	bf00      	nop
 800849c:	bf00      	nop
 800849e:	e7fd      	b.n	800849c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10b      	bne.n	80084be <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80084b8:	bf00      	nop
 80084ba:	bf00      	nop
 80084bc:	e7fd      	b.n	80084ba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <xQueueGenericCreateStatic+0x56>
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <xQueueGenericCreateStatic+0x5a>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e000      	b.n	80084d0 <xQueueGenericCreateStatic+0x5c>
 80084ce:	2300      	movs	r3, #0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10b      	bne.n	80084ec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	623b      	str	r3, [r7, #32]
}
 80084e6:	bf00      	nop
 80084e8:	bf00      	nop
 80084ea:	e7fd      	b.n	80084e8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d102      	bne.n	80084f8 <xQueueGenericCreateStatic+0x84>
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <xQueueGenericCreateStatic+0x88>
 80084f8:	2301      	movs	r3, #1
 80084fa:	e000      	b.n	80084fe <xQueueGenericCreateStatic+0x8a>
 80084fc:	2300      	movs	r3, #0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10b      	bne.n	800851a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	61fb      	str	r3, [r7, #28]
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	e7fd      	b.n	8008516 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800851a:	2350      	movs	r3, #80	@ 0x50
 800851c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b50      	cmp	r3, #80	@ 0x50
 8008522:	d00b      	beq.n	800853c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	61bb      	str	r3, [r7, #24]
}
 8008536:	bf00      	nop
 8008538:	bf00      	nop
 800853a:	e7fd      	b.n	8008538 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800853c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00d      	beq.n	8008564 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008550:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	4613      	mov	r3, r2
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	68b9      	ldr	r1, [r7, #8]
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 f840 	bl	80085e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008566:	4618      	mov	r0, r3
 8008568:	3730      	adds	r7, #48	@ 0x30
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800856e:	b580      	push	{r7, lr}
 8008570:	b08a      	sub	sp, #40	@ 0x28
 8008572:	af02      	add	r7, sp, #8
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	4613      	mov	r3, r2
 800857a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10b      	bne.n	800859a <xQueueGenericCreate+0x2c>
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	613b      	str	r3, [r7, #16]
}
 8008594:	bf00      	nop
 8008596:	bf00      	nop
 8008598:	e7fd      	b.n	8008596 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	fb02 f303 	mul.w	r3, r2, r3
 80085a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	3350      	adds	r3, #80	@ 0x50
 80085a8:	4618      	mov	r0, r3
 80085aa:	f002 fd9f 	bl	800b0ec <pvPortMalloc>
 80085ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d011      	beq.n	80085da <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	3350      	adds	r3, #80	@ 0x50
 80085be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085c8:	79fa      	ldrb	r2, [r7, #7]
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	4613      	mov	r3, r2
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	68b9      	ldr	r1, [r7, #8]
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 f805 	bl	80085e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80085da:	69bb      	ldr	r3, [r7, #24]
	}
 80085dc:	4618      	mov	r0, r3
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d103      	bne.n	8008600 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	e002      	b.n	8008606 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008612:	2101      	movs	r1, #1
 8008614:	69b8      	ldr	r0, [r7, #24]
 8008616:	f7ff fec3 	bl	80083a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	78fa      	ldrb	r2, [r7, #3]
 800861e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008622:	bf00      	nop
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00e      	beq.n	8008656 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800864a:	2300      	movs	r3, #0
 800864c:	2200      	movs	r2, #0
 800864e:	2100      	movs	r1, #0
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f911 	bl	8008878 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800865e:	b580      	push	{r7, lr}
 8008660:	b086      	sub	sp, #24
 8008662:	af00      	add	r7, sp, #0
 8008664:	4603      	mov	r3, r0
 8008666:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008668:	2301      	movs	r3, #1
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	2300      	movs	r3, #0
 800866e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	461a      	mov	r2, r3
 8008674:	6939      	ldr	r1, [r7, #16]
 8008676:	6978      	ldr	r0, [r7, #20]
 8008678:	f7ff ff79 	bl	800856e <xQueueGenericCreate>
 800867c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f7ff ffd3 	bl	800862a <prvInitialiseMutex>

		return xNewQueue;
 8008684:	68fb      	ldr	r3, [r7, #12]
	}
 8008686:	4618      	mov	r0, r3
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800868e:	b580      	push	{r7, lr}
 8008690:	b088      	sub	sp, #32
 8008692:	af02      	add	r7, sp, #8
 8008694:	4603      	mov	r3, r0
 8008696:	6039      	str	r1, [r7, #0]
 8008698:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800869a:	2301      	movs	r3, #1
 800869c:	617b      	str	r3, [r7, #20]
 800869e:	2300      	movs	r3, #0
 80086a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	2200      	movs	r2, #0
 80086aa:	6939      	ldr	r1, [r7, #16]
 80086ac:	6978      	ldr	r0, [r7, #20]
 80086ae:	f7ff fee1 	bl	8008474 <xQueueGenericCreateStatic>
 80086b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f7ff ffb8 	bl	800862a <prvInitialiseMutex>

		return xNewQueue;
 80086ba:	68fb      	ldr	r3, [r7, #12]
	}
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	60fb      	str	r3, [r7, #12]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	689c      	ldr	r4, [r3, #8]
 80086f2:	f001 fd5b 	bl	800a1ac <xTaskGetCurrentTaskHandle>
 80086f6:	4603      	mov	r3, r0
 80086f8:	429c      	cmp	r4, r3
 80086fa:	d111      	bne.n	8008720 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	1e5a      	subs	r2, r3, #1
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d105      	bne.n	800871a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800870e:	2300      	movs	r3, #0
 8008710:	2200      	movs	r2, #0
 8008712:	2100      	movs	r1, #0
 8008714:	6938      	ldr	r0, [r7, #16]
 8008716:	f000 f8af 	bl	8008878 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800871a:	2301      	movs	r3, #1
 800871c:	617b      	str	r3, [r7, #20]
 800871e:	e001      	b.n	8008724 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008720:	2300      	movs	r3, #0
 8008722:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008724:	697b      	ldr	r3, [r7, #20]
	}
 8008726:	4618      	mov	r0, r3
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	bd90      	pop	{r4, r7, pc}

0800872e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800872e:	b590      	push	{r4, r7, lr}
 8008730:	b087      	sub	sp, #28
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10b      	bne.n	800875a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	60fb      	str	r3, [r7, #12]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	689c      	ldr	r4, [r3, #8]
 800875e:	f001 fd25 	bl	800a1ac <xTaskGetCurrentTaskHandle>
 8008762:	4603      	mov	r3, r0
 8008764:	429c      	cmp	r4, r3
 8008766:	d107      	bne.n	8008778 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008772:	2301      	movs	r3, #1
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	e00c      	b.n	8008792 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6938      	ldr	r0, [r7, #16]
 800877c:	f000 fb8e 	bl	8008e9c <xQueueSemaphoreTake>
 8008780:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d004      	beq.n	8008792 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008792:	697b      	ldr	r3, [r7, #20]
	}
 8008794:	4618      	mov	r0, r3
 8008796:	371c      	adds	r7, #28
 8008798:	46bd      	mov	sp, r7
 800879a:	bd90      	pop	{r4, r7, pc}

0800879c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	@ 0x28
 80087a0:	af02      	add	r7, sp, #8
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10b      	bne.n	80087c6 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	61bb      	str	r3, [r7, #24]
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	e7fd      	b.n	80087c2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087c6:	68ba      	ldr	r2, [r7, #8]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d90b      	bls.n	80087e6 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	617b      	str	r3, [r7, #20]
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	e7fd      	b.n	80087e2 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80087e6:	2302      	movs	r3, #2
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	2100      	movs	r1, #0
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f7ff fe3f 	bl	8008474 <xQueueGenericCreateStatic>
 80087f6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d002      	beq.n	8008804 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008804:	69fb      	ldr	r3, [r7, #28]
	}
 8008806:	4618      	mov	r0, r3
 8008808:	3720      	adds	r7, #32
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800880e:	b580      	push	{r7, lr}
 8008810:	b086      	sub	sp, #24
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10b      	bne.n	8008836 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	613b      	str	r3, [r7, #16]
}
 8008830:	bf00      	nop
 8008832:	bf00      	nop
 8008834:	e7fd      	b.n	8008832 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	429a      	cmp	r2, r3
 800883c:	d90b      	bls.n	8008856 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	60fb      	str	r3, [r7, #12]
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	e7fd      	b.n	8008852 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008856:	2202      	movs	r2, #2
 8008858:	2100      	movs	r1, #0
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff fe87 	bl	800856e <xQueueGenericCreate>
 8008860:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d002      	beq.n	800886e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800886e:	697b      	ldr	r3, [r7, #20]
	}
 8008870:	4618      	mov	r0, r3
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08e      	sub	sp, #56	@ 0x38
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008886:	2300      	movs	r3, #0
 8008888:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800888e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10b      	bne.n	80088ac <xQueueGenericSend+0x34>
	__asm volatile
 8008894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008898:	f383 8811 	msr	BASEPRI, r3
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	f3bf 8f4f 	dsb	sy
 80088a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80088a6:	bf00      	nop
 80088a8:	bf00      	nop
 80088aa:	e7fd      	b.n	80088a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d103      	bne.n	80088ba <xQueueGenericSend+0x42>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <xQueueGenericSend+0x46>
 80088ba:	2301      	movs	r3, #1
 80088bc:	e000      	b.n	80088c0 <xQueueGenericSend+0x48>
 80088be:	2300      	movs	r3, #0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10b      	bne.n	80088dc <xQueueGenericSend+0x64>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d103      	bne.n	80088ea <xQueueGenericSend+0x72>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d101      	bne.n	80088ee <xQueueGenericSend+0x76>
 80088ea:	2301      	movs	r3, #1
 80088ec:	e000      	b.n	80088f0 <xQueueGenericSend+0x78>
 80088ee:	2300      	movs	r3, #0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10b      	bne.n	800890c <xQueueGenericSend+0x94>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	623b      	str	r3, [r7, #32]
}
 8008906:	bf00      	nop
 8008908:	bf00      	nop
 800890a:	e7fd      	b.n	8008908 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800890c:	f001 fc5e 	bl	800a1cc <xTaskGetSchedulerState>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d102      	bne.n	800891c <xQueueGenericSend+0xa4>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <xQueueGenericSend+0xa8>
 800891c:	2301      	movs	r3, #1
 800891e:	e000      	b.n	8008922 <xQueueGenericSend+0xaa>
 8008920:	2300      	movs	r3, #0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10b      	bne.n	800893e <xQueueGenericSend+0xc6>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	61fb      	str	r3, [r7, #28]
}
 8008938:	bf00      	nop
 800893a:	bf00      	nop
 800893c:	e7fd      	b.n	800893a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800893e:	f002 fab3 	bl	800aea8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800894a:	429a      	cmp	r2, r3
 800894c:	d302      	bcc.n	8008954 <xQueueGenericSend+0xdc>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b02      	cmp	r3, #2
 8008952:	d129      	bne.n	80089a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	68b9      	ldr	r1, [r7, #8]
 8008958:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800895a:	f000 fc6d 	bl	8009238 <prvCopyDataToQueue>
 800895e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008964:	2b00      	cmp	r3, #0
 8008966:	d010      	beq.n	800898a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896a:	3324      	adds	r3, #36	@ 0x24
 800896c:	4618      	mov	r0, r3
 800896e:	f001 fa57 	bl	8009e20 <xTaskRemoveFromEventList>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d013      	beq.n	80089a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008978:	4b3f      	ldr	r3, [pc, #252]	@ (8008a78 <xQueueGenericSend+0x200>)
 800897a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	e00a      	b.n	80089a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800898a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008990:	4b39      	ldr	r3, [pc, #228]	@ (8008a78 <xQueueGenericSend+0x200>)
 8008992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089a0:	f002 fab4 	bl	800af0c <vPortExitCritical>
				return pdPASS;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e063      	b.n	8008a70 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d103      	bne.n	80089b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089ae:	f002 faad 	bl	800af0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089b2:	2300      	movs	r3, #0
 80089b4:	e05c      	b.n	8008a70 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d106      	bne.n	80089ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	4618      	mov	r0, r3
 80089c2:	f001 fa91 	bl	8009ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089c6:	2301      	movs	r3, #1
 80089c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089ca:	f002 fa9f 	bl	800af0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089ce:	f000 fff9 	bl	80099c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089d2:	f002 fa69 	bl	800aea8 <vPortEnterCritical>
 80089d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089dc:	b25b      	sxtb	r3, r3
 80089de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e2:	d103      	bne.n	80089ec <xQueueGenericSend+0x174>
 80089e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f8:	d103      	bne.n	8008a02 <xQueueGenericSend+0x18a>
 80089fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fc:	2200      	movs	r2, #0
 80089fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a02:	f002 fa83 	bl	800af0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a06:	1d3a      	adds	r2, r7, #4
 8008a08:	f107 0314 	add.w	r3, r7, #20
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 fa80 	bl	8009f14 <xTaskCheckForTimeOut>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d124      	bne.n	8008a64 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a1c:	f000 fd04 	bl	8009428 <prvIsQueueFull>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d018      	beq.n	8008a58 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a28:	3310      	adds	r3, #16
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	4611      	mov	r1, r2
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f001 f9a4 	bl	8009d7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a36:	f000 fc8f 	bl	8009358 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a3a:	f000 ffd1 	bl	80099e0 <xTaskResumeAll>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f47f af7c 	bne.w	800893e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008a46:	4b0c      	ldr	r3, [pc, #48]	@ (8008a78 <xQueueGenericSend+0x200>)
 8008a48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a4c:	601a      	str	r2, [r3, #0]
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	e772      	b.n	800893e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a5a:	f000 fc7d 	bl	8009358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a5e:	f000 ffbf 	bl	80099e0 <xTaskResumeAll>
 8008a62:	e76c      	b.n	800893e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008a66:	f000 fc77 	bl	8009358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a6a:	f000 ffb9 	bl	80099e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3738      	adds	r7, #56	@ 0x38
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b090      	sub	sp, #64	@ 0x40
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
 8008a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10b      	bne.n	8008aac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
 8008aaa:	e7fd      	b.n	8008aa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d103      	bne.n	8008aba <xQueueGenericSendFromISR+0x3e>
 8008ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <xQueueGenericSendFromISR+0x42>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <xQueueGenericSendFromISR+0x44>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10b      	bne.n	8008adc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ad6:	bf00      	nop
 8008ad8:	bf00      	nop
 8008ada:	e7fd      	b.n	8008ad8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d103      	bne.n	8008aea <xQueueGenericSendFromISR+0x6e>
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d101      	bne.n	8008aee <xQueueGenericSendFromISR+0x72>
 8008aea:	2301      	movs	r3, #1
 8008aec:	e000      	b.n	8008af0 <xQueueGenericSendFromISR+0x74>
 8008aee:	2300      	movs	r3, #0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10b      	bne.n	8008b0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af8:	f383 8811 	msr	BASEPRI, r3
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	f3bf 8f4f 	dsb	sy
 8008b04:	623b      	str	r3, [r7, #32]
}
 8008b06:	bf00      	nop
 8008b08:	bf00      	nop
 8008b0a:	e7fd      	b.n	8008b08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b0c:	f002 faac 	bl	800b068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b10:	f3ef 8211 	mrs	r2, BASEPRI
 8008b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	61fa      	str	r2, [r7, #28]
 8008b26:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b2a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d302      	bcc.n	8008b3e <xQueueGenericSendFromISR+0xc2>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d12f      	bne.n	8008b9e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	68b9      	ldr	r1, [r7, #8]
 8008b52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b54:	f000 fb70 	bl	8009238 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b60:	d112      	bne.n	8008b88 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d016      	beq.n	8008b98 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6c:	3324      	adds	r3, #36	@ 0x24
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f001 f956 	bl	8009e20 <xTaskRemoveFromEventList>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00e      	beq.n	8008b98 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	601a      	str	r2, [r3, #0]
 8008b86:	e007      	b.n	8008b98 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	b25a      	sxtb	r2, r3
 8008b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008b9c:	e001      	b.n	8008ba2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ba2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3740      	adds	r7, #64	@ 0x40
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08e      	sub	sp, #56	@ 0x38
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10b      	bne.n	8008be4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	623b      	str	r3, [r7, #32]
}
 8008bde:	bf00      	nop
 8008be0:	bf00      	nop
 8008be2:	e7fd      	b.n	8008be0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00b      	beq.n	8008c04 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	61fb      	str	r3, [r7, #28]
}
 8008bfe:	bf00      	nop
 8008c00:	bf00      	nop
 8008c02:	e7fd      	b.n	8008c00 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d103      	bne.n	8008c14 <xQueueGiveFromISR+0x5c>
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <xQueueGiveFromISR+0x60>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <xQueueGiveFromISR+0x62>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10b      	bne.n	8008c36 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	61bb      	str	r3, [r7, #24]
}
 8008c30:	bf00      	nop
 8008c32:	bf00      	nop
 8008c34:	e7fd      	b.n	8008c32 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c36:	f002 fa17 	bl	800b068 <vPortValidateInterruptPriority>
	__asm volatile
 8008c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8008c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	617a      	str	r2, [r7, #20]
 8008c50:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c52:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d22b      	bcs.n	8008cbe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c76:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c80:	d112      	bne.n	8008ca8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d016      	beq.n	8008cb8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8c:	3324      	adds	r3, #36	@ 0x24
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 f8c6 	bl	8009e20 <xTaskRemoveFromEventList>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00e      	beq.n	8008cb8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00b      	beq.n	8008cb8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	601a      	str	r2, [r3, #0]
 8008ca6:	e007      	b.n	8008cb8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cac:	3301      	adds	r3, #1
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	b25a      	sxtb	r2, r3
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cbc:	e001      	b.n	8008cc2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f383 8811 	msr	BASEPRI, r3
}
 8008ccc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3738      	adds	r7, #56	@ 0x38
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08c      	sub	sp, #48	@ 0x30
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	60b9      	str	r1, [r7, #8]
 8008ce2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10b      	bne.n	8008d0a <xQueueReceive+0x32>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	623b      	str	r3, [r7, #32]
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop
 8008d08:	e7fd      	b.n	8008d06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d103      	bne.n	8008d18 <xQueueReceive+0x40>
 8008d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <xQueueReceive+0x44>
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e000      	b.n	8008d1e <xQueueReceive+0x46>
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10b      	bne.n	8008d3a <xQueueReceive+0x62>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	61fb      	str	r3, [r7, #28]
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop
 8008d38:	e7fd      	b.n	8008d36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d3a:	f001 fa47 	bl	800a1cc <xTaskGetSchedulerState>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d102      	bne.n	8008d4a <xQueueReceive+0x72>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <xQueueReceive+0x76>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e000      	b.n	8008d50 <xQueueReceive+0x78>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10b      	bne.n	8008d6c <xQueueReceive+0x94>
	__asm volatile
 8008d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	61bb      	str	r3, [r7, #24]
}
 8008d66:	bf00      	nop
 8008d68:	bf00      	nop
 8008d6a:	e7fd      	b.n	8008d68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d6c:	f002 f89c 	bl	800aea8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01f      	beq.n	8008dbc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d7c:	68b9      	ldr	r1, [r7, #8]
 8008d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d80:	f000 fac4 	bl	800930c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d86:	1e5a      	subs	r2, r3, #1
 8008d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00f      	beq.n	8008db4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d96:	3310      	adds	r3, #16
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 f841 	bl	8009e20 <xTaskRemoveFromEventList>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d007      	beq.n	8008db4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008da4:	4b3c      	ldr	r3, [pc, #240]	@ (8008e98 <xQueueReceive+0x1c0>)
 8008da6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008daa:	601a      	str	r2, [r3, #0]
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008db4:	f002 f8aa 	bl	800af0c <vPortExitCritical>
				return pdPASS;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e069      	b.n	8008e90 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d103      	bne.n	8008dca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008dc2:	f002 f8a3 	bl	800af0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e062      	b.n	8008e90 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d106      	bne.n	8008dde <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dd0:	f107 0310 	add.w	r3, r7, #16
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 f887 	bl	8009ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dde:	f002 f895 	bl	800af0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008de2:	f000 fdef 	bl	80099c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008de6:	f002 f85f 	bl	800aea8 <vPortEnterCritical>
 8008dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008df0:	b25b      	sxtb	r3, r3
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df6:	d103      	bne.n	8008e00 <xQueueReceive+0x128>
 8008df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e06:	b25b      	sxtb	r3, r3
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0c:	d103      	bne.n	8008e16 <xQueueReceive+0x13e>
 8008e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e16:	f002 f879 	bl	800af0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e1a:	1d3a      	adds	r2, r7, #4
 8008e1c:	f107 0310 	add.w	r3, r7, #16
 8008e20:	4611      	mov	r1, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f001 f876 	bl	8009f14 <xTaskCheckForTimeOut>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d123      	bne.n	8008e76 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e30:	f000 fae4 	bl	80093fc <prvIsQueueEmpty>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d017      	beq.n	8008e6a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	3324      	adds	r3, #36	@ 0x24
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	4611      	mov	r1, r2
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 ff9a 	bl	8009d7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e4a:	f000 fa85 	bl	8009358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e4e:	f000 fdc7 	bl	80099e0 <xTaskResumeAll>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d189      	bne.n	8008d6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008e58:	4b0f      	ldr	r3, [pc, #60]	@ (8008e98 <xQueueReceive+0x1c0>)
 8008e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	e780      	b.n	8008d6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e6c:	f000 fa74 	bl	8009358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e70:	f000 fdb6 	bl	80099e0 <xTaskResumeAll>
 8008e74:	e77a      	b.n	8008d6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e78:	f000 fa6e 	bl	8009358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e7c:	f000 fdb0 	bl	80099e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e82:	f000 fabb 	bl	80093fc <prvIsQueueEmpty>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f43f af6f 	beq.w	8008d6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e8e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3730      	adds	r7, #48	@ 0x30
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	e000ed04 	.word	0xe000ed04

08008e9c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08e      	sub	sp, #56	@ 0x38
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10b      	bne.n	8008ed0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	623b      	str	r3, [r7, #32]
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00b      	beq.n	8008ef0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	61fb      	str	r3, [r7, #28]
}
 8008eea:	bf00      	nop
 8008eec:	bf00      	nop
 8008eee:	e7fd      	b.n	8008eec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ef0:	f001 f96c 	bl	800a1cc <xTaskGetSchedulerState>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d102      	bne.n	8008f00 <xQueueSemaphoreTake+0x64>
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <xQueueSemaphoreTake+0x68>
 8008f00:	2301      	movs	r3, #1
 8008f02:	e000      	b.n	8008f06 <xQueueSemaphoreTake+0x6a>
 8008f04:	2300      	movs	r3, #0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10b      	bne.n	8008f22 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0e:	f383 8811 	msr	BASEPRI, r3
 8008f12:	f3bf 8f6f 	isb	sy
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	61bb      	str	r3, [r7, #24]
}
 8008f1c:	bf00      	nop
 8008f1e:	bf00      	nop
 8008f20:	e7fd      	b.n	8008f1e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f22:	f001 ffc1 	bl	800aea8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d024      	beq.n	8008f7c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f34:	1e5a      	subs	r2, r3, #1
 8008f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f38:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f42:	f001 fabd 	bl	800a4c0 <pvTaskIncrementMutexHeldCount>
 8008f46:	4602      	mov	r2, r0
 8008f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f4a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00f      	beq.n	8008f74 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f56:	3310      	adds	r3, #16
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 ff61 	bl	8009e20 <xTaskRemoveFromEventList>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d007      	beq.n	8008f74 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f64:	4b54      	ldr	r3, [pc, #336]	@ (80090b8 <xQueueSemaphoreTake+0x21c>)
 8008f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f6a:	601a      	str	r2, [r3, #0]
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f74:	f001 ffca 	bl	800af0c <vPortExitCritical>
				return pdPASS;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e098      	b.n	80090ae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d112      	bne.n	8008fa8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00b      	beq.n	8008fa0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	617b      	str	r3, [r7, #20]
}
 8008f9a:	bf00      	nop
 8008f9c:	bf00      	nop
 8008f9e:	e7fd      	b.n	8008f9c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008fa0:	f001 ffb4 	bl	800af0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	e082      	b.n	80090ae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d106      	bne.n	8008fbc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fae:	f107 030c 	add.w	r3, r7, #12
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 ff98 	bl	8009ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fbc:	f001 ffa6 	bl	800af0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fc0:	f000 fd00 	bl	80099c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fc4:	f001 ff70 	bl	800aea8 <vPortEnterCritical>
 8008fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fce:	b25b      	sxtb	r3, r3
 8008fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fd4:	d103      	bne.n	8008fde <xQueueSemaphoreTake+0x142>
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fe4:	b25b      	sxtb	r3, r3
 8008fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fea:	d103      	bne.n	8008ff4 <xQueueSemaphoreTake+0x158>
 8008fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ff4:	f001 ff8a 	bl	800af0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ff8:	463a      	mov	r2, r7
 8008ffa:	f107 030c 	add.w	r3, r7, #12
 8008ffe:	4611      	mov	r1, r2
 8009000:	4618      	mov	r0, r3
 8009002:	f000 ff87 	bl	8009f14 <xTaskCheckForTimeOut>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d132      	bne.n	8009072 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800900c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800900e:	f000 f9f5 	bl	80093fc <prvIsQueueEmpty>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d026      	beq.n	8009066 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d109      	bne.n	8009034 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009020:	f001 ff42 	bl	800aea8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	4618      	mov	r0, r3
 800902a:	f001 f8ed 	bl	800a208 <xTaskPriorityInherit>
 800902e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009030:	f001 ff6c 	bl	800af0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009036:	3324      	adds	r3, #36	@ 0x24
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	4611      	mov	r1, r2
 800903c:	4618      	mov	r0, r3
 800903e:	f000 fe9d 	bl	8009d7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009042:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009044:	f000 f988 	bl	8009358 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009048:	f000 fcca 	bl	80099e0 <xTaskResumeAll>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	f47f af67 	bne.w	8008f22 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009054:	4b18      	ldr	r3, [pc, #96]	@ (80090b8 <xQueueSemaphoreTake+0x21c>)
 8009056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	e75d      	b.n	8008f22 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009066:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009068:	f000 f976 	bl	8009358 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800906c:	f000 fcb8 	bl	80099e0 <xTaskResumeAll>
 8009070:	e757      	b.n	8008f22 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009072:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009074:	f000 f970 	bl	8009358 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009078:	f000 fcb2 	bl	80099e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800907c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800907e:	f000 f9bd 	bl	80093fc <prvIsQueueEmpty>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	f43f af4c 	beq.w	8008f22 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800908a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00d      	beq.n	80090ac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8009090:	f001 ff0a 	bl	800aea8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009094:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009096:	f000 f8b7 	bl	8009208 <prvGetDisinheritPriorityAfterTimeout>
 800909a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800909c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80090a2:	4618      	mov	r0, r3
 80090a4:	f001 f988 	bl	800a3b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80090a8:	f001 ff30 	bl	800af0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3738      	adds	r7, #56	@ 0x38
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	e000ed04 	.word	0xe000ed04

080090bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08e      	sub	sp, #56	@ 0x38
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80090cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10b      	bne.n	80090ea <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80090d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	623b      	str	r3, [r7, #32]
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop
 80090e8:	e7fd      	b.n	80090e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d103      	bne.n	80090f8 <xQueueReceiveFromISR+0x3c>
 80090f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <xQueueReceiveFromISR+0x40>
 80090f8:	2301      	movs	r3, #1
 80090fa:	e000      	b.n	80090fe <xQueueReceiveFromISR+0x42>
 80090fc:	2300      	movs	r3, #0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d10b      	bne.n	800911a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	61fb      	str	r3, [r7, #28]
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	e7fd      	b.n	8009116 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800911a:	f001 ffa5 	bl	800b068 <vPortValidateInterruptPriority>
	__asm volatile
 800911e:	f3ef 8211 	mrs	r2, BASEPRI
 8009122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	61ba      	str	r2, [r7, #24]
 8009134:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009136:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009138:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800913a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800913e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009142:	2b00      	cmp	r3, #0
 8009144:	d02f      	beq.n	80091a6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009148:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800914c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009150:	68b9      	ldr	r1, [r7, #8]
 8009152:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009154:	f000 f8da 	bl	800930c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800915a:	1e5a      	subs	r2, r3, #1
 800915c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009160:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009168:	d112      	bne.n	8009190 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d016      	beq.n	80091a0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009174:	3310      	adds	r3, #16
 8009176:	4618      	mov	r0, r3
 8009178:	f000 fe52 	bl	8009e20 <xTaskRemoveFromEventList>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00e      	beq.n	80091a0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00b      	beq.n	80091a0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	e007      	b.n	80091a0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009194:	3301      	adds	r3, #1
 8009196:	b2db      	uxtb	r3, r3
 8009198:	b25a      	sxtb	r2, r3
 800919a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80091a0:	2301      	movs	r3, #1
 80091a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a4:	e001      	b.n	80091aa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f383 8811 	msr	BASEPRI, r3
}
 80091b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3738      	adds	r7, #56	@ 0x38
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10b      	bne.n	80091ea <vQueueDelete+0x2a>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	60bb      	str	r3, [r7, #8]
}
 80091e4:	bf00      	nop
 80091e6:	bf00      	nop
 80091e8:	e7fd      	b.n	80091e6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f000 f95e 	bl	80094ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d102      	bne.n	8009200 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f002 f844 	bl	800b288 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009200:	bf00      	nop
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009214:	2b00      	cmp	r3, #0
 8009216:	d006      	beq.n	8009226 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	e001      	b.n	800922a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009226:	2300      	movs	r3, #0
 8009228:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800922a:	68fb      	ldr	r3, [r7, #12]
	}
 800922c:	4618      	mov	r0, r3
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009244:	2300      	movs	r3, #0
 8009246:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800924c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10d      	bne.n	8009272 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d14d      	bne.n	80092fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	689b      	ldr	r3, [r3, #8]
 8009262:	4618      	mov	r0, r3
 8009264:	f001 f838 	bl	800a2d8 <xTaskPriorityDisinherit>
 8009268:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	609a      	str	r2, [r3, #8]
 8009270:	e043      	b.n	80092fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d119      	bne.n	80092ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6858      	ldr	r0, [r3, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009280:	461a      	mov	r2, r3
 8009282:	68b9      	ldr	r1, [r7, #8]
 8009284:	f002 f9a4 	bl	800b5d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009290:	441a      	add	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d32b      	bcc.n	80092fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	605a      	str	r2, [r3, #4]
 80092aa:	e026      	b.n	80092fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	68d8      	ldr	r0, [r3, #12]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092b4:	461a      	mov	r2, r3
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	f002 f98a 	bl	800b5d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	68da      	ldr	r2, [r3, #12]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c4:	425b      	negs	r3, r3
 80092c6:	441a      	add	r2, r3
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	68da      	ldr	r2, [r3, #12]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d207      	bcs.n	80092e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	689a      	ldr	r2, [r3, #8]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092e0:	425b      	negs	r3, r3
 80092e2:	441a      	add	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d105      	bne.n	80092fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	3b01      	subs	r3, #1
 80092f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	1c5a      	adds	r2, r3, #1
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009302:	697b      	ldr	r3, [r7, #20]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b082      	sub	sp, #8
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800931a:	2b00      	cmp	r3, #0
 800931c:	d018      	beq.n	8009350 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68da      	ldr	r2, [r3, #12]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009326:	441a      	add	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	429a      	cmp	r2, r3
 8009336:	d303      	bcc.n	8009340 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68d9      	ldr	r1, [r3, #12]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009348:	461a      	mov	r2, r3
 800934a:	6838      	ldr	r0, [r7, #0]
 800934c:	f002 f940 	bl	800b5d0 <memcpy>
	}
}
 8009350:	bf00      	nop
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009360:	f001 fda2 	bl	800aea8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800936a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800936c:	e011      	b.n	8009392 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009372:	2b00      	cmp	r3, #0
 8009374:	d012      	beq.n	800939c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3324      	adds	r3, #36	@ 0x24
 800937a:	4618      	mov	r0, r3
 800937c:	f000 fd50 	bl	8009e20 <xTaskRemoveFromEventList>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009386:	f000 fe29 	bl	8009fdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800938a:	7bfb      	ldrb	r3, [r7, #15]
 800938c:	3b01      	subs	r3, #1
 800938e:	b2db      	uxtb	r3, r3
 8009390:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009396:	2b00      	cmp	r3, #0
 8009398:	dce9      	bgt.n	800936e <prvUnlockQueue+0x16>
 800939a:	e000      	b.n	800939e <prvUnlockQueue+0x46>
					break;
 800939c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	22ff      	movs	r2, #255	@ 0xff
 80093a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80093a6:	f001 fdb1 	bl	800af0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80093aa:	f001 fd7d 	bl	800aea8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093b6:	e011      	b.n	80093dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d012      	beq.n	80093e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3310      	adds	r3, #16
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fd2b 	bl	8009e20 <xTaskRemoveFromEventList>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d001      	beq.n	80093d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80093d0:	f000 fe04 	bl	8009fdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80093d4:	7bbb      	ldrb	r3, [r7, #14]
 80093d6:	3b01      	subs	r3, #1
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80093dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	dce9      	bgt.n	80093b8 <prvUnlockQueue+0x60>
 80093e4:	e000      	b.n	80093e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80093e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	22ff      	movs	r2, #255	@ 0xff
 80093ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80093f0:	f001 fd8c 	bl	800af0c <vPortExitCritical>
}
 80093f4:	bf00      	nop
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009404:	f001 fd50 	bl	800aea8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800940c:	2b00      	cmp	r3, #0
 800940e:	d102      	bne.n	8009416 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009410:	2301      	movs	r3, #1
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	e001      	b.n	800941a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009416:	2300      	movs	r3, #0
 8009418:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800941a:	f001 fd77 	bl	800af0c <vPortExitCritical>

	return xReturn;
 800941e:	68fb      	ldr	r3, [r7, #12]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009430:	f001 fd3a 	bl	800aea8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800943c:	429a      	cmp	r2, r3
 800943e:	d102      	bne.n	8009446 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009440:	2301      	movs	r3, #1
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	e001      	b.n	800944a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800944a:	f001 fd5f 	bl	800af0c <vPortExitCritical>

	return xReturn;
 800944e:	68fb      	ldr	r3, [r7, #12]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	e014      	b.n	8009492 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009468:	4a0f      	ldr	r2, [pc, #60]	@ (80094a8 <vQueueAddToRegistry+0x50>)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10b      	bne.n	800948c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009474:	490c      	ldr	r1, [pc, #48]	@ (80094a8 <vQueueAddToRegistry+0x50>)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800947e:	4a0a      	ldr	r2, [pc, #40]	@ (80094a8 <vQueueAddToRegistry+0x50>)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	4413      	add	r3, r2
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800948a:	e006      	b.n	800949a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3301      	adds	r3, #1
 8009490:	60fb      	str	r3, [r7, #12]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2b07      	cmp	r3, #7
 8009496:	d9e7      	bls.n	8009468 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009498:	bf00      	nop
 800949a:	bf00      	nop
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr
 80094a6:	bf00      	nop
 80094a8:	20041038 	.word	0x20041038

080094ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	e016      	b.n	80094e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80094ba:	4a10      	ldr	r2, [pc, #64]	@ (80094fc <vQueueUnregisterQueue+0x50>)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	4413      	add	r3, r2
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d10b      	bne.n	80094e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80094ca:	4a0c      	ldr	r2, [pc, #48]	@ (80094fc <vQueueUnregisterQueue+0x50>)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2100      	movs	r1, #0
 80094d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80094d4:	4a09      	ldr	r2, [pc, #36]	@ (80094fc <vQueueUnregisterQueue+0x50>)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	4413      	add	r3, r2
 80094dc:	2200      	movs	r2, #0
 80094de:	605a      	str	r2, [r3, #4]
				break;
 80094e0:	e006      	b.n	80094f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	3301      	adds	r3, #1
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2b07      	cmp	r3, #7
 80094ec:	d9e5      	bls.n	80094ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80094ee:	bf00      	nop
 80094f0:	bf00      	nop
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	20041038 	.word	0x20041038

08009500 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009510:	f001 fcca 	bl	800aea8 <vPortEnterCritical>
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800951a:	b25b      	sxtb	r3, r3
 800951c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009520:	d103      	bne.n	800952a <vQueueWaitForMessageRestricted+0x2a>
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009530:	b25b      	sxtb	r3, r3
 8009532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009536:	d103      	bne.n	8009540 <vQueueWaitForMessageRestricted+0x40>
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009540:	f001 fce4 	bl	800af0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	3324      	adds	r3, #36	@ 0x24
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	68b9      	ldr	r1, [r7, #8]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fc37 	bl	8009dc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800955a:	6978      	ldr	r0, [r7, #20]
 800955c:	f7ff fefc 	bl	8009358 <prvUnlockQueue>
	}
 8009560:	bf00      	nop
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009568:	b580      	push	{r7, lr}
 800956a:	b08e      	sub	sp, #56	@ 0x38
 800956c:	af04      	add	r7, sp, #16
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
 8009574:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10b      	bne.n	8009594 <xTaskCreateStatic+0x2c>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	623b      	str	r3, [r7, #32]
}
 800958e:	bf00      	nop
 8009590:	bf00      	nop
 8009592:	e7fd      	b.n	8009590 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10b      	bne.n	80095b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	61fb      	str	r3, [r7, #28]
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	e7fd      	b.n	80095ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095b2:	23a8      	movs	r3, #168	@ 0xa8
 80095b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80095ba:	d00b      	beq.n	80095d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80095bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c0:	f383 8811 	msr	BASEPRI, r3
 80095c4:	f3bf 8f6f 	isb	sy
 80095c8:	f3bf 8f4f 	dsb	sy
 80095cc:	61bb      	str	r3, [r7, #24]
}
 80095ce:	bf00      	nop
 80095d0:	bf00      	nop
 80095d2:	e7fd      	b.n	80095d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80095d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d01e      	beq.n	800961a <xTaskCreateStatic+0xb2>
 80095dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d01b      	beq.n	800961a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ee:	2202      	movs	r2, #2
 80095f0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095f4:	2300      	movs	r3, #0
 80095f6:	9303      	str	r3, [sp, #12]
 80095f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fa:	9302      	str	r3, [sp, #8]
 80095fc:	f107 0314 	add.w	r3, r7, #20
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	68b9      	ldr	r1, [r7, #8]
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f851 	bl	80096b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009612:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009614:	f000 f8f6 	bl	8009804 <prvAddNewTaskToReadyList>
 8009618:	e001      	b.n	800961e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800961e:	697b      	ldr	r3, [r7, #20]
	}
 8009620:	4618      	mov	r0, r3
 8009622:	3728      	adds	r7, #40	@ 0x28
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08c      	sub	sp, #48	@ 0x30
 800962c:	af04      	add	r7, sp, #16
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4613      	mov	r3, r2
 8009636:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009638:	88fb      	ldrh	r3, [r7, #6]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4618      	mov	r0, r3
 800963e:	f001 fd55 	bl	800b0ec <pvPortMalloc>
 8009642:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00e      	beq.n	8009668 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800964a:	20a8      	movs	r0, #168	@ 0xa8
 800964c:	f001 fd4e 	bl	800b0ec <pvPortMalloc>
 8009650:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	697a      	ldr	r2, [r7, #20]
 800965c:	631a      	str	r2, [r3, #48]	@ 0x30
 800965e:	e005      	b.n	800966c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009660:	6978      	ldr	r0, [r7, #20]
 8009662:	f001 fe11 	bl	800b288 <vPortFree>
 8009666:	e001      	b.n	800966c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009668:	2300      	movs	r3, #0
 800966a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d017      	beq.n	80096a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800967a:	88fa      	ldrh	r2, [r7, #6]
 800967c:	2300      	movs	r3, #0
 800967e:	9303      	str	r3, [sp, #12]
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	9302      	str	r3, [sp, #8]
 8009684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009686:	9301      	str	r3, [sp, #4]
 8009688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	68f8      	ldr	r0, [r7, #12]
 8009692:	f000 f80f 	bl	80096b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009696:	69f8      	ldr	r0, [r7, #28]
 8009698:	f000 f8b4 	bl	8009804 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800969c:	2301      	movs	r3, #1
 800969e:	61bb      	str	r3, [r7, #24]
 80096a0:	e002      	b.n	80096a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096a2:	f04f 33ff 	mov.w	r3, #4294967295
 80096a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096a8:	69bb      	ldr	r3, [r7, #24]
	}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3720      	adds	r7, #32
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
	...

080096b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b088      	sub	sp, #32
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
 80096c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	461a      	mov	r2, r3
 80096cc:	21a5      	movs	r1, #165	@ 0xa5
 80096ce:	f001 fefb 	bl	800b4c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80096dc:	3b01      	subs	r3, #1
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	f023 0307 	bic.w	r3, r3, #7
 80096ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	f003 0307 	and.w	r3, r3, #7
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00b      	beq.n	800970e <prvInitialiseNewTask+0x5a>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	617b      	str	r3, [r7, #20]
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	e7fd      	b.n	800970a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d01f      	beq.n	8009754 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009714:	2300      	movs	r3, #0
 8009716:	61fb      	str	r3, [r7, #28]
 8009718:	e012      	b.n	8009740 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	4413      	add	r3, r2
 8009720:	7819      	ldrb	r1, [r3, #0]
 8009722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	4413      	add	r3, r2
 8009728:	3334      	adds	r3, #52	@ 0x34
 800972a:	460a      	mov	r2, r1
 800972c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	4413      	add	r3, r2
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d006      	beq.n	8009748 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	3301      	adds	r3, #1
 800973e:	61fb      	str	r3, [r7, #28]
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	2b0f      	cmp	r3, #15
 8009744:	d9e9      	bls.n	800971a <prvInitialiseNewTask+0x66>
 8009746:	e000      	b.n	800974a <prvInitialiseNewTask+0x96>
			{
				break;
 8009748:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800974a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009752:	e003      	b.n	800975c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800975c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800975e:	2b37      	cmp	r3, #55	@ 0x37
 8009760:	d901      	bls.n	8009766 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009762:	2337      	movs	r3, #55	@ 0x37
 8009764:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009768:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800976a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800976c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800976e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009770:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009774:	2200      	movs	r2, #0
 8009776:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800977a:	3304      	adds	r3, #4
 800977c:	4618      	mov	r0, r3
 800977e:	f7fe fd7b 	bl	8008278 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009784:	3318      	adds	r3, #24
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe fd76 	bl	8008278 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800978c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009790:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009794:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800979c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800979e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a4:	2200      	movs	r2, #0
 80097a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b4:	3354      	adds	r3, #84	@ 0x54
 80097b6:	224c      	movs	r2, #76	@ 0x4c
 80097b8:	2100      	movs	r1, #0
 80097ba:	4618      	mov	r0, r3
 80097bc:	f001 fe84 	bl	800b4c8 <memset>
 80097c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c2:	4a0d      	ldr	r2, [pc, #52]	@ (80097f8 <prvInitialiseNewTask+0x144>)
 80097c4:	659a      	str	r2, [r3, #88]	@ 0x58
 80097c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097c8:	4a0c      	ldr	r2, [pc, #48]	@ (80097fc <prvInitialiseNewTask+0x148>)
 80097ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80097cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ce:	4a0c      	ldr	r2, [pc, #48]	@ (8009800 <prvInitialiseNewTask+0x14c>)
 80097d0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	68f9      	ldr	r1, [r7, #12]
 80097d6:	69b8      	ldr	r0, [r7, #24]
 80097d8:	f001 fa34 	bl	800ac44 <pxPortInitialiseStack>
 80097dc:	4602      	mov	r2, r0
 80097de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80097e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80097e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80097ee:	bf00      	nop
 80097f0:	3720      	adds	r7, #32
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20042284 	.word	0x20042284
 80097fc:	200422ec 	.word	0x200422ec
 8009800:	20042354 	.word	0x20042354

08009804 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800980c:	f001 fb4c 	bl	800aea8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009810:	4b2d      	ldr	r3, [pc, #180]	@ (80098c8 <prvAddNewTaskToReadyList+0xc4>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	4a2c      	ldr	r2, [pc, #176]	@ (80098c8 <prvAddNewTaskToReadyList+0xc4>)
 8009818:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800981a:	4b2c      	ldr	r3, [pc, #176]	@ (80098cc <prvAddNewTaskToReadyList+0xc8>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d109      	bne.n	8009836 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009822:	4a2a      	ldr	r2, [pc, #168]	@ (80098cc <prvAddNewTaskToReadyList+0xc8>)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009828:	4b27      	ldr	r3, [pc, #156]	@ (80098c8 <prvAddNewTaskToReadyList+0xc4>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d110      	bne.n	8009852 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009830:	f000 fbf8 	bl	800a024 <prvInitialiseTaskLists>
 8009834:	e00d      	b.n	8009852 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009836:	4b26      	ldr	r3, [pc, #152]	@ (80098d0 <prvAddNewTaskToReadyList+0xcc>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d109      	bne.n	8009852 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800983e:	4b23      	ldr	r3, [pc, #140]	@ (80098cc <prvAddNewTaskToReadyList+0xc8>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009848:	429a      	cmp	r2, r3
 800984a:	d802      	bhi.n	8009852 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800984c:	4a1f      	ldr	r2, [pc, #124]	@ (80098cc <prvAddNewTaskToReadyList+0xc8>)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009852:	4b20      	ldr	r3, [pc, #128]	@ (80098d4 <prvAddNewTaskToReadyList+0xd0>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3301      	adds	r3, #1
 8009858:	4a1e      	ldr	r2, [pc, #120]	@ (80098d4 <prvAddNewTaskToReadyList+0xd0>)
 800985a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800985c:	4b1d      	ldr	r3, [pc, #116]	@ (80098d4 <prvAddNewTaskToReadyList+0xd0>)
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009868:	4b1b      	ldr	r3, [pc, #108]	@ (80098d8 <prvAddNewTaskToReadyList+0xd4>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	429a      	cmp	r2, r3
 800986e:	d903      	bls.n	8009878 <prvAddNewTaskToReadyList+0x74>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009874:	4a18      	ldr	r2, [pc, #96]	@ (80098d8 <prvAddNewTaskToReadyList+0xd4>)
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800987c:	4613      	mov	r3, r2
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4a15      	ldr	r2, [pc, #84]	@ (80098dc <prvAddNewTaskToReadyList+0xd8>)
 8009886:	441a      	add	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3304      	adds	r3, #4
 800988c:	4619      	mov	r1, r3
 800988e:	4610      	mov	r0, r2
 8009890:	f7fe fcff 	bl	8008292 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009894:	f001 fb3a 	bl	800af0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009898:	4b0d      	ldr	r3, [pc, #52]	@ (80098d0 <prvAddNewTaskToReadyList+0xcc>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00e      	beq.n	80098be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098a0:	4b0a      	ldr	r3, [pc, #40]	@ (80098cc <prvAddNewTaskToReadyList+0xc8>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d207      	bcs.n	80098be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098ae:	4b0c      	ldr	r3, [pc, #48]	@ (80098e0 <prvAddNewTaskToReadyList+0xdc>)
 80098b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098be:	bf00      	nop
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	2004154c 	.word	0x2004154c
 80098cc:	20041078 	.word	0x20041078
 80098d0:	20041558 	.word	0x20041558
 80098d4:	20041568 	.word	0x20041568
 80098d8:	20041554 	.word	0x20041554
 80098dc:	2004107c 	.word	0x2004107c
 80098e0:	e000ed04 	.word	0xe000ed04

080098e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b08a      	sub	sp, #40	@ 0x28
 80098e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098f2:	463a      	mov	r2, r7
 80098f4:	1d39      	adds	r1, r7, #4
 80098f6:	f107 0308 	add.w	r3, r7, #8
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fc68 	bl	80081d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009900:	6839      	ldr	r1, [r7, #0]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	9202      	str	r2, [sp, #8]
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	2300      	movs	r3, #0
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	2300      	movs	r3, #0
 8009910:	460a      	mov	r2, r1
 8009912:	4924      	ldr	r1, [pc, #144]	@ (80099a4 <vTaskStartScheduler+0xc0>)
 8009914:	4824      	ldr	r0, [pc, #144]	@ (80099a8 <vTaskStartScheduler+0xc4>)
 8009916:	f7ff fe27 	bl	8009568 <xTaskCreateStatic>
 800991a:	4603      	mov	r3, r0
 800991c:	4a23      	ldr	r2, [pc, #140]	@ (80099ac <vTaskStartScheduler+0xc8>)
 800991e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009920:	4b22      	ldr	r3, [pc, #136]	@ (80099ac <vTaskStartScheduler+0xc8>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d002      	beq.n	800992e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009928:	2301      	movs	r3, #1
 800992a:	617b      	str	r3, [r7, #20]
 800992c:	e001      	b.n	8009932 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d102      	bne.n	800993e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009938:	f000 fe2a 	bl	800a590 <xTimerCreateTimerTask>
 800993c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d11b      	bne.n	800997c <vTaskStartScheduler+0x98>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	613b      	str	r3, [r7, #16]
}
 8009956:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009958:	4b15      	ldr	r3, [pc, #84]	@ (80099b0 <vTaskStartScheduler+0xcc>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	3354      	adds	r3, #84	@ 0x54
 800995e:	4a15      	ldr	r2, [pc, #84]	@ (80099b4 <vTaskStartScheduler+0xd0>)
 8009960:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009962:	4b15      	ldr	r3, [pc, #84]	@ (80099b8 <vTaskStartScheduler+0xd4>)
 8009964:	f04f 32ff 	mov.w	r2, #4294967295
 8009968:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800996a:	4b14      	ldr	r3, [pc, #80]	@ (80099bc <vTaskStartScheduler+0xd8>)
 800996c:	2201      	movs	r2, #1
 800996e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009970:	4b13      	ldr	r3, [pc, #76]	@ (80099c0 <vTaskStartScheduler+0xdc>)
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009976:	f001 f9f3 	bl	800ad60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800997a:	e00f      	b.n	800999c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009982:	d10b      	bne.n	800999c <vTaskStartScheduler+0xb8>
	__asm volatile
 8009984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	60fb      	str	r3, [r7, #12]
}
 8009996:	bf00      	nop
 8009998:	bf00      	nop
 800999a:	e7fd      	b.n	8009998 <vTaskStartScheduler+0xb4>
}
 800999c:	bf00      	nop
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	0800b72c 	.word	0x0800b72c
 80099a8:	08009ff5 	.word	0x08009ff5
 80099ac:	20041570 	.word	0x20041570
 80099b0:	20041078 	.word	0x20041078
 80099b4:	20040010 	.word	0x20040010
 80099b8:	2004156c 	.word	0x2004156c
 80099bc:	20041558 	.word	0x20041558
 80099c0:	20041550 	.word	0x20041550

080099c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80099c4:	b480      	push	{r7}
 80099c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80099c8:	4b04      	ldr	r3, [pc, #16]	@ (80099dc <vTaskSuspendAll+0x18>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3301      	adds	r3, #1
 80099ce:	4a03      	ldr	r2, [pc, #12]	@ (80099dc <vTaskSuspendAll+0x18>)
 80099d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80099d2:	bf00      	nop
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr
 80099dc:	20041574 	.word	0x20041574

080099e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099ee:	4b42      	ldr	r3, [pc, #264]	@ (8009af8 <xTaskResumeAll+0x118>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10b      	bne.n	8009a0e <xTaskResumeAll+0x2e>
	__asm volatile
 80099f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099fa:	f383 8811 	msr	BASEPRI, r3
 80099fe:	f3bf 8f6f 	isb	sy
 8009a02:	f3bf 8f4f 	dsb	sy
 8009a06:	603b      	str	r3, [r7, #0]
}
 8009a08:	bf00      	nop
 8009a0a:	bf00      	nop
 8009a0c:	e7fd      	b.n	8009a0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009a0e:	f001 fa4b 	bl	800aea8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009a12:	4b39      	ldr	r3, [pc, #228]	@ (8009af8 <xTaskResumeAll+0x118>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	4a37      	ldr	r2, [pc, #220]	@ (8009af8 <xTaskResumeAll+0x118>)
 8009a1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a1c:	4b36      	ldr	r3, [pc, #216]	@ (8009af8 <xTaskResumeAll+0x118>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d162      	bne.n	8009aea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009a24:	4b35      	ldr	r3, [pc, #212]	@ (8009afc <xTaskResumeAll+0x11c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d05e      	beq.n	8009aea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a2c:	e02f      	b.n	8009a8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a2e:	4b34      	ldr	r3, [pc, #208]	@ (8009b00 <xTaskResumeAll+0x120>)
 8009a30:	68db      	ldr	r3, [r3, #12]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3318      	adds	r3, #24
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fe fc86 	bl	800834c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	3304      	adds	r3, #4
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7fe fc81 	bl	800834c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8009b04 <xTaskResumeAll+0x124>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d903      	bls.n	8009a5e <xTaskResumeAll+0x7e>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8009b04 <xTaskResumeAll+0x124>)
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4a27      	ldr	r2, [pc, #156]	@ (8009b08 <xTaskResumeAll+0x128>)
 8009a6c:	441a      	add	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	3304      	adds	r3, #4
 8009a72:	4619      	mov	r1, r3
 8009a74:	4610      	mov	r0, r2
 8009a76:	f7fe fc0c 	bl	8008292 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a7e:	4b23      	ldr	r3, [pc, #140]	@ (8009b0c <xTaskResumeAll+0x12c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d302      	bcc.n	8009a8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009a88:	4b21      	ldr	r3, [pc, #132]	@ (8009b10 <xTaskResumeAll+0x130>)
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a8e:	4b1c      	ldr	r3, [pc, #112]	@ (8009b00 <xTaskResumeAll+0x120>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1cb      	bne.n	8009a2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a9c:	f000 fb66 	bl	800a16c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b14 <xTaskResumeAll+0x134>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d010      	beq.n	8009ace <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009aac:	f000 f846 	bl	8009b3c <xTaskIncrementTick>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009ab6:	4b16      	ldr	r3, [pc, #88]	@ (8009b10 <xTaskResumeAll+0x130>)
 8009ab8:	2201      	movs	r2, #1
 8009aba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1f1      	bne.n	8009aac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009ac8:	4b12      	ldr	r3, [pc, #72]	@ (8009b14 <xTaskResumeAll+0x134>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ace:	4b10      	ldr	r3, [pc, #64]	@ (8009b10 <xTaskResumeAll+0x130>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d009      	beq.n	8009aea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009ada:	4b0f      	ldr	r3, [pc, #60]	@ (8009b18 <xTaskResumeAll+0x138>)
 8009adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009aea:	f001 fa0f 	bl	800af0c <vPortExitCritical>

	return xAlreadyYielded;
 8009aee:	68bb      	ldr	r3, [r7, #8]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	20041574 	.word	0x20041574
 8009afc:	2004154c 	.word	0x2004154c
 8009b00:	2004150c 	.word	0x2004150c
 8009b04:	20041554 	.word	0x20041554
 8009b08:	2004107c 	.word	0x2004107c
 8009b0c:	20041078 	.word	0x20041078
 8009b10:	20041560 	.word	0x20041560
 8009b14:	2004155c 	.word	0x2004155c
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009b22:	4b05      	ldr	r3, [pc, #20]	@ (8009b38 <xTaskGetTickCount+0x1c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009b28:	687b      	ldr	r3, [r7, #4]
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20041550 	.word	0x20041550

08009b3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b46:	4b4f      	ldr	r3, [pc, #316]	@ (8009c84 <xTaskIncrementTick+0x148>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f040 8090 	bne.w	8009c70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b50:	4b4d      	ldr	r3, [pc, #308]	@ (8009c88 <xTaskIncrementTick+0x14c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b58:	4a4b      	ldr	r2, [pc, #300]	@ (8009c88 <xTaskIncrementTick+0x14c>)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d121      	bne.n	8009ba8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b64:	4b49      	ldr	r3, [pc, #292]	@ (8009c8c <xTaskIncrementTick+0x150>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00b      	beq.n	8009b86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	603b      	str	r3, [r7, #0]
}
 8009b80:	bf00      	nop
 8009b82:	bf00      	nop
 8009b84:	e7fd      	b.n	8009b82 <xTaskIncrementTick+0x46>
 8009b86:	4b41      	ldr	r3, [pc, #260]	@ (8009c8c <xTaskIncrementTick+0x150>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	4b40      	ldr	r3, [pc, #256]	@ (8009c90 <xTaskIncrementTick+0x154>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a3e      	ldr	r2, [pc, #248]	@ (8009c8c <xTaskIncrementTick+0x150>)
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	4a3e      	ldr	r2, [pc, #248]	@ (8009c90 <xTaskIncrementTick+0x154>)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6013      	str	r3, [r2, #0]
 8009b9a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c94 <xTaskIncrementTick+0x158>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	4a3c      	ldr	r2, [pc, #240]	@ (8009c94 <xTaskIncrementTick+0x158>)
 8009ba2:	6013      	str	r3, [r2, #0]
 8009ba4:	f000 fae2 	bl	800a16c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8009c98 <xTaskIncrementTick+0x15c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d349      	bcc.n	8009c46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009bb2:	4b36      	ldr	r3, [pc, #216]	@ (8009c8c <xTaskIncrementTick+0x150>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d104      	bne.n	8009bc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bbc:	4b36      	ldr	r3, [pc, #216]	@ (8009c98 <xTaskIncrementTick+0x15c>)
 8009bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc2:	601a      	str	r2, [r3, #0]
					break;
 8009bc4:	e03f      	b.n	8009c46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bc6:	4b31      	ldr	r3, [pc, #196]	@ (8009c8c <xTaskIncrementTick+0x150>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	429a      	cmp	r2, r3
 8009bdc:	d203      	bcs.n	8009be6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bde:	4a2e      	ldr	r2, [pc, #184]	@ (8009c98 <xTaskIncrementTick+0x15c>)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009be4:	e02f      	b.n	8009c46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	3304      	adds	r3, #4
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe fbae 	bl	800834c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d004      	beq.n	8009c02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	3318      	adds	r3, #24
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe fba5 	bl	800834c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c06:	4b25      	ldr	r3, [pc, #148]	@ (8009c9c <xTaskIncrementTick+0x160>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d903      	bls.n	8009c16 <xTaskIncrementTick+0xda>
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c12:	4a22      	ldr	r2, [pc, #136]	@ (8009c9c <xTaskIncrementTick+0x160>)
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4413      	add	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4a1f      	ldr	r2, [pc, #124]	@ (8009ca0 <xTaskIncrementTick+0x164>)
 8009c24:	441a      	add	r2, r3
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	4610      	mov	r0, r2
 8009c2e:	f7fe fb30 	bl	8008292 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c36:	4b1b      	ldr	r3, [pc, #108]	@ (8009ca4 <xTaskIncrementTick+0x168>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d3b8      	bcc.n	8009bb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009c40:	2301      	movs	r3, #1
 8009c42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c44:	e7b5      	b.n	8009bb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c46:	4b17      	ldr	r3, [pc, #92]	@ (8009ca4 <xTaskIncrementTick+0x168>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c4c:	4914      	ldr	r1, [pc, #80]	@ (8009ca0 <xTaskIncrementTick+0x164>)
 8009c4e:	4613      	mov	r3, r2
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	440b      	add	r3, r1
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d901      	bls.n	8009c62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009c62:	4b11      	ldr	r3, [pc, #68]	@ (8009ca8 <xTaskIncrementTick+0x16c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d007      	beq.n	8009c7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	617b      	str	r3, [r7, #20]
 8009c6e:	e004      	b.n	8009c7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c70:	4b0e      	ldr	r3, [pc, #56]	@ (8009cac <xTaskIncrementTick+0x170>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3301      	adds	r3, #1
 8009c76:	4a0d      	ldr	r2, [pc, #52]	@ (8009cac <xTaskIncrementTick+0x170>)
 8009c78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c7a:	697b      	ldr	r3, [r7, #20]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3718      	adds	r7, #24
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	20041574 	.word	0x20041574
 8009c88:	20041550 	.word	0x20041550
 8009c8c:	20041504 	.word	0x20041504
 8009c90:	20041508 	.word	0x20041508
 8009c94:	20041564 	.word	0x20041564
 8009c98:	2004156c 	.word	0x2004156c
 8009c9c:	20041554 	.word	0x20041554
 8009ca0:	2004107c 	.word	0x2004107c
 8009ca4:	20041078 	.word	0x20041078
 8009ca8:	20041560 	.word	0x20041560
 8009cac:	2004155c 	.word	0x2004155c

08009cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8009d64 <vTaskSwitchContext+0xb4>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8009d68 <vTaskSwitchContext+0xb8>)
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009cc4:	e047      	b.n	8009d56 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8009cc6:	4b28      	ldr	r3, [pc, #160]	@ (8009d68 <vTaskSwitchContext+0xb8>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ccc:	4b27      	ldr	r3, [pc, #156]	@ (8009d6c <vTaskSwitchContext+0xbc>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60fb      	str	r3, [r7, #12]
 8009cd2:	e011      	b.n	8009cf8 <vTaskSwitchContext+0x48>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10b      	bne.n	8009cf2 <vTaskSwitchContext+0x42>
	__asm volatile
 8009cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cde:	f383 8811 	msr	BASEPRI, r3
 8009ce2:	f3bf 8f6f 	isb	sy
 8009ce6:	f3bf 8f4f 	dsb	sy
 8009cea:	607b      	str	r3, [r7, #4]
}
 8009cec:	bf00      	nop
 8009cee:	bf00      	nop
 8009cf0:	e7fd      	b.n	8009cee <vTaskSwitchContext+0x3e>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	60fb      	str	r3, [r7, #12]
 8009cf8:	491d      	ldr	r1, [pc, #116]	@ (8009d70 <vTaskSwitchContext+0xc0>)
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4613      	mov	r3, r2
 8009cfe:	009b      	lsls	r3, r3, #2
 8009d00:	4413      	add	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	440b      	add	r3, r1
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d0e3      	beq.n	8009cd4 <vTaskSwitchContext+0x24>
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4a16      	ldr	r2, [pc, #88]	@ (8009d70 <vTaskSwitchContext+0xc0>)
 8009d18:	4413      	add	r3, r2
 8009d1a:	60bb      	str	r3, [r7, #8]
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	605a      	str	r2, [r3, #4]
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	685a      	ldr	r2, [r3, #4]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d104      	bne.n	8009d3c <vTaskSwitchContext+0x8c>
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	605a      	str	r2, [r3, #4]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	4a0c      	ldr	r2, [pc, #48]	@ (8009d74 <vTaskSwitchContext+0xc4>)
 8009d44:	6013      	str	r3, [r2, #0]
 8009d46:	4a09      	ldr	r2, [pc, #36]	@ (8009d6c <vTaskSwitchContext+0xbc>)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d4c:	4b09      	ldr	r3, [pc, #36]	@ (8009d74 <vTaskSwitchContext+0xc4>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	3354      	adds	r3, #84	@ 0x54
 8009d52:	4a09      	ldr	r2, [pc, #36]	@ (8009d78 <vTaskSwitchContext+0xc8>)
 8009d54:	6013      	str	r3, [r2, #0]
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	20041574 	.word	0x20041574
 8009d68:	20041560 	.word	0x20041560
 8009d6c:	20041554 	.word	0x20041554
 8009d70:	2004107c 	.word	0x2004107c
 8009d74:	20041078 	.word	0x20041078
 8009d78:	20040010 	.word	0x20040010

08009d7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10b      	bne.n	8009da4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	60fb      	str	r3, [r7, #12]
}
 8009d9e:	bf00      	nop
 8009da0:	bf00      	nop
 8009da2:	e7fd      	b.n	8009da0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009da4:	4b07      	ldr	r3, [pc, #28]	@ (8009dc4 <vTaskPlaceOnEventList+0x48>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	3318      	adds	r3, #24
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7fe fa94 	bl	80082da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009db2:	2101      	movs	r1, #1
 8009db4:	6838      	ldr	r0, [r7, #0]
 8009db6:	f000 fb97 	bl	800a4e8 <prvAddCurrentTaskToDelayedList>
}
 8009dba:	bf00      	nop
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20041078 	.word	0x20041078

08009dc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10b      	bne.n	8009df2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	617b      	str	r3, [r7, #20]
}
 8009dec:	bf00      	nop
 8009dee:	bf00      	nop
 8009df0:	e7fd      	b.n	8009dee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009df2:	4b0a      	ldr	r3, [pc, #40]	@ (8009e1c <vTaskPlaceOnEventListRestricted+0x54>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	3318      	adds	r3, #24
 8009df8:	4619      	mov	r1, r3
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f7fe fa49 	bl	8008292 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d002      	beq.n	8009e0c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009e06:	f04f 33ff 	mov.w	r3, #4294967295
 8009e0a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009e0c:	6879      	ldr	r1, [r7, #4]
 8009e0e:	68b8      	ldr	r0, [r7, #8]
 8009e10:	f000 fb6a 	bl	800a4e8 <prvAddCurrentTaskToDelayedList>
	}
 8009e14:	bf00      	nop
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	20041078 	.word	0x20041078

08009e20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10b      	bne.n	8009e4e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	60fb      	str	r3, [r7, #12]
}
 8009e48:	bf00      	nop
 8009e4a:	bf00      	nop
 8009e4c:	e7fd      	b.n	8009e4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	3318      	adds	r3, #24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe fa7a 	bl	800834c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e58:	4b1d      	ldr	r3, [pc, #116]	@ (8009ed0 <xTaskRemoveFromEventList+0xb0>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d11d      	bne.n	8009e9c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	3304      	adds	r3, #4
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fe fa71 	bl	800834c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e6e:	4b19      	ldr	r3, [pc, #100]	@ (8009ed4 <xTaskRemoveFromEventList+0xb4>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d903      	bls.n	8009e7e <xTaskRemoveFromEventList+0x5e>
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7a:	4a16      	ldr	r2, [pc, #88]	@ (8009ed4 <xTaskRemoveFromEventList+0xb4>)
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4a13      	ldr	r2, [pc, #76]	@ (8009ed8 <xTaskRemoveFromEventList+0xb8>)
 8009e8c:	441a      	add	r2, r3
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	3304      	adds	r3, #4
 8009e92:	4619      	mov	r1, r3
 8009e94:	4610      	mov	r0, r2
 8009e96:	f7fe f9fc 	bl	8008292 <vListInsertEnd>
 8009e9a:	e005      	b.n	8009ea8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	3318      	adds	r3, #24
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	480e      	ldr	r0, [pc, #56]	@ (8009edc <xTaskRemoveFromEventList+0xbc>)
 8009ea4:	f7fe f9f5 	bl	8008292 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eac:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee0 <xTaskRemoveFromEventList+0xc0>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d905      	bls.n	8009ec2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009eba:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee4 <xTaskRemoveFromEventList+0xc4>)
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	e001      	b.n	8009ec6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009ec6:	697b      	ldr	r3, [r7, #20]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3718      	adds	r7, #24
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	20041574 	.word	0x20041574
 8009ed4:	20041554 	.word	0x20041554
 8009ed8:	2004107c 	.word	0x2004107c
 8009edc:	2004150c 	.word	0x2004150c
 8009ee0:	20041078 	.word	0x20041078
 8009ee4:	20041560 	.word	0x20041560

08009ee8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ef0:	4b06      	ldr	r3, [pc, #24]	@ (8009f0c <vTaskInternalSetTimeOutState+0x24>)
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ef8:	4b05      	ldr	r3, [pc, #20]	@ (8009f10 <vTaskInternalSetTimeOutState+0x28>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	605a      	str	r2, [r3, #4]
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	20041564 	.word	0x20041564
 8009f10:	20041550 	.word	0x20041550

08009f14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10b      	bne.n	8009f3c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	613b      	str	r3, [r7, #16]
}
 8009f36:	bf00      	nop
 8009f38:	bf00      	nop
 8009f3a:	e7fd      	b.n	8009f38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10b      	bne.n	8009f5a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	60fb      	str	r3, [r7, #12]
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	e7fd      	b.n	8009f56 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009f5a:	f000 ffa5 	bl	800aea8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8009fd4 <xTaskCheckForTimeOut+0xc0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f76:	d102      	bne.n	8009f7e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	61fb      	str	r3, [r7, #28]
 8009f7c:	e023      	b.n	8009fc6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	4b15      	ldr	r3, [pc, #84]	@ (8009fd8 <xTaskCheckForTimeOut+0xc4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d007      	beq.n	8009f9a <xTaskCheckForTimeOut+0x86>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	69ba      	ldr	r2, [r7, #24]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d302      	bcc.n	8009f9a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f94:	2301      	movs	r3, #1
 8009f96:	61fb      	str	r3, [r7, #28]
 8009f98:	e015      	b.n	8009fc6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d20b      	bcs.n	8009fbc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	1ad2      	subs	r2, r2, r3
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff ff99 	bl	8009ee8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61fb      	str	r3, [r7, #28]
 8009fba:	e004      	b.n	8009fc6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009fc6:	f000 ffa1 	bl	800af0c <vPortExitCritical>

	return xReturn;
 8009fca:	69fb      	ldr	r3, [r7, #28]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3720      	adds	r7, #32
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20041550 	.word	0x20041550
 8009fd8:	20041564 	.word	0x20041564

08009fdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009fe0:	4b03      	ldr	r3, [pc, #12]	@ (8009ff0 <vTaskMissedYield+0x14>)
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	601a      	str	r2, [r3, #0]
}
 8009fe6:	bf00      	nop
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr
 8009ff0:	20041560 	.word	0x20041560

08009ff4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ffc:	f000 f852 	bl	800a0a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a000:	4b06      	ldr	r3, [pc, #24]	@ (800a01c <prvIdleTask+0x28>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d9f9      	bls.n	8009ffc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a008:	4b05      	ldr	r3, [pc, #20]	@ (800a020 <prvIdleTask+0x2c>)
 800a00a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a00e:	601a      	str	r2, [r3, #0]
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a018:	e7f0      	b.n	8009ffc <prvIdleTask+0x8>
 800a01a:	bf00      	nop
 800a01c:	2004107c 	.word	0x2004107c
 800a020:	e000ed04 	.word	0xe000ed04

0800a024 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a02a:	2300      	movs	r3, #0
 800a02c:	607b      	str	r3, [r7, #4]
 800a02e:	e00c      	b.n	800a04a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	4613      	mov	r3, r2
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	009b      	lsls	r3, r3, #2
 800a03a:	4a12      	ldr	r2, [pc, #72]	@ (800a084 <prvInitialiseTaskLists+0x60>)
 800a03c:	4413      	add	r3, r2
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe f8fa 	bl	8008238 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3301      	adds	r3, #1
 800a048:	607b      	str	r3, [r7, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b37      	cmp	r3, #55	@ 0x37
 800a04e:	d9ef      	bls.n	800a030 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a050:	480d      	ldr	r0, [pc, #52]	@ (800a088 <prvInitialiseTaskLists+0x64>)
 800a052:	f7fe f8f1 	bl	8008238 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a056:	480d      	ldr	r0, [pc, #52]	@ (800a08c <prvInitialiseTaskLists+0x68>)
 800a058:	f7fe f8ee 	bl	8008238 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a05c:	480c      	ldr	r0, [pc, #48]	@ (800a090 <prvInitialiseTaskLists+0x6c>)
 800a05e:	f7fe f8eb 	bl	8008238 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a062:	480c      	ldr	r0, [pc, #48]	@ (800a094 <prvInitialiseTaskLists+0x70>)
 800a064:	f7fe f8e8 	bl	8008238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a068:	480b      	ldr	r0, [pc, #44]	@ (800a098 <prvInitialiseTaskLists+0x74>)
 800a06a:	f7fe f8e5 	bl	8008238 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a06e:	4b0b      	ldr	r3, [pc, #44]	@ (800a09c <prvInitialiseTaskLists+0x78>)
 800a070:	4a05      	ldr	r2, [pc, #20]	@ (800a088 <prvInitialiseTaskLists+0x64>)
 800a072:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a074:	4b0a      	ldr	r3, [pc, #40]	@ (800a0a0 <prvInitialiseTaskLists+0x7c>)
 800a076:	4a05      	ldr	r2, [pc, #20]	@ (800a08c <prvInitialiseTaskLists+0x68>)
 800a078:	601a      	str	r2, [r3, #0]
}
 800a07a:	bf00      	nop
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	2004107c 	.word	0x2004107c
 800a088:	200414dc 	.word	0x200414dc
 800a08c:	200414f0 	.word	0x200414f0
 800a090:	2004150c 	.word	0x2004150c
 800a094:	20041520 	.word	0x20041520
 800a098:	20041538 	.word	0x20041538
 800a09c:	20041504 	.word	0x20041504
 800a0a0:	20041508 	.word	0x20041508

0800a0a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0aa:	e019      	b.n	800a0e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a0ac:	f000 fefc 	bl	800aea8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0b0:	4b10      	ldr	r3, [pc, #64]	@ (800a0f4 <prvCheckTasksWaitingTermination+0x50>)
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fe f945 	bl	800834c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a0c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0f8 <prvCheckTasksWaitingTermination+0x54>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	4a0b      	ldr	r2, [pc, #44]	@ (800a0f8 <prvCheckTasksWaitingTermination+0x54>)
 800a0ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a0cc:	4b0b      	ldr	r3, [pc, #44]	@ (800a0fc <prvCheckTasksWaitingTermination+0x58>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	4a0a      	ldr	r2, [pc, #40]	@ (800a0fc <prvCheckTasksWaitingTermination+0x58>)
 800a0d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a0d6:	f000 ff19 	bl	800af0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f000 f810 	bl	800a100 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a0e0:	4b06      	ldr	r3, [pc, #24]	@ (800a0fc <prvCheckTasksWaitingTermination+0x58>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e1      	bne.n	800a0ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a0e8:	bf00      	nop
 800a0ea:	bf00      	nop
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20041520 	.word	0x20041520
 800a0f8:	2004154c 	.word	0x2004154c
 800a0fc:	20041534 	.word	0x20041534

0800a100 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3354      	adds	r3, #84	@ 0x54
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 f9e3 	bl	800b4d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d108      	bne.n	800a12e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a120:	4618      	mov	r0, r3
 800a122:	f001 f8b1 	bl	800b288 <vPortFree>
				vPortFree( pxTCB );
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f001 f8ae 	bl	800b288 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a12c:	e019      	b.n	800a162 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a134:	2b01      	cmp	r3, #1
 800a136:	d103      	bne.n	800a140 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f001 f8a5 	bl	800b288 <vPortFree>
	}
 800a13e:	e010      	b.n	800a162 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a146:	2b02      	cmp	r3, #2
 800a148:	d00b      	beq.n	800a162 <prvDeleteTCB+0x62>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14e:	f383 8811 	msr	BASEPRI, r3
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	60fb      	str	r3, [r7, #12]
}
 800a15c:	bf00      	nop
 800a15e:	bf00      	nop
 800a160:	e7fd      	b.n	800a15e <prvDeleteTCB+0x5e>
	}
 800a162:	bf00      	nop
 800a164:	3710      	adds	r7, #16
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
	...

0800a16c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b083      	sub	sp, #12
 800a170:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a172:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a4 <prvResetNextTaskUnblockTime+0x38>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d104      	bne.n	800a186 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a17c:	4b0a      	ldr	r3, [pc, #40]	@ (800a1a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a17e:	f04f 32ff 	mov.w	r2, #4294967295
 800a182:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a184:	e008      	b.n	800a198 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a186:	4b07      	ldr	r3, [pc, #28]	@ (800a1a4 <prvResetNextTaskUnblockTime+0x38>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	68db      	ldr	r3, [r3, #12]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	4a04      	ldr	r2, [pc, #16]	@ (800a1a8 <prvResetNextTaskUnblockTime+0x3c>)
 800a196:	6013      	str	r3, [r2, #0]
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	20041504 	.word	0x20041504
 800a1a8:	2004156c 	.word	0x2004156c

0800a1ac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a1b2:	4b05      	ldr	r3, [pc, #20]	@ (800a1c8 <xTaskGetCurrentTaskHandle+0x1c>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a1b8:	687b      	ldr	r3, [r7, #4]
	}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	20041078 	.word	0x20041078

0800a1cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a1d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a200 <xTaskGetSchedulerState+0x34>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d102      	bne.n	800a1e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	607b      	str	r3, [r7, #4]
 800a1de:	e008      	b.n	800a1f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1e0:	4b08      	ldr	r3, [pc, #32]	@ (800a204 <xTaskGetSchedulerState+0x38>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	607b      	str	r3, [r7, #4]
 800a1ec:	e001      	b.n	800a1f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a1f2:	687b      	ldr	r3, [r7, #4]
	}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	20041558 	.word	0x20041558
 800a204:	20041574 	.word	0x20041574

0800a208 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a214:	2300      	movs	r3, #0
 800a216:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d051      	beq.n	800a2c2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a222:	4b2a      	ldr	r3, [pc, #168]	@ (800a2cc <xTaskPriorityInherit+0xc4>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a228:	429a      	cmp	r2, r3
 800a22a:	d241      	bcs.n	800a2b0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	2b00      	cmp	r3, #0
 800a232:	db06      	blt.n	800a242 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a234:	4b25      	ldr	r3, [pc, #148]	@ (800a2cc <xTaskPriorityInherit+0xc4>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a23a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	6959      	ldr	r1, [r3, #20]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a24a:	4613      	mov	r3, r2
 800a24c:	009b      	lsls	r3, r3, #2
 800a24e:	4413      	add	r3, r2
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4a1f      	ldr	r2, [pc, #124]	@ (800a2d0 <xTaskPriorityInherit+0xc8>)
 800a254:	4413      	add	r3, r2
 800a256:	4299      	cmp	r1, r3
 800a258:	d122      	bne.n	800a2a0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	3304      	adds	r3, #4
 800a25e:	4618      	mov	r0, r3
 800a260:	f7fe f874 	bl	800834c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a264:	4b19      	ldr	r3, [pc, #100]	@ (800a2cc <xTaskPriorityInherit+0xc4>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a272:	4b18      	ldr	r3, [pc, #96]	@ (800a2d4 <xTaskPriorityInherit+0xcc>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d903      	bls.n	800a282 <xTaskPriorityInherit+0x7a>
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27e:	4a15      	ldr	r2, [pc, #84]	@ (800a2d4 <xTaskPriorityInherit+0xcc>)
 800a280:	6013      	str	r3, [r2, #0]
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a286:	4613      	mov	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4a10      	ldr	r2, [pc, #64]	@ (800a2d0 <xTaskPriorityInherit+0xc8>)
 800a290:	441a      	add	r2, r3
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	3304      	adds	r3, #4
 800a296:	4619      	mov	r1, r3
 800a298:	4610      	mov	r0, r2
 800a29a:	f7fd fffa 	bl	8008292 <vListInsertEnd>
 800a29e:	e004      	b.n	800a2aa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a2cc <xTaskPriorityInherit+0xc4>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	e008      	b.n	800a2c2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2b4:	4b05      	ldr	r3, [pc, #20]	@ (800a2cc <xTaskPriorityInherit+0xc4>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d201      	bcs.n	800a2c2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
	}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	20041078 	.word	0x20041078
 800a2d0:	2004107c 	.word	0x2004107c
 800a2d4:	20041554 	.word	0x20041554

0800a2d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d058      	beq.n	800a3a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a2ee:	4b2f      	ldr	r3, [pc, #188]	@ (800a3ac <xTaskPriorityDisinherit+0xd4>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d00b      	beq.n	800a310 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	60fb      	str	r3, [r7, #12]
}
 800a30a:	bf00      	nop
 800a30c:	bf00      	nop
 800a30e:	e7fd      	b.n	800a30c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10b      	bne.n	800a330 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	60bb      	str	r3, [r7, #8]
}
 800a32a:	bf00      	nop
 800a32c:	bf00      	nop
 800a32e:	e7fd      	b.n	800a32c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a334:	1e5a      	subs	r2, r3, #1
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a342:	429a      	cmp	r2, r3
 800a344:	d02c      	beq.n	800a3a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d128      	bne.n	800a3a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	3304      	adds	r3, #4
 800a352:	4618      	mov	r0, r3
 800a354:	f7fd fffa 	bl	800834c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a364:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a370:	4b0f      	ldr	r3, [pc, #60]	@ (800a3b0 <xTaskPriorityDisinherit+0xd8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	429a      	cmp	r2, r3
 800a376:	d903      	bls.n	800a380 <xTaskPriorityDisinherit+0xa8>
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a37c:	4a0c      	ldr	r2, [pc, #48]	@ (800a3b0 <xTaskPriorityDisinherit+0xd8>)
 800a37e:	6013      	str	r3, [r2, #0]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a384:	4613      	mov	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4a09      	ldr	r2, [pc, #36]	@ (800a3b4 <xTaskPriorityDisinherit+0xdc>)
 800a38e:	441a      	add	r2, r3
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	3304      	adds	r3, #4
 800a394:	4619      	mov	r1, r3
 800a396:	4610      	mov	r0, r2
 800a398:	f7fd ff7b 	bl	8008292 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a39c:	2301      	movs	r3, #1
 800a39e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3a0:	697b      	ldr	r3, [r7, #20]
	}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3718      	adds	r7, #24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	20041078 	.word	0x20041078
 800a3b0:	20041554 	.word	0x20041554
 800a3b4:	2004107c 	.word	0x2004107c

0800a3b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d06c      	beq.n	800a4aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d10b      	bne.n	800a3f0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	60fb      	str	r3, [r7, #12]
}
 800a3ea:	bf00      	nop
 800a3ec:	bf00      	nop
 800a3ee:	e7fd      	b.n	800a3ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d902      	bls.n	800a400 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	61fb      	str	r3, [r7, #28]
 800a3fe:	e002      	b.n	800a406 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a404:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a40a:	69fa      	ldr	r2, [r7, #28]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d04c      	beq.n	800a4aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	429a      	cmp	r2, r3
 800a418:	d147      	bne.n	800a4aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a41a:	4b26      	ldr	r3, [pc, #152]	@ (800a4b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	429a      	cmp	r2, r3
 800a422:	d10b      	bne.n	800a43c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	60bb      	str	r3, [r7, #8]
}
 800a436:	bf00      	nop
 800a438:	bf00      	nop
 800a43a:	e7fd      	b.n	800a438 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a440:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	69fa      	ldr	r2, [r7, #28]
 800a446:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a448:	69bb      	ldr	r3, [r7, #24]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	db04      	blt.n	800a45a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a456:	69bb      	ldr	r3, [r7, #24]
 800a458:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	6959      	ldr	r1, [r3, #20]
 800a45e:	693a      	ldr	r2, [r7, #16]
 800a460:	4613      	mov	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	4a13      	ldr	r2, [pc, #76]	@ (800a4b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a46a:	4413      	add	r3, r2
 800a46c:	4299      	cmp	r1, r3
 800a46e:	d11c      	bne.n	800a4aa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	3304      	adds	r3, #4
 800a474:	4618      	mov	r0, r3
 800a476:	f7fd ff69 	bl	800834c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a47e:	4b0f      	ldr	r3, [pc, #60]	@ (800a4bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	429a      	cmp	r2, r3
 800a484:	d903      	bls.n	800a48e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a48a:	4a0c      	ldr	r2, [pc, #48]	@ (800a4bc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a48c:	6013      	str	r3, [r2, #0]
 800a48e:	69bb      	ldr	r3, [r7, #24]
 800a490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a492:	4613      	mov	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4413      	add	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4a07      	ldr	r2, [pc, #28]	@ (800a4b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a49c:	441a      	add	r2, r3
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	f7fd fef4 	bl	8008292 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4aa:	bf00      	nop
 800a4ac:	3720      	adds	r7, #32
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20041078 	.word	0x20041078
 800a4b8:	2004107c 	.word	0x2004107c
 800a4bc:	20041554 	.word	0x20041554

0800a4c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a4c0:	b480      	push	{r7}
 800a4c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a4c4:	4b07      	ldr	r3, [pc, #28]	@ (800a4e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d004      	beq.n	800a4d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4cc:	4b05      	ldr	r3, [pc, #20]	@ (800a4e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4d2:	3201      	adds	r2, #1
 800a4d4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a4d6:	4b03      	ldr	r3, [pc, #12]	@ (800a4e4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
	}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	20041078 	.word	0x20041078

0800a4e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4f2:	4b21      	ldr	r3, [pc, #132]	@ (800a578 <prvAddCurrentTaskToDelayedList+0x90>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4f8:	4b20      	ldr	r3, [pc, #128]	@ (800a57c <prvAddCurrentTaskToDelayedList+0x94>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	3304      	adds	r3, #4
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fd ff24 	bl	800834c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a50a:	d10a      	bne.n	800a522 <prvAddCurrentTaskToDelayedList+0x3a>
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d007      	beq.n	800a522 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a512:	4b1a      	ldr	r3, [pc, #104]	@ (800a57c <prvAddCurrentTaskToDelayedList+0x94>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3304      	adds	r3, #4
 800a518:	4619      	mov	r1, r3
 800a51a:	4819      	ldr	r0, [pc, #100]	@ (800a580 <prvAddCurrentTaskToDelayedList+0x98>)
 800a51c:	f7fd feb9 	bl	8008292 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a520:	e026      	b.n	800a570 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a522:	68fa      	ldr	r2, [r7, #12]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4413      	add	r3, r2
 800a528:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a52a:	4b14      	ldr	r3, [pc, #80]	@ (800a57c <prvAddCurrentTaskToDelayedList+0x94>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	429a      	cmp	r2, r3
 800a538:	d209      	bcs.n	800a54e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a53a:	4b12      	ldr	r3, [pc, #72]	@ (800a584 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	4b0f      	ldr	r3, [pc, #60]	@ (800a57c <prvAddCurrentTaskToDelayedList+0x94>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3304      	adds	r3, #4
 800a544:	4619      	mov	r1, r3
 800a546:	4610      	mov	r0, r2
 800a548:	f7fd fec7 	bl	80082da <vListInsert>
}
 800a54c:	e010      	b.n	800a570 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a54e:	4b0e      	ldr	r3, [pc, #56]	@ (800a588 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	4b0a      	ldr	r3, [pc, #40]	@ (800a57c <prvAddCurrentTaskToDelayedList+0x94>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3304      	adds	r3, #4
 800a558:	4619      	mov	r1, r3
 800a55a:	4610      	mov	r0, r2
 800a55c:	f7fd febd 	bl	80082da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a560:	4b0a      	ldr	r3, [pc, #40]	@ (800a58c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	429a      	cmp	r2, r3
 800a568:	d202      	bcs.n	800a570 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a56a:	4a08      	ldr	r2, [pc, #32]	@ (800a58c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	6013      	str	r3, [r2, #0]
}
 800a570:	bf00      	nop
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}
 800a578:	20041550 	.word	0x20041550
 800a57c:	20041078 	.word	0x20041078
 800a580:	20041538 	.word	0x20041538
 800a584:	20041508 	.word	0x20041508
 800a588:	20041504 	.word	0x20041504
 800a58c:	2004156c 	.word	0x2004156c

0800a590 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08a      	sub	sp, #40	@ 0x28
 800a594:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a596:	2300      	movs	r3, #0
 800a598:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a59a:	f000 fb13 	bl	800abc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a59e:	4b1d      	ldr	r3, [pc, #116]	@ (800a614 <xTimerCreateTimerTask+0x84>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d021      	beq.n	800a5ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5ae:	1d3a      	adds	r2, r7, #4
 800a5b0:	f107 0108 	add.w	r1, r7, #8
 800a5b4:	f107 030c 	add.w	r3, r7, #12
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fd fe23 	bl	8008204 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	9202      	str	r2, [sp, #8]
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	460a      	mov	r2, r1
 800a5d0:	4911      	ldr	r1, [pc, #68]	@ (800a618 <xTimerCreateTimerTask+0x88>)
 800a5d2:	4812      	ldr	r0, [pc, #72]	@ (800a61c <xTimerCreateTimerTask+0x8c>)
 800a5d4:	f7fe ffc8 	bl	8009568 <xTaskCreateStatic>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	4a11      	ldr	r2, [pc, #68]	@ (800a620 <xTimerCreateTimerTask+0x90>)
 800a5dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5de:	4b10      	ldr	r3, [pc, #64]	@ (800a620 <xTimerCreateTimerTask+0x90>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10b      	bne.n	800a608 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	613b      	str	r3, [r7, #16]
}
 800a602:	bf00      	nop
 800a604:	bf00      	nop
 800a606:	e7fd      	b.n	800a604 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a608:	697b      	ldr	r3, [r7, #20]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	200415a8 	.word	0x200415a8
 800a618:	0800b734 	.word	0x0800b734
 800a61c:	0800a75d 	.word	0x0800a75d
 800a620:	200415ac 	.word	0x200415ac

0800a624 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b08a      	sub	sp, #40	@ 0x28
 800a628:	af00      	add	r7, sp, #0
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	607a      	str	r2, [r7, #4]
 800a630:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a632:	2300      	movs	r3, #0
 800a634:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10b      	bne.n	800a654 <xTimerGenericCommand+0x30>
	__asm volatile
 800a63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a640:	f383 8811 	msr	BASEPRI, r3
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	623b      	str	r3, [r7, #32]
}
 800a64e:	bf00      	nop
 800a650:	bf00      	nop
 800a652:	e7fd      	b.n	800a650 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a654:	4b19      	ldr	r3, [pc, #100]	@ (800a6bc <xTimerGenericCommand+0x98>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d02a      	beq.n	800a6b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2b05      	cmp	r3, #5
 800a66c:	dc18      	bgt.n	800a6a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a66e:	f7ff fdad 	bl	800a1cc <xTaskGetSchedulerState>
 800a672:	4603      	mov	r3, r0
 800a674:	2b02      	cmp	r3, #2
 800a676:	d109      	bne.n	800a68c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a678:	4b10      	ldr	r3, [pc, #64]	@ (800a6bc <xTimerGenericCommand+0x98>)
 800a67a:	6818      	ldr	r0, [r3, #0]
 800a67c:	f107 0110 	add.w	r1, r7, #16
 800a680:	2300      	movs	r3, #0
 800a682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a684:	f7fe f8f8 	bl	8008878 <xQueueGenericSend>
 800a688:	6278      	str	r0, [r7, #36]	@ 0x24
 800a68a:	e012      	b.n	800a6b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a68c:	4b0b      	ldr	r3, [pc, #44]	@ (800a6bc <xTimerGenericCommand+0x98>)
 800a68e:	6818      	ldr	r0, [r3, #0]
 800a690:	f107 0110 	add.w	r1, r7, #16
 800a694:	2300      	movs	r3, #0
 800a696:	2200      	movs	r2, #0
 800a698:	f7fe f8ee 	bl	8008878 <xQueueGenericSend>
 800a69c:	6278      	str	r0, [r7, #36]	@ 0x24
 800a69e:	e008      	b.n	800a6b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6a0:	4b06      	ldr	r3, [pc, #24]	@ (800a6bc <xTimerGenericCommand+0x98>)
 800a6a2:	6818      	ldr	r0, [r3, #0]
 800a6a4:	f107 0110 	add.w	r1, r7, #16
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	f7fe f9e6 	bl	8008a7c <xQueueGenericSendFromISR>
 800a6b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3728      	adds	r7, #40	@ 0x28
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	200415a8 	.word	0x200415a8

0800a6c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b088      	sub	sp, #32
 800a6c4:	af02      	add	r7, sp, #8
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6ca:	4b23      	ldr	r3, [pc, #140]	@ (800a758 <prvProcessExpiredTimer+0x98>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fd fe37 	bl	800834c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6e4:	f003 0304 	and.w	r3, r3, #4
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d023      	beq.n	800a734 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	699a      	ldr	r2, [r3, #24]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	18d1      	adds	r1, r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	6978      	ldr	r0, [r7, #20]
 800a6fa:	f000 f8d5 	bl	800a8a8 <prvInsertTimerInActiveList>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d020      	beq.n	800a746 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a704:	2300      	movs	r3, #0
 800a706:	9300      	str	r3, [sp, #0]
 800a708:	2300      	movs	r3, #0
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	2100      	movs	r1, #0
 800a70e:	6978      	ldr	r0, [r7, #20]
 800a710:	f7ff ff88 	bl	800a624 <xTimerGenericCommand>
 800a714:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d114      	bne.n	800a746 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a71c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a720:	f383 8811 	msr	BASEPRI, r3
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	60fb      	str	r3, [r7, #12]
}
 800a72e:	bf00      	nop
 800a730:	bf00      	nop
 800a732:	e7fd      	b.n	800a730 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a73a:	f023 0301 	bic.w	r3, r3, #1
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	6978      	ldr	r0, [r7, #20]
 800a74c:	4798      	blx	r3
}
 800a74e:	bf00      	nop
 800a750:	3718      	adds	r7, #24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	200415a0 	.word	0x200415a0

0800a75c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a764:	f107 0308 	add.w	r3, r7, #8
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 f859 	bl	800a820 <prvGetNextExpireTime>
 800a76e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	4619      	mov	r1, r3
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 f805 	bl	800a784 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a77a:	f000 f8d7 	bl	800a92c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a77e:	bf00      	nop
 800a780:	e7f0      	b.n	800a764 <prvTimerTask+0x8>
	...

0800a784 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a78e:	f7ff f919 	bl	80099c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a792:	f107 0308 	add.w	r3, r7, #8
 800a796:	4618      	mov	r0, r3
 800a798:	f000 f866 	bl	800a868 <prvSampleTimeNow>
 800a79c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d130      	bne.n	800a806 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d10a      	bne.n	800a7c0 <prvProcessTimerOrBlockTask+0x3c>
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d806      	bhi.n	800a7c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7b2:	f7ff f915 	bl	80099e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7b6:	68f9      	ldr	r1, [r7, #12]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f7ff ff81 	bl	800a6c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7be:	e024      	b.n	800a80a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d008      	beq.n	800a7d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7c6:	4b13      	ldr	r3, [pc, #76]	@ (800a814 <prvProcessTimerOrBlockTask+0x90>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <prvProcessTimerOrBlockTask+0x50>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e000      	b.n	800a7d6 <prvProcessTimerOrBlockTask+0x52>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a818 <prvProcessTimerOrBlockTask+0x94>)
 800a7da:	6818      	ldr	r0, [r3, #0]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	f7fe fe8b 	bl	8009500 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a7ea:	f7ff f8f9 	bl	80099e0 <xTaskResumeAll>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10a      	bne.n	800a80a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a7f4:	4b09      	ldr	r3, [pc, #36]	@ (800a81c <prvProcessTimerOrBlockTask+0x98>)
 800a7f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	f3bf 8f6f 	isb	sy
}
 800a804:	e001      	b.n	800a80a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a806:	f7ff f8eb 	bl	80099e0 <xTaskResumeAll>
}
 800a80a:	bf00      	nop
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200415a4 	.word	0x200415a4
 800a818:	200415a8 	.word	0x200415a8
 800a81c:	e000ed04 	.word	0xe000ed04

0800a820 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a828:	4b0e      	ldr	r3, [pc, #56]	@ (800a864 <prvGetNextExpireTime+0x44>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <prvGetNextExpireTime+0x16>
 800a832:	2201      	movs	r2, #1
 800a834:	e000      	b.n	800a838 <prvGetNextExpireTime+0x18>
 800a836:	2200      	movs	r2, #0
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d105      	bne.n	800a850 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a844:	4b07      	ldr	r3, [pc, #28]	@ (800a864 <prvGetNextExpireTime+0x44>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	60fb      	str	r3, [r7, #12]
 800a84e:	e001      	b.n	800a854 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a854:	68fb      	ldr	r3, [r7, #12]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr
 800a862:	bf00      	nop
 800a864:	200415a0 	.word	0x200415a0

0800a868 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a870:	f7ff f954 	bl	8009b1c <xTaskGetTickCount>
 800a874:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a876:	4b0b      	ldr	r3, [pc, #44]	@ (800a8a4 <prvSampleTimeNow+0x3c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d205      	bcs.n	800a88c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a880:	f000 f93a 	bl	800aaf8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	e002      	b.n	800a892 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2200      	movs	r2, #0
 800a890:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a892:	4a04      	ldr	r2, [pc, #16]	@ (800a8a4 <prvSampleTimeNow+0x3c>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a898:	68fb      	ldr	r3, [r7, #12]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	200415b0 	.word	0x200415b0

0800a8a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d812      	bhi.n	800a8f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	1ad2      	subs	r2, r2, r3
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d302      	bcc.n	800a8e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	617b      	str	r3, [r7, #20]
 800a8e0:	e01b      	b.n	800a91a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8e2:	4b10      	ldr	r3, [pc, #64]	@ (800a924 <prvInsertTimerInActiveList+0x7c>)
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	4610      	mov	r0, r2
 800a8ee:	f7fd fcf4 	bl	80082da <vListInsert>
 800a8f2:	e012      	b.n	800a91a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d206      	bcs.n	800a90a <prvInsertTimerInActiveList+0x62>
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	429a      	cmp	r2, r3
 800a902:	d302      	bcc.n	800a90a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a904:	2301      	movs	r3, #1
 800a906:	617b      	str	r3, [r7, #20]
 800a908:	e007      	b.n	800a91a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a90a:	4b07      	ldr	r3, [pc, #28]	@ (800a928 <prvInsertTimerInActiveList+0x80>)
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	3304      	adds	r3, #4
 800a912:	4619      	mov	r1, r3
 800a914:	4610      	mov	r0, r2
 800a916:	f7fd fce0 	bl	80082da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a91a:	697b      	ldr	r3, [r7, #20]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	200415a4 	.word	0x200415a4
 800a928:	200415a0 	.word	0x200415a0

0800a92c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08e      	sub	sp, #56	@ 0x38
 800a930:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a932:	e0ce      	b.n	800aad2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	da19      	bge.n	800a96e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a93a:	1d3b      	adds	r3, r7, #4
 800a93c:	3304      	adds	r3, #4
 800a93e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10b      	bne.n	800a95e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94a:	f383 8811 	msr	BASEPRI, r3
 800a94e:	f3bf 8f6f 	isb	sy
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	61fb      	str	r3, [r7, #28]
}
 800a958:	bf00      	nop
 800a95a:	bf00      	nop
 800a95c:	e7fd      	b.n	800a95a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a964:	6850      	ldr	r0, [r2, #4]
 800a966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a968:	6892      	ldr	r2, [r2, #8]
 800a96a:	4611      	mov	r1, r2
 800a96c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	f2c0 80ae 	blt.w	800aad2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d004      	beq.n	800a98c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	3304      	adds	r3, #4
 800a986:	4618      	mov	r0, r3
 800a988:	f7fd fce0 	bl	800834c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a98c:	463b      	mov	r3, r7
 800a98e:	4618      	mov	r0, r3
 800a990:	f7ff ff6a 	bl	800a868 <prvSampleTimeNow>
 800a994:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b09      	cmp	r3, #9
 800a99a:	f200 8097 	bhi.w	800aacc <prvProcessReceivedCommands+0x1a0>
 800a99e:	a201      	add	r2, pc, #4	@ (adr r2, 800a9a4 <prvProcessReceivedCommands+0x78>)
 800a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a4:	0800a9cd 	.word	0x0800a9cd
 800a9a8:	0800a9cd 	.word	0x0800a9cd
 800a9ac:	0800a9cd 	.word	0x0800a9cd
 800a9b0:	0800aa43 	.word	0x0800aa43
 800a9b4:	0800aa57 	.word	0x0800aa57
 800a9b8:	0800aaa3 	.word	0x0800aaa3
 800a9bc:	0800a9cd 	.word	0x0800a9cd
 800a9c0:	0800a9cd 	.word	0x0800a9cd
 800a9c4:	0800aa43 	.word	0x0800aa43
 800a9c8:	0800aa57 	.word	0x0800aa57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9d2:	f043 0301 	orr.w	r3, r3, #1
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e2:	699b      	ldr	r3, [r3, #24]
 800a9e4:	18d1      	adds	r1, r2, r3
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9ec:	f7ff ff5c 	bl	800a8a8 <prvInsertTimerInActiveList>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d06c      	beq.n	800aad0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa04:	f003 0304 	and.w	r3, r3, #4
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d061      	beq.n	800aad0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	441a      	add	r2, r3
 800aa14:	2300      	movs	r3, #0
 800aa16:	9300      	str	r3, [sp, #0]
 800aa18:	2300      	movs	r3, #0
 800aa1a:	2100      	movs	r1, #0
 800aa1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa1e:	f7ff fe01 	bl	800a624 <xTimerGenericCommand>
 800aa22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa24:	6a3b      	ldr	r3, [r7, #32]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d152      	bne.n	800aad0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	61bb      	str	r3, [r7, #24]
}
 800aa3c:	bf00      	nop
 800aa3e:	bf00      	nop
 800aa40:	e7fd      	b.n	800aa3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa48:	f023 0301 	bic.w	r3, r3, #1
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aa54:	e03d      	b.n	800aad2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa5c:	f043 0301 	orr.w	r3, r3, #1
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa68:	68ba      	ldr	r2, [r7, #8]
 800aa6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10b      	bne.n	800aa8e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	617b      	str	r3, [r7, #20]
}
 800aa88:	bf00      	nop
 800aa8a:	bf00      	nop
 800aa8c:	e7fd      	b.n	800aa8a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa90:	699a      	ldr	r2, [r3, #24]
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	18d1      	adds	r1, r2, r3
 800aa96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa9c:	f7ff ff04 	bl	800a8a8 <prvInsertTimerInActiveList>
					break;
 800aaa0:	e017      	b.n	800aad2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aaa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aaa8:	f003 0302 	and.w	r3, r3, #2
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d103      	bne.n	800aab8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800aab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aab2:	f000 fbe9 	bl	800b288 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aab6:	e00c      	b.n	800aad2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aabe:	f023 0301 	bic.w	r3, r3, #1
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aaca:	e002      	b.n	800aad2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800aacc:	bf00      	nop
 800aace:	e000      	b.n	800aad2 <prvProcessReceivedCommands+0x1a6>
					break;
 800aad0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aad2:	4b08      	ldr	r3, [pc, #32]	@ (800aaf4 <prvProcessReceivedCommands+0x1c8>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	1d39      	adds	r1, r7, #4
 800aad8:	2200      	movs	r2, #0
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fe f8fc 	bl	8008cd8 <xQueueReceive>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f47f af26 	bne.w	800a934 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aae8:	bf00      	nop
 800aaea:	bf00      	nop
 800aaec:	3730      	adds	r7, #48	@ 0x30
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	200415a8 	.word	0x200415a8

0800aaf8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b088      	sub	sp, #32
 800aafc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aafe:	e049      	b.n	800ab94 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab00:	4b2e      	ldr	r3, [pc, #184]	@ (800abbc <prvSwitchTimerLists+0xc4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab0a:	4b2c      	ldr	r3, [pc, #176]	@ (800abbc <prvSwitchTimerLists+0xc4>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68db      	ldr	r3, [r3, #12]
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	3304      	adds	r3, #4
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fd fc17 	bl	800834c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab2c:	f003 0304 	and.w	r3, r3, #4
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d02f      	beq.n	800ab94 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d90e      	bls.n	800ab64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab52:	4b1a      	ldr	r3, [pc, #104]	@ (800abbc <prvSwitchTimerLists+0xc4>)
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3304      	adds	r3, #4
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	f7fd fbbc 	bl	80082da <vListInsert>
 800ab62:	e017      	b.n	800ab94 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab64:	2300      	movs	r3, #0
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	2300      	movs	r3, #0
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	68f8      	ldr	r0, [r7, #12]
 800ab70:	f7ff fd58 	bl	800a624 <xTimerGenericCommand>
 800ab74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10b      	bne.n	800ab94 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ab7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab80:	f383 8811 	msr	BASEPRI, r3
 800ab84:	f3bf 8f6f 	isb	sy
 800ab88:	f3bf 8f4f 	dsb	sy
 800ab8c:	603b      	str	r3, [r7, #0]
}
 800ab8e:	bf00      	nop
 800ab90:	bf00      	nop
 800ab92:	e7fd      	b.n	800ab90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab94:	4b09      	ldr	r3, [pc, #36]	@ (800abbc <prvSwitchTimerLists+0xc4>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d1b0      	bne.n	800ab00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab9e:	4b07      	ldr	r3, [pc, #28]	@ (800abbc <prvSwitchTimerLists+0xc4>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aba4:	4b06      	ldr	r3, [pc, #24]	@ (800abc0 <prvSwitchTimerLists+0xc8>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a04      	ldr	r2, [pc, #16]	@ (800abbc <prvSwitchTimerLists+0xc4>)
 800abaa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800abac:	4a04      	ldr	r2, [pc, #16]	@ (800abc0 <prvSwitchTimerLists+0xc8>)
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	6013      	str	r3, [r2, #0]
}
 800abb2:	bf00      	nop
 800abb4:	3718      	adds	r7, #24
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	200415a0 	.word	0x200415a0
 800abc0:	200415a4 	.word	0x200415a4

0800abc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800abca:	f000 f96d 	bl	800aea8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800abce:	4b15      	ldr	r3, [pc, #84]	@ (800ac24 <prvCheckForValidListAndQueue+0x60>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d120      	bne.n	800ac18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800abd6:	4814      	ldr	r0, [pc, #80]	@ (800ac28 <prvCheckForValidListAndQueue+0x64>)
 800abd8:	f7fd fb2e 	bl	8008238 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800abdc:	4813      	ldr	r0, [pc, #76]	@ (800ac2c <prvCheckForValidListAndQueue+0x68>)
 800abde:	f7fd fb2b 	bl	8008238 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800abe2:	4b13      	ldr	r3, [pc, #76]	@ (800ac30 <prvCheckForValidListAndQueue+0x6c>)
 800abe4:	4a10      	ldr	r2, [pc, #64]	@ (800ac28 <prvCheckForValidListAndQueue+0x64>)
 800abe6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800abe8:	4b12      	ldr	r3, [pc, #72]	@ (800ac34 <prvCheckForValidListAndQueue+0x70>)
 800abea:	4a10      	ldr	r2, [pc, #64]	@ (800ac2c <prvCheckForValidListAndQueue+0x68>)
 800abec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800abee:	2300      	movs	r3, #0
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	4b11      	ldr	r3, [pc, #68]	@ (800ac38 <prvCheckForValidListAndQueue+0x74>)
 800abf4:	4a11      	ldr	r2, [pc, #68]	@ (800ac3c <prvCheckForValidListAndQueue+0x78>)
 800abf6:	2110      	movs	r1, #16
 800abf8:	200a      	movs	r0, #10
 800abfa:	f7fd fc3b 	bl	8008474 <xQueueGenericCreateStatic>
 800abfe:	4603      	mov	r3, r0
 800ac00:	4a08      	ldr	r2, [pc, #32]	@ (800ac24 <prvCheckForValidListAndQueue+0x60>)
 800ac02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac04:	4b07      	ldr	r3, [pc, #28]	@ (800ac24 <prvCheckForValidListAndQueue+0x60>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d005      	beq.n	800ac18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac0c:	4b05      	ldr	r3, [pc, #20]	@ (800ac24 <prvCheckForValidListAndQueue+0x60>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	490b      	ldr	r1, [pc, #44]	@ (800ac40 <prvCheckForValidListAndQueue+0x7c>)
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe fc20 	bl	8009458 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac18:	f000 f978 	bl	800af0c <vPortExitCritical>
}
 800ac1c:	bf00      	nop
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	200415a8 	.word	0x200415a8
 800ac28:	20041578 	.word	0x20041578
 800ac2c:	2004158c 	.word	0x2004158c
 800ac30:	200415a0 	.word	0x200415a0
 800ac34:	200415a4 	.word	0x200415a4
 800ac38:	20041654 	.word	0x20041654
 800ac3c:	200415b4 	.word	0x200415b4
 800ac40:	0800b73c 	.word	0x0800b73c

0800ac44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3b04      	subs	r3, #4
 800ac54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ac5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3b04      	subs	r3, #4
 800ac62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	f023 0201 	bic.w	r2, r3, #1
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3b04      	subs	r3, #4
 800ac72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac74:	4a0c      	ldr	r2, [pc, #48]	@ (800aca8 <pxPortInitialiseStack+0x64>)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	3b14      	subs	r3, #20
 800ac7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	3b04      	subs	r3, #4
 800ac8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f06f 0202 	mvn.w	r2, #2
 800ac92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	3b20      	subs	r3, #32
 800ac98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr
 800aca8:	0800acad 	.word	0x0800acad

0800acac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acb6:	4b13      	ldr	r3, [pc, #76]	@ (800ad04 <prvTaskExitError+0x58>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acbe:	d00b      	beq.n	800acd8 <prvTaskExitError+0x2c>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	60fb      	str	r3, [r7, #12]
}
 800acd2:	bf00      	nop
 800acd4:	bf00      	nop
 800acd6:	e7fd      	b.n	800acd4 <prvTaskExitError+0x28>
	__asm volatile
 800acd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acdc:	f383 8811 	msr	BASEPRI, r3
 800ace0:	f3bf 8f6f 	isb	sy
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	60bb      	str	r3, [r7, #8]
}
 800acea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800acec:	bf00      	nop
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d0fc      	beq.n	800acee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800acf4:	bf00      	nop
 800acf6:	bf00      	nop
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	2004000c 	.word	0x2004000c
	...

0800ad10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad10:	4b07      	ldr	r3, [pc, #28]	@ (800ad30 <pxCurrentTCBConst2>)
 800ad12:	6819      	ldr	r1, [r3, #0]
 800ad14:	6808      	ldr	r0, [r1, #0]
 800ad16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1a:	f380 8809 	msr	PSP, r0
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f04f 0000 	mov.w	r0, #0
 800ad26:	f380 8811 	msr	BASEPRI, r0
 800ad2a:	4770      	bx	lr
 800ad2c:	f3af 8000 	nop.w

0800ad30 <pxCurrentTCBConst2>:
 800ad30:	20041078 	.word	0x20041078
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad34:	bf00      	nop
 800ad36:	bf00      	nop

0800ad38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad38:	4808      	ldr	r0, [pc, #32]	@ (800ad5c <prvPortStartFirstTask+0x24>)
 800ad3a:	6800      	ldr	r0, [r0, #0]
 800ad3c:	6800      	ldr	r0, [r0, #0]
 800ad3e:	f380 8808 	msr	MSP, r0
 800ad42:	f04f 0000 	mov.w	r0, #0
 800ad46:	f380 8814 	msr	CONTROL, r0
 800ad4a:	b662      	cpsie	i
 800ad4c:	b661      	cpsie	f
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	df00      	svc	0
 800ad58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad5a:	bf00      	nop
 800ad5c:	e000ed08 	.word	0xe000ed08

0800ad60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad66:	4b47      	ldr	r3, [pc, #284]	@ (800ae84 <xPortStartScheduler+0x124>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a47      	ldr	r2, [pc, #284]	@ (800ae88 <xPortStartScheduler+0x128>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d10b      	bne.n	800ad88 <xPortStartScheduler+0x28>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	613b      	str	r3, [r7, #16]
}
 800ad82:	bf00      	nop
 800ad84:	bf00      	nop
 800ad86:	e7fd      	b.n	800ad84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad88:	4b3e      	ldr	r3, [pc, #248]	@ (800ae84 <xPortStartScheduler+0x124>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a3f      	ldr	r2, [pc, #252]	@ (800ae8c <xPortStartScheduler+0x12c>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d10b      	bne.n	800adaa <xPortStartScheduler+0x4a>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	60fb      	str	r3, [r7, #12]
}
 800ada4:	bf00      	nop
 800ada6:	bf00      	nop
 800ada8:	e7fd      	b.n	800ada6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800adaa:	4b39      	ldr	r3, [pc, #228]	@ (800ae90 <xPortStartScheduler+0x130>)
 800adac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	22ff      	movs	r2, #255	@ 0xff
 800adba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800adc4:	78fb      	ldrb	r3, [r7, #3]
 800adc6:	b2db      	uxtb	r3, r3
 800adc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800adcc:	b2da      	uxtb	r2, r3
 800adce:	4b31      	ldr	r3, [pc, #196]	@ (800ae94 <xPortStartScheduler+0x134>)
 800add0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800add2:	4b31      	ldr	r3, [pc, #196]	@ (800ae98 <xPortStartScheduler+0x138>)
 800add4:	2207      	movs	r2, #7
 800add6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800add8:	e009      	b.n	800adee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800adda:	4b2f      	ldr	r3, [pc, #188]	@ (800ae98 <xPortStartScheduler+0x138>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	3b01      	subs	r3, #1
 800ade0:	4a2d      	ldr	r2, [pc, #180]	@ (800ae98 <xPortStartScheduler+0x138>)
 800ade2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ade4:	78fb      	ldrb	r3, [r7, #3]
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	b2db      	uxtb	r3, r3
 800adec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adee:	78fb      	ldrb	r3, [r7, #3]
 800adf0:	b2db      	uxtb	r3, r3
 800adf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adf6:	2b80      	cmp	r3, #128	@ 0x80
 800adf8:	d0ef      	beq.n	800adda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800adfa:	4b27      	ldr	r3, [pc, #156]	@ (800ae98 <xPortStartScheduler+0x138>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f1c3 0307 	rsb	r3, r3, #7
 800ae02:	2b04      	cmp	r3, #4
 800ae04:	d00b      	beq.n	800ae1e <xPortStartScheduler+0xbe>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	60bb      	str	r3, [r7, #8]
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	e7fd      	b.n	800ae1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ae98 <xPortStartScheduler+0x138>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	4a1c      	ldr	r2, [pc, #112]	@ (800ae98 <xPortStartScheduler+0x138>)
 800ae26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae28:	4b1b      	ldr	r3, [pc, #108]	@ (800ae98 <xPortStartScheduler+0x138>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ae30:	4a19      	ldr	r2, [pc, #100]	@ (800ae98 <xPortStartScheduler+0x138>)
 800ae32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae3c:	4b17      	ldr	r3, [pc, #92]	@ (800ae9c <xPortStartScheduler+0x13c>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a16      	ldr	r2, [pc, #88]	@ (800ae9c <xPortStartScheduler+0x13c>)
 800ae42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ae46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae48:	4b14      	ldr	r3, [pc, #80]	@ (800ae9c <xPortStartScheduler+0x13c>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a13      	ldr	r2, [pc, #76]	@ (800ae9c <xPortStartScheduler+0x13c>)
 800ae4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ae52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae54:	f000 f8da 	bl	800b00c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae58:	4b11      	ldr	r3, [pc, #68]	@ (800aea0 <xPortStartScheduler+0x140>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae5e:	f000 f8f9 	bl	800b054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae62:	4b10      	ldr	r3, [pc, #64]	@ (800aea4 <xPortStartScheduler+0x144>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a0f      	ldr	r2, [pc, #60]	@ (800aea4 <xPortStartScheduler+0x144>)
 800ae68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ae6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae6e:	f7ff ff63 	bl	800ad38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae72:	f7fe ff1d 	bl	8009cb0 <vTaskSwitchContext>
	prvTaskExitError();
 800ae76:	f7ff ff19 	bl	800acac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	e000ed00 	.word	0xe000ed00
 800ae88:	410fc271 	.word	0x410fc271
 800ae8c:	410fc270 	.word	0x410fc270
 800ae90:	e000e400 	.word	0xe000e400
 800ae94:	200416a4 	.word	0x200416a4
 800ae98:	200416a8 	.word	0x200416a8
 800ae9c:	e000ed20 	.word	0xe000ed20
 800aea0:	2004000c 	.word	0x2004000c
 800aea4:	e000ef34 	.word	0xe000ef34

0800aea8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	607b      	str	r3, [r7, #4]
}
 800aec0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aec2:	4b10      	ldr	r3, [pc, #64]	@ (800af04 <vPortEnterCritical+0x5c>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3301      	adds	r3, #1
 800aec8:	4a0e      	ldr	r2, [pc, #56]	@ (800af04 <vPortEnterCritical+0x5c>)
 800aeca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aecc:	4b0d      	ldr	r3, [pc, #52]	@ (800af04 <vPortEnterCritical+0x5c>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d110      	bne.n	800aef6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aed4:	4b0c      	ldr	r3, [pc, #48]	@ (800af08 <vPortEnterCritical+0x60>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00b      	beq.n	800aef6 <vPortEnterCritical+0x4e>
	__asm volatile
 800aede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee2:	f383 8811 	msr	BASEPRI, r3
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	603b      	str	r3, [r7, #0]
}
 800aef0:	bf00      	nop
 800aef2:	bf00      	nop
 800aef4:	e7fd      	b.n	800aef2 <vPortEnterCritical+0x4a>
	}
}
 800aef6:	bf00      	nop
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	2004000c 	.word	0x2004000c
 800af08:	e000ed04 	.word	0xe000ed04

0800af0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af12:	4b12      	ldr	r3, [pc, #72]	@ (800af5c <vPortExitCritical+0x50>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10b      	bne.n	800af32 <vPortExitCritical+0x26>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	607b      	str	r3, [r7, #4]
}
 800af2c:	bf00      	nop
 800af2e:	bf00      	nop
 800af30:	e7fd      	b.n	800af2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af32:	4b0a      	ldr	r3, [pc, #40]	@ (800af5c <vPortExitCritical+0x50>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	3b01      	subs	r3, #1
 800af38:	4a08      	ldr	r2, [pc, #32]	@ (800af5c <vPortExitCritical+0x50>)
 800af3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af3c:	4b07      	ldr	r3, [pc, #28]	@ (800af5c <vPortExitCritical+0x50>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d105      	bne.n	800af50 <vPortExitCritical+0x44>
 800af44:	2300      	movs	r3, #0
 800af46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	f383 8811 	msr	BASEPRI, r3
}
 800af4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	2004000c 	.word	0x2004000c

0800af60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af60:	f3ef 8009 	mrs	r0, PSP
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	4b15      	ldr	r3, [pc, #84]	@ (800afc0 <pxCurrentTCBConst>)
 800af6a:	681a      	ldr	r2, [r3, #0]
 800af6c:	f01e 0f10 	tst.w	lr, #16
 800af70:	bf08      	it	eq
 800af72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7a:	6010      	str	r0, [r2, #0]
 800af7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800af84:	f380 8811 	msr	BASEPRI, r0
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f7fe fe8e 	bl	8009cb0 <vTaskSwitchContext>
 800af94:	f04f 0000 	mov.w	r0, #0
 800af98:	f380 8811 	msr	BASEPRI, r0
 800af9c:	bc09      	pop	{r0, r3}
 800af9e:	6819      	ldr	r1, [r3, #0]
 800afa0:	6808      	ldr	r0, [r1, #0]
 800afa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa6:	f01e 0f10 	tst.w	lr, #16
 800afaa:	bf08      	it	eq
 800afac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afb0:	f380 8809 	msr	PSP, r0
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	f3af 8000 	nop.w

0800afc0 <pxCurrentTCBConst>:
 800afc0:	20041078 	.word	0x20041078
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop

0800afc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
	__asm volatile
 800afce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd2:	f383 8811 	msr	BASEPRI, r3
 800afd6:	f3bf 8f6f 	isb	sy
 800afda:	f3bf 8f4f 	dsb	sy
 800afde:	607b      	str	r3, [r7, #4]
}
 800afe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800afe2:	f7fe fdab 	bl	8009b3c <xTaskIncrementTick>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d003      	beq.n	800aff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800afec:	4b06      	ldr	r3, [pc, #24]	@ (800b008 <xPortSysTickHandler+0x40>)
 800afee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aff2:	601a      	str	r2, [r3, #0]
 800aff4:	2300      	movs	r3, #0
 800aff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	f383 8811 	msr	BASEPRI, r3
}
 800affe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b000:	bf00      	nop
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	e000ed04 	.word	0xe000ed04

0800b00c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b00c:	b480      	push	{r7}
 800b00e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b010:	4b0b      	ldr	r3, [pc, #44]	@ (800b040 <vPortSetupTimerInterrupt+0x34>)
 800b012:	2200      	movs	r2, #0
 800b014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b016:	4b0b      	ldr	r3, [pc, #44]	@ (800b044 <vPortSetupTimerInterrupt+0x38>)
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b01c:	4b0a      	ldr	r3, [pc, #40]	@ (800b048 <vPortSetupTimerInterrupt+0x3c>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a0a      	ldr	r2, [pc, #40]	@ (800b04c <vPortSetupTimerInterrupt+0x40>)
 800b022:	fba2 2303 	umull	r2, r3, r2, r3
 800b026:	099b      	lsrs	r3, r3, #6
 800b028:	4a09      	ldr	r2, [pc, #36]	@ (800b050 <vPortSetupTimerInterrupt+0x44>)
 800b02a:	3b01      	subs	r3, #1
 800b02c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b02e:	4b04      	ldr	r3, [pc, #16]	@ (800b040 <vPortSetupTimerInterrupt+0x34>)
 800b030:	2207      	movs	r2, #7
 800b032:	601a      	str	r2, [r3, #0]
}
 800b034:	bf00      	nop
 800b036:	46bd      	mov	sp, r7
 800b038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03c:	4770      	bx	lr
 800b03e:	bf00      	nop
 800b040:	e000e010 	.word	0xe000e010
 800b044:	e000e018 	.word	0xe000e018
 800b048:	20040000 	.word	0x20040000
 800b04c:	10624dd3 	.word	0x10624dd3
 800b050:	e000e014 	.word	0xe000e014

0800b054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b054:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b064 <vPortEnableVFP+0x10>
 800b058:	6801      	ldr	r1, [r0, #0]
 800b05a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b05e:	6001      	str	r1, [r0, #0]
 800b060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b062:	bf00      	nop
 800b064:	e000ed88 	.word	0xe000ed88

0800b068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b06e:	f3ef 8305 	mrs	r3, IPSR
 800b072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b0f      	cmp	r3, #15
 800b078:	d915      	bls.n	800b0a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b07a:	4a18      	ldr	r2, [pc, #96]	@ (800b0dc <vPortValidateInterruptPriority+0x74>)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	4413      	add	r3, r2
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b084:	4b16      	ldr	r3, [pc, #88]	@ (800b0e0 <vPortValidateInterruptPriority+0x78>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	7afa      	ldrb	r2, [r7, #11]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d20b      	bcs.n	800b0a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	607b      	str	r3, [r7, #4]
}
 800b0a0:	bf00      	nop
 800b0a2:	bf00      	nop
 800b0a4:	e7fd      	b.n	800b0a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b0e4 <vPortValidateInterruptPriority+0x7c>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b0ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b0e8 <vPortValidateInterruptPriority+0x80>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d90b      	bls.n	800b0ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	603b      	str	r3, [r7, #0]
}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	e7fd      	b.n	800b0ca <vPortValidateInterruptPriority+0x62>
	}
 800b0ce:	bf00      	nop
 800b0d0:	3714      	adds	r7, #20
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	e000e3f0 	.word	0xe000e3f0
 800b0e0:	200416a4 	.word	0x200416a4
 800b0e4:	e000ed0c 	.word	0xe000ed0c
 800b0e8:	200416a8 	.word	0x200416a8

0800b0ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08a      	sub	sp, #40	@ 0x28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b0f8:	f7fe fc64 	bl	80099c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b0fc:	4b5c      	ldr	r3, [pc, #368]	@ (800b270 <pvPortMalloc+0x184>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b104:	f000 f924 	bl	800b350 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b108:	4b5a      	ldr	r3, [pc, #360]	@ (800b274 <pvPortMalloc+0x188>)
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4013      	ands	r3, r2
 800b110:	2b00      	cmp	r3, #0
 800b112:	f040 8095 	bne.w	800b240 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d01e      	beq.n	800b15a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b11c:	2208      	movs	r2, #8
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4413      	add	r3, r2
 800b122:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d015      	beq.n	800b15a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f023 0307 	bic.w	r3, r3, #7
 800b134:	3308      	adds	r3, #8
 800b136:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f003 0307 	and.w	r3, r3, #7
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00b      	beq.n	800b15a <pvPortMalloc+0x6e>
	__asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	617b      	str	r3, [r7, #20]
}
 800b154:	bf00      	nop
 800b156:	bf00      	nop
 800b158:	e7fd      	b.n	800b156 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d06f      	beq.n	800b240 <pvPortMalloc+0x154>
 800b160:	4b45      	ldr	r3, [pc, #276]	@ (800b278 <pvPortMalloc+0x18c>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	429a      	cmp	r2, r3
 800b168:	d86a      	bhi.n	800b240 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b16a:	4b44      	ldr	r3, [pc, #272]	@ (800b27c <pvPortMalloc+0x190>)
 800b16c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b16e:	4b43      	ldr	r3, [pc, #268]	@ (800b27c <pvPortMalloc+0x190>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b174:	e004      	b.n	800b180 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b178:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	429a      	cmp	r2, r3
 800b188:	d903      	bls.n	800b192 <pvPortMalloc+0xa6>
 800b18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1f1      	bne.n	800b176 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b192:	4b37      	ldr	r3, [pc, #220]	@ (800b270 <pvPortMalloc+0x184>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b198:	429a      	cmp	r2, r3
 800b19a:	d051      	beq.n	800b240 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2208      	movs	r2, #8
 800b1a2:	4413      	add	r3, r2
 800b1a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1b0:	685a      	ldr	r2, [r3, #4]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	1ad2      	subs	r2, r2, r3
 800b1b6:	2308      	movs	r3, #8
 800b1b8:	005b      	lsls	r3, r3, #1
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d920      	bls.n	800b200 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	f003 0307 	and.w	r3, r3, #7
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00b      	beq.n	800b1e8 <pvPortMalloc+0xfc>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	613b      	str	r3, [r7, #16]
}
 800b1e2:	bf00      	nop
 800b1e4:	bf00      	nop
 800b1e6:	e7fd      	b.n	800b1e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ea:	685a      	ldr	r2, [r3, #4]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	1ad2      	subs	r2, r2, r3
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1fa:	69b8      	ldr	r0, [r7, #24]
 800b1fc:	f000 f90a 	bl	800b414 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b200:	4b1d      	ldr	r3, [pc, #116]	@ (800b278 <pvPortMalloc+0x18c>)
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	4a1b      	ldr	r2, [pc, #108]	@ (800b278 <pvPortMalloc+0x18c>)
 800b20c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b20e:	4b1a      	ldr	r3, [pc, #104]	@ (800b278 <pvPortMalloc+0x18c>)
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	4b1b      	ldr	r3, [pc, #108]	@ (800b280 <pvPortMalloc+0x194>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d203      	bcs.n	800b222 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b21a:	4b17      	ldr	r3, [pc, #92]	@ (800b278 <pvPortMalloc+0x18c>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a18      	ldr	r2, [pc, #96]	@ (800b280 <pvPortMalloc+0x194>)
 800b220:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	4b13      	ldr	r3, [pc, #76]	@ (800b274 <pvPortMalloc+0x188>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	431a      	orrs	r2, r3
 800b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b236:	4b13      	ldr	r3, [pc, #76]	@ (800b284 <pvPortMalloc+0x198>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3301      	adds	r3, #1
 800b23c:	4a11      	ldr	r2, [pc, #68]	@ (800b284 <pvPortMalloc+0x198>)
 800b23e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b240:	f7fe fbce 	bl	80099e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	f003 0307 	and.w	r3, r3, #7
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d00b      	beq.n	800b266 <pvPortMalloc+0x17a>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	60fb      	str	r3, [r7, #12]
}
 800b260:	bf00      	nop
 800b262:	bf00      	nop
 800b264:	e7fd      	b.n	800b262 <pvPortMalloc+0x176>
	return pvReturn;
 800b266:	69fb      	ldr	r3, [r7, #28]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3728      	adds	r7, #40	@ 0x28
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	2004226c 	.word	0x2004226c
 800b274:	20042280 	.word	0x20042280
 800b278:	20042270 	.word	0x20042270
 800b27c:	20042264 	.word	0x20042264
 800b280:	20042274 	.word	0x20042274
 800b284:	20042278 	.word	0x20042278

0800b288 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b086      	sub	sp, #24
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d04f      	beq.n	800b33a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b29a:	2308      	movs	r3, #8
 800b29c:	425b      	negs	r3, r3
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	4b25      	ldr	r3, [pc, #148]	@ (800b344 <vPortFree+0xbc>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4013      	ands	r3, r2
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10b      	bne.n	800b2ce <vPortFree+0x46>
	__asm volatile
 800b2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ba:	f383 8811 	msr	BASEPRI, r3
 800b2be:	f3bf 8f6f 	isb	sy
 800b2c2:	f3bf 8f4f 	dsb	sy
 800b2c6:	60fb      	str	r3, [r7, #12]
}
 800b2c8:	bf00      	nop
 800b2ca:	bf00      	nop
 800b2cc:	e7fd      	b.n	800b2ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00b      	beq.n	800b2ee <vPortFree+0x66>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	60bb      	str	r3, [r7, #8]
}
 800b2e8:	bf00      	nop
 800b2ea:	bf00      	nop
 800b2ec:	e7fd      	b.n	800b2ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	685a      	ldr	r2, [r3, #4]
 800b2f2:	4b14      	ldr	r3, [pc, #80]	@ (800b344 <vPortFree+0xbc>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d01e      	beq.n	800b33a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d11a      	bne.n	800b33a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	4b0e      	ldr	r3, [pc, #56]	@ (800b344 <vPortFree+0xbc>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	43db      	mvns	r3, r3
 800b30e:	401a      	ands	r2, r3
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b314:	f7fe fb56 	bl	80099c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	4b0a      	ldr	r3, [pc, #40]	@ (800b348 <vPortFree+0xc0>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4413      	add	r3, r2
 800b322:	4a09      	ldr	r2, [pc, #36]	@ (800b348 <vPortFree+0xc0>)
 800b324:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b326:	6938      	ldr	r0, [r7, #16]
 800b328:	f000 f874 	bl	800b414 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b32c:	4b07      	ldr	r3, [pc, #28]	@ (800b34c <vPortFree+0xc4>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	3301      	adds	r3, #1
 800b332:	4a06      	ldr	r2, [pc, #24]	@ (800b34c <vPortFree+0xc4>)
 800b334:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b336:	f7fe fb53 	bl	80099e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b33a:	bf00      	nop
 800b33c:	3718      	adds	r7, #24
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	20042280 	.word	0x20042280
 800b348:	20042270 	.word	0x20042270
 800b34c:	2004227c 	.word	0x2004227c

0800b350 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b356:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800b35a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b35c:	4b27      	ldr	r3, [pc, #156]	@ (800b3fc <prvHeapInit+0xac>)
 800b35e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f003 0307 	and.w	r3, r3, #7
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00c      	beq.n	800b384 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3307      	adds	r3, #7
 800b36e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f023 0307 	bic.w	r3, r3, #7
 800b376:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	1ad3      	subs	r3, r2, r3
 800b37e:	4a1f      	ldr	r2, [pc, #124]	@ (800b3fc <prvHeapInit+0xac>)
 800b380:	4413      	add	r3, r2
 800b382:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b388:	4a1d      	ldr	r2, [pc, #116]	@ (800b400 <prvHeapInit+0xb0>)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b38e:	4b1c      	ldr	r3, [pc, #112]	@ (800b400 <prvHeapInit+0xb0>)
 800b390:	2200      	movs	r2, #0
 800b392:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	4413      	add	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b39c:	2208      	movs	r2, #8
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	1a9b      	subs	r3, r3, r2
 800b3a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f023 0307 	bic.w	r3, r3, #7
 800b3aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	4a15      	ldr	r2, [pc, #84]	@ (800b404 <prvHeapInit+0xb4>)
 800b3b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3b2:	4b14      	ldr	r3, [pc, #80]	@ (800b404 <prvHeapInit+0xb4>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3ba:	4b12      	ldr	r3, [pc, #72]	@ (800b404 <prvHeapInit+0xb4>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	1ad2      	subs	r2, r2, r3
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3d0:	4b0c      	ldr	r3, [pc, #48]	@ (800b404 <prvHeapInit+0xb4>)
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	4a0a      	ldr	r2, [pc, #40]	@ (800b408 <prvHeapInit+0xb8>)
 800b3de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	4a09      	ldr	r2, [pc, #36]	@ (800b40c <prvHeapInit+0xbc>)
 800b3e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3e8:	4b09      	ldr	r3, [pc, #36]	@ (800b410 <prvHeapInit+0xc0>)
 800b3ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b3ee:	601a      	str	r2, [r3, #0]
}
 800b3f0:	bf00      	nop
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	200416ac 	.word	0x200416ac
 800b400:	20042264 	.word	0x20042264
 800b404:	2004226c 	.word	0x2004226c
 800b408:	20042274 	.word	0x20042274
 800b40c:	20042270 	.word	0x20042270
 800b410:	20042280 	.word	0x20042280

0800b414 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b414:	b480      	push	{r7}
 800b416:	b085      	sub	sp, #20
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b41c:	4b28      	ldr	r3, [pc, #160]	@ (800b4c0 <prvInsertBlockIntoFreeList+0xac>)
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	e002      	b.n	800b428 <prvInsertBlockIntoFreeList+0x14>
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	60fb      	str	r3, [r7, #12]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d8f7      	bhi.n	800b422 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	4413      	add	r3, r2
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	429a      	cmp	r2, r3
 800b442:	d108      	bne.n	800b456 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	685a      	ldr	r2, [r3, #4]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	441a      	add	r2, r3
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	68ba      	ldr	r2, [r7, #8]
 800b460:	441a      	add	r2, r3
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	429a      	cmp	r2, r3
 800b468:	d118      	bne.n	800b49c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	4b15      	ldr	r3, [pc, #84]	@ (800b4c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	429a      	cmp	r2, r3
 800b474:	d00d      	beq.n	800b492 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	441a      	add	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	601a      	str	r2, [r3, #0]
 800b490:	e008      	b.n	800b4a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b492:	4b0c      	ldr	r3, [pc, #48]	@ (800b4c4 <prvInsertBlockIntoFreeList+0xb0>)
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	601a      	str	r2, [r3, #0]
 800b49a:	e003      	b.n	800b4a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d002      	beq.n	800b4b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4b2:	bf00      	nop
 800b4b4:	3714      	adds	r7, #20
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	20042264 	.word	0x20042264
 800b4c4:	2004226c 	.word	0x2004226c

0800b4c8 <memset>:
 800b4c8:	4402      	add	r2, r0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d100      	bne.n	800b4d2 <memset+0xa>
 800b4d0:	4770      	bx	lr
 800b4d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4d6:	e7f9      	b.n	800b4cc <memset+0x4>

0800b4d8 <_reclaim_reent>:
 800b4d8:	4b29      	ldr	r3, [pc, #164]	@ (800b580 <_reclaim_reent+0xa8>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4283      	cmp	r3, r0
 800b4de:	b570      	push	{r4, r5, r6, lr}
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	d04b      	beq.n	800b57c <_reclaim_reent+0xa4>
 800b4e4:	69c3      	ldr	r3, [r0, #28]
 800b4e6:	b1ab      	cbz	r3, 800b514 <_reclaim_reent+0x3c>
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	b16b      	cbz	r3, 800b508 <_reclaim_reent+0x30>
 800b4ec:	2500      	movs	r5, #0
 800b4ee:	69e3      	ldr	r3, [r4, #28]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	5959      	ldr	r1, [r3, r5]
 800b4f4:	2900      	cmp	r1, #0
 800b4f6:	d13b      	bne.n	800b570 <_reclaim_reent+0x98>
 800b4f8:	3504      	adds	r5, #4
 800b4fa:	2d80      	cmp	r5, #128	@ 0x80
 800b4fc:	d1f7      	bne.n	800b4ee <_reclaim_reent+0x16>
 800b4fe:	69e3      	ldr	r3, [r4, #28]
 800b500:	4620      	mov	r0, r4
 800b502:	68d9      	ldr	r1, [r3, #12]
 800b504:	f000 f872 	bl	800b5ec <_free_r>
 800b508:	69e3      	ldr	r3, [r4, #28]
 800b50a:	6819      	ldr	r1, [r3, #0]
 800b50c:	b111      	cbz	r1, 800b514 <_reclaim_reent+0x3c>
 800b50e:	4620      	mov	r0, r4
 800b510:	f000 f86c 	bl	800b5ec <_free_r>
 800b514:	6961      	ldr	r1, [r4, #20]
 800b516:	b111      	cbz	r1, 800b51e <_reclaim_reent+0x46>
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 f867 	bl	800b5ec <_free_r>
 800b51e:	69e1      	ldr	r1, [r4, #28]
 800b520:	b111      	cbz	r1, 800b528 <_reclaim_reent+0x50>
 800b522:	4620      	mov	r0, r4
 800b524:	f000 f862 	bl	800b5ec <_free_r>
 800b528:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b52a:	b111      	cbz	r1, 800b532 <_reclaim_reent+0x5a>
 800b52c:	4620      	mov	r0, r4
 800b52e:	f000 f85d 	bl	800b5ec <_free_r>
 800b532:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b534:	b111      	cbz	r1, 800b53c <_reclaim_reent+0x64>
 800b536:	4620      	mov	r0, r4
 800b538:	f000 f858 	bl	800b5ec <_free_r>
 800b53c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b53e:	b111      	cbz	r1, 800b546 <_reclaim_reent+0x6e>
 800b540:	4620      	mov	r0, r4
 800b542:	f000 f853 	bl	800b5ec <_free_r>
 800b546:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b548:	b111      	cbz	r1, 800b550 <_reclaim_reent+0x78>
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 f84e 	bl	800b5ec <_free_r>
 800b550:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b552:	b111      	cbz	r1, 800b55a <_reclaim_reent+0x82>
 800b554:	4620      	mov	r0, r4
 800b556:	f000 f849 	bl	800b5ec <_free_r>
 800b55a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b55c:	b111      	cbz	r1, 800b564 <_reclaim_reent+0x8c>
 800b55e:	4620      	mov	r0, r4
 800b560:	f000 f844 	bl	800b5ec <_free_r>
 800b564:	6a23      	ldr	r3, [r4, #32]
 800b566:	b14b      	cbz	r3, 800b57c <_reclaim_reent+0xa4>
 800b568:	4620      	mov	r0, r4
 800b56a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b56e:	4718      	bx	r3
 800b570:	680e      	ldr	r6, [r1, #0]
 800b572:	4620      	mov	r0, r4
 800b574:	f000 f83a 	bl	800b5ec <_free_r>
 800b578:	4631      	mov	r1, r6
 800b57a:	e7bb      	b.n	800b4f4 <_reclaim_reent+0x1c>
 800b57c:	bd70      	pop	{r4, r5, r6, pc}
 800b57e:	bf00      	nop
 800b580:	20040010 	.word	0x20040010

0800b584 <__libc_init_array>:
 800b584:	b570      	push	{r4, r5, r6, lr}
 800b586:	4d0d      	ldr	r5, [pc, #52]	@ (800b5bc <__libc_init_array+0x38>)
 800b588:	4c0d      	ldr	r4, [pc, #52]	@ (800b5c0 <__libc_init_array+0x3c>)
 800b58a:	1b64      	subs	r4, r4, r5
 800b58c:	10a4      	asrs	r4, r4, #2
 800b58e:	2600      	movs	r6, #0
 800b590:	42a6      	cmp	r6, r4
 800b592:	d109      	bne.n	800b5a8 <__libc_init_array+0x24>
 800b594:	4d0b      	ldr	r5, [pc, #44]	@ (800b5c4 <__libc_init_array+0x40>)
 800b596:	4c0c      	ldr	r4, [pc, #48]	@ (800b5c8 <__libc_init_array+0x44>)
 800b598:	f000 f87e 	bl	800b698 <_init>
 800b59c:	1b64      	subs	r4, r4, r5
 800b59e:	10a4      	asrs	r4, r4, #2
 800b5a0:	2600      	movs	r6, #0
 800b5a2:	42a6      	cmp	r6, r4
 800b5a4:	d105      	bne.n	800b5b2 <__libc_init_array+0x2e>
 800b5a6:	bd70      	pop	{r4, r5, r6, pc}
 800b5a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ac:	4798      	blx	r3
 800b5ae:	3601      	adds	r6, #1
 800b5b0:	e7ee      	b.n	800b590 <__libc_init_array+0xc>
 800b5b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5b6:	4798      	blx	r3
 800b5b8:	3601      	adds	r6, #1
 800b5ba:	e7f2      	b.n	800b5a2 <__libc_init_array+0x1e>
 800b5bc:	0800b880 	.word	0x0800b880
 800b5c0:	0800b880 	.word	0x0800b880
 800b5c4:	0800b880 	.word	0x0800b880
 800b5c8:	0800b884 	.word	0x0800b884

0800b5cc <__retarget_lock_acquire_recursive>:
 800b5cc:	4770      	bx	lr

0800b5ce <__retarget_lock_release_recursive>:
 800b5ce:	4770      	bx	lr

0800b5d0 <memcpy>:
 800b5d0:	440a      	add	r2, r1
 800b5d2:	4291      	cmp	r1, r2
 800b5d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5d8:	d100      	bne.n	800b5dc <memcpy+0xc>
 800b5da:	4770      	bx	lr
 800b5dc:	b510      	push	{r4, lr}
 800b5de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5e6:	4291      	cmp	r1, r2
 800b5e8:	d1f9      	bne.n	800b5de <memcpy+0xe>
 800b5ea:	bd10      	pop	{r4, pc}

0800b5ec <_free_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	2900      	cmp	r1, #0
 800b5f2:	d041      	beq.n	800b678 <_free_r+0x8c>
 800b5f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f8:	1f0c      	subs	r4, r1, #4
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	bfb8      	it	lt
 800b5fe:	18e4      	addlt	r4, r4, r3
 800b600:	f000 f83e 	bl	800b680 <__malloc_lock>
 800b604:	4a1d      	ldr	r2, [pc, #116]	@ (800b67c <_free_r+0x90>)
 800b606:	6813      	ldr	r3, [r2, #0]
 800b608:	b933      	cbnz	r3, 800b618 <_free_r+0x2c>
 800b60a:	6063      	str	r3, [r4, #4]
 800b60c:	6014      	str	r4, [r2, #0]
 800b60e:	4628      	mov	r0, r5
 800b610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b614:	f000 b83a 	b.w	800b68c <__malloc_unlock>
 800b618:	42a3      	cmp	r3, r4
 800b61a:	d908      	bls.n	800b62e <_free_r+0x42>
 800b61c:	6820      	ldr	r0, [r4, #0]
 800b61e:	1821      	adds	r1, r4, r0
 800b620:	428b      	cmp	r3, r1
 800b622:	bf01      	itttt	eq
 800b624:	6819      	ldreq	r1, [r3, #0]
 800b626:	685b      	ldreq	r3, [r3, #4]
 800b628:	1809      	addeq	r1, r1, r0
 800b62a:	6021      	streq	r1, [r4, #0]
 800b62c:	e7ed      	b.n	800b60a <_free_r+0x1e>
 800b62e:	461a      	mov	r2, r3
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	b10b      	cbz	r3, 800b638 <_free_r+0x4c>
 800b634:	42a3      	cmp	r3, r4
 800b636:	d9fa      	bls.n	800b62e <_free_r+0x42>
 800b638:	6811      	ldr	r1, [r2, #0]
 800b63a:	1850      	adds	r0, r2, r1
 800b63c:	42a0      	cmp	r0, r4
 800b63e:	d10b      	bne.n	800b658 <_free_r+0x6c>
 800b640:	6820      	ldr	r0, [r4, #0]
 800b642:	4401      	add	r1, r0
 800b644:	1850      	adds	r0, r2, r1
 800b646:	4283      	cmp	r3, r0
 800b648:	6011      	str	r1, [r2, #0]
 800b64a:	d1e0      	bne.n	800b60e <_free_r+0x22>
 800b64c:	6818      	ldr	r0, [r3, #0]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	6053      	str	r3, [r2, #4]
 800b652:	4408      	add	r0, r1
 800b654:	6010      	str	r0, [r2, #0]
 800b656:	e7da      	b.n	800b60e <_free_r+0x22>
 800b658:	d902      	bls.n	800b660 <_free_r+0x74>
 800b65a:	230c      	movs	r3, #12
 800b65c:	602b      	str	r3, [r5, #0]
 800b65e:	e7d6      	b.n	800b60e <_free_r+0x22>
 800b660:	6820      	ldr	r0, [r4, #0]
 800b662:	1821      	adds	r1, r4, r0
 800b664:	428b      	cmp	r3, r1
 800b666:	bf04      	itt	eq
 800b668:	6819      	ldreq	r1, [r3, #0]
 800b66a:	685b      	ldreq	r3, [r3, #4]
 800b66c:	6063      	str	r3, [r4, #4]
 800b66e:	bf04      	itt	eq
 800b670:	1809      	addeq	r1, r1, r0
 800b672:	6021      	streq	r1, [r4, #0]
 800b674:	6054      	str	r4, [r2, #4]
 800b676:	e7ca      	b.n	800b60e <_free_r+0x22>
 800b678:	bd38      	pop	{r3, r4, r5, pc}
 800b67a:	bf00      	nop
 800b67c:	200423c0 	.word	0x200423c0

0800b680 <__malloc_lock>:
 800b680:	4801      	ldr	r0, [pc, #4]	@ (800b688 <__malloc_lock+0x8>)
 800b682:	f7ff bfa3 	b.w	800b5cc <__retarget_lock_acquire_recursive>
 800b686:	bf00      	nop
 800b688:	200423bc 	.word	0x200423bc

0800b68c <__malloc_unlock>:
 800b68c:	4801      	ldr	r0, [pc, #4]	@ (800b694 <__malloc_unlock+0x8>)
 800b68e:	f7ff bf9e 	b.w	800b5ce <__retarget_lock_release_recursive>
 800b692:	bf00      	nop
 800b694:	200423bc 	.word	0x200423bc

0800b698 <_init>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	bf00      	nop
 800b69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69e:	bc08      	pop	{r3}
 800b6a0:	469e      	mov	lr, r3
 800b6a2:	4770      	bx	lr

0800b6a4 <_fini>:
 800b6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a6:	bf00      	nop
 800b6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6aa:	bc08      	pop	{r3}
 800b6ac:	469e      	mov	lr, r3
 800b6ae:	4770      	bx	lr
