
cv01_src.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac8  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006c84  08006c84  00007c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cf4  08006cf4  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006cf4  08006cf4  00007cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cfc  08006cfc  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cfc  08006cfc  00007cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d00  08006d00  00007d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20040000  08006d04  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  2004000c  08006d10  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200407a4  08006d10  000087a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bac8  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d1  00000000  00000000  00023b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  00026cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001243  00000000  00000000  00028448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4aa  00000000  00000000  0002968b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adfd  00000000  00000000  00055b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119175  00000000  00000000  00070932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00189aa7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065dc  00000000  00000000  00189aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001900c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2004000c 	.word	0x2004000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08006c6c 	.word	0x08006c6c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040010 	.word	0x20040010
 80001f8:	08006c6c 	.word	0x08006c6c

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fed9 	bl	80012a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f82a 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 fab8 	bl	8000a6c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004fc:	f000 f918 	bl	8000730 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000500:	f000 f964 	bl	80007cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000504:	f000 fa84 	bl	8000a10 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000508:	f000 fa4a 	bl	80009a0 <MX_TIM7_Init>
  MX_TIM2_Init();
 800050c:	f000 f9aa 	bl	8000864 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000510:	f000 f870 	bl	80005f4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000514:	f000 f9f4 	bl	8000900 <MX_TIM3_Init>
  MX_DAC1_Init();
 8000518:	f000 f8d6 	bl	80006c8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800051c:	4807      	ldr	r0, [pc, #28]	@ (800053c <main+0x50>)
 800051e:	f004 fe11 	bl	8005144 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000522:	4807      	ldr	r0, [pc, #28]	@ (8000540 <main+0x54>)
 8000524:	f001 fab2 	bl	8001a8c <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000528:	4806      	ldr	r0, [pc, #24]	@ (8000544 <main+0x58>)
 800052a:	f004 fe0b 	bl	8005144 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 800052e:	2100      	movs	r1, #0
 8000530:	4805      	ldr	r0, [pc, #20]	@ (8000548 <main+0x5c>)
 8000532:	f002 fc08 	bl	8002d46 <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000536:	bf00      	nop
 8000538:	e7fd      	b.n	8000536 <main+0x4a>
 800053a:	bf00      	nop
 800053c:	200401cc 	.word	0x200401cc
 8000540:	20040028 	.word	0x20040028
 8000544:	20040218 	.word	0x20040218
 8000548:	20040090 	.word	0x20040090

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b096      	sub	sp, #88	@ 0x58
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2244      	movs	r2, #68	@ 0x44
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f006 fb59 	bl	8006c12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800056e:	2000      	movs	r0, #0
 8000570:	f003 f8dc 	bl	800372c <HAL_PWREx_ControlVoltageScaling>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800057a:	f000 fba5 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800057e:	2322      	movs	r3, #34	@ 0x22
 8000580:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2340      	movs	r3, #64	@ 0x40
 800058e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2302      	movs	r3, #2
 8000596:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000598:	2302      	movs	r3, #2
 800059a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800059c:	231e      	movs	r3, #30
 800059e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 f97f 	bl	80038b4 <HAL_RCC_OscConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005bc:	f000 fb84 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c0:	230f      	movs	r3, #15
 80005c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	2303      	movs	r3, #3
 80005c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d6:	463b      	mov	r3, r7
 80005d8:	2105      	movs	r1, #5
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 fd84 	bl	80040e8 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005e6:	f000 fb6f 	bl	8000cc8 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3758      	adds	r7, #88	@ 0x58
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
 8000608:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b2c      	ldr	r3, [pc, #176]	@ (80006bc <MX_ADC1_Init+0xc8>)
 800060c:	4a2c      	ldr	r2, [pc, #176]	@ (80006c0 <MX_ADC1_Init+0xcc>)
 800060e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000610:	4b2a      	ldr	r3, [pc, #168]	@ (80006bc <MX_ADC1_Init+0xc8>)
 8000612:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000616:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000618:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <MX_ADC1_Init+0xc8>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061e:	4b27      	ldr	r3, [pc, #156]	@ (80006bc <MX_ADC1_Init+0xc8>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000624:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <MX_ADC1_Init+0xc8>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062a:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <MX_ADC1_Init+0xc8>)
 800062c:	2204      	movs	r2, #4
 800062e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000630:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <MX_ADC1_Init+0xc8>)
 8000632:	2200      	movs	r2, #0
 8000634:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000636:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <MX_ADC1_Init+0xc8>)
 8000638:	2200      	movs	r2, #0
 800063a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <MX_ADC1_Init+0xc8>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000642:	4b1e      	ldr	r3, [pc, #120]	@ (80006bc <MX_ADC1_Init+0xc8>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 800064a:	4b1c      	ldr	r3, [pc, #112]	@ (80006bc <MX_ADC1_Init+0xc8>)
 800064c:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000650:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_ADC1_Init+0xc8>)
 8000654:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_ADC1_Init+0xc8>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000662:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <MX_ADC1_Init+0xc8>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_ADC1_Init+0xc8>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000670:	4812      	ldr	r0, [pc, #72]	@ (80006bc <MX_ADC1_Init+0xc8>)
 8000672:	f001 f8c5 	bl	8001800 <HAL_ADC_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800067c:	f000 fb24 	bl	8000cc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_ADC1_Init+0xd0>)
 8000682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000684:	2306      	movs	r3, #6
 8000686:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000688:	2306      	movs	r3, #6
 800068a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068c:	237f      	movs	r3, #127	@ 0x7f
 800068e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000690:	2304      	movs	r3, #4
 8000692:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4807      	ldr	r0, [pc, #28]	@ (80006bc <MX_ADC1_Init+0xc8>)
 800069e:	f001 fc7f 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 80006a8:	f000 fb0e 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80006ac:	217f      	movs	r1, #127	@ 0x7f
 80006ae:	4803      	ldr	r0, [pc, #12]	@ (80006bc <MX_ADC1_Init+0xc8>)
 80006b0:	f002 f984 	bl	80029bc <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20040028 	.word	0x20040028
 80006c0:	50040000 	.word	0x50040000
 80006c4:	21800100 	.word	0x21800100

080006c8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	@ 0x28
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ce:	463b      	mov	r3, r7
 80006d0:	2228      	movs	r2, #40	@ 0x28
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f006 fa9c 	bl	8006c12 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_DAC1_Init+0x60>)
 80006dc:	4a13      	ldr	r2, [pc, #76]	@ (800072c <MX_DAC1_Init+0x64>)
 80006de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006e0:	4811      	ldr	r0, [pc, #68]	@ (8000728 <MX_DAC1_Init+0x60>)
 80006e2:	f002 fb0e 	bl	8002d02 <HAL_DAC_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006ec:	f000 faec 	bl	8000cc8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000708:	463b      	mov	r3, r7
 800070a:	2200      	movs	r2, #0
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <MX_DAC1_Init+0x60>)
 8000710:	f002 fb90 	bl	8002e34 <HAL_DAC_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800071a:	f000 fad5 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	3728      	adds	r7, #40	@ 0x28
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20040090 	.word	0x20040090
 800072c:	40007400 	.word	0x40007400

08000730 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000734:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 8000736:	4a23      	ldr	r2, [pc, #140]	@ (80007c4 <MX_LPUART1_UART_Init+0x94>)
 8000738:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 800073c:	4a22      	ldr	r2, [pc, #136]	@ (80007c8 <MX_LPUART1_UART_Init+0x98>)
 800073e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000740:	4b1f      	ldr	r3, [pc, #124]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 8000742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000746:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000778:	4811      	ldr	r0, [pc, #68]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 800077a:	f005 f931 	bl	80059e0 <HAL_UART_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000784:	f000 faa0 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	480d      	ldr	r0, [pc, #52]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 800078c:	f005 fecc 	bl	8006528 <HAL_UARTEx_SetTxFifoThreshold>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000796:	f000 fa97 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079a:	2100      	movs	r1, #0
 800079c:	4808      	ldr	r0, [pc, #32]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 800079e:	f005 ff01 	bl	80065a4 <HAL_UARTEx_SetRxFifoThreshold>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80007a8:	f000 fa8e 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_LPUART1_UART_Init+0x90>)
 80007ae:	f005 fe82 	bl	80064b6 <HAL_UARTEx_DisableFifoMode>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80007b8:	f000 fa86 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200400a4 	.word	0x200400a4
 80007c4:	40008000 	.word	0x40008000
 80007c8:	00033324 	.word	0x00033324

080007cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d0:	4b22      	ldr	r3, [pc, #136]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007d2:	4a23      	ldr	r2, [pc, #140]	@ (8000860 <MX_USART3_UART_Init+0x94>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007d6:	4b21      	ldr	r3, [pc, #132]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b19      	ldr	r3, [pc, #100]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b17      	ldr	r3, [pc, #92]	@ (800085c <MX_USART3_UART_Init+0x90>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000802:	4b16      	ldr	r3, [pc, #88]	@ (800085c <MX_USART3_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_USART3_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <MX_USART3_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000814:	4811      	ldr	r0, [pc, #68]	@ (800085c <MX_USART3_UART_Init+0x90>)
 8000816:	f005 f8e3 	bl	80059e0 <HAL_UART_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000820:	f000 fa52 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000824:	2100      	movs	r1, #0
 8000826:	480d      	ldr	r0, [pc, #52]	@ (800085c <MX_USART3_UART_Init+0x90>)
 8000828:	f005 fe7e 	bl	8006528 <HAL_UARTEx_SetTxFifoThreshold>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000832:	f000 fa49 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000836:	2100      	movs	r1, #0
 8000838:	4808      	ldr	r0, [pc, #32]	@ (800085c <MX_USART3_UART_Init+0x90>)
 800083a:	f005 feb3 	bl	80065a4 <HAL_UARTEx_SetRxFifoThreshold>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000844:	f000 fa40 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	@ (800085c <MX_USART3_UART_Init+0x90>)
 800084a:	f005 fe34 	bl	80064b6 <HAL_UARTEx_DisableFifoMode>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000854:	f000 fa38 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20040138 	.word	0x20040138
 8000860:	40004800 	.word	0x40004800

08000864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000882:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <MX_TIM2_Init+0x94>)
 8000884:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000888:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12-1;
 800088a:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_TIM2_Init+0x94>)
 800088c:	220b      	movs	r2, #11
 800088e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b19      	ldr	r3, [pc, #100]	@ (80008f8 <MX_TIM2_Init+0x94>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000000-1;
 8000896:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_TIM2_Init+0x94>)
 8000898:	4a18      	ldr	r2, [pc, #96]	@ (80008fc <MX_TIM2_Init+0x98>)
 800089a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089c:	4b16      	ldr	r3, [pc, #88]	@ (80008f8 <MX_TIM2_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008a2:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_TIM2_Init+0x94>)
 80008a4:	2280      	movs	r2, #128	@ 0x80
 80008a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a8:	4813      	ldr	r0, [pc, #76]	@ (80008f8 <MX_TIM2_Init+0x94>)
 80008aa:	f004 fbf3 	bl	8005094 <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008b4:	f000 fa08 	bl	8000cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	4619      	mov	r1, r3
 80008c4:	480c      	ldr	r0, [pc, #48]	@ (80008f8 <MX_TIM2_Init+0x94>)
 80008c6:	f004 fdb4 	bl	8005432 <HAL_TIM_ConfigClockSource>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008d0:	f000 f9fa 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008d4:	2320      	movs	r3, #32
 80008d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_TIM2_Init+0x94>)
 80008e2:	f004 ffd7 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f9ec 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200401cc 	.word	0x200401cc
 80008fc:	004c4b3f 	.word	0x004c4b3f

08000900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800091e:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <MX_TIM3_Init+0x98>)
 8000920:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <MX_TIM3_Init+0x9c>)
 8000922:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6000-1;
 8000924:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_TIM3_Init+0x98>)
 8000926:	f241 726f 	movw	r2, #5999	@ 0x176f
 800092a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_TIM3_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_TIM3_Init+0x98>)
 8000934:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000938:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_TIM3_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_TIM3_Init+0x98>)
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000946:	4814      	ldr	r0, [pc, #80]	@ (8000998 <MX_TIM3_Init+0x98>)
 8000948:	f004 fba4 	bl	8005094 <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000952:	f000 f9b9 	bl	8000cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	480d      	ldr	r0, [pc, #52]	@ (8000998 <MX_TIM3_Init+0x98>)
 8000964:	f004 fd65 	bl	8005432 <HAL_TIM_ConfigClockSource>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800096e:	f000 f9ab 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000972:	2320      	movs	r3, #32
 8000974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	@ (8000998 <MX_TIM3_Init+0x98>)
 8000980:	f004 ff88 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800098a:	f000 f99d 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20040218 	.word	0x20040218
 800099c:	40000400 	.word	0x40000400

080009a0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <MX_TIM7_Init+0x68>)
 80009b2:	4a16      	ldr	r2, [pc, #88]	@ (8000a0c <MX_TIM7_Init+0x6c>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6000-1;
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_TIM7_Init+0x68>)
 80009b8:	f241 726f 	movw	r2, #5999	@ 0x176f
 80009bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_TIM7_Init+0x68>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 80009c4:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <MX_TIM7_Init+0x68>)
 80009c6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009ca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_TIM7_Init+0x68>)
 80009ce:	2280      	movs	r2, #128	@ 0x80
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80009d2:	480d      	ldr	r0, [pc, #52]	@ (8000a08 <MX_TIM7_Init+0x68>)
 80009d4:	f004 fb5e 	bl	8005094 <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80009de:	f000 f973 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009e2:	2320      	movs	r3, #32
 80009e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <MX_TIM7_Init+0x68>)
 80009f0:	f004 ff50 	bl	8005894 <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80009fa:	f000 f965 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20040264 	.word	0x20040264
 8000a0c:	40001400 	.word	0x40001400

08000a10 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a14:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1e:	2206      	movs	r2, #6
 8000a20:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a40:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	f002 fd16 	bl	8003484 <HAL_PCD_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a5e:	f000 f933 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200402b0 	.word	0x200402b0

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	@ 0x30
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b55      	ldr	r3, [pc, #340]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a86:	4a54      	ldr	r2, [pc, #336]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a8e:	4b52      	ldr	r3, [pc, #328]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	61bb      	str	r3, [r7, #24]
 8000a98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	4b4f      	ldr	r3, [pc, #316]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a9e:	4a4e      	ldr	r2, [pc, #312]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aa6:	4b4c      	ldr	r3, [pc, #304]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b49      	ldr	r3, [pc, #292]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	4a48      	ldr	r2, [pc, #288]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000abe:	4b46      	ldr	r3, [pc, #280]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b43      	ldr	r3, [pc, #268]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	4a42      	ldr	r2, [pc, #264]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad6:	4b40      	ldr	r3, [pc, #256]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	4a3c      	ldr	r2, [pc, #240]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000ae8:	f043 0308 	orr.w	r3, r3, #8
 8000aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aee:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	f003 0308 	and.w	r3, r3, #8
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000afa:	4b37      	ldr	r3, [pc, #220]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	4a36      	ldr	r2, [pc, #216]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000b00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b06:	4b34      	ldr	r3, [pc, #208]	@ (8000bd8 <MX_GPIO_Init+0x16c>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000b12:	f002 febf 	bl	8003894 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8000b1c:	482f      	ldr	r0, [pc, #188]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000b1e:	f002 fc67 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2140      	movs	r1, #64	@ 0x40
 8000b26:	482e      	ldr	r0, [pc, #184]	@ (8000be0 <MX_GPIO_Init+0x174>)
 8000b28:	f002 fc62 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2180      	movs	r1, #128	@ 0x80
 8000b30:	482c      	ldr	r0, [pc, #176]	@ (8000be4 <MX_GPIO_Init+0x178>)
 8000b32:	f002 fc5d 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4825      	ldr	r0, [pc, #148]	@ (8000be4 <MX_GPIO_Init+0x178>)
 8000b4e:	f002 fabd 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b52:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481c      	ldr	r0, [pc, #112]	@ (8000bdc <MX_GPIO_Init+0x170>)
 8000b6c:	f002 faae 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b70:	2320      	movs	r3, #32
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4817      	ldr	r0, [pc, #92]	@ (8000be0 <MX_GPIO_Init+0x174>)
 8000b84:	f002 faa2 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b88:	2340      	movs	r3, #64	@ 0x40
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4810      	ldr	r0, [pc, #64]	@ (8000be0 <MX_GPIO_Init+0x174>)
 8000ba0:	f002 fa94 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000ba4:	2380      	movs	r3, #128	@ 0x80
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480a      	ldr	r0, [pc, #40]	@ (8000be4 <MX_GPIO_Init+0x178>)
 8000bbc:	f002 fa86 	bl	80030cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2028      	movs	r0, #40	@ 0x28
 8000bc6:	f002 f866 	bl	8002c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bca:	2028      	movs	r0, #40	@ 0x28
 8000bcc:	f002 f87f 	bl	8002cce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3730      	adds	r7, #48	@ 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	48000400 	.word	0x48000400
 8000be0:	48001800 	.word	0x48001800
 8000be4:	48000800 	.word	0x48000800

08000be8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	if (htim==&htim2){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a18      	ldr	r2, [pc, #96]	@ (8000c54 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d128      	bne.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x62>
//		HAL_ADC_Start(&hadc1);
//		HAL_ADC_PollForConversion(&hadc1, 10);
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, 2000);
 8000bf8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4815      	ldr	r0, [pc, #84]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000c02:	f002 f8f2 	bl	8002dea <HAL_DAC_SetValue>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000c06:	2180      	movs	r1, #128	@ 0x80
 8000c08:	4814      	ldr	r0, [pc, #80]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c0a:	f002 fc09 	bl	8003420 <HAL_GPIO_TogglePin>
		  if(Button1==0){
 8000c0e:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10a      	bne.n	8000c2c <HAL_TIM_PeriodElapsedCallback+0x44>
			  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000c16:	2180      	movs	r1, #128	@ 0x80
 8000c18:	4812      	ldr	r0, [pc, #72]	@ (8000c64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c1a:	f002 fc01 	bl	8003420 <HAL_GPIO_TogglePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c24:	480f      	ldr	r0, [pc, #60]	@ (8000c64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c26:	f002 fbe3 	bl	80033f0 <HAL_GPIO_WritePin>
 8000c2a:	e009      	b.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x58>
		  }else{
			  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c30:	480c      	ldr	r0, [pc, #48]	@ (8000c64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c32:	f002 fbf5 	bl	8003420 <HAL_GPIO_TogglePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	2180      	movs	r1, #128	@ 0x80
 8000c3a:	480a      	ldr	r0, [pc, #40]	@ (8000c64 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c3c:	f002 fbd8 	bl	80033f0 <HAL_GPIO_WritePin>
		  }
	ExecTime=TIM2->CNT;
 8000c40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c46:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c48:	6013      	str	r3, [r2, #0]
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200401cc 	.word	0x200401cc
 8000c58:	20040090 	.word	0x20040090
 8000c5c:	48000800 	.word	0x48000800
 8000c60:	20040794 	.word	0x20040794
 8000c64:	48000400 	.word	0x48000400
 8000c68:	20040798 	.word	0x20040798

08000c6c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin){
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c7c:	d10a      	bne.n	8000c94 <HAL_GPIO_EXTI_Callback+0x28>
		if(Button1==1){
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d103      	bne.n	8000c8e <HAL_GPIO_EXTI_Callback+0x22>
			Button1=0;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
		}else{
			Button1=1;
		}
	}
}
 8000c8c:	e002      	b.n	8000c94 <HAL_GPIO_EXTI_Callback+0x28>
			Button1=1;
 8000c8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <HAL_GPIO_EXTI_Callback+0x34>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20040794 	.word	0x20040794

08000ca4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	ADCData = HAL_ADC_GetValue(&hadc1);
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000cae:	f000 ffa1 	bl	8001bf4 <HAL_ADC_GetValue>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a03      	ldr	r2, [pc, #12]	@ (8000cc4 <HAL_ADC_ConvCpltCallback+0x20>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20040028 	.word	0x20040028
 8000cc4:	2004079c 	.word	0x2004079c

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <Error_Handler+0x8>

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cde:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf6:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0ae      	sub	sp, #184	@ 0xb8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	2294      	movs	r2, #148	@ 0x94
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f005 ff68 	bl	8006c12 <memset>
  if(hadc->Instance==ADC1)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a2b      	ldr	r2, [pc, #172]	@ (8000df4 <HAL_ADC_MspInit+0xd8>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d14f      	bne.n	8000dec <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d52:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 8000d62:	230c      	movs	r3, #12
 8000d64:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d66:	2302      	movs	r3, #2
 8000d68:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d78:	f107 0310 	add.w	r3, r7, #16
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f003 fc71 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000d88:	f7ff ff9e 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	4a19      	ldr	r2, [pc, #100]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000d92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d98:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da8:	4a13      	ldr	r2, [pc, #76]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db0:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <HAL_ADC_MspInit+0xdc>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dc2:	230b      	movs	r3, #11
 8000dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd8:	f002 f978 	bl	80030cc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2012      	movs	r0, #18
 8000de2:	f001 ff58 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000de6:	2012      	movs	r0, #18
 8000de8:	f001 ff71 	bl	8002cce <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000dec:	bf00      	nop
 8000dee:	37b8      	adds	r7, #184	@ 0xb8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	50040000 	.word	0x50040000
 8000df8:	40021000 	.word	0x40021000

08000dfc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	@ 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a15      	ldr	r2, [pc, #84]	@ (8000e70 <HAL_DAC_MspInit+0x74>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d124      	bne.n	8000e68 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e1e:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_DAC_MspInit+0x78>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e22:	4a14      	ldr	r2, [pc, #80]	@ (8000e74 <HAL_DAC_MspInit+0x78>)
 8000e24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000e28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e2a:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_DAC_MspInit+0x78>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b0f      	ldr	r3, [pc, #60]	@ (8000e74 <HAL_DAC_MspInit+0x78>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000e74 <HAL_DAC_MspInit+0x78>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <HAL_DAC_MspInit+0x78>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e4e:	2310      	movs	r3, #16
 8000e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e52:	2303      	movs	r3, #3
 8000e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e64:	f002 f932 	bl	80030cc <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	@ 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40007400 	.word	0x40007400
 8000e74:	40021000 	.word	0x40021000

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0b0      	sub	sp, #192	@ 0xc0
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	2294      	movs	r2, #148	@ 0x94
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f005 feba 	bl	8006c12 <memset>
  if(huart->Instance==LPUART1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a43      	ldr	r2, [pc, #268]	@ (8000fb0 <HAL_UART_MspInit+0x138>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d13e      	bne.n	8000f26 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ea8:	2320      	movs	r3, #32
 8000eaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	f107 0318 	add.w	r3, r7, #24
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 fbd5 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec0:	f7ff ff02 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ec8:	4a3a      	ldr	r2, [pc, #232]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ed0:	4b38      	ldr	r3, [pc, #224]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000edc:	4b35      	ldr	r3, [pc, #212]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	4a34      	ldr	r2, [pc, #208]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee8:	4b32      	ldr	r3, [pc, #200]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000ef4:	f002 fcce 	bl	8003894 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ef8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000efc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f12:	2308      	movs	r3, #8
 8000f14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f18:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4826      	ldr	r0, [pc, #152]	@ (8000fb8 <HAL_UART_MspInit+0x140>)
 8000f20:	f002 f8d4 	bl	80030cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f24:	e040      	b.n	8000fa8 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a24      	ldr	r2, [pc, #144]	@ (8000fbc <HAL_UART_MspInit+0x144>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d13b      	bne.n	8000fa8 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f30:	2304      	movs	r3, #4
 8000f32:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fb91 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000f48:	f7ff febe 	bl	8000cc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4c:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f50:	4a18      	ldr	r2, [pc, #96]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f56:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f58:	4b16      	ldr	r3, [pc, #88]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f64:	4b13      	ldr	r3, [pc, #76]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f68:	4a12      	ldr	r2, [pc, #72]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f70:	4b10      	ldr	r3, [pc, #64]	@ (8000fb4 <HAL_UART_MspInit+0x13c>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f96:	2307      	movs	r3, #7
 8000f98:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f9c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4807      	ldr	r0, [pc, #28]	@ (8000fc0 <HAL_UART_MspInit+0x148>)
 8000fa4:	f002 f892 	bl	80030cc <HAL_GPIO_Init>
}
 8000fa8:	bf00      	nop
 8000faa:	37c0      	adds	r7, #192	@ 0xc0
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40008000 	.word	0x40008000
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48001800 	.word	0x48001800
 8000fbc:	40004800 	.word	0x40004800
 8000fc0:	48000c00 	.word	0x48000c00

08000fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fd4:	d114      	bne.n	8001000 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fd6:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <HAL_TIM_Base_MspInit+0x9c>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fda:	4a21      	ldr	r2, [pc, #132]	@ (8001060 <HAL_TIM_Base_MspInit+0x9c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <HAL_TIM_Base_MspInit+0x9c>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	201c      	movs	r0, #28
 8000ff4:	f001 fe4f 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff8:	201c      	movs	r0, #28
 8000ffa:	f001 fe68 	bl	8002cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000ffe:	e02a      	b.n	8001056 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a17      	ldr	r2, [pc, #92]	@ (8001064 <HAL_TIM_Base_MspInit+0xa0>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d10c      	bne.n	8001024 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_TIM_Base_MspInit+0x9c>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100e:	4a14      	ldr	r2, [pc, #80]	@ (8001060 <HAL_TIM_Base_MspInit+0x9c>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6593      	str	r3, [r2, #88]	@ 0x58
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_TIM_Base_MspInit+0x9c>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
}
 8001022:	e018      	b.n	8001056 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0f      	ldr	r2, [pc, #60]	@ (8001068 <HAL_TIM_Base_MspInit+0xa4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d113      	bne.n	8001056 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_TIM_Base_MspInit+0x9c>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	4a0b      	ldr	r2, [pc, #44]	@ (8001060 <HAL_TIM_Base_MspInit+0x9c>)
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	6593      	str	r3, [r2, #88]	@ 0x58
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <HAL_TIM_Base_MspInit+0x9c>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103e:	f003 0320 	and.w	r3, r3, #32
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2037      	movs	r0, #55	@ 0x37
 800104c:	f001 fe23 	bl	8002c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001050:	2037      	movs	r0, #55	@ 0x37
 8001052:	f001 fe3c 	bl	8002cce <HAL_NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	40000400 	.word	0x40000400
 8001068:	40001400 	.word	0x40001400

0800106c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0b0      	sub	sp, #192	@ 0xc0
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	2294      	movs	r2, #148	@ 0x94
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f005 fdc0 	bl	8006c12 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800109a:	d16c      	bne.n	8001176 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800109c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	4618      	mov	r0, r3
 80010ae:	f003 fad9 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80010b8:	f7ff fe06 	bl	8000cc8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b30      	ldr	r3, [pc, #192]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010d4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80010d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010ee:	230a      	movs	r3, #10
 80010f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fe:	f001 ffe5 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001102:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800111a:	4619      	mov	r1, r3
 800111c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001120:	f001 ffd4 	bl	80030cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001128:	4a15      	ldr	r2, [pc, #84]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 800112a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800112e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 8001132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d114      	bne.n	8001172 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	4b0d      	ldr	r3, [pc, #52]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 800114e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001152:	6593      	str	r3, [r2, #88]	@ 0x58
 8001154:	4b0a      	ldr	r3, [pc, #40]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001158:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001160:	f002 fb88 	bl	8003874 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001168:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_PCD_MspInit+0x114>)
 800116a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800116e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001170:	e001      	b.n	8001176 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8001172:	f002 fb7f 	bl	8003874 <HAL_PWREx_EnableVddUSB>
}
 8001176:	bf00      	nop
 8001178:	37c0      	adds	r7, #192	@ 0xc0
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40021000 	.word	0x40021000

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <NMI_Handler+0x4>

0800118c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <MemManage_Handler+0x4>

0800119c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <UsageFault_Handler+0x4>

080011ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f8b9 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <ADC1_IRQHandler+0x10>)
 80011ea:	f000 fd10 	bl	8001c0e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20040028 	.word	0x20040028

080011f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <TIM2_IRQHandler+0x10>)
 80011fe:	f004 f811 	bl	8005224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200401cc 	.word	0x200401cc

0800120c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001210:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001214:	f002 f91e 	bl	8003454 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001220:	4802      	ldr	r0, [pc, #8]	@ (800122c <TIM7_IRQHandler+0x10>)
 8001222:	f003 ffff 	bl	8005224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20040264 	.word	0x20040264

08001230 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001234:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <SystemInit+0x20>)
 8001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123a:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <SystemInit+0x20>)
 800123c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001240:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001254:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800128c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001258:	f7ff ffea 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800125c:	480c      	ldr	r0, [pc, #48]	@ (8001290 <LoopForever+0x6>)
  ldr r1, =_edata
 800125e:	490d      	ldr	r1, [pc, #52]	@ (8001294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <LoopForever+0xe>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001274:	4c0a      	ldr	r4, [pc, #40]	@ (80012a0 <LoopForever+0x16>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001282:	f005 fccf 	bl	8006c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001286:	f7ff f931 	bl	80004ec <main>

0800128a <LoopForever>:

LoopForever:
    b LoopForever
 800128a:	e7fe      	b.n	800128a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800128c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001290:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001294:	2004000c 	.word	0x2004000c
  ldr r2, =_sidata
 8001298:	08006d04 	.word	0x08006d04
  ldr r2, =_sbss
 800129c:	2004000c 	.word	0x2004000c
  ldr r4, =_ebss
 80012a0:	200407a4 	.word	0x200407a4

080012a4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <CAN1_RX0_IRQHandler>

080012a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b0:	2003      	movs	r0, #3
 80012b2:	f001 fce5 	bl	8002c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b6:	2000      	movs	r0, #0
 80012b8:	f000 f80e 	bl	80012d8 <HAL_InitTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	e001      	b.n	80012cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c8:	f7ff fd04 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <HAL_InitTick+0x6c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d023      	beq.n	8001334 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012ec:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <HAL_InitTick+0x70>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <HAL_InitTick+0x6c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f001 fcf1 	bl	8002cea <HAL_SYSTICK_Config>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10f      	bne.n	800132e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d809      	bhi.n	8001328 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f001 fcbb 	bl	8002c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001320:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <HAL_InitTick+0x74>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e007      	b.n	8001338 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e004      	b.n	8001338 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e001      	b.n	8001338 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001338:	7bfb      	ldrb	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20040008 	.word	0x20040008
 8001348:	20040000 	.word	0x20040000
 800134c:	20040004 	.word	0x20040004

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20040008 	.word	0x20040008
 8001374:	200407a0 	.word	0x200407a0

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	@ (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200407a0 	.word	0x200407a0

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_Delay+0x44>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffde 	bl	8001378 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20040008 	.word	0x20040008

080013d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	609a      	str	r2, [r3, #8]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	609a      	str	r2, [r3, #8]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3360      	adds	r3, #96	@ 0x60
 8001452:	461a      	mov	r2, r3
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <LL_ADC_SetOffset+0x44>)
 8001462:	4013      	ands	r3, r2
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	4313      	orrs	r3, r2
 8001470:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001478:	bf00      	nop
 800147a:	371c      	adds	r7, #28
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	03fff000 	.word	0x03fff000

08001488 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3360      	adds	r3, #96	@ 0x60
 8001496:	461a      	mov	r2, r3
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3360      	adds	r3, #96	@ 0x60
 80014c4:	461a      	mov	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	431a      	orrs	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014de:	bf00      	nop
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	615a      	str	r2, [r3, #20]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001524:	2301      	movs	r3, #1
 8001526:	e000      	b.n	800152a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001536:	b480      	push	{r7}
 8001538:	b087      	sub	sp, #28
 800153a:	af00      	add	r7, sp, #0
 800153c:	60f8      	str	r0, [r7, #12]
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3330      	adds	r3, #48	@ 0x30
 8001546:	461a      	mov	r2, r3
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	0a1b      	lsrs	r3, r3, #8
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	4413      	add	r3, r2
 8001554:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	f003 031f 	and.w	r3, r3, #31
 8001560:	211f      	movs	r1, #31
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	401a      	ands	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	0e9b      	lsrs	r3, r3, #26
 800156e:	f003 011f 	and.w	r1, r3, #31
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	431a      	orrs	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001582:	bf00      	nop
 8001584:	371c      	adds	r7, #28
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3314      	adds	r3, #20
 80015c4:	461a      	mov	r2, r3
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	0e5b      	lsrs	r3, r3, #25
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	4413      	add	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	0d1b      	lsrs	r3, r3, #20
 80015dc:	f003 031f 	and.w	r3, r3, #31
 80015e0:	2107      	movs	r1, #7
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	401a      	ands	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	0d1b      	lsrs	r3, r3, #20
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	431a      	orrs	r2, r3
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015fe:	bf00      	nop
 8001600:	371c      	adds	r7, #28
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001624:	43db      	mvns	r3, r3
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0318 	and.w	r3, r3, #24
 800162e:	4908      	ldr	r1, [pc, #32]	@ (8001650 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001630:	40d9      	lsrs	r1, r3
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	400b      	ands	r3, r1
 8001636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800163a:	431a      	orrs	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	0007ffff 	.word	0x0007ffff

08001654 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001664:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6093      	str	r3, [r2, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800168c:	d101      	bne.n	8001692 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80016b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016dc:	d101      	bne.n	80016e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001700:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800172c:	f043 0202 	orr.w	r2, r3, #2
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <LL_ADC_IsEnabled+0x18>
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <LL_ADC_IsEnabled+0x1a>
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b02      	cmp	r3, #2
 8001778:	d101      	bne.n	800177e <LL_ADC_IsDisableOngoing+0x18>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <LL_ADC_IsDisableOngoing+0x1a>
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800179c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017a0:	f043 0204 	orr.w	r2, r3, #4
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d101      	bne.n	80017cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b08      	cmp	r3, #8
 80017ec:	d101      	bne.n	80017f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e129      	b.n	8001a6e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001824:	2b00      	cmp	r3, #0
 8001826:	d109      	bne.n	800183c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff fa77 	bl	8000d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff ff19 	bl	8001678 <LL_ADC_IsDeepPowerDownEnabled>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d004      	beq.n	8001856 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff feff 	bl	8001654 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff34 	bl	80016c8 <LL_ADC_IsInternalRegulatorEnabled>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d115      	bne.n	8001892 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff18 	bl	80016a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001870:	4b81      	ldr	r3, [pc, #516]	@ (8001a78 <HAL_ADC_Init+0x278>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	099b      	lsrs	r3, r3, #6
 8001876:	4a81      	ldr	r2, [pc, #516]	@ (8001a7c <HAL_ADC_Init+0x27c>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	099b      	lsrs	r3, r3, #6
 800187e:	3301      	adds	r3, #1
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001884:	e002      	b.n	800188c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3b01      	subs	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f9      	bne.n	8001886 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff16 	bl	80016c8 <LL_ADC_IsInternalRegulatorEnabled>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10d      	bne.n	80018be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a6:	f043 0210 	orr.w	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff76 	bl	80017b4 <LL_ADC_REG_IsConversionOngoing>
 80018c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 80c2 	bne.w	8001a5c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 80be 	bne.w	8001a5c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018e8:	f043 0202 	orr.w	r2, r3, #2
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff23 	bl	8001740 <LL_ADC_IsEnabled>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10b      	bne.n	8001918 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001900:	485f      	ldr	r0, [pc, #380]	@ (8001a80 <HAL_ADC_Init+0x280>)
 8001902:	f7ff ff1d 	bl	8001740 <LL_ADC_IsEnabled>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d105      	bne.n	8001918 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	4619      	mov	r1, r3
 8001912:	485c      	ldr	r0, [pc, #368]	@ (8001a84 <HAL_ADC_Init+0x284>)
 8001914:	f7ff fd60 	bl	80013d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7e5b      	ldrb	r3, [r3, #25]
 800191c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001922:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001928:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800192e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001936:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d106      	bne.n	8001954 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194a:	3b01      	subs	r3, #1
 800194c:	045b      	lsls	r3, r3, #17
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001958:	2b00      	cmp	r3, #0
 800195a:	d009      	beq.n	8001970 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001960:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001968:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	4b44      	ldr	r3, [pc, #272]	@ (8001a88 <HAL_ADC_Init+0x288>)
 8001978:	4013      	ands	r3, r2
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6812      	ldr	r2, [r2, #0]
 800197e:	69b9      	ldr	r1, [r7, #24]
 8001980:	430b      	orrs	r3, r1
 8001982:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff26 	bl	80017da <LL_ADC_INJ_IsConversionOngoing>
 800198e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d140      	bne.n	8001a18 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d13d      	bne.n	8001a18 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7e1b      	ldrb	r3, [r3, #24]
 80019a4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019a6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019ae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019be:	f023 0306 	bic.w	r3, r3, #6
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	69b9      	ldr	r1, [r7, #24]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d118      	bne.n	8001a08 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019ec:	4311      	orrs	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019f2:	4311      	orrs	r1, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019f8:	430a      	orrs	r2, r1
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	611a      	str	r2, [r3, #16]
 8001a06:	e007      	b.n	8001a18 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d10c      	bne.n	8001a3a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f023 010f 	bic.w	r1, r3, #15
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	1e5a      	subs	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a38:	e007      	b.n	8001a4a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 020f 	bic.w	r2, r2, #15
 8001a48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4e:	f023 0303 	bic.w	r3, r3, #3
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a5a:	e007      	b.n	8001a6c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a60:	f043 0210 	orr.w	r2, r3, #16
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3720      	adds	r7, #32
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20040000 	.word	0x20040000
 8001a7c:	053e2d63 	.word	0x053e2d63
 8001a80:	50040000 	.word	0x50040000
 8001a84:	50040300 	.word	0x50040300
 8001a88:	fff0c007 	.word	0xfff0c007

08001a8c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fe8b 	bl	80017b4 <LL_ADC_REG_IsConversionOngoing>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f040 80a0 	bne.w	8001be6 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_Start_IT+0x28>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e09b      	b.n	8001bec <HAL_ADC_Start_IT+0x160>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 fe6b 	bl	8002798 <ADC_Enable>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f040 8087 	bne.w	8001bdc <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af2:	f023 0206 	bic.w	r2, r3, #6
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001afa:	e002      	b.n	8001b02 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	221c      	movs	r2, #28
 8001b08:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 021c 	bic.w	r2, r2, #28
 8001b20:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d108      	bne.n	8001b3c <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0208 	orr.w	r2, r2, #8
 8001b38:	605a      	str	r2, [r3, #4]
          break;
 8001b3a:	e008      	b.n	8001b4e <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0204 	orr.w	r2, r2, #4
 8001b4a:	605a      	str	r2, [r3, #4]
          break;
 8001b4c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d107      	bne.n	8001b66 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0210 	orr.w	r2, r2, #16
 8001b64:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d02d      	beq.n	8001bd0 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d110      	bne.n	8001bae <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0220 	bic.w	r2, r2, #32
 8001b9a:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001baa:	605a      	str	r2, [r3, #4]
            break;
 8001bac:	e010      	b.n	8001bd0 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001bbc:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 0220 	orr.w	r2, r2, #32
 8001bcc:	605a      	str	r2, [r3, #4]
            break;
 8001bce:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fdd9 	bl	800178c <LL_ADC_REG_StartConversion>
 8001bda:	e006      	b.n	8001bea <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8001be4:	e001      	b.n	8001bea <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001be6:	2302      	movs	r3, #2
 8001be8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b088      	sub	sp, #32
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d017      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x56>
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d012      	beq.n	8001c64 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 ff38 	bl	8002acc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2202      	movs	r2, #2
 8001c62:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <HAL_ADC_IRQHandler+0x6a>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d05e      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d059      	beq.n	8001d40 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c9c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fc31 	bl	8001510 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d03e      	beq.n	8001d32 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d135      	bne.n	8001d32 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d12e      	bne.n	8001d32 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fd6b 	bl	80017b4 <LL_ADC_REG_IsConversionOngoing>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d11a      	bne.n	8001d1a <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 020c 	bic.w	r2, r2, #12
 8001cf2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d112      	bne.n	8001d32 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d18:	e00b      	b.n	8001d32 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	f043 0210 	orr.w	r2, r3, #16
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2a:	f043 0201 	orr.w	r2, r3, #1
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7fe ffb6 	bl	8000ca4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	220c      	movs	r2, #12
 8001d3e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d004      	beq.n	8001d54 <HAL_ADC_IRQHandler+0x146>
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d072      	beq.n	8001e44 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d06d      	beq.n	8001e44 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d105      	bne.n	8001d80 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d78:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fc02 	bl	800158e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001d8a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fbbd 	bl	8001510 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d96:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d047      	beq.n	8001e36 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0x1b2>
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d03f      	beq.n	8001e36 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d13a      	bne.n	8001e36 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dca:	2b40      	cmp	r3, #64	@ 0x40
 8001dcc:	d133      	bne.n	8001e36 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d12e      	bne.n	8001e36 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fcfc 	bl	80017da <LL_ADC_INJ_IsConversionOngoing>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d11a      	bne.n	8001e1e <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001df6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d112      	bne.n	8001e36 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e1c:	e00b      	b.n	8001e36 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	f043 0201 	orr.w	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fe20 	bl	8002a7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2260      	movs	r2, #96	@ 0x60
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d011      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x264>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00c      	beq.n	8001e72 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f886 	bl	8001f76 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2280      	movs	r2, #128	@ 0x80
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d012      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x294>
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00d      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fe06 	bl	8002aa4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d012      	beq.n	8001ed2 <HAL_ADC_IRQHandler+0x2c4>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 fdf8 	bl	8002ab8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02a      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x324>
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d025      	beq.n	8001f32 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e008      	b.n	8001f06 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d10e      	bne.n	8001f2a <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f10:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1c:	f043 0202 	orr.w	r2, r3, #2
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f830 	bl	8001f8a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2210      	movs	r2, #16
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d018      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x360>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d013      	beq.n	8001f6e <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f56:	f043 0208 	orr.w	r2, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f66:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fd91 	bl	8002a90 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001f6e:	bf00      	nop
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b0b6      	sub	sp, #216	@ 0xd8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x22>
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	e3d5      	b.n	800276e <HAL_ADC_ConfigChannel+0x7ce>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fbf0 	bl	80017b4 <LL_ADC_REG_IsConversionOngoing>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f040 83ba 	bne.w	8002750 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b05      	cmp	r3, #5
 8001fea:	d824      	bhi.n	8002036 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	3b02      	subs	r3, #2
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d81b      	bhi.n	800202e <HAL_ADC_ConfigChannel+0x8e>
 8001ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ffc <HAL_ADC_ConfigChannel+0x5c>)
 8001ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffc:	0800200d 	.word	0x0800200d
 8002000:	08002015 	.word	0x08002015
 8002004:	0800201d 	.word	0x0800201d
 8002008:	08002025 	.word	0x08002025
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800200c:	230c      	movs	r3, #12
 800200e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002012:	e010      	b.n	8002036 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002014:	2312      	movs	r3, #18
 8002016:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800201a:	e00c      	b.n	8002036 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800201c:	2318      	movs	r3, #24
 800201e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002022:	e008      	b.n	8002036 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002024:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002028:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800202c:	e003      	b.n	8002036 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800202e:	2306      	movs	r3, #6
 8002030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002034:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002044:	f7ff fa77 	bl	8001536 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fbb1 	bl	80017b4 <LL_ADC_REG_IsConversionOngoing>
 8002052:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fbbd 	bl	80017da <LL_ADC_INJ_IsConversionOngoing>
 8002060:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002064:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002068:	2b00      	cmp	r3, #0
 800206a:	f040 81bf 	bne.w	80023ec <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800206e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 81ba 	bne.w	80023ec <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002080:	d10f      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2200      	movs	r2, #0
 800208c:	4619      	mov	r1, r3
 800208e:	f7ff fa91 	bl	80015b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fa25 	bl	80014ea <LL_ADC_SetSamplingTimeCommonConfig>
 80020a0:	e00e      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6819      	ldr	r1, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	461a      	mov	r2, r3
 80020b0:	f7ff fa80 	bl	80015b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fa15 	bl	80014ea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	695a      	ldr	r2, [r3, #20]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	08db      	lsrs	r3, r3, #3
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d00a      	beq.n	80020f8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6919      	ldr	r1, [r3, #16]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020f2:	f7ff f9a5 	bl	8001440 <LL_ADC_SetOffset>
 80020f6:	e179      	b.n	80023ec <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff f9c2 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8002104:	4603      	mov	r3, r0
 8002106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10a      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x184>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff f9b7 	bl	8001488 <LL_ADC_GetOffsetChannel>
 800211a:	4603      	mov	r3, r0
 800211c:	0e9b      	lsrs	r3, r3, #26
 800211e:	f003 021f 	and.w	r2, r3, #31
 8002122:	e01e      	b.n	8002162 <HAL_ADC_ConfigChannel+0x1c2>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f9ac 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800213a:	fa93 f3a3 	rbit	r3, r3
 800213e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002142:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002146:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800214a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002152:	2320      	movs	r3, #32
 8002154:	e004      	b.n	8002160 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002156:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_ADC_ConfigChannel+0x1da>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	0e9b      	lsrs	r3, r3, #26
 8002174:	f003 031f 	and.w	r3, r3, #31
 8002178:	e018      	b.n	80021ac <HAL_ADC_ConfigChannel+0x20c>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002182:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002186:	fa93 f3a3 	rbit	r3, r3
 800218a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800218e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002192:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002196:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800219e:	2320      	movs	r3, #32
 80021a0:	e004      	b.n	80021ac <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80021a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d106      	bne.n	80021be <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f97b 	bl	80014b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2101      	movs	r1, #1
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f95f 	bl	8001488 <LL_ADC_GetOffsetChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x24a>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f954 	bl	8001488 <LL_ADC_GetOffsetChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	0e9b      	lsrs	r3, r3, #26
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	e01e      	b.n	8002228 <HAL_ADC_ConfigChannel+0x288>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff f949 	bl	8001488 <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002208:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800220c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002210:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e004      	b.n	8002226 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800221c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x2a0>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e9b      	lsrs	r3, r3, #26
 800223a:	f003 031f 	and.w	r3, r3, #31
 800223e:	e018      	b.n	8002272 <HAL_ADC_ConfigChannel+0x2d2>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800224c:	fa93 f3a3 	rbit	r3, r3
 8002250:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002254:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800225c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e004      	b.n	8002272 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002268:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002272:	429a      	cmp	r2, r3
 8002274:	d106      	bne.n	8002284 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff f918 	bl	80014b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2102      	movs	r1, #2
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f8fc 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10a      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x310>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2102      	movs	r1, #2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff f8f1 	bl	8001488 <LL_ADC_GetOffsetChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	f003 021f 	and.w	r2, r3, #31
 80022ae:	e01e      	b.n	80022ee <HAL_ADC_ConfigChannel+0x34e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2102      	movs	r1, #2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f8e6 	bl	8001488 <LL_ADC_GetOffsetChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80022ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80022d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80022de:	2320      	movs	r3, #32
 80022e0:	e004      	b.n	80022ec <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80022e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x366>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	e014      	b.n	8002330 <HAL_ADC_ConfigChannel+0x390>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800230e:	fa93 f3a3 	rbit	r3, r3
 8002312:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002316:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800231a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002322:	2320      	movs	r3, #32
 8002324:	e004      	b.n	8002330 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002326:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002330:	429a      	cmp	r2, r3
 8002332:	d106      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2200      	movs	r2, #0
 800233a:	2102      	movs	r1, #2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f8b9 	bl	80014b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2103      	movs	r1, #3
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff f89d 	bl	8001488 <LL_ADC_GetOffsetChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <HAL_ADC_ConfigChannel+0x3ce>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2103      	movs	r1, #3
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f892 	bl	8001488 <LL_ADC_GetOffsetChannel>
 8002364:	4603      	mov	r3, r0
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	f003 021f 	and.w	r2, r3, #31
 800236c:	e017      	b.n	800239e <HAL_ADC_ConfigChannel+0x3fe>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2103      	movs	r1, #3
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff f887 	bl	8001488 <LL_ADC_GetOffsetChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002388:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800238a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002390:	2320      	movs	r3, #32
 8002392:	e003      	b.n	800239c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002394:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d105      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x416>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	0e9b      	lsrs	r3, r3, #26
 80023b0:	f003 031f 	and.w	r3, r3, #31
 80023b4:	e011      	b.n	80023da <HAL_ADC_ConfigChannel+0x43a>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023be:	fa93 f3a3 	rbit	r3, r3
 80023c2:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80023c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80023c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80023ce:	2320      	movs	r3, #32
 80023d0:	e003      	b.n	80023da <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80023d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023d4:	fab3 f383 	clz	r3, r3
 80023d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023da:	429a      	cmp	r2, r3
 80023dc:	d106      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2200      	movs	r2, #0
 80023e4:	2103      	movs	r1, #3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff f864 	bl	80014b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff f9a5 	bl	8001740 <LL_ADC_IsEnabled>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f040 813f 	bne.w	800267c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6819      	ldr	r1, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	461a      	mov	r2, r3
 800240c:	f7ff f8fe 	bl	800160c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4a8e      	ldr	r2, [pc, #568]	@ (8002650 <HAL_ADC_ConfigChannel+0x6b0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	f040 8130 	bne.w	800267c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10b      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x4a4>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0e9b      	lsrs	r3, r3, #26
 8002432:	3301      	adds	r3, #1
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2b09      	cmp	r3, #9
 800243a:	bf94      	ite	ls
 800243c:	2301      	movls	r3, #1
 800243e:	2300      	movhi	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e019      	b.n	8002478 <HAL_ADC_ConfigChannel+0x4d8>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002454:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800245c:	2320      	movs	r3, #32
 800245e:	e003      	b.n	8002468 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3301      	adds	r3, #1
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	2b09      	cmp	r3, #9
 8002470:	bf94      	ite	ls
 8002472:	2301      	movls	r3, #1
 8002474:	2300      	movhi	r3, #0
 8002476:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002478:	2b00      	cmp	r3, #0
 800247a:	d079      	beq.n	8002570 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x4f8>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	3301      	adds	r3, #1
 8002490:	069b      	lsls	r3, r3, #26
 8002492:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002496:	e015      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x524>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80024a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024a8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80024aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e003      	b.n	80024bc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80024b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	069b      	lsls	r3, r3, #26
 80024c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d109      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x544>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	3301      	adds	r3, #1
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2101      	movs	r1, #1
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	e017      	b.n	8002514 <HAL_ADC_ConfigChannel+0x574>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80024f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024f4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80024f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e003      	b.n	8002508 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <HAL_ADC_ConfigChannel+0x59a>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	3301      	adds	r3, #1
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	051b      	lsls	r3, r3, #20
 8002538:	e018      	b.n	800256c <HAL_ADC_ConfigChannel+0x5cc>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800254c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002552:	2320      	movs	r3, #32
 8002554:	e003      	b.n	800255e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	3301      	adds	r3, #1
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800256c:	430b      	orrs	r3, r1
 800256e:	e080      	b.n	8002672 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_ADC_ConfigChannel+0x5ec>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	3301      	adds	r3, #1
 8002584:	069b      	lsls	r3, r3, #26
 8002586:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800258a:	e015      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x618>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800259e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e003      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80025a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	069b      	lsls	r3, r3, #26
 80025b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x638>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	3301      	adds	r3, #1
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2101      	movs	r1, #1
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	e017      	b.n	8002608 <HAL_ADC_ConfigChannel+0x668>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	61bb      	str	r3, [r7, #24]
  return result;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2101      	movs	r1, #1
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	ea42 0103 	orr.w	r1, r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10d      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x694>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	3b1e      	subs	r3, #30
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002632:	e01d      	b.n	8002670 <HAL_ADC_ConfigChannel+0x6d0>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	60fb      	str	r3, [r7, #12]
  return result;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d103      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e005      	b.n	800265c <HAL_ADC_ConfigChannel+0x6bc>
 8002650:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	f003 021f 	and.w	r2, r3, #31
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	3b1e      	subs	r3, #30
 800266a:	051b      	lsls	r3, r3, #20
 800266c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002670:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe ff9c 	bl	80015b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b3d      	ldr	r3, [pc, #244]	@ (8002778 <HAL_ADC_ConfigChannel+0x7d8>)
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d06c      	beq.n	8002762 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002688:	483c      	ldr	r0, [pc, #240]	@ (800277c <HAL_ADC_ConfigChannel+0x7dc>)
 800268a:	f7fe fecb 	bl	8001424 <LL_ADC_GetCommonPathInternalCh>
 800268e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a3a      	ldr	r2, [pc, #232]	@ (8002780 <HAL_ADC_ConfigChannel+0x7e0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d127      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800269c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d121      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a35      	ldr	r2, [pc, #212]	@ (8002784 <HAL_ADC_ConfigChannel+0x7e4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d157      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026ba:	4619      	mov	r1, r3
 80026bc:	482f      	ldr	r0, [pc, #188]	@ (800277c <HAL_ADC_ConfigChannel+0x7dc>)
 80026be:	f7fe fe9e 	bl	80013fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026c2:	4b31      	ldr	r3, [pc, #196]	@ (8002788 <HAL_ADC_ConfigChannel+0x7e8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	099b      	lsrs	r3, r3, #6
 80026c8:	4a30      	ldr	r2, [pc, #192]	@ (800278c <HAL_ADC_ConfigChannel+0x7ec>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	099b      	lsrs	r3, r3, #6
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026dc:	e002      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f9      	bne.n	80026de <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ea:	e03a      	b.n	8002762 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a27      	ldr	r2, [pc, #156]	@ (8002790 <HAL_ADC_ConfigChannel+0x7f0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d113      	bne.n	800271e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10d      	bne.n	800271e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1f      	ldr	r2, [pc, #124]	@ (8002784 <HAL_ADC_ConfigChannel+0x7e4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d12a      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800270c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002710:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002714:	4619      	mov	r1, r3
 8002716:	4819      	ldr	r0, [pc, #100]	@ (800277c <HAL_ADC_ConfigChannel+0x7dc>)
 8002718:	f7fe fe71 	bl	80013fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800271c:	e021      	b.n	8002762 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1c      	ldr	r2, [pc, #112]	@ (8002794 <HAL_ADC_ConfigChannel+0x7f4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d11c      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800272c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d116      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a12      	ldr	r2, [pc, #72]	@ (8002784 <HAL_ADC_ConfigChannel+0x7e4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d111      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800273e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002742:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002746:	4619      	mov	r1, r3
 8002748:	480c      	ldr	r0, [pc, #48]	@ (800277c <HAL_ADC_ConfigChannel+0x7dc>)
 800274a:	f7fe fe58 	bl	80013fe <LL_ADC_SetCommonPathInternalCh>
 800274e:	e008      	b.n	8002762 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002754:	f043 0220 	orr.w	r2, r3, #32
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800276a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800276e:	4618      	mov	r0, r3
 8002770:	37d8      	adds	r7, #216	@ 0xd8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	80080000 	.word	0x80080000
 800277c:	50040300 	.word	0x50040300
 8002780:	c7520000 	.word	0xc7520000
 8002784:	50040000 	.word	0x50040000
 8002788:	20040000 	.word	0x20040000
 800278c:	053e2d63 	.word	0x053e2d63
 8002790:	cb840000 	.word	0xcb840000
 8002794:	80000001 	.word	0x80000001

08002798 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe ffc9 	bl	8001740 <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d169      	bne.n	8002888 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	4b36      	ldr	r3, [pc, #216]	@ (8002894 <ADC_Enable+0xfc>)
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c6:	f043 0210 	orr.w	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e055      	b.n	800288a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe ff84 	bl	80016f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027e8:	482b      	ldr	r0, [pc, #172]	@ (8002898 <ADC_Enable+0x100>)
 80027ea:	f7fe fe1b 	bl	8001424 <LL_ADC_GetCommonPathInternalCh>
 80027ee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f8:	4b28      	ldr	r3, [pc, #160]	@ (800289c <ADC_Enable+0x104>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	4a28      	ldr	r2, [pc, #160]	@ (80028a0 <ADC_Enable+0x108>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002812:	e002      	b.n	800281a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3b01      	subs	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f9      	bne.n	8002814 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002820:	f7fe fdaa 	bl	8001378 <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002826:	e028      	b.n	800287a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe ff87 	bl	8001740 <LL_ADC_IsEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe ff57 	bl	80016f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002842:	f7fe fd99 	bl	8001378 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d914      	bls.n	800287a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b01      	cmp	r3, #1
 800285c:	d00d      	beq.n	800287a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002862:	f043 0210 	orr.w	r2, r3, #16
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e007      	b.n	800288a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d1cf      	bne.n	8002828 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	8000003f 	.word	0x8000003f
 8002898:	50040300 	.word	0x50040300
 800289c:	20040000 	.word	0x20040000
 80028a0:	053e2d63 	.word	0x053e2d63

080028a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe ff58 	bl	8001766 <LL_ADC_IsDisableOngoing>
 80028b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe ff3f 	bl	8001740 <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d047      	beq.n	8002958 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d144      	bne.n	8002958 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f003 030d 	and.w	r3, r3, #13
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10c      	bne.n	80028f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe ff19 	bl	8001718 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2203      	movs	r2, #3
 80028ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ee:	f7fe fd43 	bl	8001378 <HAL_GetTick>
 80028f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028f4:	e029      	b.n	800294a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e023      	b.n	800295a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002912:	f7fe fd31 	bl	8001378 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d914      	bls.n	800294a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002932:	f043 0210 	orr.w	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e007      	b.n	800295a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1dc      	bne.n	8002912 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <LL_ADC_StartCalibration>:
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002974:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800297e:	4313      	orrs	r3, r2
 8002980:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <LL_ADC_IsCalibrationOnGoing>:
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80029a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80029a8:	d101      	bne.n	80029ae <LL_ADC_IsCalibrationOnGoing+0x1a>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e04d      	b.n	8002a74 <HAL_ADCEx_Calibration_Start+0xb8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff5f 	bl	80028a4 <ADC_Disable>
 80029e6:	4603      	mov	r3, r0
 80029e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d136      	bne.n	8002a5e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029f8:	f023 0302 	bic.w	r3, r3, #2
 80029fc:	f043 0202 	orr.w	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	659a      	str	r2, [r3, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6839      	ldr	r1, [r7, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff ffa9 	bl	8002962 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a10:	e014      	b.n	8002a3c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	3301      	adds	r3, #1
 8002a16:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8002a1e:	d30d      	bcc.n	8002a3c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a24:	f023 0312 	bic.w	r3, r3, #18
 8002a28:	f043 0210 	orr.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	659a      	str	r2, [r3, #88]	@ 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e01b      	b.n	8002a74 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ffa7 	bl	8002994 <LL_ADC_IsCalibrationOnGoing>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e2      	bne.n	8002a12 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a50:	f023 0303 	bic.w	r3, r3, #3
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a5c:	e005      	b.n	8002a6a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a62:	f043 0210 	orr.w	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b24 <__NVIC_SetPriorityGrouping+0x44>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002afc:	4013      	ands	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b12:	4a04      	ldr	r2, [pc, #16]	@ (8002b24 <__NVIC_SetPriorityGrouping+0x44>)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	60d3      	str	r3, [r2, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000ed00 	.word	0xe000ed00

08002b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b2c:	4b04      	ldr	r3, [pc, #16]	@ (8002b40 <__NVIC_GetPriorityGrouping+0x18>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	f003 0307 	and.w	r3, r3, #7
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	db0b      	blt.n	8002b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	f003 021f 	and.w	r2, r3, #31
 8002b5c:	4907      	ldr	r1, [pc, #28]	@ (8002b7c <__NVIC_EnableIRQ+0x38>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	2001      	movs	r0, #1
 8002b66:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	e000e100 	.word	0xe000e100

08002b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	db0a      	blt.n	8002baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	490c      	ldr	r1, [pc, #48]	@ (8002bcc <__NVIC_SetPriority+0x4c>)
 8002b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba8:	e00a      	b.n	8002bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	4908      	ldr	r1, [pc, #32]	@ (8002bd0 <__NVIC_SetPriority+0x50>)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	3b04      	subs	r3, #4
 8002bb8:	0112      	lsls	r2, r2, #4
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	440b      	add	r3, r1
 8002bbe:	761a      	strb	r2, [r3, #24]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	e000e100 	.word	0xe000e100
 8002bd0:	e000ed00 	.word	0xe000ed00

08002bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	@ 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f1c3 0307 	rsb	r3, r3, #7
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	bf28      	it	cs
 8002bf2:	2304      	movcs	r3, #4
 8002bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	2b06      	cmp	r3, #6
 8002bfc:	d902      	bls.n	8002c04 <NVIC_EncodePriority+0x30>
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3b03      	subs	r3, #3
 8002c02:	e000      	b.n	8002c06 <NVIC_EncodePriority+0x32>
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	401a      	ands	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	43d9      	mvns	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	4313      	orrs	r3, r2
         );
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3724      	adds	r7, #36	@ 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c4c:	d301      	bcc.n	8002c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00f      	b.n	8002c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <SysTick_Config+0x40>)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5a:	210f      	movs	r1, #15
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c60:	f7ff ff8e 	bl	8002b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c64:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <SysTick_Config+0x40>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6a:	4b04      	ldr	r3, [pc, #16]	@ (8002c7c <SysTick_Config+0x40>)
 8002c6c:	2207      	movs	r2, #7
 8002c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	e000e010 	.word	0xe000e010

08002c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff ff29 	bl	8002ae0 <__NVIC_SetPriorityGrouping>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b086      	sub	sp, #24
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
 8002ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca8:	f7ff ff3e 	bl	8002b28 <__NVIC_GetPriorityGrouping>
 8002cac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	6978      	ldr	r0, [r7, #20]
 8002cb4:	f7ff ff8e 	bl	8002bd4 <NVIC_EncodePriority>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff5d 	bl	8002b80 <__NVIC_SetPriority>
}
 8002cc6:	bf00      	nop
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff31 	bl	8002b44 <__NVIC_EnableIRQ>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ffa2 	bl	8002c3c <SysTick_Config>
 8002cf8:	4603      	mov	r3, r0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e014      	b.n	8002d3e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	791b      	ldrb	r3, [r3, #4]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7fe f869 	bl	8000dfc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	795b      	ldrb	r3, [r3, #5]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_DAC_Start+0x16>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e040      	b.n	8002dde <HAL_DAC_Start+0x98>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6819      	ldr	r1, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2201      	movs	r2, #1
 8002d76:	409a      	lsls	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d11d      	bne.n	8002dd0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	e014      	b.n	8002dd0 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2102      	movs	r1, #2
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d107      	bne.n	8002dd0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0202 	orr.w	r2, r2, #2
 8002dce:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b087      	sub	sp, #28
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d105      	bne.n	8002e14 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3308      	adds	r3, #8
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	e004      	b.n	8002e1e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	3314      	adds	r3, #20
 8002e1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	461a      	mov	r2, r3
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	371c      	adds	r7, #28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	795b      	ldrb	r3, [r3, #5]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_DAC_ConfigChannel+0x1c>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e137      	b.n	80030c0 <HAL_DAC_ConfigChannel+0x28c>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2202      	movs	r2, #2
 8002e5a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	f040 8081 	bne.w	8002f68 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e66:	f7fe fa87 	bl	8001378 <HAL_GetTick>
 8002e6a:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d140      	bne.n	8002ef4 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e72:	e018      	b.n	8002ea6 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e74:	f7fe fa80 	bl	8001378 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d911      	bls.n	8002ea6 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f043 0208 	orr.w	r2, r3, #8
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2203      	movs	r2, #3
 8002ea0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e10c      	b.n	80030c0 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1df      	bne.n	8002e74 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002eb4:	2001      	movs	r0, #1
 8002eb6:	f7fe fa6b 	bl	8001390 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	69d2      	ldr	r2, [r2, #28]
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ec4:	e023      	b.n	8002f0e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ec6:	f7fe fa57 	bl	8001378 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d90f      	bls.n	8002ef4 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	da0a      	bge.n	8002ef4 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	f043 0208 	orr.w	r2, r3, #8
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2203      	movs	r2, #3
 8002eee:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e0e5      	b.n	80030c0 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	dbe3      	blt.n	8002ec6 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7fe fa46 	bl	8001390 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	69d2      	ldr	r2, [r2, #28]
 8002f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	ea02 0103 	and.w	r1, r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	409a      	lsls	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	21ff      	movs	r1, #255	@ 0xff
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	ea02 0103 	and.w	r1, r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	409a      	lsls	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d11d      	bne.n	8002fac <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f76:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	221f      	movs	r2, #31
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb2:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2207      	movs	r2, #7
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6819      	ldr	r1, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43da      	mvns	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	400a      	ands	r2, r1
 8003010:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	4013      	ands	r3, r2
 800302e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	4313      	orrs	r3, r2
 8003046:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003050:	d104      	bne.n	800305c <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	e018      	b.n	800308e <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800306a:	61fb      	str	r3, [r7, #28]
 800306c:	e00f      	b.n	800308e <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 800306e:	f001 fa01 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8003072:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4a14      	ldr	r2, [pc, #80]	@ (80030c8 <HAL_DAC_ConfigChannel+0x294>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d904      	bls.n	8003086 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	e003      	b.n	800308e <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800308c:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69fa      	ldr	r2, [r7, #28]
 8003094:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6819      	ldr	r1, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	22c0      	movs	r2, #192	@ 0xc0
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43da      	mvns	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	400a      	ands	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3720      	adds	r7, #32
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	04c4b400 	.word	0x04c4b400

080030cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030da:	e166      	b.n	80033aa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	2101      	movs	r1, #1
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	4013      	ands	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8158 	beq.w	80033a4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d005      	beq.n	800310c <HAL_GPIO_Init+0x40>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d130      	bne.n	800316e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4013      	ands	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003142:	2201      	movs	r2, #1
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4013      	ands	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 0201 	and.w	r2, r3, #1
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	2b03      	cmp	r3, #3
 8003178:	d017      	beq.n	80031aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	2203      	movs	r2, #3
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43db      	mvns	r3, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d123      	bne.n	80031fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	08da      	lsrs	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3208      	adds	r2, #8
 80031be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	220f      	movs	r2, #15
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43db      	mvns	r3, r3
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	4013      	ands	r3, r2
 80031d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	08da      	lsrs	r2, r3, #3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3208      	adds	r2, #8
 80031f8:	6939      	ldr	r1, [r7, #16]
 80031fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	2203      	movs	r2, #3
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 0203 	and.w	r2, r3, #3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80b2 	beq.w	80033a4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003240:	4b61      	ldr	r3, [pc, #388]	@ (80033c8 <HAL_GPIO_Init+0x2fc>)
 8003242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003244:	4a60      	ldr	r2, [pc, #384]	@ (80033c8 <HAL_GPIO_Init+0x2fc>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6613      	str	r3, [r2, #96]	@ 0x60
 800324c:	4b5e      	ldr	r3, [pc, #376]	@ (80033c8 <HAL_GPIO_Init+0x2fc>)
 800324e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003258:	4a5c      	ldr	r2, [pc, #368]	@ (80033cc <HAL_GPIO_Init+0x300>)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	089b      	lsrs	r3, r3, #2
 800325e:	3302      	adds	r3, #2
 8003260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	220f      	movs	r2, #15
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003282:	d02b      	beq.n	80032dc <HAL_GPIO_Init+0x210>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a52      	ldr	r2, [pc, #328]	@ (80033d0 <HAL_GPIO_Init+0x304>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d025      	beq.n	80032d8 <HAL_GPIO_Init+0x20c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a51      	ldr	r2, [pc, #324]	@ (80033d4 <HAL_GPIO_Init+0x308>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d01f      	beq.n	80032d4 <HAL_GPIO_Init+0x208>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a50      	ldr	r2, [pc, #320]	@ (80033d8 <HAL_GPIO_Init+0x30c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d019      	beq.n	80032d0 <HAL_GPIO_Init+0x204>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a4f      	ldr	r2, [pc, #316]	@ (80033dc <HAL_GPIO_Init+0x310>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d013      	beq.n	80032cc <HAL_GPIO_Init+0x200>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a4e      	ldr	r2, [pc, #312]	@ (80033e0 <HAL_GPIO_Init+0x314>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00d      	beq.n	80032c8 <HAL_GPIO_Init+0x1fc>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a4d      	ldr	r2, [pc, #308]	@ (80033e4 <HAL_GPIO_Init+0x318>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <HAL_GPIO_Init+0x1f8>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a4c      	ldr	r2, [pc, #304]	@ (80033e8 <HAL_GPIO_Init+0x31c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d101      	bne.n	80032c0 <HAL_GPIO_Init+0x1f4>
 80032bc:	2307      	movs	r3, #7
 80032be:	e00e      	b.n	80032de <HAL_GPIO_Init+0x212>
 80032c0:	2308      	movs	r3, #8
 80032c2:	e00c      	b.n	80032de <HAL_GPIO_Init+0x212>
 80032c4:	2306      	movs	r3, #6
 80032c6:	e00a      	b.n	80032de <HAL_GPIO_Init+0x212>
 80032c8:	2305      	movs	r3, #5
 80032ca:	e008      	b.n	80032de <HAL_GPIO_Init+0x212>
 80032cc:	2304      	movs	r3, #4
 80032ce:	e006      	b.n	80032de <HAL_GPIO_Init+0x212>
 80032d0:	2303      	movs	r3, #3
 80032d2:	e004      	b.n	80032de <HAL_GPIO_Init+0x212>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e002      	b.n	80032de <HAL_GPIO_Init+0x212>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <HAL_GPIO_Init+0x212>
 80032dc:	2300      	movs	r3, #0
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	f002 0203 	and.w	r2, r2, #3
 80032e4:	0092      	lsls	r2, r2, #2
 80032e6:	4093      	lsls	r3, r2
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ee:	4937      	ldr	r1, [pc, #220]	@ (80033cc <HAL_GPIO_Init+0x300>)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	3302      	adds	r3, #2
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032fc:	4b3b      	ldr	r3, [pc, #236]	@ (80033ec <HAL_GPIO_Init+0x320>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003320:	4a32      	ldr	r2, [pc, #200]	@ (80033ec <HAL_GPIO_Init+0x320>)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003326:	4b31      	ldr	r3, [pc, #196]	@ (80033ec <HAL_GPIO_Init+0x320>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	43db      	mvns	r3, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800334a:	4a28      	ldr	r2, [pc, #160]	@ (80033ec <HAL_GPIO_Init+0x320>)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003350:	4b26      	ldr	r3, [pc, #152]	@ (80033ec <HAL_GPIO_Init+0x320>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	43db      	mvns	r3, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003374:	4a1d      	ldr	r2, [pc, #116]	@ (80033ec <HAL_GPIO_Init+0x320>)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800337a:	4b1c      	ldr	r3, [pc, #112]	@ (80033ec <HAL_GPIO_Init+0x320>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800339e:	4a13      	ldr	r2, [pc, #76]	@ (80033ec <HAL_GPIO_Init+0x320>)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3301      	adds	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f47f ae91 	bne.w	80030dc <HAL_GPIO_Init+0x10>
  }
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40010000 	.word	0x40010000
 80033d0:	48000400 	.word	0x48000400
 80033d4:	48000800 	.word	0x48000800
 80033d8:	48000c00 	.word	0x48000c00
 80033dc:	48001000 	.word	0x48001000
 80033e0:	48001400 	.word	0x48001400
 80033e4:	48001800 	.word	0x48001800
 80033e8:	48001c00 	.word	0x48001c00
 80033ec:	40010400 	.word	0x40010400

080033f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
 80033fc:	4613      	mov	r3, r2
 80033fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003400:	787b      	ldrb	r3, [r7, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800340c:	e002      	b.n	8003414 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4013      	ands	r3, r2
 8003438:	041a      	lsls	r2, r3, #16
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	43d9      	mvns	r1, r3
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	400b      	ands	r3, r1
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	619a      	str	r2, [r3, #24]
}
 8003448:	bf00      	nop
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800345e:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	4013      	ands	r3, r2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d006      	beq.n	8003478 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800346a:	4a05      	ldr	r2, [pc, #20]	@ (8003480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003470:	88fb      	ldrh	r3, [r7, #6]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fbfa 	bl	8000c6c <HAL_GPIO_EXTI_Callback>
  }
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40010400 	.word	0x40010400

08003484 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af02      	add	r7, sp, #8
 800348a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e101      	b.n	800369a <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd fdde 	bl	800106c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2203      	movs	r2, #3
 80034b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f003 f927 	bl	8006716 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	7c1a      	ldrb	r2, [r3, #16]
 80034d0:	f88d 2000 	strb.w	r2, [sp]
 80034d4:	3304      	adds	r3, #4
 80034d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034d8:	f003 f8f0 	bl	80066bc <USB_CoreInit>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d005      	beq.n	80034ee <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e0d5      	b.n	800369a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2100      	movs	r1, #0
 80034f4:	4618      	mov	r0, r3
 80034f6:	f003 f91f 	bl	8006738 <USB_SetCurrentMode>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0c6      	b.n	800369a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350c:	2300      	movs	r3, #0
 800350e:	73fb      	strb	r3, [r7, #15]
 8003510:	e04a      	b.n	80035a8 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3315      	adds	r3, #21
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	3314      	adds	r3, #20
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	b298      	uxth	r0, r3
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	332e      	adds	r3, #46	@ 0x2e
 800354e:	4602      	mov	r2, r0
 8003550:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3318      	adds	r3, #24
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003566:	7bfa      	ldrb	r2, [r7, #15]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	331c      	adds	r3, #28
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3320      	adds	r3, #32
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3324      	adds	r3, #36	@ 0x24
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	3301      	adds	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	791b      	ldrb	r3, [r3, #4]
 80035ac:	7bfa      	ldrb	r2, [r7, #15]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d3af      	bcc.n	8003512 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
 80035b6:	e044      	b.n	8003642 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035fa:	7bfa      	ldrb	r2, [r7, #15]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003610:	7bfa      	ldrb	r2, [r7, #15]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003626:	7bfa      	ldrb	r2, [r7, #15]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	3301      	adds	r3, #1
 8003640:	73fb      	strb	r3, [r7, #15]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	791b      	ldrb	r3, [r3, #4]
 8003646:	7bfa      	ldrb	r2, [r7, #15]
 8003648:	429a      	cmp	r2, r3
 800364a:	d3b5      	bcc.n	80035b8 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7c1a      	ldrb	r2, [r3, #16]
 8003654:	f88d 2000 	strb.w	r2, [sp]
 8003658:	3304      	adds	r3, #4
 800365a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800365c:	f003 f8b8 	bl	80067d0 <USB_DevInit>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d005      	beq.n	8003672 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e013      	b.n	800369a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7b1b      	ldrb	r3, [r3, #12]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d102      	bne.n	800368e <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f80a 	bl	80036a2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fa5d 	bl	8006b52 <USB_DevDisconnect>

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b085      	sub	sp, #20
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036d4:	f043 0303 	orr.w	r3, r3, #3
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <HAL_PWREx_GetVoltageRange+0x3c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036fc:	d102      	bne.n	8003704 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80036fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003702:	e00b      	b.n	800371c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003704:	4b08      	ldr	r3, [pc, #32]	@ (8003728 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800370a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003712:	d102      	bne.n	800371a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003714:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003718:	e000      	b.n	800371c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800371a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800371c:	4618      	mov	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40007000 	.word	0x40007000

0800372c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d141      	bne.n	80037be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800373a:	4b4b      	ldr	r3, [pc, #300]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003746:	d131      	bne.n	80037ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003748:	4b47      	ldr	r3, [pc, #284]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800374e:	4a46      	ldr	r2, [pc, #280]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003754:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003758:	4b43      	ldr	r3, [pc, #268]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003760:	4a41      	ldr	r2, [pc, #260]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003766:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003768:	4b40      	ldr	r3, [pc, #256]	@ (800386c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2232      	movs	r2, #50	@ 0x32
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	4a3f      	ldr	r2, [pc, #252]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	0c9b      	lsrs	r3, r3, #18
 800377a:	3301      	adds	r3, #1
 800377c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800377e:	e002      	b.n	8003786 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3b01      	subs	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003786:	4b38      	ldr	r3, [pc, #224]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800378e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003792:	d102      	bne.n	800379a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f2      	bne.n	8003780 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800379a:	4b33      	ldr	r3, [pc, #204]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a6:	d158      	bne.n	800385a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e057      	b.n	800385c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037b2:	4a2d      	ldr	r2, [pc, #180]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80037bc:	e04d      	b.n	800385a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c4:	d141      	bne.n	800384a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037c6:	4b28      	ldr	r3, [pc, #160]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d2:	d131      	bne.n	8003838 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037d4:	4b24      	ldr	r3, [pc, #144]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037da:	4a23      	ldr	r2, [pc, #140]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e4:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037ec:	4a1e      	ldr	r2, [pc, #120]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80037f4:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2232      	movs	r2, #50	@ 0x32
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003870 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	0c9b      	lsrs	r3, r3, #18
 8003806:	3301      	adds	r3, #1
 8003808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800380a:	e002      	b.n	8003812 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	3b01      	subs	r3, #1
 8003810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800381e:	d102      	bne.n	8003826 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f2      	bne.n	800380c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003826:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003832:	d112      	bne.n	800385a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e011      	b.n	800385c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003838:	4b0b      	ldr	r3, [pc, #44]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800383e:	4a0a      	ldr	r2, [pc, #40]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003844:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003848:	e007      	b.n	800385a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800384a:	4b07      	ldr	r3, [pc, #28]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003852:	4a05      	ldr	r2, [pc, #20]	@ (8003868 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003854:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003858:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	40007000 	.word	0x40007000
 800386c:	20040000 	.word	0x20040000
 8003870:	431bde83 	.word	0x431bde83

08003874 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003878:	4b05      	ldr	r3, [pc, #20]	@ (8003890 <HAL_PWREx_EnableVddUSB+0x1c>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <HAL_PWREx_EnableVddUSB+0x1c>)
 800387e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003882:	6053      	str	r3, [r2, #4]
}
 8003884:	bf00      	nop
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40007000 	.word	0x40007000

08003894 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003898:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a04      	ldr	r2, [pc, #16]	@ (80038b0 <HAL_PWREx_EnableVddIO2+0x1c>)
 800389e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038a2:	6053      	str	r3, [r2, #4]
}
 80038a4:	bf00      	nop
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40007000 	.word	0x40007000

080038b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b088      	sub	sp, #32
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d102      	bne.n	80038c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f000 bc08 	b.w	80040d8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c8:	4b96      	ldr	r3, [pc, #600]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 030c 	and.w	r3, r3, #12
 80038d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d2:	4b94      	ldr	r3, [pc, #592]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 80e4 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <HAL_RCC_OscConfig+0x4c>
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	f040 808b 	bne.w	8003a0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	f040 8087 	bne.w	8003a0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003900:	4b88      	ldr	r3, [pc, #544]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_OscConfig+0x64>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e3df      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1a      	ldr	r2, [r3, #32]
 800391c:	4b81      	ldr	r3, [pc, #516]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d004      	beq.n	8003932 <HAL_RCC_OscConfig+0x7e>
 8003928:	4b7e      	ldr	r3, [pc, #504]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003930:	e005      	b.n	800393e <HAL_RCC_OscConfig+0x8a>
 8003932:	4b7c      	ldr	r3, [pc, #496]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800393e:	4293      	cmp	r3, r2
 8003940:	d223      	bcs.n	800398a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fdcc 	bl	80044e4 <RCC_SetFlashLatencyFromMSIRange>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e3c0      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003956:	4b73      	ldr	r3, [pc, #460]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a72      	ldr	r2, [pc, #456]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 800395c:	f043 0308 	orr.w	r3, r3, #8
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	4b70      	ldr	r3, [pc, #448]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	496d      	ldr	r1, [pc, #436]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003974:	4b6b      	ldr	r3, [pc, #428]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	021b      	lsls	r3, r3, #8
 8003982:	4968      	ldr	r1, [pc, #416]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
 8003988:	e025      	b.n	80039d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800398a:	4b66      	ldr	r3, [pc, #408]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a65      	ldr	r2, [pc, #404]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003990:	f043 0308 	orr.w	r3, r3, #8
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b63      	ldr	r3, [pc, #396]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4960      	ldr	r1, [pc, #384]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039a8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	021b      	lsls	r3, r3, #8
 80039b6:	495b      	ldr	r1, [pc, #364]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fd8c 	bl	80044e4 <RCC_SetFlashLatencyFromMSIRange>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e380      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039d6:	f000 fcc1 	bl	800435c <HAL_RCC_GetSysClockFreq>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b51      	ldr	r3, [pc, #324]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	4950      	ldr	r1, [pc, #320]	@ (8003b28 <HAL_RCC_OscConfig+0x274>)
 80039e8:	5ccb      	ldrb	r3, [r1, r3]
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	fa22 f303 	lsr.w	r3, r2, r3
 80039f2:	4a4e      	ldr	r2, [pc, #312]	@ (8003b2c <HAL_RCC_OscConfig+0x278>)
 80039f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003b30 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fc6c 	bl	80012d8 <HAL_InitTick>
 8003a00:	4603      	mov	r3, r0
 8003a02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d052      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	e364      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d032      	beq.n	8003a7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a16:	4b43      	ldr	r3, [pc, #268]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a42      	ldr	r2, [pc, #264]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a22:	f7fd fca9 	bl	8001378 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a2a:	f7fd fca5 	bl	8001378 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e34d      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a3c:	4b39      	ldr	r3, [pc, #228]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a48:	4b36      	ldr	r3, [pc, #216]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a35      	ldr	r2, [pc, #212]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a4e:	f043 0308 	orr.w	r3, r3, #8
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4b33      	ldr	r3, [pc, #204]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	4930      	ldr	r1, [pc, #192]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a66:	4b2f      	ldr	r3, [pc, #188]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	021b      	lsls	r3, r3, #8
 8003a74:	492b      	ldr	r1, [pc, #172]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
 8003a7a:	e01a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a7c:	4b29      	ldr	r3, [pc, #164]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a28      	ldr	r2, [pc, #160]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003a82:	f023 0301 	bic.w	r3, r3, #1
 8003a86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a88:	f7fd fc76 	bl	8001378 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a90:	f7fd fc72 	bl	8001378 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e31a      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003aa2:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f0      	bne.n	8003a90 <HAL_RCC_OscConfig+0x1dc>
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ab0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d073      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x21c>
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b0c      	cmp	r3, #12
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d063      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x2f0>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d15f      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e2f7      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x24c>
 8003af2:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a0b      	ldr	r2, [pc, #44]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e025      	b.n	8003b4c <HAL_RCC_OscConfig+0x298>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b08:	d114      	bne.n	8003b34 <HAL_RCC_OscConfig+0x280>
 8003b0a:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a05      	ldr	r2, [pc, #20]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b03      	ldr	r3, [pc, #12]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a02      	ldr	r2, [pc, #8]	@ (8003b24 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e013      	b.n	8003b4c <HAL_RCC_OscConfig+0x298>
 8003b24:	40021000 	.word	0x40021000
 8003b28:	08006c84 	.word	0x08006c84
 8003b2c:	20040000 	.word	0x20040000
 8003b30:	20040004 	.word	0x20040004
 8003b34:	4ba0      	ldr	r3, [pc, #640]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a9f      	ldr	r2, [pc, #636]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b9d      	ldr	r3, [pc, #628]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a9c      	ldr	r2, [pc, #624]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d013      	beq.n	8003b7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fd fc10 	bl	8001378 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fd fc0c 	bl	8001378 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	@ 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e2b4      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b6e:	4b92      	ldr	r3, [pc, #584]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x2a8>
 8003b7a:	e014      	b.n	8003ba6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fbfc 	bl	8001378 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fd fbf8 	bl	8001378 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	@ 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e2a0      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b96:	4b88      	ldr	r3, [pc, #544]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x2d0>
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d060      	beq.n	8003c74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d005      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x310>
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d119      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d116      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc4:	4b7c      	ldr	r3, [pc, #496]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_OscConfig+0x328>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e27d      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bdc:	4b76      	ldr	r3, [pc, #472]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	061b      	lsls	r3, r3, #24
 8003bea:	4973      	ldr	r1, [pc, #460]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bf0:	e040      	b.n	8003c74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d023      	beq.n	8003c42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bfa:	4b6f      	ldr	r3, [pc, #444]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6e      	ldr	r2, [pc, #440]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fd fbb7 	bl	8001378 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c0e:	f7fd fbb3 	bl	8001378 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e25b      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c20:	4b65      	ldr	r3, [pc, #404]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2c:	4b62      	ldr	r3, [pc, #392]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	495f      	ldr	r1, [pc, #380]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	604b      	str	r3, [r1, #4]
 8003c40:	e018      	b.n	8003c74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c42:	4b5d      	ldr	r3, [pc, #372]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a5c      	ldr	r2, [pc, #368]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4e:	f7fd fb93 	bl	8001378 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c56:	f7fd fb8f 	bl	8001378 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e237      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c68:	4b53      	ldr	r3, [pc, #332]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f0      	bne.n	8003c56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d03c      	beq.n	8003cfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01c      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c88:	4b4b      	ldr	r3, [pc, #300]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8e:	4a4a      	ldr	r2, [pc, #296]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fd fb6e 	bl	8001378 <HAL_GetTick>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca0:	f7fd fb6a 	bl	8001378 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e212      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb2:	4b41      	ldr	r3, [pc, #260]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ef      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x3ec>
 8003cc0:	e01b      	b.n	8003cfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cc8:	4a3b      	ldr	r2, [pc, #236]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd2:	f7fd fb51 	bl	8001378 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cda:	f7fd fb4d 	bl	8001378 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e1f5      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cec:	4b32      	ldr	r3, [pc, #200]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1ef      	bne.n	8003cda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 80a6 	beq.w	8003e54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10d      	bne.n	8003d34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d18:	4b27      	ldr	r3, [pc, #156]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1c:	4a26      	ldr	r2, [pc, #152]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d24:	4b24      	ldr	r3, [pc, #144]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d30:	2301      	movs	r3, #1
 8003d32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d34:	4b21      	ldr	r3, [pc, #132]	@ (8003dbc <HAL_RCC_OscConfig+0x508>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d118      	bne.n	8003d72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d40:	4b1e      	ldr	r3, [pc, #120]	@ (8003dbc <HAL_RCC_OscConfig+0x508>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a1d      	ldr	r2, [pc, #116]	@ (8003dbc <HAL_RCC_OscConfig+0x508>)
 8003d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d4c:	f7fd fb14 	bl	8001378 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d54:	f7fd fb10 	bl	8001378 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e1b8      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d66:	4b15      	ldr	r3, [pc, #84]	@ (8003dbc <HAL_RCC_OscConfig+0x508>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d0f0      	beq.n	8003d54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d108      	bne.n	8003d8c <HAL_RCC_OscConfig+0x4d8>
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d80:	4a0d      	ldr	r2, [pc, #52]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d8a:	e029      	b.n	8003de0 <HAL_RCC_OscConfig+0x52c>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b05      	cmp	r3, #5
 8003d92:	d115      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x50c>
 8003d94:	4b08      	ldr	r3, [pc, #32]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9a:	4a07      	ldr	r2, [pc, #28]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003da4:	4b04      	ldr	r3, [pc, #16]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003daa:	4a03      	ldr	r2, [pc, #12]	@ (8003db8 <HAL_RCC_OscConfig+0x504>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003db4:	e014      	b.n	8003de0 <HAL_RCC_OscConfig+0x52c>
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	4b9d      	ldr	r3, [pc, #628]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc6:	4a9c      	ldr	r2, [pc, #624]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dd0:	4b99      	ldr	r3, [pc, #612]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	4a98      	ldr	r2, [pc, #608]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003dd8:	f023 0304 	bic.w	r3, r3, #4
 8003ddc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d016      	beq.n	8003e16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de8:	f7fd fac6 	bl	8001378 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dee:	e00a      	b.n	8003e06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df0:	f7fd fac2 	bl	8001378 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e168      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e06:	4b8c      	ldr	r3, [pc, #560]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0ed      	beq.n	8003df0 <HAL_RCC_OscConfig+0x53c>
 8003e14:	e015      	b.n	8003e42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e16:	f7fd faaf 	bl	8001378 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1e:	f7fd faab 	bl	8001378 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e151      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e34:	4b80      	ldr	r3, [pc, #512]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1ed      	bne.n	8003e1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e42:	7ffb      	ldrb	r3, [r7, #31]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d105      	bne.n	8003e54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e48:	4b7b      	ldr	r3, [pc, #492]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4c:	4a7a      	ldr	r2, [pc, #488]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0320 	and.w	r3, r3, #32
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d03c      	beq.n	8003eda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01c      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e68:	4b73      	ldr	r3, [pc, #460]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e6e:	4a72      	ldr	r2, [pc, #456]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e78:	f7fd fa7e 	bl	8001378 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e80:	f7fd fa7a 	bl	8001378 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e122      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003e92:	4b69      	ldr	r3, [pc, #420]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0ef      	beq.n	8003e80 <HAL_RCC_OscConfig+0x5cc>
 8003ea0:	e01b      	b.n	8003eda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ea2:	4b65      	ldr	r3, [pc, #404]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ea8:	4a63      	ldr	r2, [pc, #396]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003eaa:	f023 0301 	bic.w	r3, r3, #1
 8003eae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb2:	f7fd fa61 	bl	8001378 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eba:	f7fd fa5d 	bl	8001378 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e105      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1ef      	bne.n	8003eba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 80f9 	beq.w	80040d6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	f040 80cf 	bne.w	800408c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003eee:	4b52      	ldr	r3, [pc, #328]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0203 	and.w	r2, r3, #3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d12c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d123      	bne.n	8003f5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d11b      	bne.n	8003f5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d113      	bne.n	8003f5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	3b01      	subs	r3, #1
 8003f42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d109      	bne.n	8003f5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	3b01      	subs	r3, #1
 8003f56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d071      	beq.n	8004040 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	2b0c      	cmp	r3, #12
 8003f60:	d068      	beq.n	8004034 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f62:	4b35      	ldr	r3, [pc, #212]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d105      	bne.n	8003f7a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f6e:	4b32      	ldr	r3, [pc, #200]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0ac      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a2d      	ldr	r2, [pc, #180]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003f84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f8a:	f7fd f9f5 	bl	8001378 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fd f9f1 	bl	8001378 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e099      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa4:	4b24      	ldr	r3, [pc, #144]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb0:	4b21      	ldr	r3, [pc, #132]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	4b21      	ldr	r3, [pc, #132]	@ (800403c <HAL_RCC_OscConfig+0x788>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fc0:	3a01      	subs	r2, #1
 8003fc2:	0112      	lsls	r2, r2, #4
 8003fc4:	4311      	orrs	r1, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fca:	0212      	lsls	r2, r2, #8
 8003fcc:	4311      	orrs	r1, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fd2:	0852      	lsrs	r2, r2, #1
 8003fd4:	3a01      	subs	r2, #1
 8003fd6:	0552      	lsls	r2, r2, #21
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003fde:	0852      	lsrs	r2, r2, #1
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	0652      	lsls	r2, r2, #25
 8003fe4:	4311      	orrs	r1, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fea:	06d2      	lsls	r2, r2, #27
 8003fec:	430a      	orrs	r2, r1
 8003fee:	4912      	ldr	r1, [pc, #72]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ff4:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a0f      	ldr	r2, [pc, #60]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8003ffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ffe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004000:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a0c      	ldr	r2, [pc, #48]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800400a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800400c:	f7fd f9b4 	bl	8001378 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd f9b0 	bl	8001378 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e058      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	4b04      	ldr	r3, [pc, #16]	@ (8004038 <HAL_RCC_OscConfig+0x784>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004032:	e050      	b.n	80040d6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e04f      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
 8004038:	40021000 	.word	0x40021000
 800403c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004040:	4b27      	ldr	r3, [pc, #156]	@ (80040e0 <HAL_RCC_OscConfig+0x82c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d144      	bne.n	80040d6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800404c:	4b24      	ldr	r3, [pc, #144]	@ (80040e0 <HAL_RCC_OscConfig+0x82c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a23      	ldr	r2, [pc, #140]	@ (80040e0 <HAL_RCC_OscConfig+0x82c>)
 8004052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004056:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004058:	4b21      	ldr	r3, [pc, #132]	@ (80040e0 <HAL_RCC_OscConfig+0x82c>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	4a20      	ldr	r2, [pc, #128]	@ (80040e0 <HAL_RCC_OscConfig+0x82c>)
 800405e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004062:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004064:	f7fd f988 	bl	8001378 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406c:	f7fd f984 	bl	8001378 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e02c      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800407e:	4b18      	ldr	r3, [pc, #96]	@ (80040e0 <HAL_RCC_OscConfig+0x82c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x7b8>
 800408a:	e024      	b.n	80040d6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2b0c      	cmp	r3, #12
 8004090:	d01f      	beq.n	80040d2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004092:	4b13      	ldr	r3, [pc, #76]	@ (80040e0 <HAL_RCC_OscConfig+0x82c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a12      	ldr	r2, [pc, #72]	@ (80040e0 <HAL_RCC_OscConfig+0x82c>)
 8004098:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800409c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409e:	f7fd f96b 	bl	8001378 <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a6:	f7fd f967 	bl	8001378 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e00f      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCC_OscConfig+0x82c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1f0      	bne.n	80040a6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <HAL_RCC_OscConfig+0x82c>)
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	4905      	ldr	r1, [pc, #20]	@ (80040e0 <HAL_RCC_OscConfig+0x82c>)
 80040ca:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <HAL_RCC_OscConfig+0x830>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	60cb      	str	r3, [r1, #12]
 80040d0:	e001      	b.n	80040d6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40021000 	.word	0x40021000
 80040e4:	feeefffc 	.word	0xfeeefffc

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e11d      	b.n	800433c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004100:	4b90      	ldr	r3, [pc, #576]	@ (8004344 <HAL_RCC_ClockConfig+0x25c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d910      	bls.n	8004130 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410e:	4b8d      	ldr	r3, [pc, #564]	@ (8004344 <HAL_RCC_ClockConfig+0x25c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 020f 	bic.w	r2, r3, #15
 8004116:	498b      	ldr	r1, [pc, #556]	@ (8004344 <HAL_RCC_ClockConfig+0x25c>)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	4313      	orrs	r3, r2
 800411c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800411e:	4b89      	ldr	r3, [pc, #548]	@ (8004344 <HAL_RCC_ClockConfig+0x25c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d001      	beq.n	8004130 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e105      	b.n	800433c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d010      	beq.n	800415e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	4b81      	ldr	r3, [pc, #516]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004148:	429a      	cmp	r2, r3
 800414a:	d908      	bls.n	800415e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800414c:	4b7e      	ldr	r3, [pc, #504]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	497b      	ldr	r1, [pc, #492]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 800415a:	4313      	orrs	r3, r2
 800415c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d079      	beq.n	800425e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b03      	cmp	r3, #3
 8004170:	d11e      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004172:	4b75      	ldr	r3, [pc, #468]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e0dc      	b.n	800433c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004182:	f000 fa09 	bl	8004598 <RCC_GetSysClockFreqFromPLLSource>
 8004186:	4603      	mov	r3, r0
 8004188:	4a70      	ldr	r2, [pc, #448]	@ (800434c <HAL_RCC_ClockConfig+0x264>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d946      	bls.n	800421c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800418e:	4b6e      	ldr	r3, [pc, #440]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d140      	bne.n	800421c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800419a:	4b6b      	ldr	r3, [pc, #428]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041a2:	4a69      	ldr	r2, [pc, #420]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 80041a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80041aa:	2380      	movs	r3, #128	@ 0x80
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	e035      	b.n	800421c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b8:	4b63      	ldr	r3, [pc, #396]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d115      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0b9      	b.n	800433c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041d0:	4b5d      	ldr	r3, [pc, #372]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d109      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0ad      	b.n	800433c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e0:	4b59      	ldr	r3, [pc, #356]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0a5      	b.n	800433c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80041f0:	f000 f8b4 	bl	800435c <HAL_RCC_GetSysClockFreq>
 80041f4:	4603      	mov	r3, r0
 80041f6:	4a55      	ldr	r2, [pc, #340]	@ (800434c <HAL_RCC_ClockConfig+0x264>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d90f      	bls.n	800421c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80041fc:	4b52      	ldr	r3, [pc, #328]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d109      	bne.n	800421c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004208:	4b4f      	ldr	r3, [pc, #316]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004210:	4a4d      	ldr	r2, [pc, #308]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004216:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004218:	2380      	movs	r3, #128	@ 0x80
 800421a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800421c:	4b4a      	ldr	r3, [pc, #296]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 0203 	bic.w	r2, r3, #3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	4947      	ldr	r1, [pc, #284]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800422e:	f7fd f8a3 	bl	8001378 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004234:	e00a      	b.n	800424c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004236:	f7fd f89f 	bl	8001378 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e077      	b.n	800433c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424c:	4b3e      	ldr	r3, [pc, #248]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 020c 	and.w	r2, r3, #12
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	429a      	cmp	r2, r3
 800425c:	d1eb      	bne.n	8004236 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b80      	cmp	r3, #128	@ 0x80
 8004262:	d105      	bne.n	8004270 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004264:	4b38      	ldr	r3, [pc, #224]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a37      	ldr	r2, [pc, #220]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 800426a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800426e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	4b31      	ldr	r3, [pc, #196]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004288:	429a      	cmp	r2, r3
 800428a:	d208      	bcs.n	800429e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b2e      	ldr	r3, [pc, #184]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	492b      	ldr	r1, [pc, #172]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800429e:	4b29      	ldr	r3, [pc, #164]	@ (8004344 <HAL_RCC_ClockConfig+0x25c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d210      	bcs.n	80042ce <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ac:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <HAL_RCC_ClockConfig+0x25c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 020f 	bic.w	r2, r3, #15
 80042b4:	4923      	ldr	r1, [pc, #140]	@ (8004344 <HAL_RCC_ClockConfig+0x25c>)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042bc:	4b21      	ldr	r3, [pc, #132]	@ (8004344 <HAL_RCC_ClockConfig+0x25c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e036      	b.n	800433c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042da:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4918      	ldr	r1, [pc, #96]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f8:	4b13      	ldr	r3, [pc, #76]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4910      	ldr	r1, [pc, #64]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004308:	4313      	orrs	r3, r2
 800430a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800430c:	f000 f826 	bl	800435c <HAL_RCC_GetSysClockFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <HAL_RCC_ClockConfig+0x260>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	490c      	ldr	r1, [pc, #48]	@ (8004350 <HAL_RCC_ClockConfig+0x268>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	4a0a      	ldr	r2, [pc, #40]	@ (8004354 <HAL_RCC_ClockConfig+0x26c>)
 800432a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800432c:	4b0a      	ldr	r3, [pc, #40]	@ (8004358 <HAL_RCC_ClockConfig+0x270>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7fc ffd1 	bl	80012d8 <HAL_InitTick>
 8004336:	4603      	mov	r3, r0
 8004338:	73fb      	strb	r3, [r7, #15]

  return status;
 800433a:	7bfb      	ldrb	r3, [r7, #15]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40022000 	.word	0x40022000
 8004348:	40021000 	.word	0x40021000
 800434c:	04c4b400 	.word	0x04c4b400
 8004350:	08006c84 	.word	0x08006c84
 8004354:	20040000 	.word	0x20040000
 8004358:	20040004 	.word	0x20040004

0800435c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800435c:	b480      	push	{r7}
 800435e:	b089      	sub	sp, #36	@ 0x24
 8004360:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	2300      	movs	r3, #0
 8004368:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800436a:	4b3e      	ldr	r3, [pc, #248]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004374:	4b3b      	ldr	r3, [pc, #236]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_GetSysClockFreq+0x34>
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b0c      	cmp	r3, #12
 8004388:	d121      	bne.n	80043ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d11e      	bne.n	80043ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004390:	4b34      	ldr	r3, [pc, #208]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0308 	and.w	r3, r3, #8
 8004398:	2b00      	cmp	r3, #0
 800439a:	d107      	bne.n	80043ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800439c:	4b31      	ldr	r3, [pc, #196]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 800439e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	f003 030f 	and.w	r3, r3, #15
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	e005      	b.n	80043b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10d      	bne.n	80043e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043cc:	e00a      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b04      	cmp	r3, #4
 80043d2:	d102      	bne.n	80043da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043d4:	4b25      	ldr	r3, [pc, #148]	@ (800446c <HAL_RCC_GetSysClockFreq+0x110>)
 80043d6:	61bb      	str	r3, [r7, #24]
 80043d8:	e004      	b.n	80043e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043e0:	4b23      	ldr	r3, [pc, #140]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x114>)
 80043e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d134      	bne.n	8004454 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d003      	beq.n	8004402 <HAL_RCC_GetSysClockFreq+0xa6>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d003      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0xac>
 8004400:	e005      	b.n	800440e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004402:	4b1a      	ldr	r3, [pc, #104]	@ (800446c <HAL_RCC_GetSysClockFreq+0x110>)
 8004404:	617b      	str	r3, [r7, #20]
      break;
 8004406:	e005      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004408:	4b19      	ldr	r3, [pc, #100]	@ (8004470 <HAL_RCC_GetSysClockFreq+0x114>)
 800440a:	617b      	str	r3, [r7, #20]
      break;
 800440c:	e002      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	617b      	str	r3, [r7, #20]
      break;
 8004412:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004414:	4b13      	ldr	r3, [pc, #76]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	3301      	adds	r3, #1
 8004420:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004422:	4b10      	ldr	r3, [pc, #64]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	0a1b      	lsrs	r3, r3, #8
 8004428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	fb03 f202 	mul.w	r2, r3, r2
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800443a:	4b0a      	ldr	r3, [pc, #40]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x108>)
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	0e5b      	lsrs	r3, r3, #25
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	3301      	adds	r3, #1
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004454:	69bb      	ldr	r3, [r7, #24]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3724      	adds	r7, #36	@ 0x24
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40021000 	.word	0x40021000
 8004468:	08006c9c 	.word	0x08006c9c
 800446c:	00f42400 	.word	0x00f42400
 8004470:	007a1200 	.word	0x007a1200

08004474 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b03      	ldr	r3, [pc, #12]	@ (8004488 <HAL_RCC_GetHCLKFreq+0x14>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20040000 	.word	0x20040000

0800448c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004490:	f7ff fff0 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	4904      	ldr	r1, [pc, #16]	@ (80044b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	f003 031f 	and.w	r3, r3, #31
 80044a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021000 	.word	0x40021000
 80044b4:	08006c94 	.word	0x08006c94

080044b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044bc:	f7ff ffda 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0adb      	lsrs	r3, r3, #11
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4904      	ldr	r1, [pc, #16]	@ (80044e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40021000 	.word	0x40021000
 80044e0:	08006c94 	.word	0x08006c94

080044e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044f0:	4b27      	ldr	r3, [pc, #156]	@ (8004590 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80044f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044fc:	f7ff f8f6 	bl	80036ec <HAL_PWREx_GetVoltageRange>
 8004500:	6178      	str	r0, [r7, #20]
 8004502:	e014      	b.n	800452e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004504:	4b22      	ldr	r3, [pc, #136]	@ (8004590 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004508:	4a21      	ldr	r2, [pc, #132]	@ (8004590 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800450a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800450e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004510:	4b1f      	ldr	r3, [pc, #124]	@ (8004590 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800451c:	f7ff f8e6 	bl	80036ec <HAL_PWREx_GetVoltageRange>
 8004520:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004522:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004526:	4a1a      	ldr	r2, [pc, #104]	@ (8004590 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800452c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004534:	d10b      	bne.n	800454e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b80      	cmp	r3, #128	@ 0x80
 800453a:	d913      	bls.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004540:	d902      	bls.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004542:	2302      	movs	r3, #2
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	e00d      	b.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004548:	2301      	movs	r3, #1
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e00a      	b.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b7f      	cmp	r3, #127	@ 0x7f
 8004552:	d902      	bls.n	800455a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004554:	2302      	movs	r3, #2
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	e004      	b.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b70      	cmp	r3, #112	@ 0x70
 800455e:	d101      	bne.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004560:	2301      	movs	r3, #1
 8004562:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004564:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f023 020f 	bic.w	r2, r3, #15
 800456c:	4909      	ldr	r1, [pc, #36]	@ (8004594 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004574:	4b07      	ldr	r3, [pc, #28]	@ (8004594 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	429a      	cmp	r2, r3
 8004580:	d001      	beq.n	8004586 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000
 8004594:	40022000 	.word	0x40022000

08004598 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800459e:	4b2d      	ldr	r3, [pc, #180]	@ (8004654 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d00b      	beq.n	80045c6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d825      	bhi.n	8004600 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d008      	beq.n	80045cc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d11f      	bne.n	8004600 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80045c0:	4b25      	ldr	r3, [pc, #148]	@ (8004658 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80045c2:	613b      	str	r3, [r7, #16]
    break;
 80045c4:	e01f      	b.n	8004606 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80045c6:	4b25      	ldr	r3, [pc, #148]	@ (800465c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80045c8:	613b      	str	r3, [r7, #16]
    break;
 80045ca:	e01c      	b.n	8004606 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045cc:	4b21      	ldr	r3, [pc, #132]	@ (8004654 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d107      	bne.n	80045e8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004654 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e005      	b.n	80045f4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004654 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80045f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004660 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045fc:	613b      	str	r3, [r7, #16]
    break;
 80045fe:	e002      	b.n	8004606 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
    break;
 8004604:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004606:	4b13      	ldr	r3, [pc, #76]	@ (8004654 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	3301      	adds	r3, #1
 8004612:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004614:	4b0f      	ldr	r3, [pc, #60]	@ (8004654 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	fb03 f202 	mul.w	r2, r3, r2
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	fbb2 f3f3 	udiv	r3, r2, r3
 800462a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800462c:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	0e5b      	lsrs	r3, r3, #25
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	3301      	adds	r3, #1
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004646:	683b      	ldr	r3, [r7, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	40021000 	.word	0x40021000
 8004658:	00f42400 	.word	0x00f42400
 800465c:	007a1200 	.word	0x007a1200
 8004660:	08006c9c 	.word	0x08006c9c

08004664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800466c:	2300      	movs	r3, #0
 800466e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004670:	2300      	movs	r3, #0
 8004672:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800467c:	2b00      	cmp	r3, #0
 800467e:	d040      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004684:	2b80      	cmp	r3, #128	@ 0x80
 8004686:	d02a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004688:	2b80      	cmp	r3, #128	@ 0x80
 800468a:	d825      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800468c:	2b60      	cmp	r3, #96	@ 0x60
 800468e:	d026      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004690:	2b60      	cmp	r3, #96	@ 0x60
 8004692:	d821      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d006      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004698:	2b40      	cmp	r3, #64	@ 0x40
 800469a:	d81d      	bhi.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d009      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d010      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80046a4:	e018      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046a6:	4b89      	ldr	r3, [pc, #548]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	4a88      	ldr	r2, [pc, #544]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046b2:	e015      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	2100      	movs	r1, #0
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fb02 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046c4:	e00c      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	3320      	adds	r3, #32
 80046ca:	2100      	movs	r1, #0
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fbed 	bl	8004eac <RCCEx_PLLSAI2_Config>
 80046d2:	4603      	mov	r3, r0
 80046d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046d6:	e003      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	74fb      	strb	r3, [r7, #19]
      break;
 80046dc:	e000      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80046de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10b      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046e6:	4b79      	ldr	r3, [pc, #484]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046ec:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f4:	4975      	ldr	r1, [pc, #468]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80046fc:	e001      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046fe:	7cfb      	ldrb	r3, [r7, #19]
 8004700:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d047      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004716:	d030      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800471c:	d82a      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800471e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004722:	d02a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004724:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004728:	d824      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800472a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800472e:	d008      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004730:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004734:	d81e      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00a      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800473a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800473e:	d010      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004740:	e018      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004742:	4b62      	ldr	r3, [pc, #392]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	4a61      	ldr	r2, [pc, #388]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800474e:	e015      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fab4 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004760:	e00c      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3320      	adds	r3, #32
 8004766:	2100      	movs	r1, #0
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fb9f 	bl	8004eac <RCCEx_PLLSAI2_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004772:	e003      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	74fb      	strb	r3, [r7, #19]
      break;
 8004778:	e000      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800477a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004782:	4b52      	ldr	r3, [pc, #328]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004784:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004788:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004790:	494e      	ldr	r1, [pc, #312]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004798:	e001      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 809f 	beq.w	80048ea <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ac:	2300      	movs	r3, #0
 80047ae:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047b0:	4b46      	ldr	r3, [pc, #280]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	4b41      	ldr	r3, [pc, #260]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ca:	4a40      	ldr	r2, [pc, #256]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80047d2:	4b3e      	ldr	r3, [pc, #248]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047de:	2301      	movs	r3, #1
 80047e0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e2:	4b3b      	ldr	r3, [pc, #236]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a3a      	ldr	r2, [pc, #232]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047ee:	f7fc fdc3 	bl	8001378 <HAL_GetTick>
 80047f2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047f4:	e009      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f6:	f7fc fdbf 	bl	8001378 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d902      	bls.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	74fb      	strb	r3, [r7, #19]
        break;
 8004808:	e005      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800480a:	4b31      	ldr	r3, [pc, #196]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0ef      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d15b      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800481c:	4b2b      	ldr	r3, [pc, #172]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004826:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01f      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	429a      	cmp	r2, r3
 8004838:	d019      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800483a:	4b24      	ldr	r3, [pc, #144]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004844:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004846:	4b21      	ldr	r3, [pc, #132]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484c:	4a1f      	ldr	r2, [pc, #124]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800484e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004852:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004856:	4b1d      	ldr	r3, [pc, #116]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485c:	4a1b      	ldr	r2, [pc, #108]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800485e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004862:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004866:	4a19      	ldr	r2, [pc, #100]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d016      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fc fd7e 	bl	8001378 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800487e:	e00b      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004880:	f7fc fd7a 	bl	8001378 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d902      	bls.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	74fb      	strb	r3, [r7, #19]
            break;
 8004896:	e006      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004898:	4b0c      	ldr	r3, [pc, #48]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0ec      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10c      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048ac:	4b07      	ldr	r3, [pc, #28]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048bc:	4903      	ldr	r1, [pc, #12]	@ (80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048c4:	e008      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048c6:	7cfb      	ldrb	r3, [r7, #19]
 80048c8:	74bb      	strb	r3, [r7, #18]
 80048ca:	e005      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d8:	7c7b      	ldrb	r3, [r7, #17]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d105      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048de:	4ba0      	ldr	r3, [pc, #640]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048e2:	4a9f      	ldr	r2, [pc, #636]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048f6:	4b9a      	ldr	r3, [pc, #616]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fc:	f023 0203 	bic.w	r2, r3, #3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004904:	4996      	ldr	r1, [pc, #600]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004918:	4b91      	ldr	r3, [pc, #580]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491e:	f023 020c 	bic.w	r2, r3, #12
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	498e      	ldr	r1, [pc, #568]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800493a:	4b89      	ldr	r3, [pc, #548]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004940:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004948:	4985      	ldr	r1, [pc, #532]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800495c:	4b80      	ldr	r3, [pc, #512]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004962:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496a:	497d      	ldr	r1, [pc, #500]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800497e:	4b78      	ldr	r3, [pc, #480]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004984:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800498c:	4974      	ldr	r1, [pc, #464]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049a0:	4b6f      	ldr	r3, [pc, #444]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ae:	496c      	ldr	r1, [pc, #432]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049c2:	4b67      	ldr	r3, [pc, #412]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049d0:	4963      	ldr	r1, [pc, #396]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049f2:	495b      	ldr	r1, [pc, #364]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a06:	4b56      	ldr	r3, [pc, #344]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a14:	4952      	ldr	r1, [pc, #328]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a28:	4b4d      	ldr	r3, [pc, #308]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a36:	494a      	ldr	r1, [pc, #296]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a4a:	4b45      	ldr	r3, [pc, #276]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a58:	4941      	ldr	r1, [pc, #260]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a72:	f023 0203 	bic.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a7a:	4939      	ldr	r1, [pc, #228]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d028      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a8e:	4b34      	ldr	r3, [pc, #208]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a9c:	4930      	ldr	r1, [pc, #192]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004aac:	d106      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aae:	4b2c      	ldr	r3, [pc, #176]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ab8:	60d3      	str	r3, [r2, #12]
 8004aba:	e011      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	2101      	movs	r1, #1
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 f8f9 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004adc:	7cfb      	ldrb	r3, [r7, #19]
 8004ade:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d04d      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004af0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004af4:	d108      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004af6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004afc:	4a18      	ldr	r2, [pc, #96]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004afe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b02:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004b06:	e012      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004b08:	4b15      	ldr	r3, [pc, #84]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b0e:	4a14      	ldr	r2, [pc, #80]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b14:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004b18:	4b11      	ldr	r3, [pc, #68]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b26:	490e      	ldr	r1, [pc, #56]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b36:	d106      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b38:	4b09      	ldr	r3, [pc, #36]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4a08      	ldr	r2, [pc, #32]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b42:	60d3      	str	r3, [r2, #12]
 8004b44:	e020      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b4e:	d109      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b50:	4b03      	ldr	r3, [pc, #12]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4a02      	ldr	r2, [pc, #8]	@ (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b5a:	60d3      	str	r3, [r2, #12]
 8004b5c:	e014      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004b5e:	bf00      	nop
 8004b60:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3304      	adds	r3, #4
 8004b72:	2101      	movs	r1, #1
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 f8a5 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b7e:	7cfb      	ldrb	r3, [r7, #19]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004b84:	7cfb      	ldrb	r3, [r7, #19]
 8004b86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d028      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b94:	4b4a      	ldr	r3, [pc, #296]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ba2:	4947      	ldr	r1, [pc, #284]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb4:	4b42      	ldr	r3, [pc, #264]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	4a41      	ldr	r2, [pc, #260]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bbe:	60d3      	str	r3, [r2, #12]
 8004bc0:	e011      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bca:	d10c      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f876 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bdc:	7cfb      	ldrb	r3, [r7, #19]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004be2:	7cfb      	ldrb	r3, [r7, #19]
 8004be4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01e      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bf2:	4b33      	ldr	r3, [pc, #204]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c02:	492f      	ldr	r1, [pc, #188]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c14:	d10c      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	2102      	movs	r1, #2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 f851 	bl	8004cc4 <RCCEx_PLLSAI1_Config>
 8004c22:	4603      	mov	r3, r0
 8004c24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c26:	7cfb      	ldrb	r3, [r7, #19]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004c2c:	7cfb      	ldrb	r3, [r7, #19]
 8004c2e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00b      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c3c:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c42:	f023 0204 	bic.w	r2, r3, #4
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c4c:	491c      	ldr	r1, [pc, #112]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00b      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c60:	4b17      	ldr	r3, [pc, #92]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c66:	f023 0218 	bic.w	r2, r3, #24
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c70:	4913      	ldr	r1, [pc, #76]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d017      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c84:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c94:	490a      	ldr	r1, [pc, #40]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ca2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a04      	ldr	r2, [pc, #16]	@ (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3718      	adds	r7, #24
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000

08004cc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cd2:	4b72      	ldr	r3, [pc, #456]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00e      	beq.n	8004cfc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cde:	4b6f      	ldr	r3, [pc, #444]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0203 	and.w	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d103      	bne.n	8004cf6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
       ||
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d142      	bne.n	8004d7c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e03f      	b.n	8004d7c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d018      	beq.n	8004d36 <RCCEx_PLLSAI1_Config+0x72>
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d825      	bhi.n	8004d54 <RCCEx_PLLSAI1_Config+0x90>
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d002      	beq.n	8004d12 <RCCEx_PLLSAI1_Config+0x4e>
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d009      	beq.n	8004d24 <RCCEx_PLLSAI1_Config+0x60>
 8004d10:	e020      	b.n	8004d54 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d12:	4b62      	ldr	r3, [pc, #392]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11d      	bne.n	8004d5a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d22:	e01a      	b.n	8004d5a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d24:	4b5d      	ldr	r3, [pc, #372]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d116      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d34:	e013      	b.n	8004d5e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d36:	4b59      	ldr	r3, [pc, #356]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d42:	4b56      	ldr	r3, [pc, #344]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d52:	e006      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e004      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004d62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d108      	bne.n	8004d7c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004d6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 0203 	bic.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4949      	ldr	r1, [pc, #292]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f040 8086 	bne.w	8004e90 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d84:	4b45      	ldr	r3, [pc, #276]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a44      	ldr	r2, [pc, #272]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d90:	f7fc faf2 	bl	8001378 <HAL_GetTick>
 8004d94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d96:	e009      	b.n	8004dac <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d98:	f7fc faee 	bl	8001378 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d902      	bls.n	8004dac <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	73fb      	strb	r3, [r7, #15]
        break;
 8004daa:	e005      	b.n	8004db8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dac:	4b3b      	ldr	r3, [pc, #236]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1ef      	bne.n	8004d98 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d168      	bne.n	8004e90 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d113      	bne.n	8004dec <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dc4:	4b35      	ldr	r3, [pc, #212]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	4b35      	ldr	r3, [pc, #212]	@ (8004ea0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6892      	ldr	r2, [r2, #8]
 8004dd0:	0211      	lsls	r1, r2, #8
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	68d2      	ldr	r2, [r2, #12]
 8004dd6:	06d2      	lsls	r2, r2, #27
 8004dd8:	4311      	orrs	r1, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6852      	ldr	r2, [r2, #4]
 8004dde:	3a01      	subs	r2, #1
 8004de0:	0112      	lsls	r2, r2, #4
 8004de2:	430a      	orrs	r2, r1
 8004de4:	492d      	ldr	r1, [pc, #180]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	610b      	str	r3, [r1, #16]
 8004dea:	e02d      	b.n	8004e48 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d115      	bne.n	8004e1e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004df2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004df4:	691a      	ldr	r2, [r3, #16]
 8004df6:	4b2b      	ldr	r3, [pc, #172]	@ (8004ea4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6892      	ldr	r2, [r2, #8]
 8004dfe:	0211      	lsls	r1, r2, #8
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6912      	ldr	r2, [r2, #16]
 8004e04:	0852      	lsrs	r2, r2, #1
 8004e06:	3a01      	subs	r2, #1
 8004e08:	0552      	lsls	r2, r2, #21
 8004e0a:	4311      	orrs	r1, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6852      	ldr	r2, [r2, #4]
 8004e10:	3a01      	subs	r2, #1
 8004e12:	0112      	lsls	r2, r2, #4
 8004e14:	430a      	orrs	r2, r1
 8004e16:	4921      	ldr	r1, [pc, #132]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	610b      	str	r3, [r1, #16]
 8004e1c:	e014      	b.n	8004e48 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	4b21      	ldr	r3, [pc, #132]	@ (8004ea8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6892      	ldr	r2, [r2, #8]
 8004e2a:	0211      	lsls	r1, r2, #8
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6952      	ldr	r2, [r2, #20]
 8004e30:	0852      	lsrs	r2, r2, #1
 8004e32:	3a01      	subs	r2, #1
 8004e34:	0652      	lsls	r2, r2, #25
 8004e36:	4311      	orrs	r1, r2
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6852      	ldr	r2, [r2, #4]
 8004e3c:	3a01      	subs	r2, #1
 8004e3e:	0112      	lsls	r2, r2, #4
 8004e40:	430a      	orrs	r2, r1
 8004e42:	4916      	ldr	r1, [pc, #88]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e48:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a13      	ldr	r2, [pc, #76]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fc fa90 	bl	8001378 <HAL_GetTick>
 8004e58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e5a:	e009      	b.n	8004e70 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e5c:	f7fc fa8c 	bl	8001378 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d902      	bls.n	8004e70 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e6e:	e005      	b.n	8004e7c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e70:	4b0a      	ldr	r3, [pc, #40]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ef      	beq.n	8004e5c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e82:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	4904      	ldr	r1, [pc, #16]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	07ff800f 	.word	0x07ff800f
 8004ea4:	ff9f800f 	.word	0xff9f800f
 8004ea8:	f9ff800f 	.word	0xf9ff800f

08004eac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eba:	4b72      	ldr	r3, [pc, #456]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00e      	beq.n	8004ee4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ec6:	4b6f      	ldr	r3, [pc, #444]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f003 0203 	and.w	r2, r3, #3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d103      	bne.n	8004ede <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d142      	bne.n	8004f64 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
 8004ee2:	e03f      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d018      	beq.n	8004f1e <RCCEx_PLLSAI2_Config+0x72>
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d825      	bhi.n	8004f3c <RCCEx_PLLSAI2_Config+0x90>
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d002      	beq.n	8004efa <RCCEx_PLLSAI2_Config+0x4e>
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d009      	beq.n	8004f0c <RCCEx_PLLSAI2_Config+0x60>
 8004ef8:	e020      	b.n	8004f3c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004efa:	4b62      	ldr	r3, [pc, #392]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d11d      	bne.n	8004f42 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f0a:	e01a      	b.n	8004f42 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f0c:	4b5d      	ldr	r3, [pc, #372]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d116      	bne.n	8004f46 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1c:	e013      	b.n	8004f46 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f1e:	4b59      	ldr	r3, [pc, #356]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10f      	bne.n	8004f4a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f2a:	4b56      	ldr	r3, [pc, #344]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d109      	bne.n	8004f4a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f3a:	e006      	b.n	8004f4a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f40:	e004      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f42:	bf00      	nop
 8004f44:	e002      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f46:	bf00      	nop
 8004f48:	e000      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004f4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004f52:	4b4c      	ldr	r3, [pc, #304]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f023 0203 	bic.w	r2, r3, #3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4949      	ldr	r1, [pc, #292]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f040 8086 	bne.w	8005078 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f6c:	4b45      	ldr	r3, [pc, #276]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a44      	ldr	r2, [pc, #272]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f78:	f7fc f9fe 	bl	8001378 <HAL_GetTick>
 8004f7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f7e:	e009      	b.n	8004f94 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f80:	f7fc f9fa 	bl	8001378 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d902      	bls.n	8004f94 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	73fb      	strb	r3, [r7, #15]
        break;
 8004f92:	e005      	b.n	8004fa0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f94:	4b3b      	ldr	r3, [pc, #236]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1ef      	bne.n	8004f80 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d168      	bne.n	8005078 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d113      	bne.n	8004fd4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fac:	4b35      	ldr	r3, [pc, #212]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	4b35      	ldr	r3, [pc, #212]	@ (8005088 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6892      	ldr	r2, [r2, #8]
 8004fb8:	0211      	lsls	r1, r2, #8
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	68d2      	ldr	r2, [r2, #12]
 8004fbe:	06d2      	lsls	r2, r2, #27
 8004fc0:	4311      	orrs	r1, r2
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6852      	ldr	r2, [r2, #4]
 8004fc6:	3a01      	subs	r2, #1
 8004fc8:	0112      	lsls	r2, r2, #4
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	492d      	ldr	r1, [pc, #180]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	614b      	str	r3, [r1, #20]
 8004fd2:	e02d      	b.n	8005030 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d115      	bne.n	8005006 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fda:	4b2a      	ldr	r3, [pc, #168]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	4b2b      	ldr	r3, [pc, #172]	@ (800508c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6892      	ldr	r2, [r2, #8]
 8004fe6:	0211      	lsls	r1, r2, #8
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6912      	ldr	r2, [r2, #16]
 8004fec:	0852      	lsrs	r2, r2, #1
 8004fee:	3a01      	subs	r2, #1
 8004ff0:	0552      	lsls	r2, r2, #21
 8004ff2:	4311      	orrs	r1, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6852      	ldr	r2, [r2, #4]
 8004ff8:	3a01      	subs	r2, #1
 8004ffa:	0112      	lsls	r2, r2, #4
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	4921      	ldr	r1, [pc, #132]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005000:	4313      	orrs	r3, r2
 8005002:	614b      	str	r3, [r1, #20]
 8005004:	e014      	b.n	8005030 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005006:	4b1f      	ldr	r3, [pc, #124]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005008:	695a      	ldr	r2, [r3, #20]
 800500a:	4b21      	ldr	r3, [pc, #132]	@ (8005090 <RCCEx_PLLSAI2_Config+0x1e4>)
 800500c:	4013      	ands	r3, r2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6892      	ldr	r2, [r2, #8]
 8005012:	0211      	lsls	r1, r2, #8
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6952      	ldr	r2, [r2, #20]
 8005018:	0852      	lsrs	r2, r2, #1
 800501a:	3a01      	subs	r2, #1
 800501c:	0652      	lsls	r2, r2, #25
 800501e:	4311      	orrs	r1, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6852      	ldr	r2, [r2, #4]
 8005024:	3a01      	subs	r2, #1
 8005026:	0112      	lsls	r2, r2, #4
 8005028:	430a      	orrs	r2, r1
 800502a:	4916      	ldr	r1, [pc, #88]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 800502c:	4313      	orrs	r3, r2
 800502e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005030:	4b14      	ldr	r3, [pc, #80]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a13      	ldr	r2, [pc, #76]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800503a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503c:	f7fc f99c 	bl	8001378 <HAL_GetTick>
 8005040:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005042:	e009      	b.n	8005058 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005044:	f7fc f998 	bl	8001378 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d902      	bls.n	8005058 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	73fb      	strb	r3, [r7, #15]
          break;
 8005056:	e005      	b.n	8005064 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005058:	4b0a      	ldr	r3, [pc, #40]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0ef      	beq.n	8005044 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800506a:	4b06      	ldr	r3, [pc, #24]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 800506c:	695a      	ldr	r2, [r3, #20]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	4904      	ldr	r1, [pc, #16]	@ (8005084 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005074:	4313      	orrs	r3, r2
 8005076:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40021000 	.word	0x40021000
 8005088:	07ff800f 	.word	0x07ff800f
 800508c:	ff9f800f 	.word	0xff9f800f
 8005090:	f9ff800f 	.word	0xf9ff800f

08005094 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e049      	b.n	800513a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7fb ff82 	bl	8000fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f000 fa9e 	bl	8005614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d001      	beq.n	800515c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e04f      	b.n	80051fc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0201 	orr.w	r2, r2, #1
 8005172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a23      	ldr	r2, [pc, #140]	@ (8005208 <HAL_TIM_Base_Start_IT+0xc4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01d      	beq.n	80051ba <HAL_TIM_Base_Start_IT+0x76>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005186:	d018      	beq.n	80051ba <HAL_TIM_Base_Start_IT+0x76>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1f      	ldr	r2, [pc, #124]	@ (800520c <HAL_TIM_Base_Start_IT+0xc8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_TIM_Base_Start_IT+0x76>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1e      	ldr	r2, [pc, #120]	@ (8005210 <HAL_TIM_Base_Start_IT+0xcc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00e      	beq.n	80051ba <HAL_TIM_Base_Start_IT+0x76>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005214 <HAL_TIM_Base_Start_IT+0xd0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d009      	beq.n	80051ba <HAL_TIM_Base_Start_IT+0x76>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005218 <HAL_TIM_Base_Start_IT+0xd4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_TIM_Base_Start_IT+0x76>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a19      	ldr	r2, [pc, #100]	@ (800521c <HAL_TIM_Base_Start_IT+0xd8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d115      	bne.n	80051e6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	4b17      	ldr	r3, [pc, #92]	@ (8005220 <HAL_TIM_Base_Start_IT+0xdc>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b06      	cmp	r3, #6
 80051ca:	d015      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0xb4>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d2:	d011      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e4:	e008      	b.n	80051f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e000      	b.n	80051fa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	40012c00 	.word	0x40012c00
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40013400 	.word	0x40013400
 800521c:	40014000 	.word	0x40014000
 8005220:	00010007 	.word	0x00010007

08005224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d020      	beq.n	8005288 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0202 	mvn.w	r2, #2
 8005258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f9b2 	bl	80055d8 <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9a4 	bl	80055c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f9b5 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	d020      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01b      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0204 	mvn.w	r2, #4
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f98c 	bl	80055d8 <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f97e 	bl	80055c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f98f 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d020      	beq.n	8005320 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01b      	beq.n	8005320 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0208 	mvn.w	r2, #8
 80052f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2204      	movs	r2, #4
 80052f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f966 	bl	80055d8 <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f958 	bl	80055c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f969 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	d020      	beq.n	800536c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01b      	beq.n	800536c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0210 	mvn.w	r2, #16
 800533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2208      	movs	r2, #8
 8005342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f940 	bl	80055d8 <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f932 	bl	80055c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f943 	bl	80055ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0201 	mvn.w	r2, #1
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fb fc2c 	bl	8000be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005396:	2b00      	cmp	r3, #0
 8005398:	d104      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00c      	beq.n	80053be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d007      	beq.n	80053be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80053b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fafd 	bl	80059b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00c      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80053da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 faf5 	bl	80059cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00c      	beq.n	8005406 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d007      	beq.n	8005406 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f8fd 	bl	8005600 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00c      	beq.n	800542a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f06f 0220 	mvn.w	r2, #32
 8005422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fabd 	bl	80059a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800542a:	bf00      	nop
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_TIM_ConfigClockSource+0x1c>
 800544a:	2302      	movs	r3, #2
 800544c:	e0b6      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x18a>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800546c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005470:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005478:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800548a:	d03e      	beq.n	800550a <HAL_TIM_ConfigClockSource+0xd8>
 800548c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005490:	f200 8087 	bhi.w	80055a2 <HAL_TIM_ConfigClockSource+0x170>
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005498:	f000 8086 	beq.w	80055a8 <HAL_TIM_ConfigClockSource+0x176>
 800549c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a0:	d87f      	bhi.n	80055a2 <HAL_TIM_ConfigClockSource+0x170>
 80054a2:	2b70      	cmp	r3, #112	@ 0x70
 80054a4:	d01a      	beq.n	80054dc <HAL_TIM_ConfigClockSource+0xaa>
 80054a6:	2b70      	cmp	r3, #112	@ 0x70
 80054a8:	d87b      	bhi.n	80055a2 <HAL_TIM_ConfigClockSource+0x170>
 80054aa:	2b60      	cmp	r3, #96	@ 0x60
 80054ac:	d050      	beq.n	8005550 <HAL_TIM_ConfigClockSource+0x11e>
 80054ae:	2b60      	cmp	r3, #96	@ 0x60
 80054b0:	d877      	bhi.n	80055a2 <HAL_TIM_ConfigClockSource+0x170>
 80054b2:	2b50      	cmp	r3, #80	@ 0x50
 80054b4:	d03c      	beq.n	8005530 <HAL_TIM_ConfigClockSource+0xfe>
 80054b6:	2b50      	cmp	r3, #80	@ 0x50
 80054b8:	d873      	bhi.n	80055a2 <HAL_TIM_ConfigClockSource+0x170>
 80054ba:	2b40      	cmp	r3, #64	@ 0x40
 80054bc:	d058      	beq.n	8005570 <HAL_TIM_ConfigClockSource+0x13e>
 80054be:	2b40      	cmp	r3, #64	@ 0x40
 80054c0:	d86f      	bhi.n	80055a2 <HAL_TIM_ConfigClockSource+0x170>
 80054c2:	2b30      	cmp	r3, #48	@ 0x30
 80054c4:	d064      	beq.n	8005590 <HAL_TIM_ConfigClockSource+0x15e>
 80054c6:	2b30      	cmp	r3, #48	@ 0x30
 80054c8:	d86b      	bhi.n	80055a2 <HAL_TIM_ConfigClockSource+0x170>
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d060      	beq.n	8005590 <HAL_TIM_ConfigClockSource+0x15e>
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d867      	bhi.n	80055a2 <HAL_TIM_ConfigClockSource+0x170>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d05c      	beq.n	8005590 <HAL_TIM_ConfigClockSource+0x15e>
 80054d6:	2b10      	cmp	r3, #16
 80054d8:	d05a      	beq.n	8005590 <HAL_TIM_ConfigClockSource+0x15e>
 80054da:	e062      	b.n	80055a2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ec:	f000 f9b2 	bl	8005854 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	609a      	str	r2, [r3, #8]
      break;
 8005508:	e04f      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800551a:	f000 f99b 	bl	8005854 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800552c:	609a      	str	r2, [r3, #8]
      break;
 800552e:	e03c      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800553c:	461a      	mov	r2, r3
 800553e:	f000 f90f 	bl	8005760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2150      	movs	r1, #80	@ 0x50
 8005548:	4618      	mov	r0, r3
 800554a:	f000 f968 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 800554e:	e02c      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800555c:	461a      	mov	r2, r3
 800555e:	f000 f92e 	bl	80057be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2160      	movs	r1, #96	@ 0x60
 8005568:	4618      	mov	r0, r3
 800556a:	f000 f958 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 800556e:	e01c      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800557c:	461a      	mov	r2, r3
 800557e:	f000 f8ef 	bl	8005760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2140      	movs	r1, #64	@ 0x40
 8005588:	4618      	mov	r0, r3
 800558a:	f000 f948 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 800558e:	e00c      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4619      	mov	r1, r3
 800559a:	4610      	mov	r0, r2
 800559c:	f000 f93f 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 80055a0:	e003      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	73fb      	strb	r3, [r7, #15]
      break;
 80055a6:	e000      	b.n	80055aa <HAL_TIM_ConfigClockSource+0x178>
      break;
 80055a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a46      	ldr	r2, [pc, #280]	@ (8005740 <TIM_Base_SetConfig+0x12c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005632:	d00f      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a43      	ldr	r2, [pc, #268]	@ (8005744 <TIM_Base_SetConfig+0x130>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00b      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a42      	ldr	r2, [pc, #264]	@ (8005748 <TIM_Base_SetConfig+0x134>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a41      	ldr	r2, [pc, #260]	@ (800574c <TIM_Base_SetConfig+0x138>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a40      	ldr	r2, [pc, #256]	@ (8005750 <TIM_Base_SetConfig+0x13c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d108      	bne.n	8005666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a35      	ldr	r2, [pc, #212]	@ (8005740 <TIM_Base_SetConfig+0x12c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01f      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005674:	d01b      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a32      	ldr	r2, [pc, #200]	@ (8005744 <TIM_Base_SetConfig+0x130>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d017      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a31      	ldr	r2, [pc, #196]	@ (8005748 <TIM_Base_SetConfig+0x134>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d013      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a30      	ldr	r2, [pc, #192]	@ (800574c <TIM_Base_SetConfig+0x138>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00f      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2f      	ldr	r2, [pc, #188]	@ (8005750 <TIM_Base_SetConfig+0x13c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00b      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2e      	ldr	r2, [pc, #184]	@ (8005754 <TIM_Base_SetConfig+0x140>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005758 <TIM_Base_SetConfig+0x144>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_Base_SetConfig+0x9a>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2c      	ldr	r2, [pc, #176]	@ (800575c <TIM_Base_SetConfig+0x148>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d108      	bne.n	80056c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689a      	ldr	r2, [r3, #8]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a16      	ldr	r2, [pc, #88]	@ (8005740 <TIM_Base_SetConfig+0x12c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_Base_SetConfig+0xf8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a18      	ldr	r2, [pc, #96]	@ (8005750 <TIM_Base_SetConfig+0x13c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0xf8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a17      	ldr	r2, [pc, #92]	@ (8005754 <TIM_Base_SetConfig+0x140>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0xf8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a16      	ldr	r2, [pc, #88]	@ (8005758 <TIM_Base_SetConfig+0x144>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0xf8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a15      	ldr	r2, [pc, #84]	@ (800575c <TIM_Base_SetConfig+0x148>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d103      	bne.n	8005714 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d105      	bne.n	8005732 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f023 0201 	bic.w	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	611a      	str	r2, [r3, #16]
  }
}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	40000c00 	.word	0x40000c00
 8005750:	40013400 	.word	0x40013400
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400
 800575c:	40014800 	.word	0x40014800

08005760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f023 0201 	bic.w	r2, r3, #1
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800578a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 030a 	bic.w	r3, r3, #10
 800579c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057be:	b480      	push	{r7}
 80057c0:	b087      	sub	sp, #28
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f023 0210 	bic.w	r2, r3, #16
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	031b      	lsls	r3, r3, #12
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	f043 0307 	orr.w	r3, r3, #7
 8005840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800586e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	021a      	lsls	r2, r3, #8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	431a      	orrs	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4313      	orrs	r3, r2
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e068      	b.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a2e      	ldr	r2, [pc, #184]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2d      	ldr	r2, [pc, #180]	@ (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d108      	bne.n	80058f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1e      	ldr	r2, [pc, #120]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d01d      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591e:	d018      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1b      	ldr	r2, [pc, #108]	@ (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1a      	ldr	r2, [pc, #104]	@ (8005998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00e      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a18      	ldr	r2, [pc, #96]	@ (800599c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d009      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a13      	ldr	r2, [pc, #76]	@ (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d004      	beq.n	8005952 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a14      	ldr	r2, [pc, #80]	@ (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10c      	bne.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	4313      	orrs	r3, r2
 8005962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40013400 	.word	0x40013400
 8005994:	40000400 	.word	0x40000400
 8005998:	40000800 	.word	0x40000800
 800599c:	40000c00 	.word	0x40000c00
 80059a0:	40014000 	.word	0x40014000

080059a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e042      	b.n	8005a78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7fb fa37 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2224      	movs	r2, #36	@ 0x24
 8005a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fb24 	bl	8006078 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f825 	bl	8005a80 <UART_SetConfig>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e01b      	b.n	8005a78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fba3 	bl	80061bc <UART_CheckIdleState>
 8005a76:	4603      	mov	r3, r0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a84:	b08c      	sub	sp, #48	@ 0x30
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4baa      	ldr	r3, [pc, #680]	@ (8005d58 <UART_SetConfig+0x2d8>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a9f      	ldr	r2, [pc, #636]	@ (8005d5c <UART_SetConfig+0x2dc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005af6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0a:	f023 010f 	bic.w	r1, r3, #15
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a90      	ldr	r2, [pc, #576]	@ (8005d60 <UART_SetConfig+0x2e0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d125      	bne.n	8005b70 <UART_SetConfig+0xf0>
 8005b24:	4b8f      	ldr	r3, [pc, #572]	@ (8005d64 <UART_SetConfig+0x2e4>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b2a:	f003 0303 	and.w	r3, r3, #3
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d81a      	bhi.n	8005b68 <UART_SetConfig+0xe8>
 8005b32:	a201      	add	r2, pc, #4	@ (adr r2, 8005b38 <UART_SetConfig+0xb8>)
 8005b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b59 	.word	0x08005b59
 8005b40:	08005b51 	.word	0x08005b51
 8005b44:	08005b61 	.word	0x08005b61
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b4e:	e116      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005b50:	2302      	movs	r3, #2
 8005b52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b56:	e112      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005b58:	2304      	movs	r3, #4
 8005b5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b5e:	e10e      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005b60:	2308      	movs	r3, #8
 8005b62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b66:	e10a      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005b68:	2310      	movs	r3, #16
 8005b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b6e:	e106      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a7c      	ldr	r2, [pc, #496]	@ (8005d68 <UART_SetConfig+0x2e8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d138      	bne.n	8005bec <UART_SetConfig+0x16c>
 8005b7a:	4b7a      	ldr	r3, [pc, #488]	@ (8005d64 <UART_SetConfig+0x2e4>)
 8005b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b80:	f003 030c 	and.w	r3, r3, #12
 8005b84:	2b0c      	cmp	r3, #12
 8005b86:	d82d      	bhi.n	8005be4 <UART_SetConfig+0x164>
 8005b88:	a201      	add	r2, pc, #4	@ (adr r2, 8005b90 <UART_SetConfig+0x110>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005bc5 	.word	0x08005bc5
 8005b94:	08005be5 	.word	0x08005be5
 8005b98:	08005be5 	.word	0x08005be5
 8005b9c:	08005be5 	.word	0x08005be5
 8005ba0:	08005bd5 	.word	0x08005bd5
 8005ba4:	08005be5 	.word	0x08005be5
 8005ba8:	08005be5 	.word	0x08005be5
 8005bac:	08005be5 	.word	0x08005be5
 8005bb0:	08005bcd 	.word	0x08005bcd
 8005bb4:	08005be5 	.word	0x08005be5
 8005bb8:	08005be5 	.word	0x08005be5
 8005bbc:	08005be5 	.word	0x08005be5
 8005bc0:	08005bdd 	.word	0x08005bdd
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bca:	e0d8      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bd2:	e0d4      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bda:	e0d0      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005bdc:	2308      	movs	r3, #8
 8005bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005be2:	e0cc      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005be4:	2310      	movs	r3, #16
 8005be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005bea:	e0c8      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a5e      	ldr	r2, [pc, #376]	@ (8005d6c <UART_SetConfig+0x2ec>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d125      	bne.n	8005c42 <UART_SetConfig+0x1c2>
 8005bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8005d64 <UART_SetConfig+0x2e4>)
 8005bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bfc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005c00:	2b30      	cmp	r3, #48	@ 0x30
 8005c02:	d016      	beq.n	8005c32 <UART_SetConfig+0x1b2>
 8005c04:	2b30      	cmp	r3, #48	@ 0x30
 8005c06:	d818      	bhi.n	8005c3a <UART_SetConfig+0x1ba>
 8005c08:	2b20      	cmp	r3, #32
 8005c0a:	d00a      	beq.n	8005c22 <UART_SetConfig+0x1a2>
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d814      	bhi.n	8005c3a <UART_SetConfig+0x1ba>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <UART_SetConfig+0x19a>
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d008      	beq.n	8005c2a <UART_SetConfig+0x1aa>
 8005c18:	e00f      	b.n	8005c3a <UART_SetConfig+0x1ba>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c20:	e0ad      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c22:	2302      	movs	r3, #2
 8005c24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c28:	e0a9      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c2a:	2304      	movs	r3, #4
 8005c2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c30:	e0a5      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c32:	2308      	movs	r3, #8
 8005c34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c38:	e0a1      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c3a:	2310      	movs	r3, #16
 8005c3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c40:	e09d      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a4a      	ldr	r2, [pc, #296]	@ (8005d70 <UART_SetConfig+0x2f0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d125      	bne.n	8005c98 <UART_SetConfig+0x218>
 8005c4c:	4b45      	ldr	r3, [pc, #276]	@ (8005d64 <UART_SetConfig+0x2e4>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005c56:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c58:	d016      	beq.n	8005c88 <UART_SetConfig+0x208>
 8005c5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c5c:	d818      	bhi.n	8005c90 <UART_SetConfig+0x210>
 8005c5e:	2b80      	cmp	r3, #128	@ 0x80
 8005c60:	d00a      	beq.n	8005c78 <UART_SetConfig+0x1f8>
 8005c62:	2b80      	cmp	r3, #128	@ 0x80
 8005c64:	d814      	bhi.n	8005c90 <UART_SetConfig+0x210>
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <UART_SetConfig+0x1f0>
 8005c6a:	2b40      	cmp	r3, #64	@ 0x40
 8005c6c:	d008      	beq.n	8005c80 <UART_SetConfig+0x200>
 8005c6e:	e00f      	b.n	8005c90 <UART_SetConfig+0x210>
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c76:	e082      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c7e:	e07e      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c80:	2304      	movs	r3, #4
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c86:	e07a      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c88:	2308      	movs	r3, #8
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c8e:	e076      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c90:	2310      	movs	r3, #16
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c96:	e072      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a35      	ldr	r2, [pc, #212]	@ (8005d74 <UART_SetConfig+0x2f4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d12a      	bne.n	8005cf8 <UART_SetConfig+0x278>
 8005ca2:	4b30      	ldr	r3, [pc, #192]	@ (8005d64 <UART_SetConfig+0x2e4>)
 8005ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cb0:	d01a      	beq.n	8005ce8 <UART_SetConfig+0x268>
 8005cb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005cb6:	d81b      	bhi.n	8005cf0 <UART_SetConfig+0x270>
 8005cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cbc:	d00c      	beq.n	8005cd8 <UART_SetConfig+0x258>
 8005cbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cc2:	d815      	bhi.n	8005cf0 <UART_SetConfig+0x270>
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d003      	beq.n	8005cd0 <UART_SetConfig+0x250>
 8005cc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ccc:	d008      	beq.n	8005ce0 <UART_SetConfig+0x260>
 8005cce:	e00f      	b.n	8005cf0 <UART_SetConfig+0x270>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cd6:	e052      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cde:	e04e      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005ce0:	2304      	movs	r3, #4
 8005ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ce6:	e04a      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005ce8:	2308      	movs	r3, #8
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cee:	e046      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cf6:	e042      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a17      	ldr	r2, [pc, #92]	@ (8005d5c <UART_SetConfig+0x2dc>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d13a      	bne.n	8005d78 <UART_SetConfig+0x2f8>
 8005d02:	4b18      	ldr	r3, [pc, #96]	@ (8005d64 <UART_SetConfig+0x2e4>)
 8005d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005d0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d10:	d01a      	beq.n	8005d48 <UART_SetConfig+0x2c8>
 8005d12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005d16:	d81b      	bhi.n	8005d50 <UART_SetConfig+0x2d0>
 8005d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d1c:	d00c      	beq.n	8005d38 <UART_SetConfig+0x2b8>
 8005d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d22:	d815      	bhi.n	8005d50 <UART_SetConfig+0x2d0>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d003      	beq.n	8005d30 <UART_SetConfig+0x2b0>
 8005d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d2c:	d008      	beq.n	8005d40 <UART_SetConfig+0x2c0>
 8005d2e:	e00f      	b.n	8005d50 <UART_SetConfig+0x2d0>
 8005d30:	2300      	movs	r3, #0
 8005d32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d36:	e022      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d3e:	e01e      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005d40:	2304      	movs	r3, #4
 8005d42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d46:	e01a      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005d48:	2308      	movs	r3, #8
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d4e:	e016      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005d50:	2310      	movs	r3, #16
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d56:	e012      	b.n	8005d7e <UART_SetConfig+0x2fe>
 8005d58:	cfff69f3 	.word	0xcfff69f3
 8005d5c:	40008000 	.word	0x40008000
 8005d60:	40013800 	.word	0x40013800
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40004400 	.word	0x40004400
 8005d6c:	40004800 	.word	0x40004800
 8005d70:	40004c00 	.word	0x40004c00
 8005d74:	40005000 	.word	0x40005000
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4aae      	ldr	r2, [pc, #696]	@ (800603c <UART_SetConfig+0x5bc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	f040 8097 	bne.w	8005eb8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d823      	bhi.n	8005dda <UART_SetConfig+0x35a>
 8005d92:	a201      	add	r2, pc, #4	@ (adr r2, 8005d98 <UART_SetConfig+0x318>)
 8005d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d98:	08005dbd 	.word	0x08005dbd
 8005d9c:	08005ddb 	.word	0x08005ddb
 8005da0:	08005dc5 	.word	0x08005dc5
 8005da4:	08005ddb 	.word	0x08005ddb
 8005da8:	08005dcb 	.word	0x08005dcb
 8005dac:	08005ddb 	.word	0x08005ddb
 8005db0:	08005ddb 	.word	0x08005ddb
 8005db4:	08005ddb 	.word	0x08005ddb
 8005db8:	08005dd3 	.word	0x08005dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dbc:	f7fe fb66 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8005dc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dc2:	e010      	b.n	8005de6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dc4:	4b9e      	ldr	r3, [pc, #632]	@ (8006040 <UART_SetConfig+0x5c0>)
 8005dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dc8:	e00d      	b.n	8005de6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dca:	f7fe fac7 	bl	800435c <HAL_RCC_GetSysClockFreq>
 8005dce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005dd0:	e009      	b.n	8005de6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005dd8:	e005      	b.n	8005de6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005de4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8130 	beq.w	800604e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	4a94      	ldr	r2, [pc, #592]	@ (8006044 <UART_SetConfig+0x5c4>)
 8005df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d305      	bcc.n	8005e1e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d903      	bls.n	8005e26 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005e24:	e113      	b.n	800604e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	2200      	movs	r2, #0
 8005e2a:	60bb      	str	r3, [r7, #8]
 8005e2c:	60fa      	str	r2, [r7, #12]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e32:	4a84      	ldr	r2, [pc, #528]	@ (8006044 <UART_SetConfig+0x5c4>)
 8005e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e48:	f7fa f9d8 	bl	80001fc <__aeabi_uldivmod>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4610      	mov	r0, r2
 8005e52:	4619      	mov	r1, r3
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	020b      	lsls	r3, r1, #8
 8005e5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e62:	0202      	lsls	r2, r0, #8
 8005e64:	6979      	ldr	r1, [r7, #20]
 8005e66:	6849      	ldr	r1, [r1, #4]
 8005e68:	0849      	lsrs	r1, r1, #1
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	4605      	mov	r5, r0
 8005e70:	eb12 0804 	adds.w	r8, r2, r4
 8005e74:	eb43 0905 	adc.w	r9, r3, r5
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	469a      	mov	sl, r3
 8005e80:	4693      	mov	fp, r2
 8005e82:	4652      	mov	r2, sl
 8005e84:	465b      	mov	r3, fp
 8005e86:	4640      	mov	r0, r8
 8005e88:	4649      	mov	r1, r9
 8005e8a:	f7fa f9b7 	bl	80001fc <__aeabi_uldivmod>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4613      	mov	r3, r2
 8005e94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e9c:	d308      	bcc.n	8005eb0 <UART_SetConfig+0x430>
 8005e9e:	6a3b      	ldr	r3, [r7, #32]
 8005ea0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ea4:	d204      	bcs.n	8005eb0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6a3a      	ldr	r2, [r7, #32]
 8005eac:	60da      	str	r2, [r3, #12]
 8005eae:	e0ce      	b.n	800604e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005eb6:	e0ca      	b.n	800604e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ec0:	d166      	bne.n	8005f90 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d827      	bhi.n	8005f1a <UART_SetConfig+0x49a>
 8005eca:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed0 <UART_SetConfig+0x450>)
 8005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005efd 	.word	0x08005efd
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	08005f1b 	.word	0x08005f1b
 8005ee0:	08005f0b 	.word	0x08005f0b
 8005ee4:	08005f1b 	.word	0x08005f1b
 8005ee8:	08005f1b 	.word	0x08005f1b
 8005eec:	08005f1b 	.word	0x08005f1b
 8005ef0:	08005f13 	.word	0x08005f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef4:	f7fe faca 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8005ef8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005efa:	e014      	b.n	8005f26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005efc:	f7fe fadc 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 8005f00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f02:	e010      	b.n	8005f26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f04:	4b4e      	ldr	r3, [pc, #312]	@ (8006040 <UART_SetConfig+0x5c0>)
 8005f06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f08:	e00d      	b.n	8005f26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0a:	f7fe fa27 	bl	800435c <HAL_RCC_GetSysClockFreq>
 8005f0e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f10:	e009      	b.n	8005f26 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f18:	e005      	b.n	8005f26 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 8090 	beq.w	800604e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	4a44      	ldr	r2, [pc, #272]	@ (8006044 <UART_SetConfig+0x5c4>)
 8005f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f40:	005a      	lsls	r2, r3, #1
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	085b      	lsrs	r3, r3, #1
 8005f48:	441a      	add	r2, r3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f52:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	2b0f      	cmp	r3, #15
 8005f58:	d916      	bls.n	8005f88 <UART_SetConfig+0x508>
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f60:	d212      	bcs.n	8005f88 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	f023 030f 	bic.w	r3, r3, #15
 8005f6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f6c:	6a3b      	ldr	r3, [r7, #32]
 8005f6e:	085b      	lsrs	r3, r3, #1
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	8bfb      	ldrh	r3, [r7, #30]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	8bfa      	ldrh	r2, [r7, #30]
 8005f84:	60da      	str	r2, [r3, #12]
 8005f86:	e062      	b.n	800604e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f8e:	e05e      	b.n	800604e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005f90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d828      	bhi.n	8005fea <UART_SetConfig+0x56a>
 8005f98:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa0 <UART_SetConfig+0x520>)
 8005f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9e:	bf00      	nop
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08005fcd 	.word	0x08005fcd
 8005fa8:	08005fd5 	.word	0x08005fd5
 8005fac:	08005feb 	.word	0x08005feb
 8005fb0:	08005fdb 	.word	0x08005fdb
 8005fb4:	08005feb 	.word	0x08005feb
 8005fb8:	08005feb 	.word	0x08005feb
 8005fbc:	08005feb 	.word	0x08005feb
 8005fc0:	08005fe3 	.word	0x08005fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fc4:	f7fe fa62 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8005fc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fca:	e014      	b.n	8005ff6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fcc:	f7fe fa74 	bl	80044b8 <HAL_RCC_GetPCLK2Freq>
 8005fd0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fd2:	e010      	b.n	8005ff6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fd4:	4b1a      	ldr	r3, [pc, #104]	@ (8006040 <UART_SetConfig+0x5c0>)
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fd8:	e00d      	b.n	8005ff6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fda:	f7fe f9bf 	bl	800435c <HAL_RCC_GetSysClockFreq>
 8005fde:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005fe0:	e009      	b.n	8005ff6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005fe8:	e005      	b.n	8005ff6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005ff4:	bf00      	nop
    }

    if (pclk != 0U)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d028      	beq.n	800604e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	4a10      	ldr	r2, [pc, #64]	@ (8006044 <UART_SetConfig+0x5c4>)
 8006002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006006:	461a      	mov	r2, r3
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	fbb3 f2f2 	udiv	r2, r3, r2
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	441a      	add	r2, r3
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	fbb2 f3f3 	udiv	r3, r2, r3
 800601e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	2b0f      	cmp	r3, #15
 8006024:	d910      	bls.n	8006048 <UART_SetConfig+0x5c8>
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800602c:	d20c      	bcs.n	8006048 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	b29a      	uxth	r2, r3
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60da      	str	r2, [r3, #12]
 8006038:	e009      	b.n	800604e <UART_SetConfig+0x5ce>
 800603a:	bf00      	nop
 800603c:	40008000 	.word	0x40008000
 8006040:	00f42400 	.word	0x00f42400
 8006044:	08006ccc 	.word	0x08006ccc
      }
      else
      {
        ret = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2201      	movs	r2, #1
 8006052:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2201      	movs	r2, #1
 800605a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2200      	movs	r2, #0
 8006062:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2200      	movs	r2, #0
 8006068:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800606a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800606e:	4618      	mov	r0, r3
 8006070:	3730      	adds	r7, #48	@ 0x30
 8006072:	46bd      	mov	sp, r7
 8006074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00a      	beq.n	80060a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ea:	f003 0304 	and.w	r3, r3, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00a      	beq.n	800612a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612e:	f003 0320 	and.w	r3, r3, #32
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00a      	beq.n	800614c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d01a      	beq.n	800618e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006172:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006176:	d10a      	bne.n	800618e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b098      	sub	sp, #96	@ 0x60
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061cc:	f7fb f8d4 	bl	8001378 <HAL_GetTick>
 80061d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0308 	and.w	r3, r3, #8
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d12f      	bne.n	8006240 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061e8:	2200      	movs	r2, #0
 80061ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f88e 	bl	8006310 <UART_WaitOnFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d022      	beq.n	8006240 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800620e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006218:	647b      	str	r3, [r7, #68]	@ 0x44
 800621a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800621e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e6      	bne.n	80061fa <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e063      	b.n	8006308 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0304 	and.w	r3, r3, #4
 800624a:	2b04      	cmp	r3, #4
 800624c:	d149      	bne.n	80062e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800624e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006256:	2200      	movs	r2, #0
 8006258:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f857 	bl	8006310 <UART_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d03c      	beq.n	80062e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	623b      	str	r3, [r7, #32]
   return(result);
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800627c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006286:	633b      	str	r3, [r7, #48]	@ 0x30
 8006288:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800628c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e6      	bne.n	8006268 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3308      	adds	r3, #8
 80062a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3308      	adds	r3, #8
 80062b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062ba:	61fa      	str	r2, [r7, #28]
 80062bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	69b9      	ldr	r1, [r7, #24]
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	617b      	str	r3, [r7, #20]
   return(result);
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e5      	bne.n	800629a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e012      	b.n	8006308 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3758      	adds	r7, #88	@ 0x58
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	4613      	mov	r3, r2
 800631e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006320:	e04f      	b.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006328:	d04b      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632a:	f7fb f825 	bl	8001378 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	429a      	cmp	r2, r3
 8006338:	d302      	bcc.n	8006340 <UART_WaitOnFlagUntilTimeout+0x30>
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e04e      	b.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	2b00      	cmp	r3, #0
 8006350:	d037      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b80      	cmp	r3, #128	@ 0x80
 8006356:	d034      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b40      	cmp	r3, #64	@ 0x40
 800635c:	d031      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b08      	cmp	r3, #8
 800636a:	d110      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2208      	movs	r2, #8
 8006372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f838 	bl	80063ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2208      	movs	r2, #8
 800637e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e029      	b.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800639c:	d111      	bne.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f81e 	bl	80063ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e00f      	b.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69da      	ldr	r2, [r3, #28]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4013      	ands	r3, r2
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	bf0c      	ite	eq
 80063d2:	2301      	moveq	r3, #1
 80063d4:	2300      	movne	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d0a0      	beq.n	8006322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b095      	sub	sp, #84	@ 0x54
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006410:	643b      	str	r3, [r7, #64]	@ 0x40
 8006412:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006416:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800641e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e6      	bne.n	80063f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3308      	adds	r3, #8
 800642a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	e853 3f00 	ldrex	r3, [r3]
 8006432:	61fb      	str	r3, [r7, #28]
   return(result);
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3308      	adds	r3, #8
 8006446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006448:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800644a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800644e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e3      	bne.n	8006424 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d118      	bne.n	8006496 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	e853 3f00 	ldrex	r3, [r3]
 8006470:	60bb      	str	r3, [r7, #8]
   return(result);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f023 0310 	bic.w	r3, r3, #16
 8006478:	647b      	str	r3, [r7, #68]	@ 0x44
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006486:	6979      	ldr	r1, [r7, #20]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	e841 2300 	strex	r3, r2, [r1]
 800648e:	613b      	str	r3, [r7, #16]
   return(result);
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1e6      	bne.n	8006464 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80064aa:	bf00      	nop
 80064ac:	3754      	adds	r7, #84	@ 0x54
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr

080064b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064b6:	b480      	push	{r7}
 80064b8:	b085      	sub	sp, #20
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_UARTEx_DisableFifoMode+0x16>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e027      	b.n	800651c <HAL_UARTEx_DisableFifoMode+0x66>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2224      	movs	r2, #36	@ 0x24
 80064d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0201 	bic.w	r2, r2, #1
 80064f2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80064fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800653c:	2302      	movs	r3, #2
 800653e:	e02d      	b.n	800659c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2224      	movs	r2, #36	@ 0x24
 800654c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f84f 	bl	8006620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2220      	movs	r2, #32
 800658e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e02d      	b.n	8006618 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2224      	movs	r2, #36	@ 0x24
 80065c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0201 	bic.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f811 	bl	8006620 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2220      	movs	r2, #32
 800660a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800662c:	2b00      	cmp	r3, #0
 800662e:	d108      	bne.n	8006642 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006640:	e031      	b.n	80066a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006642:	2308      	movs	r3, #8
 8006644:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006646:	2308      	movs	r3, #8
 8006648:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	0e5b      	lsrs	r3, r3, #25
 8006652:	b2db      	uxtb	r3, r3
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	0f5b      	lsrs	r3, r3, #29
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800666a:	7bbb      	ldrb	r3, [r7, #14]
 800666c:	7b3a      	ldrb	r2, [r7, #12]
 800666e:	4911      	ldr	r1, [pc, #68]	@ (80066b4 <UARTEx_SetNbDataToProcess+0x94>)
 8006670:	5c8a      	ldrb	r2, [r1, r2]
 8006672:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006676:	7b3a      	ldrb	r2, [r7, #12]
 8006678:	490f      	ldr	r1, [pc, #60]	@ (80066b8 <UARTEx_SetNbDataToProcess+0x98>)
 800667a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800667c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	7b7a      	ldrb	r2, [r7, #13]
 800668c:	4909      	ldr	r1, [pc, #36]	@ (80066b4 <UARTEx_SetNbDataToProcess+0x94>)
 800668e:	5c8a      	ldrb	r2, [r1, r2]
 8006690:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006694:	7b7a      	ldrb	r2, [r7, #13]
 8006696:	4908      	ldr	r1, [pc, #32]	@ (80066b8 <UARTEx_SetNbDataToProcess+0x98>)
 8006698:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800669a:	fb93 f3f2 	sdiv	r3, r3, r2
 800669e:	b29a      	uxth	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	08006ce4 	.word	0x08006ce4
 80066b8:	08006cec 	.word	0x08006cec

080066bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066bc:	b084      	sub	sp, #16
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	f107 001c 	add.w	r0, r7, #28
 80066ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 fa68 	bl	8006bb0 <USB_CoreReset>
 80066e0:	4603      	mov	r3, r0
 80066e2:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80066e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d106      	bne.n	80066fa <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80066f8:	e005      	b.n	8006706 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006706:	7bfb      	ldrb	r3, [r7, #15]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006712:	b004      	add	sp, #16
 8006714:	4770      	bx	lr

08006716 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f023 0201 	bic.w	r2, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d115      	bne.n	8006786 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006766:	200a      	movs	r0, #10
 8006768:	f7fa fe12 	bl	8001390 <HAL_Delay>
      ms += 10U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	330a      	adds	r3, #10
 8006770:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fa0e 	bl	8006b94 <USB_GetMode>
 8006778:	4603      	mov	r3, r0
 800677a:	2b01      	cmp	r3, #1
 800677c:	d01e      	beq.n	80067bc <USB_SetCurrentMode+0x84>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2bc7      	cmp	r3, #199	@ 0xc7
 8006782:	d9f0      	bls.n	8006766 <USB_SetCurrentMode+0x2e>
 8006784:	e01a      	b.n	80067bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d115      	bne.n	80067b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006798:	200a      	movs	r0, #10
 800679a:	f7fa fdf9 	bl	8001390 <HAL_Delay>
      ms += 10U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	330a      	adds	r3, #10
 80067a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f9f5 	bl	8006b94 <USB_GetMode>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <USB_SetCurrentMode+0x84>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80067b4:	d9f0      	bls.n	8006798 <USB_SetCurrentMode+0x60>
 80067b6:	e001      	b.n	80067bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e005      	b.n	80067c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2bc8      	cmp	r3, #200	@ 0xc8
 80067c0:	d101      	bne.n	80067c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067d0:	b084      	sub	sp, #16
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b086      	sub	sp, #24
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80067de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067ea:	2300      	movs	r3, #0
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	e009      	b.n	8006804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	3340      	adds	r3, #64	@ 0x40
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	2200      	movs	r2, #0
 80067fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3301      	adds	r3, #1
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b0e      	cmp	r3, #14
 8006808:	d9f2      	bls.n	80067f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800680a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800680e:	2b00      	cmp	r3, #0
 8006810:	d11c      	bne.n	800684c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006820:	f043 0302 	orr.w	r3, r3, #2
 8006824:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800682a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e005      	b.n	8006858 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006850:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800685e:	461a      	mov	r2, r3
 8006860:	2300      	movs	r3, #0
 8006862:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006864:	2103      	movs	r1, #3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f95a 	bl	8006b20 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800686c:	2110      	movs	r1, #16
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f8f6 	bl	8006a60 <USB_FlushTxFifo>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f920 	bl	8006ac4 <USB_FlushRxFifo>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006894:	461a      	mov	r2, r3
 8006896:	2300      	movs	r3, #0
 8006898:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068a0:	461a      	mov	r2, r3
 80068a2:	2300      	movs	r3, #0
 80068a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ac:	461a      	mov	r2, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068b2:	2300      	movs	r3, #0
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	e043      	b.n	8006940 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068ce:	d118      	bne.n	8006902 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10a      	bne.n	80068ec <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e2:	461a      	mov	r2, r3
 80068e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	e013      	b.n	8006914 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f8:	461a      	mov	r2, r3
 80068fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	e008      	b.n	8006914 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690e:	461a      	mov	r2, r3
 8006910:	2300      	movs	r3, #0
 8006912:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006920:	461a      	mov	r2, r3
 8006922:	2300      	movs	r3, #0
 8006924:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006932:	461a      	mov	r2, r3
 8006934:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006938:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	3301      	adds	r3, #1
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006944:	461a      	mov	r2, r3
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	4293      	cmp	r3, r2
 800694a:	d3b5      	bcc.n	80068b8 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800694c:	2300      	movs	r3, #0
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	e043      	b.n	80069da <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006964:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006968:	d118      	bne.n	800699c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10a      	bne.n	8006986 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697c:	461a      	mov	r2, r3
 800697e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006982:	6013      	str	r3, [r2, #0]
 8006984:	e013      	b.n	80069ae <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	015a      	lsls	r2, r3, #5
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4413      	add	r3, r2
 800698e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006992:	461a      	mov	r2, r3
 8006994:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	e008      	b.n	80069ae <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a8:	461a      	mov	r2, r3
 80069aa:	2300      	movs	r3, #0
 80069ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ba:	461a      	mov	r2, r3
 80069bc:	2300      	movs	r3, #0
 80069be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069cc:	461a      	mov	r2, r3
 80069ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	3301      	adds	r3, #1
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80069de:	461a      	mov	r2, r3
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d3b5      	bcc.n	8006952 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006a06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	f043 0210 	orr.w	r2, r3, #16
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699a      	ldr	r2, [r3, #24]
 8006a18:	4b10      	ldr	r3, [pc, #64]	@ (8006a5c <USB_DevInit+0x28c>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a20:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d005      	beq.n	8006a34 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	f043 0208 	orr.w	r2, r3, #8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d107      	bne.n	8006a4c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a44:	f043 0304 	orr.w	r3, r3, #4
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a58:	b004      	add	sp, #16
 8006a5a:	4770      	bx	lr
 8006a5c:	803c3800 	.word	0x803c3800

08006a60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3301      	adds	r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a7a:	d901      	bls.n	8006a80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e01b      	b.n	8006ab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	daf2      	bge.n	8006a6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	019b      	lsls	r3, r3, #6
 8006a90:	f043 0220 	orr.w	r2, r3, #32
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006aa4:	d901      	bls.n	8006aaa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e006      	b.n	8006ab8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0320 	and.w	r3, r3, #32
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d0f0      	beq.n	8006a98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006adc:	d901      	bls.n	8006ae2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e018      	b.n	8006b14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	daf2      	bge.n	8006ad0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2210      	movs	r2, #16
 8006af2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3301      	adds	r3, #1
 8006af8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b00:	d901      	bls.n	8006b06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e006      	b.n	8006b14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	f003 0310 	and.w	r3, r3, #16
 8006b0e:	2b10      	cmp	r3, #16
 8006b10:	d0f0      	beq.n	8006af4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	68f9      	ldr	r1, [r7, #12]
 8006b3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b40:	4313      	orrs	r3, r2
 8006b42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b6c:	f023 0303 	bic.w	r3, r3, #3
 8006b70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b80:	f043 0302 	orr.w	r3, r3, #2
 8006b84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bc8:	d901      	bls.n	8006bce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e01b      	b.n	8006c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	daf2      	bge.n	8006bbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f043 0201 	orr.w	r2, r3, #1
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3301      	adds	r3, #1
 8006bea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bf2:	d901      	bls.n	8006bf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e006      	b.n	8006c06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d0f0      	beq.n	8006be6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <memset>:
 8006c12:	4402      	add	r2, r0
 8006c14:	4603      	mov	r3, r0
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d100      	bne.n	8006c1c <memset+0xa>
 8006c1a:	4770      	bx	lr
 8006c1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c20:	e7f9      	b.n	8006c16 <memset+0x4>
	...

08006c24 <__libc_init_array>:
 8006c24:	b570      	push	{r4, r5, r6, lr}
 8006c26:	4d0d      	ldr	r5, [pc, #52]	@ (8006c5c <__libc_init_array+0x38>)
 8006c28:	4c0d      	ldr	r4, [pc, #52]	@ (8006c60 <__libc_init_array+0x3c>)
 8006c2a:	1b64      	subs	r4, r4, r5
 8006c2c:	10a4      	asrs	r4, r4, #2
 8006c2e:	2600      	movs	r6, #0
 8006c30:	42a6      	cmp	r6, r4
 8006c32:	d109      	bne.n	8006c48 <__libc_init_array+0x24>
 8006c34:	4d0b      	ldr	r5, [pc, #44]	@ (8006c64 <__libc_init_array+0x40>)
 8006c36:	4c0c      	ldr	r4, [pc, #48]	@ (8006c68 <__libc_init_array+0x44>)
 8006c38:	f000 f818 	bl	8006c6c <_init>
 8006c3c:	1b64      	subs	r4, r4, r5
 8006c3e:	10a4      	asrs	r4, r4, #2
 8006c40:	2600      	movs	r6, #0
 8006c42:	42a6      	cmp	r6, r4
 8006c44:	d105      	bne.n	8006c52 <__libc_init_array+0x2e>
 8006c46:	bd70      	pop	{r4, r5, r6, pc}
 8006c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4c:	4798      	blx	r3
 8006c4e:	3601      	adds	r6, #1
 8006c50:	e7ee      	b.n	8006c30 <__libc_init_array+0xc>
 8006c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c56:	4798      	blx	r3
 8006c58:	3601      	adds	r6, #1
 8006c5a:	e7f2      	b.n	8006c42 <__libc_init_array+0x1e>
 8006c5c:	08006cfc 	.word	0x08006cfc
 8006c60:	08006cfc 	.word	0x08006cfc
 8006c64:	08006cfc 	.word	0x08006cfc
 8006c68:	08006d00 	.word	0x08006d00

08006c6c <_init>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr

08006c78 <_fini>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr
