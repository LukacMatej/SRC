
cv2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007860  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08007a20  08007a20  00008a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b24  08007b24  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007b24  08007b24  00008b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b2c  08007b2c  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b2c  08007b2c  00008b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007b30  08007b30  00008b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20040000  08007b34  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002164  20040060  08007b94  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200421c4  08007b94  000091c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021c3c  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004219  00000000  00000000  0002accc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af0  00000000  00000000  0002eee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f4  00000000  00000000  000309d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003db6  00000000  00000000  00031ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef5f  00000000  00000000  00035c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011417c  00000000  00000000  00054be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00168d5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007600  00000000  00000000  00168da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001703a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040060 	.word	0x20040060
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007a08 	.word	0x08007a08

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040064 	.word	0x20040064
 80001fc:	08007a08 	.word	0x08007a08

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	2b00      	cmp	r3, #0
 8000506:	d013      	beq.n	8000530 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000508:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800050c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000510:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00b      	beq.n	8000530 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000518:	e000      	b.n	800051c <ITM_SendChar+0x2c>
    {
      __NOP();
 800051a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0f9      	beq.n	800051a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000526:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000530:	687b      	ldr	r3, [r7, #4]
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fc93 	bl	8000e6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f836 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f950 	bl	80007f0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000550:	f000 f886 	bl	8000660 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000554:	f000 f8d2 	bl	80006fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000558:	f000 f91c 	bl	8000794 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800055c:	f004 f9ce 	bl	80048fc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue1 */
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 8000560:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <main+0x58>)
 8000562:	2101      	movs	r1, #1
 8000564:	2008      	movs	r0, #8
 8000566:	f004 fac0 	bl	8004aea <osMessageQueueNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a0b      	ldr	r2, [pc, #44]	@ (800059c <main+0x5c>)
 800056e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Sender */
  SenderHandle = osThreadNew(StartSender, NULL, &Sender_attributes);
 8000570:	4a0b      	ldr	r2, [pc, #44]	@ (80005a0 <main+0x60>)
 8000572:	2100      	movs	r1, #0
 8000574:	480b      	ldr	r0, [pc, #44]	@ (80005a4 <main+0x64>)
 8000576:	f004 fa0b 	bl	8004990 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <main+0x68>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of Receiver */
  ReceiverHandle = osThreadNew(StartReceiver, NULL, &Receiver_attributes);
 8000580:	4a0a      	ldr	r2, [pc, #40]	@ (80005ac <main+0x6c>)
 8000582:	2100      	movs	r1, #0
 8000584:	480a      	ldr	r0, [pc, #40]	@ (80005b0 <main+0x70>)
 8000586:	f004 fa03 	bl	8004990 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a09      	ldr	r2, [pc, #36]	@ (80005b4 <main+0x74>)
 800058e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000590:	f004 f9d8 	bl	8004944 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <main+0x54>
 8000598:	08007a9c 	.word	0x08007a9c
 800059c:	20040690 	.word	0x20040690
 80005a0:	08007a54 	.word	0x08007a54
 80005a4:	08000959 	.word	0x08000959
 80005a8:	20040688 	.word	0x20040688
 80005ac:	08007a78 	.word	0x08007a78
 80005b0:	0800099d 	.word	0x0800099d
 80005b4:	2004068c 	.word	0x2004068c

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	@ 0x58
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2244      	movs	r2, #68	@ 0x44
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f007 f936 	bl	8007838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005da:	2000      	movs	r0, #0
 80005dc:	f001 f884 	bl	80016e8 <HAL_PWREx_ControlVoltageScaling>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005e6:	f000 fa07 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80005ea:	2322      	movs	r3, #34	@ 0x22
 80005ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2340      	movs	r3, #64	@ 0x40
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000608:	231e      	movs	r3, #30
 800060a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000610:	2302      	movs	r3, #2
 8000612:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000614:	2302      	movs	r3, #2
 8000616:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f927 	bl	8001870 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000628:	f000 f9e6 	bl	80009f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062c:	230f      	movs	r3, #15
 800062e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000630:	2303      	movs	r3, #3
 8000632:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	2105      	movs	r1, #5
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fd2c 	bl	80020a4 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000652:	f000 f9d1 	bl	80009f8 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3758      	adds	r7, #88	@ 0x58
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000666:	4a23      	ldr	r2, [pc, #140]	@ (80006f4 <MX_LPUART1_UART_Init+0x94>)
 8000668:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800066a:	4b21      	ldr	r3, [pc, #132]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 800066c:	4a22      	ldr	r2, [pc, #136]	@ (80006f8 <MX_LPUART1_UART_Init+0x98>)
 800066e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000676:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000678:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000686:	220c      	movs	r2, #12
 8000688:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068a:	4b19      	ldr	r3, [pc, #100]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000690:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000696:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 800069e:	2200      	movs	r2, #0
 80006a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006a8:	4811      	ldr	r0, [pc, #68]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 80006aa:	f002 ffc9 	bl	8003640 <HAL_UART_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006b4:	f000 f9a0 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	480d      	ldr	r0, [pc, #52]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 80006bc:	f003 fd64 	bl	8004188 <HAL_UARTEx_SetTxFifoThreshold>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006c6:	f000 f997 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ca:	2100      	movs	r1, #0
 80006cc:	4808      	ldr	r0, [pc, #32]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 80006ce:	f003 fd99 	bl	8004204 <HAL_UARTEx_SetRxFifoThreshold>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006d8:	f000 f98e 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	@ (80006f0 <MX_LPUART1_UART_Init+0x90>)
 80006de:	f003 fd1a 	bl	8004116 <HAL_UARTEx_DisableFifoMode>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006e8:	f000 f986 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2004007c 	.word	0x2004007c
 80006f4:	40008000 	.word	0x40008000
 80006f8:	00033324 	.word	0x00033324

080006fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000700:	4b22      	ldr	r3, [pc, #136]	@ (800078c <MX_USART3_UART_Init+0x90>)
 8000702:	4a23      	ldr	r2, [pc, #140]	@ (8000790 <MX_USART3_UART_Init+0x94>)
 8000704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <MX_USART3_UART_Init+0x90>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_USART3_UART_Init+0x90>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <MX_USART3_UART_Init+0x90>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_USART3_UART_Init+0x90>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <MX_USART3_UART_Init+0x90>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_USART3_UART_Init+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_USART3_UART_Init+0x90>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_USART3_UART_Init+0x90>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000738:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_USART3_UART_Init+0x90>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_USART3_UART_Init+0x90>)
 8000740:	2200      	movs	r2, #0
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000744:	4811      	ldr	r0, [pc, #68]	@ (800078c <MX_USART3_UART_Init+0x90>)
 8000746:	f002 ff7b 	bl	8003640 <HAL_UART_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000750:	f000 f952 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	480d      	ldr	r0, [pc, #52]	@ (800078c <MX_USART3_UART_Init+0x90>)
 8000758:	f003 fd16 	bl	8004188 <HAL_UARTEx_SetTxFifoThreshold>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000762:	f000 f949 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000766:	2100      	movs	r1, #0
 8000768:	4808      	ldr	r0, [pc, #32]	@ (800078c <MX_USART3_UART_Init+0x90>)
 800076a:	f003 fd4b 	bl	8004204 <HAL_UARTEx_SetRxFifoThreshold>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000774:	f000 f940 	bl	80009f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	@ (800078c <MX_USART3_UART_Init+0x90>)
 800077a:	f003 fccc 	bl	8004116 <HAL_UARTEx_DisableFifoMode>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000784:	f000 f938 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20040110 	.word	0x20040110
 8000790:	40004800 	.word	0x40004800

08000794 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800079e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2206      	movs	r2, #6
 80007a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2202      	movs	r2, #2
 80007aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d8:	f000 fe32 	bl	8001440 <HAL_PCD_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007e2:	f000 f909 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200401a4 	.word	0x200401a4

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	@ 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b48      	ldr	r3, [pc, #288]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a47      	ldr	r2, [pc, #284]	@ (8000928 <MX_GPIO_Init+0x138>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b45      	ldr	r3, [pc, #276]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	61bb      	str	r3, [r7, #24]
 800081c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b42      	ldr	r3, [pc, #264]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a41      	ldr	r2, [pc, #260]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b3f      	ldr	r3, [pc, #252]	@ (8000928 <MX_GPIO_Init+0x138>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b3c      	ldr	r3, [pc, #240]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a3b      	ldr	r2, [pc, #236]	@ (8000928 <MX_GPIO_Init+0x138>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b39      	ldr	r3, [pc, #228]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	4b36      	ldr	r3, [pc, #216]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a35      	ldr	r2, [pc, #212]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000854:	f043 0308 	orr.w	r3, r3, #8
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b33      	ldr	r3, [pc, #204]	@ (8000928 <MX_GPIO_Init+0x138>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0308 	and.w	r3, r3, #8
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000866:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086a:	4a2f      	ldr	r2, [pc, #188]	@ (8000928 <MX_GPIO_Init+0x138>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800087e:	f000 ffe7 	bl	8001850 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b29      	ldr	r3, [pc, #164]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a28      	ldr	r2, [pc, #160]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_GPIO_Init+0x138>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80008a0:	4822      	ldr	r0, [pc, #136]	@ (800092c <MX_GPIO_Init+0x13c>)
 80008a2:	f000 fdb5 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2140      	movs	r1, #64	@ 0x40
 80008aa:	4821      	ldr	r0, [pc, #132]	@ (8000930 <MX_GPIO_Init+0x140>)
 80008ac:	f000 fdb0 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	481b      	ldr	r0, [pc, #108]	@ (8000934 <MX_GPIO_Init+0x144>)
 80008c8:	f000 fc10 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008cc:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4811      	ldr	r0, [pc, #68]	@ (800092c <MX_GPIO_Init+0x13c>)
 80008e6:	f000 fc01 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ea:	2320      	movs	r3, #32
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	480c      	ldr	r0, [pc, #48]	@ (8000930 <MX_GPIO_Init+0x140>)
 80008fe:	f000 fbf5 	bl	80010ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000902:	2340      	movs	r3, #64	@ 0x40
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_GPIO_Init+0x140>)
 800091a:	f000 fbe7 	bl	80010ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	@ 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	48000400 	.word	0x48000400
 8000930:	48001800 	.word	0x48001800
 8000934:	48000800 	.word	0x48000800

08000938 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char message)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fdd3 	bl	80004f0 <ITM_SendChar>
	ITM_SendChar('\n');
 800094a:	200a      	movs	r0, #10
 800094c:	f7ff fdd0 	bl	80004f0 <ITM_SendChar>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <StartSender>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSender */
void StartSender(void *argument)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t x=0;
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		Task_action('S');
 8000964:	2053      	movs	r0, #83	@ 0x53
 8000966:	f7ff ffe7 	bl	8000938 <Task_action>
		osMessageQueuePut(Queue1Handle, &x, 0, 200);
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <StartSender+0x40>)
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	f107 010f 	add.w	r1, r7, #15
 8000972:	23c8      	movs	r3, #200	@ 0xc8
 8000974:	2200      	movs	r2, #0
 8000976:	f004 f92b 	bl	8004bd0 <osMessageQueuePut>
		if(++x>9)
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	3301      	adds	r3, #1
 800097e:	b2db      	uxtb	r3, r3
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	2b09      	cmp	r3, #9
 8000986:	d901      	bls.n	800098c <StartSender+0x34>
			x=0;
 8000988:	2300      	movs	r3, #0
 800098a:	73fb      	strb	r3, [r7, #15]
		osDelay(1000);
 800098c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000990:	f004 f890 	bl	8004ab4 <osDelay>
		Task_action('S');
 8000994:	e7e6      	b.n	8000964 <StartSender+0xc>
 8000996:	bf00      	nop
 8000998:	20040690 	.word	0x20040690

0800099c <StartReceiver>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiver */
void StartReceiver(void *argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiver */
  /* Infinite loop */
	/* USER CODE BEGIN StartReceiver*/
	uint8_t res=0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]
	/* Infinite loop */
	for(;;)
	{
		Task_action('R');
 80009a8:	2052      	movs	r0, #82	@ 0x52
 80009aa:	f7ff ffc5 	bl	8000938 <Task_action>
		osMessageQueueGet(Queue1Handle, &res, NULL, 2000);
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <StartReceiver+0x34>)
 80009b0:	6818      	ldr	r0, [r3, #0]
 80009b2:	f107 010f 	add.w	r1, r7, #15
 80009b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80009ba:	2200      	movs	r2, #0
 80009bc:	f004 f968 	bl	8004c90 <osMessageQueueGet>
		Task_action(res+48);
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	3330      	adds	r3, #48	@ 0x30
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff ffb6 	bl	8000938 <Task_action>
		Task_action('R');
 80009cc:	bf00      	nop
 80009ce:	e7eb      	b.n	80009a8 <StartReceiver+0xc>
 80009d0:	20040690 	.word	0x20040690

080009d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a04      	ldr	r2, [pc, #16]	@ (80009f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e6:	f000 fa5b 	bl	8000ea0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40001000 	.word	0x40001000

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <Error_Handler+0x8>

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a0e:	4a10      	ldr	r2, [pc, #64]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a26:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	f06f 0001 	mvn.w	r0, #1
 8000a42:	f000 fb29 	bl	8001098 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000

08000a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0b0      	sub	sp, #192	@ 0xc0
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a6c:	f107 0318 	add.w	r3, r7, #24
 8000a70:	2294      	movs	r2, #148	@ 0x94
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f006 fedf 	bl	8007838 <memset>
  if(huart->Instance==LPUART1)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a43      	ldr	r2, [pc, #268]	@ (8000b8c <HAL_UART_MspInit+0x138>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d13e      	bne.n	8000b02 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a84:	2320      	movs	r3, #32
 8000a86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8c:	f107 0318 	add.w	r3, r7, #24
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fdf7 	bl	8002684 <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a9c:	f7ff ffac 	bl	80009f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000aa4:	4a3a      	ldr	r2, [pc, #232]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000aac:	4b38      	ldr	r3, [pc, #224]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ab8:	4b35      	ldr	r3, [pc, #212]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	4a34      	ldr	r2, [pc, #208]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ac2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac4:	4b32      	ldr	r3, [pc, #200]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000ad0:	f000 febe 	bl	8001850 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ad4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000adc:	2302      	movs	r3, #2
 8000ade:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000aee:	2308      	movs	r3, #8
 8000af0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000af8:	4619      	mov	r1, r3
 8000afa:	4826      	ldr	r0, [pc, #152]	@ (8000b94 <HAL_UART_MspInit+0x140>)
 8000afc:	f000 faf6 	bl	80010ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b00:	e040      	b.n	8000b84 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a24      	ldr	r2, [pc, #144]	@ (8000b98 <HAL_UART_MspInit+0x144>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d13b      	bne.n	8000b84 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b14:	f107 0318 	add.w	r3, r7, #24
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 fdb3 	bl	8002684 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000b24:	f7ff ff68 	bl	80009f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b2c:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000b2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b34:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b38:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b44:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4c:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <HAL_UART_MspInit+0x13c>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b72:	2307      	movs	r3, #7
 8000b74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b78:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <HAL_UART_MspInit+0x148>)
 8000b80:	f000 fab4 	bl	80010ec <HAL_GPIO_Init>
}
 8000b84:	bf00      	nop
 8000b86:	37c0      	adds	r7, #192	@ 0xc0
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40008000 	.word	0x40008000
 8000b90:	40021000 	.word	0x40021000
 8000b94:	48001800 	.word	0x48001800
 8000b98:	40004800 	.word	0x40004800
 8000b9c:	48000c00 	.word	0x48000c00

08000ba0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b0b0      	sub	sp, #192	@ 0xc0
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb8:	f107 0318 	add.w	r3, r7, #24
 8000bbc:	2294      	movs	r2, #148	@ 0x94
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f006 fe39 	bl	8007838 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bce:	d16c      	bne.n	8000caa <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fd4f 	bl	8002684 <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000bec:	f7ff ff04 	bl	80009f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b30      	ldr	r3, [pc, #192]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c08:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c22:	230a      	movs	r3, #10
 8000c24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c32:	f000 fa5b 	bl	80010ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c54:	f000 fa4a 	bl	80010ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5c:	4a15      	ldr	r2, [pc, #84]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000c5e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c64:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c70:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d114      	bne.n	8000ca6 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c80:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000c94:	f000 fdcc 	bl	8001830 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9c:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <HAL_PCD_MspInit+0x114>)
 8000c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000ca2:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000ca4:	e001      	b.n	8000caa <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 8000ca6:	f000 fdc3 	bl	8001830 <HAL_PWREx_EnableVddUSB>
}
 8000caa:	bf00      	nop
 8000cac:	37c0      	adds	r7, #192	@ 0xc0
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	@ 0x38
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cc6:	4b34      	ldr	r3, [pc, #208]	@ (8000d98 <HAL_InitTick+0xe0>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cca:	4a33      	ldr	r2, [pc, #204]	@ (8000d98 <HAL_InitTick+0xe0>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <HAL_InitTick+0xe0>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cde:	f107 0210 	add.w	r2, r7, #16
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4611      	mov	r1, r2
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 fbd9 	bl	80024a0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cee:	6a3b      	ldr	r3, [r7, #32]
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d103      	bne.n	8000d00 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cf8:	f001 fba6 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8000cfc:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cfe:	e004      	b.n	8000d0a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d00:	f001 fba2 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8000d04:	4603      	mov	r3, r0
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d0c:	4a23      	ldr	r2, [pc, #140]	@ (8000d9c <HAL_InitTick+0xe4>)
 8000d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d12:	0c9b      	lsrs	r3, r3, #18
 8000d14:	3b01      	subs	r3, #1
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d18:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <HAL_InitTick+0xe8>)
 8000d1a:	4a22      	ldr	r2, [pc, #136]	@ (8000da4 <HAL_InitTick+0xec>)
 8000d1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <HAL_InitTick+0xe8>)
 8000d20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d26:	4a1e      	ldr	r2, [pc, #120]	@ (8000da0 <HAL_InitTick+0xe8>)
 8000d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000da0 <HAL_InitTick+0xe8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <HAL_InitTick+0xe8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_InitTick+0xe8>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d3e:	4818      	ldr	r0, [pc, #96]	@ (8000da0 <HAL_InitTick+0xe8>)
 8000d40:	f002 f9b8 	bl	80030b4 <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d11b      	bne.n	8000d8a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d52:	4813      	ldr	r0, [pc, #76]	@ (8000da0 <HAL_InitTick+0xe8>)
 8000d54:	f002 fa10 	bl	8003178 <HAL_TIM_Base_Start_IT>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d111      	bne.n	8000d8a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d66:	2036      	movs	r0, #54	@ 0x36
 8000d68:	f000 f9b2 	bl	80010d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b0f      	cmp	r3, #15
 8000d70:	d808      	bhi.n	8000d84 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d72:	2200      	movs	r2, #0
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	2036      	movs	r0, #54	@ 0x36
 8000d78:	f000 f98e 	bl	8001098 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <HAL_InitTick+0xf0>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e002      	b.n	8000d8a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3738      	adds	r7, #56	@ 0x38
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	431bde83 	.word	0x431bde83
 8000da0:	20040694 	.word	0x20040694
 8000da4:	40001000 	.word	0x40001000
 8000da8:	20040004 	.word	0x20040004

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x4>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de8:	4802      	ldr	r0, [pc, #8]	@ (8000df4 <TIM6_DAC_IRQHandler+0x10>)
 8000dea:	f002 fa35 	bl	8003258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20040694 	.word	0x20040694

08000df8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e20:	f7ff ffea 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	@ (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	@ (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f006 fd53 	bl	80078f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e4e:	f7ff fb77 	bl	8000540 <main>

08000e52 <LoopForever>:

LoopForever:
    b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e54:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e58:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000e5c:	20040060 	.word	0x20040060
  ldr r2, =_sidata
 8000e60:	08007b34 	.word	0x08007b34
  ldr r2, =_sbss
 8000e64:	20040060 	.word	0x20040060
  ldr r4, =_ebss
 8000e68:	200421c4 	.word	0x200421c4

08000e6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_IRQHandler>

08000e6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 f902 	bl	8001082 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e7e:	200f      	movs	r0, #15
 8000e80:	f7ff ff1a 	bl	8000cb8 <HAL_InitTick>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	71fb      	strb	r3, [r7, #7]
 8000e8e:	e001      	b.n	8000e94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e90:	f7ff fdb8 	bl	8000a04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e94:	79fb      	ldrb	r3, [r7, #7]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	@ (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20040008 	.word	0x20040008
 8000ec4:	200406e0 	.word	0x200406e0

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	@ (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200406e0 	.word	0x200406e0

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20040008 	.word	0x20040008

08000f28 <__NVIC_SetPriorityGrouping>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	@ (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	@ (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	@ (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	@ (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	@ (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	@ 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	@ 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ff4c 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010aa:	f7ff ff61 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	68b9      	ldr	r1, [r7, #8]
 80010b4:	6978      	ldr	r0, [r7, #20]
 80010b6:	f7ff ffb1 	bl	800101c <NVIC_EncodePriority>
 80010ba:	4602      	mov	r2, r0
 80010bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c0:	4611      	mov	r1, r2
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff80 	bl	8000fc8 <__NVIC_SetPriority>
}
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff54 	bl	8000f8c <__NVIC_EnableIRQ>
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fa:	e166      	b.n	80013ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2101      	movs	r1, #1
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 8158 	beq.w	80013c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d005      	beq.n	800112c <HAL_GPIO_Init+0x40>
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d130      	bne.n	800118e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001162:	2201      	movs	r2, #1
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	f003 0201 	and.w	r2, r3, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b03      	cmp	r3, #3
 8001198:	d017      	beq.n	80011ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d123      	bne.n	800121e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	08da      	lsrs	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3208      	adds	r2, #8
 80011de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	220f      	movs	r2, #15
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	4013      	ands	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	691a      	ldr	r2, [r3, #16]
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	08da      	lsrs	r2, r3, #3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3208      	adds	r2, #8
 8001218:	6939      	ldr	r1, [r7, #16]
 800121a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2203      	movs	r2, #3
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0203 	and.w	r2, r3, #3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80b2 	beq.w	80013c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001260:	4b61      	ldr	r3, [pc, #388]	@ (80013e8 <HAL_GPIO_Init+0x2fc>)
 8001262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001264:	4a60      	ldr	r2, [pc, #384]	@ (80013e8 <HAL_GPIO_Init+0x2fc>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6613      	str	r3, [r2, #96]	@ 0x60
 800126c:	4b5e      	ldr	r3, [pc, #376]	@ (80013e8 <HAL_GPIO_Init+0x2fc>)
 800126e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001278:	4a5c      	ldr	r2, [pc, #368]	@ (80013ec <HAL_GPIO_Init+0x300>)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012a2:	d02b      	beq.n	80012fc <HAL_GPIO_Init+0x210>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a52      	ldr	r2, [pc, #328]	@ (80013f0 <HAL_GPIO_Init+0x304>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d025      	beq.n	80012f8 <HAL_GPIO_Init+0x20c>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a51      	ldr	r2, [pc, #324]	@ (80013f4 <HAL_GPIO_Init+0x308>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d01f      	beq.n	80012f4 <HAL_GPIO_Init+0x208>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a50      	ldr	r2, [pc, #320]	@ (80013f8 <HAL_GPIO_Init+0x30c>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d019      	beq.n	80012f0 <HAL_GPIO_Init+0x204>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a4f      	ldr	r2, [pc, #316]	@ (80013fc <HAL_GPIO_Init+0x310>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d013      	beq.n	80012ec <HAL_GPIO_Init+0x200>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a4e      	ldr	r2, [pc, #312]	@ (8001400 <HAL_GPIO_Init+0x314>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00d      	beq.n	80012e8 <HAL_GPIO_Init+0x1fc>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001404 <HAL_GPIO_Init+0x318>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d007      	beq.n	80012e4 <HAL_GPIO_Init+0x1f8>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001408 <HAL_GPIO_Init+0x31c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_GPIO_Init+0x1f4>
 80012dc:	2307      	movs	r3, #7
 80012de:	e00e      	b.n	80012fe <HAL_GPIO_Init+0x212>
 80012e0:	2308      	movs	r3, #8
 80012e2:	e00c      	b.n	80012fe <HAL_GPIO_Init+0x212>
 80012e4:	2306      	movs	r3, #6
 80012e6:	e00a      	b.n	80012fe <HAL_GPIO_Init+0x212>
 80012e8:	2305      	movs	r3, #5
 80012ea:	e008      	b.n	80012fe <HAL_GPIO_Init+0x212>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e006      	b.n	80012fe <HAL_GPIO_Init+0x212>
 80012f0:	2303      	movs	r3, #3
 80012f2:	e004      	b.n	80012fe <HAL_GPIO_Init+0x212>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e002      	b.n	80012fe <HAL_GPIO_Init+0x212>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <HAL_GPIO_Init+0x212>
 80012fc:	2300      	movs	r3, #0
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	f002 0203 	and.w	r2, r2, #3
 8001304:	0092      	lsls	r2, r2, #2
 8001306:	4093      	lsls	r3, r2
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800130e:	4937      	ldr	r1, [pc, #220]	@ (80013ec <HAL_GPIO_Init+0x300>)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800131c:	4b3b      	ldr	r3, [pc, #236]	@ (800140c <HAL_GPIO_Init+0x320>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001340:	4a32      	ldr	r2, [pc, #200]	@ (800140c <HAL_GPIO_Init+0x320>)
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001346:	4b31      	ldr	r3, [pc, #196]	@ (800140c <HAL_GPIO_Init+0x320>)
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	43db      	mvns	r3, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4013      	ands	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800136a:	4a28      	ldr	r2, [pc, #160]	@ (800140c <HAL_GPIO_Init+0x320>)
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001370:	4b26      	ldr	r3, [pc, #152]	@ (800140c <HAL_GPIO_Init+0x320>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001394:	4a1d      	ldr	r2, [pc, #116]	@ (800140c <HAL_GPIO_Init+0x320>)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <HAL_GPIO_Init+0x320>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013be:	4a13      	ldr	r2, [pc, #76]	@ (800140c <HAL_GPIO_Init+0x320>)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3301      	adds	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f47f ae91 	bne.w	80010fc <HAL_GPIO_Init+0x10>
  }
}
 80013da:	bf00      	nop
 80013dc:	bf00      	nop
 80013de:	371c      	adds	r7, #28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40010000 	.word	0x40010000
 80013f0:	48000400 	.word	0x48000400
 80013f4:	48000800 	.word	0x48000800
 80013f8:	48000c00 	.word	0x48000c00
 80013fc:	48001000 	.word	0x48001000
 8001400:	48001400 	.word	0x48001400
 8001404:	48001800 	.word	0x48001800
 8001408:	48001c00 	.word	0x48001c00
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001420:	787b      	ldrb	r3, [r7, #1]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800142c:	e002      	b.n	8001434 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af02      	add	r7, sp, #8
 8001446:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e101      	b.n	8001656 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fb9a 	bl	8000ba0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2203      	movs	r2, #3
 8001470:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f002 ff79 	bl	8004376 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6818      	ldr	r0, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7c1a      	ldrb	r2, [r3, #16]
 800148c:	f88d 2000 	strb.w	r2, [sp]
 8001490:	3304      	adds	r3, #4
 8001492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001494:	f002 ff42 	bl	800431c <USB_CoreInit>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2202      	movs	r2, #2
 80014a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0d5      	b.n	8001656 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 ff71 	bl	8004398 <USB_SetCurrentMode>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2202      	movs	r2, #2
 80014c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e0c6      	b.n	8001656 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e04a      	b.n	8001564 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3315      	adds	r3, #21
 80014de:	2201      	movs	r2, #1
 80014e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	6879      	ldr	r1, [r7, #4]
 80014e6:	4613      	mov	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4413      	add	r3, r2
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	440b      	add	r3, r1
 80014f0:	3314      	adds	r3, #20
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	b298      	uxth	r0, r3
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	332e      	adds	r3, #46	@ 0x2e
 800150a:	4602      	mov	r2, r0
 800150c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	6879      	ldr	r1, [r7, #4]
 8001512:	4613      	mov	r3, r2
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	4413      	add	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	440b      	add	r3, r1
 800151c:	3318      	adds	r3, #24
 800151e:	2200      	movs	r2, #0
 8001520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001522:	7bfa      	ldrb	r2, [r7, #15]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	331c      	adds	r3, #28
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	3320      	adds	r3, #32
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	3324      	adds	r3, #36	@ 0x24
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800155e:	7bfb      	ldrb	r3, [r7, #15]
 8001560:	3301      	adds	r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	791b      	ldrb	r3, [r3, #4]
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	429a      	cmp	r2, r3
 800156c:	d3af      	bcc.n	80014ce <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e044      	b.n	80015fe <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	440b      	add	r3, r1
 8001582:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800159c:	7bfa      	ldrb	r2, [r7, #15]
 800159e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015a0:	7bfa      	ldrb	r2, [r7, #15]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4413      	add	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015e2:	7bfa      	ldrb	r2, [r7, #15]
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	3301      	adds	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	791b      	ldrb	r3, [r3, #4]
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3b5      	bcc.n	8001574 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7c1a      	ldrb	r2, [r3, #16]
 8001610:	f88d 2000 	strb.w	r2, [sp]
 8001614:	3304      	adds	r3, #4
 8001616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001618:	f002 ff0a 	bl	8004430 <USB_DevInit>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2202      	movs	r2, #2
 8001626:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e013      	b.n	8001656 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7b1b      	ldrb	r3, [r3, #12]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d102      	bne.n	800164a <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f000 f80a 	bl	800165e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f003 f8af 	bl	80047b2 <USB_DevDisconnect>

  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800165e:	b480      	push	{r7}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001690:	f043 0303 	orr.w	r3, r3, #3
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016ac:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016b8:	d102      	bne.n	80016c0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80016ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016be:	e00b      	b.n	80016d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80016c0:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <HAL_PWREx_GetVoltageRange+0x3c>)
 80016c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016ce:	d102      	bne.n	80016d6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80016d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016d4:	e000      	b.n	80016d8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80016d6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40007000 	.word	0x40007000

080016e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d141      	bne.n	800177a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001702:	d131      	bne.n	8001768 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001704:	4b47      	ldr	r3, [pc, #284]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800170a:	4a46      	ldr	r2, [pc, #280]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800170c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001710:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001714:	4b43      	ldr	r3, [pc, #268]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800171c:	4a41      	ldr	r2, [pc, #260]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001722:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001724:	4b40      	ldr	r3, [pc, #256]	@ (8001828 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2232      	movs	r2, #50	@ 0x32
 800172a:	fb02 f303 	mul.w	r3, r2, r3
 800172e:	4a3f      	ldr	r2, [pc, #252]	@ (800182c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	0c9b      	lsrs	r3, r3, #18
 8001736:	3301      	adds	r3, #1
 8001738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173a:	e002      	b.n	8001742 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	3b01      	subs	r3, #1
 8001740:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001742:	4b38      	ldr	r3, [pc, #224]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800174a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800174e:	d102      	bne.n	8001756 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f2      	bne.n	800173c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001756:	4b33      	ldr	r3, [pc, #204]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800175e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001762:	d158      	bne.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e057      	b.n	8001818 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001768:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800176e:	4a2d      	ldr	r2, [pc, #180]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001770:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001774:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001778:	e04d      	b.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001780:	d141      	bne.n	8001806 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001782:	4b28      	ldr	r3, [pc, #160]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800178e:	d131      	bne.n	80017f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001790:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001796:	4a23      	ldr	r2, [pc, #140]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a0:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001828 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2232      	movs	r2, #50	@ 0x32
 80017b6:	fb02 f303 	mul.w	r3, r2, r3
 80017ba:	4a1c      	ldr	r2, [pc, #112]	@ (800182c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	0c9b      	lsrs	r3, r3, #18
 80017c2:	3301      	adds	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c6:	e002      	b.n	80017ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017da:	d102      	bne.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f2      	bne.n	80017c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ee:	d112      	bne.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e011      	b.n	8001818 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001800:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001804:	e007      	b.n	8001816 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001806:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001814:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	40007000 	.word	0x40007000
 8001828:	20040000 	.word	0x20040000
 800182c:	431bde83 	.word	0x431bde83

08001830 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4a04      	ldr	r2, [pc, #16]	@ (800184c <HAL_PWREx_EnableVddUSB+0x1c>)
 800183a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800183e:	6053      	str	r3, [r2, #4]
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40007000 	.word	0x40007000

08001850 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001854:	4b05      	ldr	r3, [pc, #20]	@ (800186c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a04      	ldr	r2, [pc, #16]	@ (800186c <HAL_PWREx_EnableVddIO2+0x1c>)
 800185a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800185e:	6053      	str	r3, [r2, #4]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40007000 	.word	0x40007000

08001870 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d102      	bne.n	8001884 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	f000 bc08 	b.w	8002094 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001884:	4b96      	ldr	r3, [pc, #600]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800188e:	4b94      	ldr	r3, [pc, #592]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80e4 	beq.w	8001a6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d007      	beq.n	80018bc <HAL_RCC_OscConfig+0x4c>
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	f040 808b 	bne.w	80019ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	f040 8087 	bne.w	80019ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018bc:	4b88      	ldr	r3, [pc, #544]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_OscConfig+0x64>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e3df      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1a      	ldr	r2, [r3, #32]
 80018d8:	4b81      	ldr	r3, [pc, #516]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d004      	beq.n	80018ee <HAL_RCC_OscConfig+0x7e>
 80018e4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018ec:	e005      	b.n	80018fa <HAL_RCC_OscConfig+0x8a>
 80018ee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 80018f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d223      	bcs.n	8001946 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fdfe 	bl	8002504 <RCC_SetFlashLatencyFromMSIRange>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e3c0      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001912:	4b73      	ldr	r3, [pc, #460]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a72      	ldr	r2, [pc, #456]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b70      	ldr	r3, [pc, #448]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	496d      	ldr	r1, [pc, #436]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001930:	4b6b      	ldr	r3, [pc, #428]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	4968      	ldr	r1, [pc, #416]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
 8001944:	e025      	b.n	8001992 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001946:	4b66      	ldr	r3, [pc, #408]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a65      	ldr	r2, [pc, #404]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 800194c:	f043 0308 	orr.w	r3, r3, #8
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b63      	ldr	r3, [pc, #396]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	4960      	ldr	r1, [pc, #384]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001960:	4313      	orrs	r3, r2
 8001962:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001964:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	495b      	ldr	r1, [pc, #364]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001974:	4313      	orrs	r3, r2
 8001976:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fdbe 	bl	8002504 <RCC_SetFlashLatencyFromMSIRange>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e380      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001992:	f000 fcc1 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 8001996:	4602      	mov	r2, r0
 8001998:	4b51      	ldr	r3, [pc, #324]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	4950      	ldr	r1, [pc, #320]	@ (8001ae4 <HAL_RCC_OscConfig+0x274>)
 80019a4:	5ccb      	ldrb	r3, [r1, r3]
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	fa22 f303 	lsr.w	r3, r2, r3
 80019ae:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae8 <HAL_RCC_OscConfig+0x278>)
 80019b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019b2:	4b4e      	ldr	r3, [pc, #312]	@ (8001aec <HAL_RCC_OscConfig+0x27c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff f97e 	bl	8000cb8 <HAL_InitTick>
 80019bc:	4603      	mov	r3, r0
 80019be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d052      	beq.n	8001a6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	e364      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d032      	beq.n	8001a38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80019d2:	4b43      	ldr	r3, [pc, #268]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a42      	ldr	r2, [pc, #264]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019de:	f7ff fa73 	bl	8000ec8 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019e6:	f7ff fa6f 	bl	8000ec8 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e34d      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019f8:	4b39      	ldr	r3, [pc, #228]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a04:	4b36      	ldr	r3, [pc, #216]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a35      	ldr	r2, [pc, #212]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	4b33      	ldr	r3, [pc, #204]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4930      	ldr	r1, [pc, #192]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	021b      	lsls	r3, r3, #8
 8001a30:	492b      	ldr	r1, [pc, #172]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	604b      	str	r3, [r1, #4]
 8001a36:	e01a      	b.n	8001a6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a38:	4b29      	ldr	r3, [pc, #164]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a28      	ldr	r2, [pc, #160]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fa40 	bl	8000ec8 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a4c:	f7ff fa3c 	bl	8000ec8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e31a      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1f0      	bne.n	8001a4c <HAL_RCC_OscConfig+0x1dc>
 8001a6a:	e000      	b.n	8001a6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d073      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_OscConfig+0x21c>
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d10e      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d063      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d15f      	bne.n	8001b60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e2f7      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aac:	d106      	bne.n	8001abc <HAL_RCC_OscConfig+0x24c>
 8001aae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e025      	b.n	8001b08 <HAL_RCC_OscConfig+0x298>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ac4:	d114      	bne.n	8001af0 <HAL_RCC_OscConfig+0x280>
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a02      	ldr	r2, [pc, #8]	@ (8001ae0 <HAL_RCC_OscConfig+0x270>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e013      	b.n	8001b08 <HAL_RCC_OscConfig+0x298>
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	08007ab4 	.word	0x08007ab4
 8001ae8:	20040000 	.word	0x20040000
 8001aec:	20040004 	.word	0x20040004
 8001af0:	4ba0      	ldr	r3, [pc, #640]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a9f      	ldr	r2, [pc, #636]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001af6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	4b9d      	ldr	r3, [pc, #628]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a9c      	ldr	r2, [pc, #624]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001b02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d013      	beq.n	8001b38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff f9da 	bl	8000ec8 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff f9d6 	bl	8000ec8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	@ 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e2b4      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2a:	4b92      	ldr	r3, [pc, #584]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x2a8>
 8001b36:	e014      	b.n	8001b62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f9c6 	bl	8000ec8 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff f9c2 	bl	8000ec8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	@ 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e2a0      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b52:	4b88      	ldr	r3, [pc, #544]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x2d0>
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d060      	beq.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b04      	cmp	r3, #4
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_OscConfig+0x310>
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d119      	bne.n	8001bae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d116      	bne.n	8001bae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b80:	4b7c      	ldr	r3, [pc, #496]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_OscConfig+0x328>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e27d      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b76      	ldr	r3, [pc, #472]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	4973      	ldr	r1, [pc, #460]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bac:	e040      	b.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d023      	beq.n	8001bfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb6:	4b6f      	ldr	r3, [pc, #444]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6e      	ldr	r2, [pc, #440]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f981 	bl	8000ec8 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bca:	f7ff f97d 	bl	8000ec8 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e25b      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bdc:	4b65      	ldr	r3, [pc, #404]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be8:	4b62      	ldr	r3, [pc, #392]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	061b      	lsls	r3, r3, #24
 8001bf6:	495f      	ldr	r1, [pc, #380]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
 8001bfc:	e018      	b.n	8001c30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bfe:	4b5d      	ldr	r3, [pc, #372]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a5c      	ldr	r2, [pc, #368]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f95d 	bl	8000ec8 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c12:	f7ff f959 	bl	8000ec8 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e237      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c24:	4b53      	ldr	r3, [pc, #332]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d03c      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c44:	4b4b      	ldr	r3, [pc, #300]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c4a:	4a4a      	ldr	r2, [pc, #296]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f938 	bl	8000ec8 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f934 	bl	8000ec8 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e212      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c6e:	4b41      	ldr	r3, [pc, #260]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ef      	beq.n	8001c5c <HAL_RCC_OscConfig+0x3ec>
 8001c7c:	e01b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c84:	4a3b      	ldr	r2, [pc, #236]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f91b 	bl	8000ec8 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff f917 	bl	8000ec8 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e1f5      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ca8:	4b32      	ldr	r3, [pc, #200]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ef      	bne.n	8001c96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f000 80a6 	beq.w	8001e10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10d      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd4:	4b27      	ldr	r3, [pc, #156]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd8:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cde:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ce0:	4b24      	ldr	r3, [pc, #144]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cec:	2301      	movs	r3, #1
 8001cee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cf0:	4b21      	ldr	r3, [pc, #132]	@ (8001d78 <HAL_RCC_OscConfig+0x508>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d118      	bne.n	8001d2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <HAL_RCC_OscConfig+0x508>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a1d      	ldr	r2, [pc, #116]	@ (8001d78 <HAL_RCC_OscConfig+0x508>)
 8001d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d08:	f7ff f8de 	bl	8000ec8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d10:	f7ff f8da 	bl	8000ec8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1b8      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d22:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_RCC_OscConfig+0x508>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d108      	bne.n	8001d48 <HAL_RCC_OscConfig+0x4d8>
 8001d36:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d46:	e029      	b.n	8001d9c <HAL_RCC_OscConfig+0x52c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d115      	bne.n	8001d7c <HAL_RCC_OscConfig+0x50c>
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d56:	4a07      	ldr	r2, [pc, #28]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d60:	4b04      	ldr	r3, [pc, #16]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d66:	4a03      	ldr	r2, [pc, #12]	@ (8001d74 <HAL_RCC_OscConfig+0x504>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d70:	e014      	b.n	8001d9c <HAL_RCC_OscConfig+0x52c>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d82:	4a9c      	ldr	r2, [pc, #624]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d8c:	4b99      	ldr	r3, [pc, #612]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d92:	4a98      	ldr	r2, [pc, #608]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d016      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7ff f890 	bl	8000ec8 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dac:	f7ff f88c 	bl	8000ec8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e168      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc2:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0ed      	beq.n	8001dac <HAL_RCC_OscConfig+0x53c>
 8001dd0:	e015      	b.n	8001dfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd2:	f7ff f879 	bl	8000ec8 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dd8:	e00a      	b.n	8001df0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dda:	f7ff f875 	bl	8000ec8 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e151      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001df0:	4b80      	ldr	r3, [pc, #512]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1ed      	bne.n	8001dda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d105      	bne.n	8001e10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e04:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	4a7a      	ldr	r2, [pc, #488]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001e0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d03c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d01c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e24:	4b73      	ldr	r3, [pc, #460]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e2a:	4a72      	ldr	r2, [pc, #456]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e34:	f7ff f848 	bl	8000ec8 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e3c:	f7ff f844 	bl	8000ec8 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e122      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e4e:	4b69      	ldr	r3, [pc, #420]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0ef      	beq.n	8001e3c <HAL_RCC_OscConfig+0x5cc>
 8001e5c:	e01b      	b.n	8001e96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e5e:	4b65      	ldr	r3, [pc, #404]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e64:	4a63      	ldr	r2, [pc, #396]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001e66:	f023 0301 	bic.w	r3, r3, #1
 8001e6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6e:	f7ff f82b 	bl	8000ec8 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e76:	f7ff f827 	bl	8000ec8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e105      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e88:	4b5a      	ldr	r3, [pc, #360]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ef      	bne.n	8001e76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 80f9 	beq.w	8002092 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	f040 80cf 	bne.w	8002048 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001eaa:	4b52      	ldr	r3, [pc, #328]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f003 0203 	and.w	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d12c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d123      	bne.n	8001f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d11b      	bne.n	8001f18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d113      	bne.n	8001f18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efa:	085b      	lsrs	r3, r3, #1
 8001efc:	3b01      	subs	r3, #1
 8001efe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d109      	bne.n	8001f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	085b      	lsrs	r3, r3, #1
 8001f10:	3b01      	subs	r3, #1
 8001f12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d071      	beq.n	8001ffc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d068      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f1e:	4b35      	ldr	r3, [pc, #212]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f2a:	4b32      	ldr	r3, [pc, #200]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e0ac      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001f40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f46:	f7fe ffbf 	bl	8000ec8 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4e:	f7fe ffbb 	bl	8000ec8 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e099      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f60:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f0      	bne.n	8001f4e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001f6e:	68da      	ldr	r2, [r3, #12]
 8001f70:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <HAL_RCC_OscConfig+0x788>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f7c:	3a01      	subs	r2, #1
 8001f7e:	0112      	lsls	r2, r2, #4
 8001f80:	4311      	orrs	r1, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f86:	0212      	lsls	r2, r2, #8
 8001f88:	4311      	orrs	r1, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001f8e:	0852      	lsrs	r2, r2, #1
 8001f90:	3a01      	subs	r2, #1
 8001f92:	0552      	lsls	r2, r2, #21
 8001f94:	4311      	orrs	r1, r2
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f9a:	0852      	lsrs	r2, r2, #1
 8001f9c:	3a01      	subs	r2, #1
 8001f9e:	0652      	lsls	r2, r2, #25
 8001fa0:	4311      	orrs	r1, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001fa6:	06d2      	lsls	r2, r2, #27
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	4912      	ldr	r1, [pc, #72]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001fb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001fc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fc8:	f7fe ff7e 	bl	8000ec8 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd0:	f7fe ff7a 	bl	8000ec8 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e058      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe2:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <HAL_RCC_OscConfig+0x784>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fee:	e050      	b.n	8002092 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e04f      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffc:	4b27      	ldr	r3, [pc, #156]	@ (800209c <HAL_RCC_OscConfig+0x82c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d144      	bne.n	8002092 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002008:	4b24      	ldr	r3, [pc, #144]	@ (800209c <HAL_RCC_OscConfig+0x82c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a23      	ldr	r2, [pc, #140]	@ (800209c <HAL_RCC_OscConfig+0x82c>)
 800200e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002014:	4b21      	ldr	r3, [pc, #132]	@ (800209c <HAL_RCC_OscConfig+0x82c>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4a20      	ldr	r2, [pc, #128]	@ (800209c <HAL_RCC_OscConfig+0x82c>)
 800201a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800201e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002020:	f7fe ff52 	bl	8000ec8 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002028:	f7fe ff4e 	bl	8000ec8 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e02c      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203a:	4b18      	ldr	r3, [pc, #96]	@ (800209c <HAL_RCC_OscConfig+0x82c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x7b8>
 8002046:	e024      	b.n	8002092 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d01f      	beq.n	800208e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800204e:	4b13      	ldr	r3, [pc, #76]	@ (800209c <HAL_RCC_OscConfig+0x82c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a12      	ldr	r2, [pc, #72]	@ (800209c <HAL_RCC_OscConfig+0x82c>)
 8002054:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205a:	f7fe ff35 	bl	8000ec8 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002062:	f7fe ff31 	bl	8000ec8 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e00f      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_OscConfig+0x82c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f0      	bne.n	8002062 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002080:	4b06      	ldr	r3, [pc, #24]	@ (800209c <HAL_RCC_OscConfig+0x82c>)
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	4905      	ldr	r1, [pc, #20]	@ (800209c <HAL_RCC_OscConfig+0x82c>)
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_RCC_OscConfig+0x830>)
 8002088:	4013      	ands	r3, r2
 800208a:	60cb      	str	r3, [r1, #12]
 800208c:	e001      	b.n	8002092 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	feeefffc 	.word	0xfeeefffc

080020a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e11d      	b.n	80022f8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b90      	ldr	r3, [pc, #576]	@ (8002300 <HAL_RCC_ClockConfig+0x25c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d910      	bls.n	80020ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b8d      	ldr	r3, [pc, #564]	@ (8002300 <HAL_RCC_ClockConfig+0x25c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 020f 	bic.w	r2, r3, #15
 80020d2:	498b      	ldr	r1, [pc, #556]	@ (8002300 <HAL_RCC_ClockConfig+0x25c>)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020da:	4b89      	ldr	r3, [pc, #548]	@ (8002300 <HAL_RCC_ClockConfig+0x25c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e105      	b.n	80022f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	4b81      	ldr	r3, [pc, #516]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002104:	429a      	cmp	r2, r3
 8002106:	d908      	bls.n	800211a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b7e      	ldr	r3, [pc, #504]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	497b      	ldr	r1, [pc, #492]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d079      	beq.n	800221a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b03      	cmp	r3, #3
 800212c:	d11e      	bne.n	800216c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212e:	4b75      	ldr	r3, [pc, #468]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0dc      	b.n	80022f8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800213e:	f000 fa3b 	bl	80025b8 <RCC_GetSysClockFreqFromPLLSource>
 8002142:	4603      	mov	r3, r0
 8002144:	4a70      	ldr	r2, [pc, #448]	@ (8002308 <HAL_RCC_ClockConfig+0x264>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d946      	bls.n	80021d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800214a:	4b6e      	ldr	r3, [pc, #440]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d140      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002156:	4b6b      	ldr	r3, [pc, #428]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800215e:	4a69      	ldr	r2, [pc, #420]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002164:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	e035      	b.n	80021d8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d107      	bne.n	8002184 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002174:	4b63      	ldr	r3, [pc, #396]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d115      	bne.n	80021ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0b9      	b.n	80022f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d107      	bne.n	800219c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800218c:	4b5d      	ldr	r3, [pc, #372]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0ad      	b.n	80022f8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219c:	4b59      	ldr	r3, [pc, #356]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0a5      	b.n	80022f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80021ac:	f000 f8b4 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a55      	ldr	r2, [pc, #340]	@ (8002308 <HAL_RCC_ClockConfig+0x264>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d90f      	bls.n	80021d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80021b8:	4b52      	ldr	r3, [pc, #328]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 80021ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f023 0203 	bic.w	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4947      	ldr	r1, [pc, #284]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ea:	f7fe fe6d 	bl	8000ec8 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f0:	e00a      	b.n	8002208 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f2:	f7fe fe69 	bl	8000ec8 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e077      	b.n	80022f8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002208:	4b3e      	ldr	r3, [pc, #248]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 020c 	and.w	r2, r3, #12
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	429a      	cmp	r2, r3
 8002218:	d1eb      	bne.n	80021f2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b80      	cmp	r3, #128	@ 0x80
 800221e:	d105      	bne.n	800222c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002220:	4b38      	ldr	r3, [pc, #224]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a37      	ldr	r2, [pc, #220]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800222a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d010      	beq.n	800225a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	4b31      	ldr	r3, [pc, #196]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002244:	429a      	cmp	r2, r3
 8002246:	d208      	bcs.n	800225a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002248:	4b2e      	ldr	r3, [pc, #184]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	492b      	ldr	r1, [pc, #172]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800225a:	4b29      	ldr	r3, [pc, #164]	@ (8002300 <HAL_RCC_ClockConfig+0x25c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d210      	bcs.n	800228a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002268:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <HAL_RCC_ClockConfig+0x25c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 020f 	bic.w	r2, r3, #15
 8002270:	4923      	ldr	r1, [pc, #140]	@ (8002300 <HAL_RCC_ClockConfig+0x25c>)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	4313      	orrs	r3, r2
 8002276:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002278:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <HAL_RCC_ClockConfig+0x25c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d001      	beq.n	800228a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e036      	b.n	80022f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002296:	4b1b      	ldr	r3, [pc, #108]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	4918      	ldr	r1, [pc, #96]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d009      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b4:	4b13      	ldr	r3, [pc, #76]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4910      	ldr	r1, [pc, #64]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c8:	f000 f826 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <HAL_RCC_ClockConfig+0x260>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	490c      	ldr	r1, [pc, #48]	@ (800230c <HAL_RCC_ClockConfig+0x268>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
 80022e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <HAL_RCC_ClockConfig+0x26c>)
 80022e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_RCC_ClockConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe fce3 	bl	8000cb8 <HAL_InitTick>
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40022000 	.word	0x40022000
 8002304:	40021000 	.word	0x40021000
 8002308:	04c4b400 	.word	0x04c4b400
 800230c:	08007ab4 	.word	0x08007ab4
 8002310:	20040000 	.word	0x20040000
 8002314:	20040004 	.word	0x20040004

08002318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	@ 0x24
 800231c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	2300      	movs	r3, #0
 8002324:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002326:	4b3e      	ldr	r3, [pc, #248]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x108>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002330:	4b3b      	ldr	r3, [pc, #236]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x108>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x34>
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d121      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d11e      	bne.n	800238a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800234c:	4b34      	ldr	r3, [pc, #208]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x108>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002358:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x108>)
 800235a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	e005      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002368:	4b2d      	ldr	r3, [pc, #180]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x108>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002374:	4a2b      	ldr	r2, [pc, #172]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10d      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002388:	e00a      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d102      	bne.n	8002396 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002390:	4b25      	ldr	r3, [pc, #148]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x110>)
 8002392:	61bb      	str	r3, [r7, #24]
 8002394:	e004      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800239c:	4b23      	ldr	r3, [pc, #140]	@ (800242c <HAL_RCC_GetSysClockFreq+0x114>)
 800239e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d134      	bne.n	8002410 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d003      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0xa6>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	d003      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0xac>
 80023bc:	e005      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023be:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_RCC_GetSysClockFreq+0x110>)
 80023c0:	617b      	str	r3, [r7, #20]
      break;
 80023c2:	e005      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023c4:	4b19      	ldr	r3, [pc, #100]	@ (800242c <HAL_RCC_GetSysClockFreq+0x114>)
 80023c6:	617b      	str	r3, [r7, #20]
      break;
 80023c8:	e002      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	617b      	str	r3, [r7, #20]
      break;
 80023ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023d0:	4b13      	ldr	r3, [pc, #76]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3301      	adds	r3, #1
 80023dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023de:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	fb03 f202 	mul.w	r2, r3, r2
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	0e5b      	lsrs	r3, r3, #25
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	3301      	adds	r3, #1
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002410:	69bb      	ldr	r3, [r7, #24]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	@ 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	08007acc 	.word	0x08007acc
 8002428:	00f42400 	.word	0x00f42400
 800242c:	007a1200 	.word	0x007a1200

08002430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <HAL_RCC_GetHCLKFreq+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
}
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20040000 	.word	0x20040000

08002448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800244c:	f7ff fff0 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 8002450:	4602      	mov	r2, r0
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0a1b      	lsrs	r3, r3, #8
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	4904      	ldr	r1, [pc, #16]	@ (8002470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800245e:	5ccb      	ldrb	r3, [r1, r3]
 8002460:	f003 031f 	and.w	r3, r3, #31
 8002464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002468:	4618      	mov	r0, r3
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40021000 	.word	0x40021000
 8002470:	08007ac4 	.word	0x08007ac4

08002474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002478:	f7ff ffda 	bl	8002430 <HAL_RCC_GetHCLKFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	0adb      	lsrs	r3, r3, #11
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	4904      	ldr	r1, [pc, #16]	@ (800249c <HAL_RCC_GetPCLK2Freq+0x28>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40021000 	.word	0x40021000
 800249c:	08007ac4 	.word	0x08007ac4

080024a0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	220f      	movs	r2, #15
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80024b0:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80024bc:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80024e2:	4b07      	ldr	r3, [pc, #28]	@ (8002500 <HAL_RCC_GetClockConfig+0x60>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 020f 	and.w	r2, r3, #15
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	601a      	str	r2, [r3, #0]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	40022000 	.word	0x40022000

08002504 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002510:	4b27      	ldr	r3, [pc, #156]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800251c:	f7ff f8c4 	bl	80016a8 <HAL_PWREx_GetVoltageRange>
 8002520:	6178      	str	r0, [r7, #20]
 8002522:	e014      	b.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002524:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	4a21      	ldr	r2, [pc, #132]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800252e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002530:	4b1f      	ldr	r3, [pc, #124]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800253c:	f7ff f8b4 	bl	80016a8 <HAL_PWREx_GetVoltageRange>
 8002540:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002546:	4a1a      	ldr	r2, [pc, #104]	@ (80025b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800254c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002554:	d10b      	bne.n	800256e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b80      	cmp	r3, #128	@ 0x80
 800255a:	d913      	bls.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002560:	d902      	bls.n	8002568 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002562:	2302      	movs	r3, #2
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	e00d      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002568:	2301      	movs	r3, #1
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	e00a      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b7f      	cmp	r3, #127	@ 0x7f
 8002572:	d902      	bls.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002574:	2302      	movs	r3, #2
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e004      	b.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b70      	cmp	r3, #112	@ 0x70
 800257e:	d101      	bne.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002580:	2301      	movs	r3, #1
 8002582:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f023 020f 	bic.w	r2, r3, #15
 800258c:	4909      	ldr	r1, [pc, #36]	@ (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002594:	4b07      	ldr	r3, [pc, #28]	@ (80025b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d001      	beq.n	80025a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40022000 	.word	0x40022000

080025b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025be:	4b2d      	ldr	r3, [pc, #180]	@ (8002674 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b03      	cmp	r3, #3
 80025cc:	d00b      	beq.n	80025e6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d825      	bhi.n	8002620 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d008      	beq.n	80025ec <RCC_GetSysClockFreqFromPLLSource+0x34>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d11f      	bne.n	8002620 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80025e0:	4b25      	ldr	r3, [pc, #148]	@ (8002678 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80025e2:	613b      	str	r3, [r7, #16]
    break;
 80025e4:	e01f      	b.n	8002626 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80025e6:	4b25      	ldr	r3, [pc, #148]	@ (800267c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80025e8:	613b      	str	r3, [r7, #16]
    break;
 80025ea:	e01c      	b.n	8002626 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025ec:	4b21      	ldr	r3, [pc, #132]	@ (8002674 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002674 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80025fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e005      	b.n	8002614 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002608:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002614:	4a1a      	ldr	r2, [pc, #104]	@ (8002680 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	613b      	str	r3, [r7, #16]
    break;
 800261e:	e002      	b.n	8002626 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]
    break;
 8002624:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002626:	4b13      	ldr	r3, [pc, #76]	@ (8002674 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	3301      	adds	r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002634:	4b0f      	ldr	r3, [pc, #60]	@ (8002674 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	fb03 f202 	mul.w	r2, r3, r2
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	0e5b      	lsrs	r3, r3, #25
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	3301      	adds	r3, #1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	fbb2 f3f3 	udiv	r3, r2, r3
 8002664:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002666:	683b      	ldr	r3, [r7, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	371c      	adds	r7, #28
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	40021000 	.word	0x40021000
 8002678:	00f42400 	.word	0x00f42400
 800267c:	007a1200 	.word	0x007a1200
 8002680:	08007acc 	.word	0x08007acc

08002684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800268c:	2300      	movs	r3, #0
 800268e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002690:	2300      	movs	r3, #0
 8002692:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800269c:	2b00      	cmp	r3, #0
 800269e:	d040      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026a4:	2b80      	cmp	r3, #128	@ 0x80
 80026a6:	d02a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026a8:	2b80      	cmp	r3, #128	@ 0x80
 80026aa:	d825      	bhi.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026ac:	2b60      	cmp	r3, #96	@ 0x60
 80026ae:	d026      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80026b0:	2b60      	cmp	r3, #96	@ 0x60
 80026b2:	d821      	bhi.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026b4:	2b40      	cmp	r3, #64	@ 0x40
 80026b6:	d006      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80026b8:	2b40      	cmp	r3, #64	@ 0x40
 80026ba:	d81d      	bhi.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d010      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80026c4:	e018      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026c6:	4b89      	ldr	r3, [pc, #548]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4a88      	ldr	r2, [pc, #544]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026d2:	e015      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3304      	adds	r3, #4
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fb02 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026e4:	e00c      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3320      	adds	r3, #32
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fbed 	bl	8002ecc <RCCEx_PLLSAI2_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026f6:	e003      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	74fb      	strb	r3, [r7, #19]
      break;
 80026fc:	e000      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80026fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002700:	7cfb      	ldrb	r3, [r7, #19]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10b      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002706:	4b79      	ldr	r3, [pc, #484]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002708:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800270c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002714:	4975      	ldr	r1, [pc, #468]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800271c:	e001      	b.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271e:	7cfb      	ldrb	r3, [r7, #19]
 8002720:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d047      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002736:	d030      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273c:	d82a      	bhi.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800273e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002742:	d02a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002748:	d824      	bhi.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800274a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800274e:	d008      	beq.n	8002762 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002754:	d81e      	bhi.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800275a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800275e:	d010      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002760:	e018      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002762:	4b62      	ldr	r3, [pc, #392]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	4a61      	ldr	r2, [pc, #388]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800276c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800276e:	e015      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fab4 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002780:	e00c      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3320      	adds	r3, #32
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fb9f 	bl	8002ecc <RCCEx_PLLSAI2_Config>
 800278e:	4603      	mov	r3, r0
 8002790:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002792:	e003      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	74fb      	strb	r3, [r7, #19]
      break;
 8002798:	e000      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800279a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10b      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027a2:	4b52      	ldr	r3, [pc, #328]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	494e      	ldr	r1, [pc, #312]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80027b8:	e001      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 809f 	beq.w	800290a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027cc:	2300      	movs	r3, #0
 80027ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027d0:	4b46      	ldr	r3, [pc, #280]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	4b41      	ldr	r3, [pc, #260]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ea:	4a40      	ldr	r2, [pc, #256]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80027f2:	4b3e      	ldr	r3, [pc, #248]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fe:	2301      	movs	r3, #1
 8002800:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002802:	4b3b      	ldr	r3, [pc, #236]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a3a      	ldr	r2, [pc, #232]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800280c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800280e:	f7fe fb5b 	bl	8000ec8 <HAL_GetTick>
 8002812:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002814:	e009      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002816:	f7fe fb57 	bl	8000ec8 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d902      	bls.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	74fb      	strb	r3, [r7, #19]
        break;
 8002828:	e005      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800282a:	4b31      	ldr	r3, [pc, #196]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0ef      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d15b      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800283c:	4b2b      	ldr	r3, [pc, #172]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002846:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01f      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	429a      	cmp	r2, r3
 8002858:	d019      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800285a:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002860:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002864:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002866:	4b21      	ldr	r3, [pc, #132]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286c:	4a1f      	ldr	r2, [pc, #124]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002876:	4b1d      	ldr	r3, [pc, #116]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287c:	4a1b      	ldr	r2, [pc, #108]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002882:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002886:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d016      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fb16 	bl	8000ec8 <HAL_GetTick>
 800289c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800289e:	e00b      	b.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a0:	f7fe fb12 	bl	8000ec8 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d902      	bls.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	74fb      	strb	r3, [r7, #19]
            break;
 80028b6:	e006      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0ec      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10c      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028cc:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028dc:	4903      	ldr	r1, [pc, #12]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028e4:	e008      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	74bb      	strb	r3, [r7, #18]
 80028ea:	e005      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f8:	7c7b      	ldrb	r3, [r7, #17]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4ba0      	ldr	r3, [pc, #640]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	4a9f      	ldr	r2, [pc, #636]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002908:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002916:	4b9a      	ldr	r3, [pc, #616]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002924:	4996      	ldr	r1, [pc, #600]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002938:	4b91      	ldr	r3, [pc, #580]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293e:	f023 020c 	bic.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	498e      	ldr	r1, [pc, #568]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295a:	4b89      	ldr	r3, [pc, #548]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002960:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002968:	4985      	ldr	r1, [pc, #532]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800297c:	4b80      	ldr	r3, [pc, #512]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800298a:	497d      	ldr	r1, [pc, #500]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800299e:	4b78      	ldr	r3, [pc, #480]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ac:	4974      	ldr	r1, [pc, #464]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ce:	496c      	ldr	r1, [pc, #432]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029e2:	4b67      	ldr	r3, [pc, #412]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029f0:	4963      	ldr	r1, [pc, #396]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a04:	4b5e      	ldr	r3, [pc, #376]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a12:	495b      	ldr	r1, [pc, #364]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a26:	4b56      	ldr	r3, [pc, #344]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a34:	4952      	ldr	r1, [pc, #328]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a48:	4b4d      	ldr	r3, [pc, #308]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a56:	494a      	ldr	r1, [pc, #296]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a6a:	4b45      	ldr	r3, [pc, #276]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	4941      	ldr	r1, [pc, #260]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a92:	f023 0203 	bic.w	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9a:	4939      	ldr	r1, [pc, #228]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d028      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aae:	4b34      	ldr	r3, [pc, #208]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002abc:	4930      	ldr	r1, [pc, #192]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002acc:	d106      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ace:	4b2c      	ldr	r3, [pc, #176]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ad4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad8:	60d3      	str	r3, [r2, #12]
 8002ada:	e011      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2101      	movs	r1, #1
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 f8f9 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002af2:	4603      	mov	r3, r0
 8002af4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002af6:	7cfb      	ldrb	r3, [r7, #19]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d04d      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b14:	d108      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002b16:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b1c:	4a18      	ldr	r2, [pc, #96]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b22:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b26:	e012      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002b28:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b2e:	4a14      	ldr	r2, [pc, #80]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b34:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002b38:	4b11      	ldr	r3, [pc, #68]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b46:	490e      	ldr	r1, [pc, #56]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b56:	d106      	bne.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a08      	ldr	r2, [pc, #32]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b62:	60d3      	str	r3, [r2, #12]
 8002b64:	e020      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b70:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4a02      	ldr	r2, [pc, #8]	@ (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002b76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7a:	60d3      	str	r3, [r2, #12]
 8002b7c:	e014      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	2101      	movs	r1, #1
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f8a5 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002ba4:	7cfb      	ldrb	r3, [r7, #19]
 8002ba6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d028      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bb4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bc2:	4947      	ldr	r1, [pc, #284]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bd2:	d106      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd4:	4b42      	ldr	r3, [pc, #264]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4a41      	ldr	r2, [pc, #260]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bde:	60d3      	str	r3, [r2, #12]
 8002be0:	e011      	b.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002be6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 f876 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d01e      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c12:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c18:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c22:	492f      	ldr	r1, [pc, #188]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3304      	adds	r3, #4
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f851 	bl	8002ce4 <RCCEx_PLLSAI1_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00b      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c5c:	4b20      	ldr	r3, [pc, #128]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c62:	f023 0204 	bic.w	r2, r3, #4
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c6c:	491c      	ldr	r1, [pc, #112]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00b      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002c80:	4b17      	ldr	r3, [pc, #92]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c86:	f023 0218 	bic.w	r2, r3, #24
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c90:	4913      	ldr	r1, [pc, #76]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d017      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002caa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cb4:	490a      	ldr	r1, [pc, #40]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002cc6:	d105      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc8:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a04      	ldr	r2, [pc, #16]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3718      	adds	r7, #24
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40021000 	.word	0x40021000

08002ce4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cf2:	4b72      	ldr	r3, [pc, #456]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cfe:	4b6f      	ldr	r3, [pc, #444]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0203 	and.w	r2, r3, #3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d103      	bne.n	8002d16 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
       ||
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d142      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	e03f      	b.n	8002d9c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d018      	beq.n	8002d56 <RCCEx_PLLSAI1_Config+0x72>
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d825      	bhi.n	8002d74 <RCCEx_PLLSAI1_Config+0x90>
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d002      	beq.n	8002d32 <RCCEx_PLLSAI1_Config+0x4e>
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d009      	beq.n	8002d44 <RCCEx_PLLSAI1_Config+0x60>
 8002d30:	e020      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d32:	4b62      	ldr	r3, [pc, #392]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d11d      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d42:	e01a      	b.n	8002d7a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d44:	4b5d      	ldr	r3, [pc, #372]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d116      	bne.n	8002d7e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d54:	e013      	b.n	8002d7e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d56:	4b59      	ldr	r3, [pc, #356]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10f      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d62:	4b56      	ldr	r3, [pc, #344]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d109      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d72:	e006      	b.n	8002d82 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      break;
 8002d78:	e004      	b.n	8002d84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e002      	b.n	8002d84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e000      	b.n	8002d84 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002d82:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d108      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002d8a:	4b4c      	ldr	r3, [pc, #304]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f023 0203 	bic.w	r2, r3, #3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4949      	ldr	r1, [pc, #292]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f040 8086 	bne.w	8002eb0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002da4:	4b45      	ldr	r3, [pc, #276]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a44      	ldr	r2, [pc, #272]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002daa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7fe f88a 	bl	8000ec8 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002db6:	e009      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db8:	f7fe f886 	bl	8000ec8 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dca:	e005      	b.n	8002dd8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ef      	bne.n	8002db8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d168      	bne.n	8002eb0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d113      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de4:	4b35      	ldr	r3, [pc, #212]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	4b35      	ldr	r3, [pc, #212]	@ (8002ec0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6892      	ldr	r2, [r2, #8]
 8002df0:	0211      	lsls	r1, r2, #8
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68d2      	ldr	r2, [r2, #12]
 8002df6:	06d2      	lsls	r2, r2, #27
 8002df8:	4311      	orrs	r1, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6852      	ldr	r2, [r2, #4]
 8002dfe:	3a01      	subs	r2, #1
 8002e00:	0112      	lsls	r2, r2, #4
 8002e02:	430a      	orrs	r2, r1
 8002e04:	492d      	ldr	r1, [pc, #180]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	610b      	str	r3, [r1, #16]
 8002e0a:	e02d      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d115      	bne.n	8002e3e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e12:	4b2a      	ldr	r3, [pc, #168]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6892      	ldr	r2, [r2, #8]
 8002e1e:	0211      	lsls	r1, r2, #8
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6912      	ldr	r2, [r2, #16]
 8002e24:	0852      	lsrs	r2, r2, #1
 8002e26:	3a01      	subs	r2, #1
 8002e28:	0552      	lsls	r2, r2, #21
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6852      	ldr	r2, [r2, #4]
 8002e30:	3a01      	subs	r2, #1
 8002e32:	0112      	lsls	r2, r2, #4
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4921      	ldr	r1, [pc, #132]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	610b      	str	r3, [r1, #16]
 8002e3c:	e014      	b.n	8002e68 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	4b21      	ldr	r3, [pc, #132]	@ (8002ec8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6892      	ldr	r2, [r2, #8]
 8002e4a:	0211      	lsls	r1, r2, #8
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6952      	ldr	r2, [r2, #20]
 8002e50:	0852      	lsrs	r2, r2, #1
 8002e52:	3a01      	subs	r2, #1
 8002e54:	0652      	lsls	r2, r2, #25
 8002e56:	4311      	orrs	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6852      	ldr	r2, [r2, #4]
 8002e5c:	3a01      	subs	r2, #1
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	430a      	orrs	r2, r1
 8002e62:	4916      	ldr	r1, [pc, #88]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e68:	4b14      	ldr	r3, [pc, #80]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a13      	ldr	r2, [pc, #76]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e74:	f7fe f828 	bl	8000ec8 <HAL_GetTick>
 8002e78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e7a:	e009      	b.n	8002e90 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e7c:	f7fe f824 	bl	8000ec8 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d902      	bls.n	8002e90 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e8e:	e005      	b.n	8002e9c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e90:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0ef      	beq.n	8002e7c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	4904      	ldr	r1, [pc, #16]	@ (8002ebc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	07ff800f 	.word	0x07ff800f
 8002ec4:	ff9f800f 	.word	0xff9f800f
 8002ec8:	f9ff800f 	.word	0xf9ff800f

08002ecc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eda:	4b72      	ldr	r3, [pc, #456]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00e      	beq.n	8002f04 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ee6:	4b6f      	ldr	r3, [pc, #444]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0203 	and.w	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d103      	bne.n	8002efe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
       ||
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d142      	bne.n	8002f84 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e03f      	b.n	8002f84 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d018      	beq.n	8002f3e <RCCEx_PLLSAI2_Config+0x72>
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d825      	bhi.n	8002f5c <RCCEx_PLLSAI2_Config+0x90>
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d002      	beq.n	8002f1a <RCCEx_PLLSAI2_Config+0x4e>
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d009      	beq.n	8002f2c <RCCEx_PLLSAI2_Config+0x60>
 8002f18:	e020      	b.n	8002f5c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f1a:	4b62      	ldr	r3, [pc, #392]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11d      	bne.n	8002f62 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2a:	e01a      	b.n	8002f62 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f2c:	4b5d      	ldr	r3, [pc, #372]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d116      	bne.n	8002f66 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3c:	e013      	b.n	8002f66 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f3e:	4b59      	ldr	r3, [pc, #356]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10f      	bne.n	8002f6a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f4a:	4b56      	ldr	r3, [pc, #344]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f5a:	e006      	b.n	8002f6a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e004      	b.n	8002f6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002f6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d108      	bne.n	8002f84 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002f72:	4b4c      	ldr	r3, [pc, #304]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f023 0203 	bic.w	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4949      	ldr	r1, [pc, #292]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 8086 	bne.w	8003098 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f8c:	4b45      	ldr	r3, [pc, #276]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a44      	ldr	r2, [pc, #272]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f98:	f7fd ff96 	bl	8000ec8 <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f9e:	e009      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fa0:	f7fd ff92 	bl	8000ec8 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d902      	bls.n	8002fb4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002fb2:	e005      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ef      	bne.n	8002fa0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d168      	bne.n	8003098 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d113      	bne.n	8002ff4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fcc:	4b35      	ldr	r3, [pc, #212]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	4b35      	ldr	r3, [pc, #212]	@ (80030a8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6892      	ldr	r2, [r2, #8]
 8002fd8:	0211      	lsls	r1, r2, #8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68d2      	ldr	r2, [r2, #12]
 8002fde:	06d2      	lsls	r2, r2, #27
 8002fe0:	4311      	orrs	r1, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6852      	ldr	r2, [r2, #4]
 8002fe6:	3a01      	subs	r2, #1
 8002fe8:	0112      	lsls	r2, r2, #4
 8002fea:	430a      	orrs	r2, r1
 8002fec:	492d      	ldr	r1, [pc, #180]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	614b      	str	r3, [r1, #20]
 8002ff2:	e02d      	b.n	8003050 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d115      	bne.n	8003026 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80030ac <RCCEx_PLLSAI2_Config+0x1e0>)
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6892      	ldr	r2, [r2, #8]
 8003006:	0211      	lsls	r1, r2, #8
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6912      	ldr	r2, [r2, #16]
 800300c:	0852      	lsrs	r2, r2, #1
 800300e:	3a01      	subs	r2, #1
 8003010:	0552      	lsls	r2, r2, #21
 8003012:	4311      	orrs	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6852      	ldr	r2, [r2, #4]
 8003018:	3a01      	subs	r2, #1
 800301a:	0112      	lsls	r2, r2, #4
 800301c:	430a      	orrs	r2, r1
 800301e:	4921      	ldr	r1, [pc, #132]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003020:	4313      	orrs	r3, r2
 8003022:	614b      	str	r3, [r1, #20]
 8003024:	e014      	b.n	8003050 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003026:	4b1f      	ldr	r3, [pc, #124]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	4b21      	ldr	r3, [pc, #132]	@ (80030b0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800302c:	4013      	ands	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6892      	ldr	r2, [r2, #8]
 8003032:	0211      	lsls	r1, r2, #8
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6952      	ldr	r2, [r2, #20]
 8003038:	0852      	lsrs	r2, r2, #1
 800303a:	3a01      	subs	r2, #1
 800303c:	0652      	lsls	r2, r2, #25
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6852      	ldr	r2, [r2, #4]
 8003044:	3a01      	subs	r2, #1
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	430a      	orrs	r2, r1
 800304a:	4916      	ldr	r1, [pc, #88]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800304c:	4313      	orrs	r3, r2
 800304e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003050:	4b14      	ldr	r3, [pc, #80]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a13      	ldr	r2, [pc, #76]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800305a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305c:	f7fd ff34 	bl	8000ec8 <HAL_GetTick>
 8003060:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003062:	e009      	b.n	8003078 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003064:	f7fd ff30 	bl	8000ec8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d902      	bls.n	8003078 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	73fb      	strb	r3, [r7, #15]
          break;
 8003076:	e005      	b.n	8003084 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003078:	4b0a      	ldr	r3, [pc, #40]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ef      	beq.n	8003064 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800308a:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	4904      	ldr	r1, [pc, #16]	@ (80030a4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003094:	4313      	orrs	r3, r2
 8003096:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003098:	7bfb      	ldrb	r3, [r7, #15]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	07ff800f 	.word	0x07ff800f
 80030ac:	ff9f800f 	.word	0xff9f800f
 80030b0:	f9ff800f 	.word	0xf9ff800f

080030b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e049      	b.n	800315a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f841 	bl	8003162 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3304      	adds	r3, #4
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f000 f9e0 	bl	80034b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d001      	beq.n	8003190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e04f      	b.n	8003230 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a23      	ldr	r2, [pc, #140]	@ (800323c <HAL_TIM_Base_Start_IT+0xc4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ba:	d018      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003240 <HAL_TIM_Base_Start_IT+0xc8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003244 <HAL_TIM_Base_Start_IT+0xcc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003248 <HAL_TIM_Base_Start_IT+0xd0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1b      	ldr	r2, [pc, #108]	@ (800324c <HAL_TIM_Base_Start_IT+0xd4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x76>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a19      	ldr	r2, [pc, #100]	@ (8003250 <HAL_TIM_Base_Start_IT+0xd8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d115      	bne.n	800321a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	4b17      	ldr	r3, [pc, #92]	@ (8003254 <HAL_TIM_Base_Start_IT+0xdc>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b06      	cmp	r3, #6
 80031fe:	d015      	beq.n	800322c <HAL_TIM_Base_Start_IT+0xb4>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003206:	d011      	beq.n	800322c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003218:	e008      	b.n	800322c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	e000      	b.n	800322e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40012c00 	.word	0x40012c00
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800
 8003248:	40000c00 	.word	0x40000c00
 800324c:	40013400 	.word	0x40013400
 8003250:	40014000 	.word	0x40014000
 8003254:	00010007 	.word	0x00010007

08003258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d020      	beq.n	80032bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01b      	beq.n	80032bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0202 	mvn.w	r2, #2
 800328c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8e9 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f8db 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f8ec 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d020      	beq.n	8003308 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01b      	beq.n	8003308 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f06f 0204 	mvn.w	r2, #4
 80032d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2202      	movs	r2, #2
 80032de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8c3 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 80032f4:	e005      	b.n	8003302 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f8b5 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f8c6 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d020      	beq.n	8003354 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01b      	beq.n	8003354 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0208 	mvn.w	r2, #8
 8003324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2204      	movs	r2, #4
 800332a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f89d 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 8003340:	e005      	b.n	800334e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f88f 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f8a0 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b00      	cmp	r3, #0
 800335c:	d020      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01b      	beq.n	80033a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0210 	mvn.w	r2, #16
 8003370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2208      	movs	r2, #8
 8003376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f877 	bl	800347a <HAL_TIM_IC_CaptureCallback>
 800338c:	e005      	b.n	800339a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f869 	bl	8003466 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f87a 	bl	800348e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d007      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0201 	mvn.w	r2, #1
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fb08 	bl	80009d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00c      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80033ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f913 	bl	8003618 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00c      	beq.n	8003416 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800340e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f90b 	bl	800362c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f834 	bl	80034a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00c      	beq.n	800345e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f06f 0220 	mvn.w	r2, #32
 8003456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f8d3 	bl	8003604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003466:	b480      	push	{r7}
 8003468:	b083      	sub	sp, #12
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800346e:	bf00      	nop
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a46      	ldr	r2, [pc, #280]	@ (80035e4 <TIM_Base_SetConfig+0x12c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d013      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d6:	d00f      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a43      	ldr	r2, [pc, #268]	@ (80035e8 <TIM_Base_SetConfig+0x130>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00b      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a42      	ldr	r2, [pc, #264]	@ (80035ec <TIM_Base_SetConfig+0x134>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a41      	ldr	r2, [pc, #260]	@ (80035f0 <TIM_Base_SetConfig+0x138>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a40      	ldr	r2, [pc, #256]	@ (80035f4 <TIM_Base_SetConfig+0x13c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d108      	bne.n	800350a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a35      	ldr	r2, [pc, #212]	@ (80035e4 <TIM_Base_SetConfig+0x12c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01f      	beq.n	8003552 <TIM_Base_SetConfig+0x9a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003518:	d01b      	beq.n	8003552 <TIM_Base_SetConfig+0x9a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a32      	ldr	r2, [pc, #200]	@ (80035e8 <TIM_Base_SetConfig+0x130>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d017      	beq.n	8003552 <TIM_Base_SetConfig+0x9a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a31      	ldr	r2, [pc, #196]	@ (80035ec <TIM_Base_SetConfig+0x134>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <TIM_Base_SetConfig+0x9a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a30      	ldr	r2, [pc, #192]	@ (80035f0 <TIM_Base_SetConfig+0x138>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00f      	beq.n	8003552 <TIM_Base_SetConfig+0x9a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2f      	ldr	r2, [pc, #188]	@ (80035f4 <TIM_Base_SetConfig+0x13c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d00b      	beq.n	8003552 <TIM_Base_SetConfig+0x9a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2e      	ldr	r2, [pc, #184]	@ (80035f8 <TIM_Base_SetConfig+0x140>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d007      	beq.n	8003552 <TIM_Base_SetConfig+0x9a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2d      	ldr	r2, [pc, #180]	@ (80035fc <TIM_Base_SetConfig+0x144>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d003      	beq.n	8003552 <TIM_Base_SetConfig+0x9a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2c      	ldr	r2, [pc, #176]	@ (8003600 <TIM_Base_SetConfig+0x148>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d108      	bne.n	8003564 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a16      	ldr	r2, [pc, #88]	@ (80035e4 <TIM_Base_SetConfig+0x12c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00f      	beq.n	80035b0 <TIM_Base_SetConfig+0xf8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a18      	ldr	r2, [pc, #96]	@ (80035f4 <TIM_Base_SetConfig+0x13c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0xf8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a17      	ldr	r2, [pc, #92]	@ (80035f8 <TIM_Base_SetConfig+0x140>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0xf8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a16      	ldr	r2, [pc, #88]	@ (80035fc <TIM_Base_SetConfig+0x144>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0xf8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a15      	ldr	r2, [pc, #84]	@ (8003600 <TIM_Base_SetConfig+0x148>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d103      	bne.n	80035b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	f023 0201 	bic.w	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	611a      	str	r2, [r3, #16]
  }
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40000800 	.word	0x40000800
 80035f0:	40000c00 	.word	0x40000c00
 80035f4:	40013400 	.word	0x40013400
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800

08003604 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e042      	b.n	80036d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003658:	2b00      	cmp	r3, #0
 800365a:	d106      	bne.n	800366a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7fd f9f5 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2224      	movs	r2, #36	@ 0x24
 800366e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 0201 	bic.w	r2, r2, #1
 8003680:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fb24 	bl	8003cd8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f825 	bl	80036e0 <UART_SetConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e01b      	b.n	80036d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fba3 	bl	8003e1c <UART_CheckIdleState>
 80036d6:	4603      	mov	r3, r0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e4:	b08c      	sub	sp, #48	@ 0x30
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	431a      	orrs	r2, r3
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	431a      	orrs	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	4313      	orrs	r3, r2
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	4baa      	ldr	r3, [pc, #680]	@ (80039b8 <UART_SetConfig+0x2d8>)
 8003710:	4013      	ands	r3, r2
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003718:	430b      	orrs	r3, r1
 800371a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a9f      	ldr	r2, [pc, #636]	@ (80039bc <UART_SetConfig+0x2dc>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d004      	beq.n	800374c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003748:	4313      	orrs	r3, r2
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003756:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003760:	430b      	orrs	r3, r1
 8003762:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376a:	f023 010f 	bic.w	r1, r3, #15
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a90      	ldr	r2, [pc, #576]	@ (80039c0 <UART_SetConfig+0x2e0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d125      	bne.n	80037d0 <UART_SetConfig+0xf0>
 8003784:	4b8f      	ldr	r3, [pc, #572]	@ (80039c4 <UART_SetConfig+0x2e4>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b03      	cmp	r3, #3
 8003790:	d81a      	bhi.n	80037c8 <UART_SetConfig+0xe8>
 8003792:	a201      	add	r2, pc, #4	@ (adr r2, 8003798 <UART_SetConfig+0xb8>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037b9 	.word	0x080037b9
 80037a0:	080037b1 	.word	0x080037b1
 80037a4:	080037c1 	.word	0x080037c1
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ae:	e116      	b.n	80039de <UART_SetConfig+0x2fe>
 80037b0:	2302      	movs	r3, #2
 80037b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037b6:	e112      	b.n	80039de <UART_SetConfig+0x2fe>
 80037b8:	2304      	movs	r3, #4
 80037ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037be:	e10e      	b.n	80039de <UART_SetConfig+0x2fe>
 80037c0:	2308      	movs	r3, #8
 80037c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037c6:	e10a      	b.n	80039de <UART_SetConfig+0x2fe>
 80037c8:	2310      	movs	r3, #16
 80037ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ce:	e106      	b.n	80039de <UART_SetConfig+0x2fe>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a7c      	ldr	r2, [pc, #496]	@ (80039c8 <UART_SetConfig+0x2e8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d138      	bne.n	800384c <UART_SetConfig+0x16c>
 80037da:	4b7a      	ldr	r3, [pc, #488]	@ (80039c4 <UART_SetConfig+0x2e4>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d82d      	bhi.n	8003844 <UART_SetConfig+0x164>
 80037e8:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <UART_SetConfig+0x110>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003825 	.word	0x08003825
 80037f4:	08003845 	.word	0x08003845
 80037f8:	08003845 	.word	0x08003845
 80037fc:	08003845 	.word	0x08003845
 8003800:	08003835 	.word	0x08003835
 8003804:	08003845 	.word	0x08003845
 8003808:	08003845 	.word	0x08003845
 800380c:	08003845 	.word	0x08003845
 8003810:	0800382d 	.word	0x0800382d
 8003814:	08003845 	.word	0x08003845
 8003818:	08003845 	.word	0x08003845
 800381c:	08003845 	.word	0x08003845
 8003820:	0800383d 	.word	0x0800383d
 8003824:	2300      	movs	r3, #0
 8003826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800382a:	e0d8      	b.n	80039de <UART_SetConfig+0x2fe>
 800382c:	2302      	movs	r3, #2
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003832:	e0d4      	b.n	80039de <UART_SetConfig+0x2fe>
 8003834:	2304      	movs	r3, #4
 8003836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800383a:	e0d0      	b.n	80039de <UART_SetConfig+0x2fe>
 800383c:	2308      	movs	r3, #8
 800383e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003842:	e0cc      	b.n	80039de <UART_SetConfig+0x2fe>
 8003844:	2310      	movs	r3, #16
 8003846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800384a:	e0c8      	b.n	80039de <UART_SetConfig+0x2fe>
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a5e      	ldr	r2, [pc, #376]	@ (80039cc <UART_SetConfig+0x2ec>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d125      	bne.n	80038a2 <UART_SetConfig+0x1c2>
 8003856:	4b5b      	ldr	r3, [pc, #364]	@ (80039c4 <UART_SetConfig+0x2e4>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003860:	2b30      	cmp	r3, #48	@ 0x30
 8003862:	d016      	beq.n	8003892 <UART_SetConfig+0x1b2>
 8003864:	2b30      	cmp	r3, #48	@ 0x30
 8003866:	d818      	bhi.n	800389a <UART_SetConfig+0x1ba>
 8003868:	2b20      	cmp	r3, #32
 800386a:	d00a      	beq.n	8003882 <UART_SetConfig+0x1a2>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d814      	bhi.n	800389a <UART_SetConfig+0x1ba>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <UART_SetConfig+0x19a>
 8003874:	2b10      	cmp	r3, #16
 8003876:	d008      	beq.n	800388a <UART_SetConfig+0x1aa>
 8003878:	e00f      	b.n	800389a <UART_SetConfig+0x1ba>
 800387a:	2300      	movs	r3, #0
 800387c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003880:	e0ad      	b.n	80039de <UART_SetConfig+0x2fe>
 8003882:	2302      	movs	r3, #2
 8003884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003888:	e0a9      	b.n	80039de <UART_SetConfig+0x2fe>
 800388a:	2304      	movs	r3, #4
 800388c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003890:	e0a5      	b.n	80039de <UART_SetConfig+0x2fe>
 8003892:	2308      	movs	r3, #8
 8003894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003898:	e0a1      	b.n	80039de <UART_SetConfig+0x2fe>
 800389a:	2310      	movs	r3, #16
 800389c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038a0:	e09d      	b.n	80039de <UART_SetConfig+0x2fe>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a4a      	ldr	r2, [pc, #296]	@ (80039d0 <UART_SetConfig+0x2f0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d125      	bne.n	80038f8 <UART_SetConfig+0x218>
 80038ac:	4b45      	ldr	r3, [pc, #276]	@ (80039c4 <UART_SetConfig+0x2e4>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038b8:	d016      	beq.n	80038e8 <UART_SetConfig+0x208>
 80038ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80038bc:	d818      	bhi.n	80038f0 <UART_SetConfig+0x210>
 80038be:	2b80      	cmp	r3, #128	@ 0x80
 80038c0:	d00a      	beq.n	80038d8 <UART_SetConfig+0x1f8>
 80038c2:	2b80      	cmp	r3, #128	@ 0x80
 80038c4:	d814      	bhi.n	80038f0 <UART_SetConfig+0x210>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <UART_SetConfig+0x1f0>
 80038ca:	2b40      	cmp	r3, #64	@ 0x40
 80038cc:	d008      	beq.n	80038e0 <UART_SetConfig+0x200>
 80038ce:	e00f      	b.n	80038f0 <UART_SetConfig+0x210>
 80038d0:	2300      	movs	r3, #0
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d6:	e082      	b.n	80039de <UART_SetConfig+0x2fe>
 80038d8:	2302      	movs	r3, #2
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038de:	e07e      	b.n	80039de <UART_SetConfig+0x2fe>
 80038e0:	2304      	movs	r3, #4
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e6:	e07a      	b.n	80039de <UART_SetConfig+0x2fe>
 80038e8:	2308      	movs	r3, #8
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ee:	e076      	b.n	80039de <UART_SetConfig+0x2fe>
 80038f0:	2310      	movs	r3, #16
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038f6:	e072      	b.n	80039de <UART_SetConfig+0x2fe>
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a35      	ldr	r2, [pc, #212]	@ (80039d4 <UART_SetConfig+0x2f4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d12a      	bne.n	8003958 <UART_SetConfig+0x278>
 8003902:	4b30      	ldr	r3, [pc, #192]	@ (80039c4 <UART_SetConfig+0x2e4>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003908:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800390c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003910:	d01a      	beq.n	8003948 <UART_SetConfig+0x268>
 8003912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003916:	d81b      	bhi.n	8003950 <UART_SetConfig+0x270>
 8003918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800391c:	d00c      	beq.n	8003938 <UART_SetConfig+0x258>
 800391e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003922:	d815      	bhi.n	8003950 <UART_SetConfig+0x270>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <UART_SetConfig+0x250>
 8003928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800392c:	d008      	beq.n	8003940 <UART_SetConfig+0x260>
 800392e:	e00f      	b.n	8003950 <UART_SetConfig+0x270>
 8003930:	2300      	movs	r3, #0
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003936:	e052      	b.n	80039de <UART_SetConfig+0x2fe>
 8003938:	2302      	movs	r3, #2
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800393e:	e04e      	b.n	80039de <UART_SetConfig+0x2fe>
 8003940:	2304      	movs	r3, #4
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003946:	e04a      	b.n	80039de <UART_SetConfig+0x2fe>
 8003948:	2308      	movs	r3, #8
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394e:	e046      	b.n	80039de <UART_SetConfig+0x2fe>
 8003950:	2310      	movs	r3, #16
 8003952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003956:	e042      	b.n	80039de <UART_SetConfig+0x2fe>
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a17      	ldr	r2, [pc, #92]	@ (80039bc <UART_SetConfig+0x2dc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d13a      	bne.n	80039d8 <UART_SetConfig+0x2f8>
 8003962:	4b18      	ldr	r3, [pc, #96]	@ (80039c4 <UART_SetConfig+0x2e4>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003968:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800396c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003970:	d01a      	beq.n	80039a8 <UART_SetConfig+0x2c8>
 8003972:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003976:	d81b      	bhi.n	80039b0 <UART_SetConfig+0x2d0>
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800397c:	d00c      	beq.n	8003998 <UART_SetConfig+0x2b8>
 800397e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003982:	d815      	bhi.n	80039b0 <UART_SetConfig+0x2d0>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <UART_SetConfig+0x2b0>
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398c:	d008      	beq.n	80039a0 <UART_SetConfig+0x2c0>
 800398e:	e00f      	b.n	80039b0 <UART_SetConfig+0x2d0>
 8003990:	2300      	movs	r3, #0
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003996:	e022      	b.n	80039de <UART_SetConfig+0x2fe>
 8003998:	2302      	movs	r3, #2
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800399e:	e01e      	b.n	80039de <UART_SetConfig+0x2fe>
 80039a0:	2304      	movs	r3, #4
 80039a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039a6:	e01a      	b.n	80039de <UART_SetConfig+0x2fe>
 80039a8:	2308      	movs	r3, #8
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ae:	e016      	b.n	80039de <UART_SetConfig+0x2fe>
 80039b0:	2310      	movs	r3, #16
 80039b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039b6:	e012      	b.n	80039de <UART_SetConfig+0x2fe>
 80039b8:	cfff69f3 	.word	0xcfff69f3
 80039bc:	40008000 	.word	0x40008000
 80039c0:	40013800 	.word	0x40013800
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40004400 	.word	0x40004400
 80039cc:	40004800 	.word	0x40004800
 80039d0:	40004c00 	.word	0x40004c00
 80039d4:	40005000 	.word	0x40005000
 80039d8:	2310      	movs	r3, #16
 80039da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4aae      	ldr	r2, [pc, #696]	@ (8003c9c <UART_SetConfig+0x5bc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	f040 8097 	bne.w	8003b18 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d823      	bhi.n	8003a3a <UART_SetConfig+0x35a>
 80039f2:	a201      	add	r2, pc, #4	@ (adr r2, 80039f8 <UART_SetConfig+0x318>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a3b 	.word	0x08003a3b
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a3b 	.word	0x08003a3b
 8003a08:	08003a2b 	.word	0x08003a2b
 8003a0c:	08003a3b 	.word	0x08003a3b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a3b 	.word	0x08003a3b
 8003a18:	08003a33 	.word	0x08003a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7fe fd14 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8003a20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a22:	e010      	b.n	8003a46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a24:	4b9e      	ldr	r3, [pc, #632]	@ (8003ca0 <UART_SetConfig+0x5c0>)
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a28:	e00d      	b.n	8003a46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a2a:	f7fe fc75 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 8003a2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a30:	e009      	b.n	8003a46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a38:	e005      	b.n	8003a46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8130 	beq.w	8003cae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	4a94      	ldr	r2, [pc, #592]	@ (8003ca4 <UART_SetConfig+0x5c4>)
 8003a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d305      	bcc.n	8003a7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d903      	bls.n	8003a86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a84:	e113      	b.n	8003cae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	2200      	movs	r2, #0
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	60fa      	str	r2, [r7, #12]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	4a84      	ldr	r2, [pc, #528]	@ (8003ca4 <UART_SetConfig+0x5c4>)
 8003a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aa8:	f7fc fbaa 	bl	8000200 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4610      	mov	r0, r2
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	020b      	lsls	r3, r1, #8
 8003abe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ac2:	0202      	lsls	r2, r0, #8
 8003ac4:	6979      	ldr	r1, [r7, #20]
 8003ac6:	6849      	ldr	r1, [r1, #4]
 8003ac8:	0849      	lsrs	r1, r1, #1
 8003aca:	2000      	movs	r0, #0
 8003acc:	460c      	mov	r4, r1
 8003ace:	4605      	mov	r5, r0
 8003ad0:	eb12 0804 	adds.w	r8, r2, r4
 8003ad4:	eb43 0905 	adc.w	r9, r3, r5
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	469a      	mov	sl, r3
 8003ae0:	4693      	mov	fp, r2
 8003ae2:	4652      	mov	r2, sl
 8003ae4:	465b      	mov	r3, fp
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	4649      	mov	r1, r9
 8003aea:	f7fc fb89 	bl	8000200 <__aeabi_uldivmod>
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	4613      	mov	r3, r2
 8003af4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003afc:	d308      	bcc.n	8003b10 <UART_SetConfig+0x430>
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b04:	d204      	bcs.n	8003b10 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6a3a      	ldr	r2, [r7, #32]
 8003b0c:	60da      	str	r2, [r3, #12]
 8003b0e:	e0ce      	b.n	8003cae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b16:	e0ca      	b.n	8003cae <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b20:	d166      	bne.n	8003bf0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003b22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d827      	bhi.n	8003b7a <UART_SetConfig+0x49a>
 8003b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <UART_SetConfig+0x450>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b65 	.word	0x08003b65
 8003b3c:	08003b7b 	.word	0x08003b7b
 8003b40:	08003b6b 	.word	0x08003b6b
 8003b44:	08003b7b 	.word	0x08003b7b
 8003b48:	08003b7b 	.word	0x08003b7b
 8003b4c:	08003b7b 	.word	0x08003b7b
 8003b50:	08003b73 	.word	0x08003b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b54:	f7fe fc78 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8003b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b5a:	e014      	b.n	8003b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b5c:	f7fe fc8a 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8003b60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b62:	e010      	b.n	8003b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b64:	4b4e      	ldr	r3, [pc, #312]	@ (8003ca0 <UART_SetConfig+0x5c0>)
 8003b66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b68:	e00d      	b.n	8003b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6a:	f7fe fbd5 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 8003b6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b70:	e009      	b.n	8003b86 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b78:	e005      	b.n	8003b86 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8090 	beq.w	8003cae <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b92:	4a44      	ldr	r2, [pc, #272]	@ (8003ca4 <UART_SetConfig+0x5c4>)
 8003b94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ba0:	005a      	lsls	r2, r3, #1
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	441a      	add	r2, r3
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2b0f      	cmp	r3, #15
 8003bb8:	d916      	bls.n	8003be8 <UART_SetConfig+0x508>
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc0:	d212      	bcs.n	8003be8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f023 030f 	bic.w	r3, r3, #15
 8003bca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	8bfb      	ldrh	r3, [r7, #30]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	8bfa      	ldrh	r2, [r7, #30]
 8003be4:	60da      	str	r2, [r3, #12]
 8003be6:	e062      	b.n	8003cae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003bee:	e05e      	b.n	8003cae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d828      	bhi.n	8003c4a <UART_SetConfig+0x56a>
 8003bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8003c00 <UART_SetConfig+0x520>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c25 	.word	0x08003c25
 8003c04:	08003c2d 	.word	0x08003c2d
 8003c08:	08003c35 	.word	0x08003c35
 8003c0c:	08003c4b 	.word	0x08003c4b
 8003c10:	08003c3b 	.word	0x08003c3b
 8003c14:	08003c4b 	.word	0x08003c4b
 8003c18:	08003c4b 	.word	0x08003c4b
 8003c1c:	08003c4b 	.word	0x08003c4b
 8003c20:	08003c43 	.word	0x08003c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c24:	f7fe fc10 	bl	8002448 <HAL_RCC_GetPCLK1Freq>
 8003c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c2a:	e014      	b.n	8003c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c2c:	f7fe fc22 	bl	8002474 <HAL_RCC_GetPCLK2Freq>
 8003c30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c32:	e010      	b.n	8003c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca0 <UART_SetConfig+0x5c0>)
 8003c36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c38:	e00d      	b.n	8003c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c3a:	f7fe fb6d 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 8003c3e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c40:	e009      	b.n	8003c56 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c48:	e005      	b.n	8003c56 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c54:	bf00      	nop
    }

    if (pclk != 0U)
 8003c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d028      	beq.n	8003cae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	4a10      	ldr	r2, [pc, #64]	@ (8003ca4 <UART_SetConfig+0x5c4>)
 8003c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c66:	461a      	mov	r2, r3
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	441a      	add	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	d910      	bls.n	8003ca8 <UART_SetConfig+0x5c8>
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c8c:	d20c      	bcs.n	8003ca8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	e009      	b.n	8003cae <UART_SetConfig+0x5ce>
 8003c9a:	bf00      	nop
 8003c9c:	40008000 	.word	0x40008000
 8003ca0:	00f42400 	.word	0x00f42400
 8003ca4:	08007afc 	.word	0x08007afc
      }
      else
      {
        ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003cca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3730      	adds	r7, #48	@ 0x30
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4a:	f003 0304 	and.w	r3, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01a      	beq.n	8003dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dd6:	d10a      	bne.n	8003dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
  }
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b098      	sub	sp, #96	@ 0x60
 8003e20:	af02      	add	r7, sp, #8
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e2c:	f7fd f84c 	bl	8000ec8 <HAL_GetTick>
 8003e30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0308 	and.w	r3, r3, #8
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d12f      	bne.n	8003ea0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f88e 	bl	8003f70 <UART_WaitOnFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d022      	beq.n	8003ea0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e62:	e853 3f00 	ldrex	r3, [r3]
 8003e66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e7a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e6      	bne.n	8003e5a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e063      	b.n	8003f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d149      	bne.n	8003f42 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003eae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f857 	bl	8003f70 <UART_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d03c      	beq.n	8003f42 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ee6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ee8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e6      	bne.n	8003ec8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f1a:	61fa      	str	r2, [r7, #28]
 8003f1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	69b9      	ldr	r1, [r7, #24]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	617b      	str	r3, [r7, #20]
   return(result);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2220      	movs	r2, #32
 8003f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e012      	b.n	8003f68 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3758      	adds	r7, #88	@ 0x58
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f80:	e04f      	b.n	8004022 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d04b      	beq.n	8004022 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8a:	f7fc ff9d 	bl	8000ec8 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e04e      	b.n	8004042 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0304 	and.w	r3, r3, #4
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d037      	beq.n	8004022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b80      	cmp	r3, #128	@ 0x80
 8003fb6:	d034      	beq.n	8004022 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b40      	cmp	r3, #64	@ 0x40
 8003fbc:	d031      	beq.n	8004022 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d110      	bne.n	8003fee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2208      	movs	r2, #8
 8003fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 f838 	bl	800404a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2208      	movs	r2, #8
 8003fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e029      	b.n	8004042 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ffc:	d111      	bne.n	8004022 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004006:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 f81e 	bl	800404a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2220      	movs	r2, #32
 8004012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e00f      	b.n	8004042 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4013      	ands	r3, r2
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	429a      	cmp	r2, r3
 8004030:	bf0c      	ite	eq
 8004032:	2301      	moveq	r3, #1
 8004034:	2300      	movne	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	461a      	mov	r2, r3
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	429a      	cmp	r2, r3
 800403e:	d0a0      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800404a:	b480      	push	{r7}
 800404c:	b095      	sub	sp, #84	@ 0x54
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004070:	643b      	str	r3, [r7, #64]	@ 0x40
 8004072:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800407e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e6      	bne.n	8004052 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3308      	adds	r3, #8
 800408a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	61fb      	str	r3, [r7, #28]
   return(result);
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800409a:	f023 0301 	bic.w	r3, r3, #1
 800409e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e3      	bne.n	8004084 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d118      	bne.n	80040f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f023 0310 	bic.w	r3, r3, #16
 80040d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6979      	ldr	r1, [r7, #20]
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	613b      	str	r3, [r7, #16]
   return(result);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e6      	bne.n	80040c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800410a:	bf00      	nop
 800410c:	3754      	adds	r7, #84	@ 0x54
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_UARTEx_DisableFifoMode+0x16>
 8004128:	2302      	movs	r3, #2
 800412a:	e027      	b.n	800417c <HAL_UARTEx_DisableFifoMode+0x66>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2224      	movs	r2, #36	@ 0x24
 8004138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0201 	bic.w	r2, r2, #1
 8004152:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800415a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800419c:	2302      	movs	r3, #2
 800419e:	e02d      	b.n	80041fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2224      	movs	r2, #36	@ 0x24
 80041ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f84f 	bl	8004280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004218:	2302      	movs	r3, #2
 800421a:	e02d      	b.n	8004278 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2224      	movs	r2, #36	@ 0x24
 8004228:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f811 	bl	8004280 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800428c:	2b00      	cmp	r3, #0
 800428e:	d108      	bne.n	80042a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80042a0:	e031      	b.n	8004306 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80042a2:	2308      	movs	r3, #8
 80042a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80042a6:	2308      	movs	r3, #8
 80042a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	0e5b      	lsrs	r3, r3, #25
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	0f5b      	lsrs	r3, r3, #29
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042ca:	7bbb      	ldrb	r3, [r7, #14]
 80042cc:	7b3a      	ldrb	r2, [r7, #12]
 80042ce:	4911      	ldr	r1, [pc, #68]	@ (8004314 <UARTEx_SetNbDataToProcess+0x94>)
 80042d0:	5c8a      	ldrb	r2, [r1, r2]
 80042d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80042d6:	7b3a      	ldrb	r2, [r7, #12]
 80042d8:	490f      	ldr	r1, [pc, #60]	@ (8004318 <UARTEx_SetNbDataToProcess+0x98>)
 80042da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	7b7a      	ldrb	r2, [r7, #13]
 80042ec:	4909      	ldr	r1, [pc, #36]	@ (8004314 <UARTEx_SetNbDataToProcess+0x94>)
 80042ee:	5c8a      	ldrb	r2, [r1, r2]
 80042f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80042f4:	7b7a      	ldrb	r2, [r7, #13]
 80042f6:	4908      	ldr	r1, [pc, #32]	@ (8004318 <UARTEx_SetNbDataToProcess+0x98>)
 80042f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80042fe:	b29a      	uxth	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	08007b14 	.word	0x08007b14
 8004318:	08007b1c 	.word	0x08007b1c

0800431c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800431c:	b084      	sub	sp, #16
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	f107 001c 	add.w	r0, r7, #28
 800432a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fa68 	bl	8004810 <USB_CoreReset>
 8004340:	4603      	mov	r3, r0
 8004342:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004344:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004350:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	639a      	str	r2, [r3, #56]	@ 0x38
 8004358:	e005      	b.n	8004366 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004366:	7bfb      	ldrb	r3, [r7, #15]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004372:	b004      	add	sp, #16
 8004374:	4770      	bx	lr

08004376 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f023 0201 	bic.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d115      	bne.n	80043e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043c6:	200a      	movs	r0, #10
 80043c8:	f7fc fd8a 	bl	8000ee0 <HAL_Delay>
      ms += 10U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	330a      	adds	r3, #10
 80043d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fa0e 	bl	80047f4 <USB_GetMode>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d01e      	beq.n	800441c <USB_SetCurrentMode+0x84>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80043e2:	d9f0      	bls.n	80043c6 <USB_SetCurrentMode+0x2e>
 80043e4:	e01a      	b.n	800441c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d115      	bne.n	8004418 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80043f8:	200a      	movs	r0, #10
 80043fa:	f7fc fd71 	bl	8000ee0 <HAL_Delay>
      ms += 10U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	330a      	adds	r3, #10
 8004402:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f9f5 	bl	80047f4 <USB_GetMode>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d005      	beq.n	800441c <USB_SetCurrentMode+0x84>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2bc7      	cmp	r3, #199	@ 0xc7
 8004414:	d9f0      	bls.n	80043f8 <USB_SetCurrentMode+0x60>
 8004416:	e001      	b.n	800441c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e005      	b.n	8004428 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004420:	d101      	bne.n	8004426 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004430:	b084      	sub	sp, #16
 8004432:	b580      	push	{r7, lr}
 8004434:	b086      	sub	sp, #24
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800443e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	e009      	b.n	8004464 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3340      	adds	r3, #64	@ 0x40
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	2200      	movs	r2, #0
 800445c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	3301      	adds	r3, #1
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b0e      	cmp	r3, #14
 8004468:	d9f2      	bls.n	8004450 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800446a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800446e:	2b00      	cmp	r3, #0
 8004470:	d11c      	bne.n	80044ac <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004480:	f043 0302 	orr.w	r3, r3, #2
 8004484:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e005      	b.n	80044b8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80044be:	461a      	mov	r2, r3
 80044c0:	2300      	movs	r3, #0
 80044c2:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044c4:	2103      	movs	r1, #3
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f95a 	bl	8004780 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044cc:	2110      	movs	r1, #16
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f8f6 	bl	80046c0 <USB_FlushTxFifo>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f920 	bl	8004724 <USB_FlushRxFifo>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f4:	461a      	mov	r2, r3
 80044f6:	2300      	movs	r3, #0
 80044f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004500:	461a      	mov	r2, r3
 8004502:	2300      	movs	r3, #0
 8004504:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800450c:	461a      	mov	r2, r3
 800450e:	2300      	movs	r3, #0
 8004510:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	e043      	b.n	80045a0 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800452a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800452e:	d118      	bne.n	8004562 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10a      	bne.n	800454c <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004542:	461a      	mov	r2, r3
 8004544:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e013      	b.n	8004574 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004558:	461a      	mov	r2, r3
 800455a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	e008      	b.n	8004574 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800456e:	461a      	mov	r2, r3
 8004570:	2300      	movs	r3, #0
 8004572:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004580:	461a      	mov	r2, r3
 8004582:	2300      	movs	r3, #0
 8004584:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004592:	461a      	mov	r2, r3
 8004594:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004598:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3301      	adds	r3, #1
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045a4:	461a      	mov	r2, r3
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d3b5      	bcc.n	8004518 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ac:	2300      	movs	r3, #0
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	e043      	b.n	800463a <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045c8:	d118      	bne.n	80045fc <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045dc:	461a      	mov	r2, r3
 80045de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	e013      	b.n	800460e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f2:	461a      	mov	r2, r3
 80045f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e008      	b.n	800460e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004608:	461a      	mov	r2, r3
 800460a:	2300      	movs	r3, #0
 800460c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800461a:	461a      	mov	r2, r3
 800461c:	2300      	movs	r3, #0
 800461e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800462c:	461a      	mov	r2, r3
 800462e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004632:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	3301      	adds	r3, #1
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800463e:	461a      	mov	r2, r3
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4293      	cmp	r3, r2
 8004644:	d3b5      	bcc.n	80045b2 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004658:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004666:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	f043 0210 	orr.w	r2, r3, #16
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	4b10      	ldr	r3, [pc, #64]	@ (80046bc <USB_DevInit+0x28c>)
 800467a:	4313      	orrs	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004680:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	f043 0208 	orr.w	r2, r3, #8
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004694:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004698:	2b01      	cmp	r3, #1
 800469a:	d107      	bne.n	80046ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046a4:	f043 0304 	orr.w	r3, r3, #4
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046b8:	b004      	add	sp, #16
 80046ba:	4770      	bx	lr
 80046bc:	803c3800 	.word	0x803c3800

080046c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046da:	d901      	bls.n	80046e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e01b      	b.n	8004718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	daf2      	bge.n	80046ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	019b      	lsls	r3, r3, #6
 80046f0:	f043 0220 	orr.w	r2, r3, #32
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3301      	adds	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004704:	d901      	bls.n	800470a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e006      	b.n	8004718 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	2b20      	cmp	r3, #32
 8004714:	d0f0      	beq.n	80046f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800473c:	d901      	bls.n	8004742 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e018      	b.n	8004774 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	daf2      	bge.n	8004730 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2210      	movs	r2, #16
 8004752:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3301      	adds	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004760:	d901      	bls.n	8004766 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e006      	b.n	8004774 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b10      	cmp	r3, #16
 8004770:	d0f0      	beq.n	8004754 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047a0:	4313      	orrs	r3, r2
 80047a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80047cc:	f023 0303 	bic.w	r3, r3, #3
 80047d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047e0:	f043 0302 	orr.w	r3, r3, #2
 80047e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0301 	and.w	r3, r3, #1
}
 8004804:	4618      	mov	r0, r3
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004828:	d901      	bls.n	800482e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e01b      	b.n	8004866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	daf2      	bge.n	800481c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3301      	adds	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004852:	d901      	bls.n	8004858 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e006      	b.n	8004866 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b01      	cmp	r3, #1
 8004862:	d0f0      	beq.n	8004846 <USB_CoreReset+0x36>

  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
	...

08004874 <__NVIC_SetPriority>:
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	6039      	str	r1, [r7, #0]
 800487e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004884:	2b00      	cmp	r3, #0
 8004886:	db0a      	blt.n	800489e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	b2da      	uxtb	r2, r3
 800488c:	490c      	ldr	r1, [pc, #48]	@ (80048c0 <__NVIC_SetPriority+0x4c>)
 800488e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004892:	0112      	lsls	r2, r2, #4
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	440b      	add	r3, r1
 8004898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800489c:	e00a      	b.n	80048b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	4908      	ldr	r1, [pc, #32]	@ (80048c4 <__NVIC_SetPriority+0x50>)
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	3b04      	subs	r3, #4
 80048ac:	0112      	lsls	r2, r2, #4
 80048ae:	b2d2      	uxtb	r2, r2
 80048b0:	440b      	add	r3, r1
 80048b2:	761a      	strb	r2, [r3, #24]
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	e000e100 	.word	0xe000e100
 80048c4:	e000ed00 	.word	0xe000ed00

080048c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <SysTick_Handler+0x1c>)
 80048ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80048d0:	f001 ff34 	bl	800673c <xTaskGetSchedulerState>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d001      	beq.n	80048de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80048da:	f002 fd2d 	bl	8007338 <xPortSysTickHandler>
  }
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	e000e010 	.word	0xe000e010

080048e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048ec:	2100      	movs	r1, #0
 80048ee:	f06f 0004 	mvn.w	r0, #4
 80048f2:	f7ff ffbf 	bl	8004874 <__NVIC_SetPriority>
#endif
}
 80048f6:	bf00      	nop
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004902:	f3ef 8305 	mrs	r3, IPSR
 8004906:	603b      	str	r3, [r7, #0]
  return(result);
 8004908:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800490e:	f06f 0305 	mvn.w	r3, #5
 8004912:	607b      	str	r3, [r7, #4]
 8004914:	e00c      	b.n	8004930 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004916:	4b0a      	ldr	r3, [pc, #40]	@ (8004940 <osKernelInitialize+0x44>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800491e:	4b08      	ldr	r3, [pc, #32]	@ (8004940 <osKernelInitialize+0x44>)
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004924:	2300      	movs	r3, #0
 8004926:	607b      	str	r3, [r7, #4]
 8004928:	e002      	b.n	8004930 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800492a:	f04f 33ff 	mov.w	r3, #4294967295
 800492e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004930:	687b      	ldr	r3, [r7, #4]
}
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	200406e4 	.word	0x200406e4

08004944 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800494a:	f3ef 8305 	mrs	r3, IPSR
 800494e:	603b      	str	r3, [r7, #0]
  return(result);
 8004950:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004956:	f06f 0305 	mvn.w	r3, #5
 800495a:	607b      	str	r3, [r7, #4]
 800495c:	e010      	b.n	8004980 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800495e:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <osKernelStart+0x48>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d109      	bne.n	800497a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004966:	f7ff ffbf 	bl	80048e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800496a:	4b08      	ldr	r3, [pc, #32]	@ (800498c <osKernelStart+0x48>)
 800496c:	2202      	movs	r2, #2
 800496e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004970:	f001 fa80 	bl	8005e74 <vTaskStartScheduler>
      stat = osOK;
 8004974:	2300      	movs	r3, #0
 8004976:	607b      	str	r3, [r7, #4]
 8004978:	e002      	b.n	8004980 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800497a:	f04f 33ff 	mov.w	r3, #4294967295
 800497e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004980:	687b      	ldr	r3, [r7, #4]
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	200406e4 	.word	0x200406e4

08004990 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b08e      	sub	sp, #56	@ 0x38
 8004994:	af04      	add	r7, sp, #16
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049a0:	f3ef 8305 	mrs	r3, IPSR
 80049a4:	617b      	str	r3, [r7, #20]
  return(result);
 80049a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d17e      	bne.n	8004aaa <osThreadNew+0x11a>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d07b      	beq.n	8004aaa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80049b2:	2380      	movs	r3, #128	@ 0x80
 80049b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80049b6:	2318      	movs	r3, #24
 80049b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d045      	beq.n	8004a56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <osThreadNew+0x48>
        name = attr->name;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <osThreadNew+0x6e>
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b38      	cmp	r3, #56	@ 0x38
 80049f0:	d805      	bhi.n	80049fe <osThreadNew+0x6e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <osThreadNew+0x72>
        return (NULL);
 80049fe:	2300      	movs	r3, #0
 8004a00:	e054      	b.n	8004aac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00e      	beq.n	8004a38 <osThreadNew+0xa8>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004a20:	d90a      	bls.n	8004a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d006      	beq.n	8004a38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <osThreadNew+0xa8>
        mem = 1;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	e010      	b.n	8004a5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10c      	bne.n	8004a5a <osThreadNew+0xca>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d108      	bne.n	8004a5a <osThreadNew+0xca>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <osThreadNew+0xca>
          mem = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	e001      	b.n	8004a5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d110      	bne.n	8004a82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a68:	9202      	str	r2, [sp, #8]
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6a3a      	ldr	r2, [r7, #32]
 8004a74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f001 f808 	bl	8005a8c <xTaskCreateStatic>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	e013      	b.n	8004aaa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d110      	bne.n	8004aaa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f107 0310 	add.w	r3, r7, #16
 8004a90:	9301      	str	r3, [sp, #4]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f001 f856 	bl	8005b4c <xTaskCreate>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d001      	beq.n	8004aaa <osThreadNew+0x11a>
            hTask = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004aaa:	693b      	ldr	r3, [r7, #16]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3728      	adds	r7, #40	@ 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004abc:	f3ef 8305 	mrs	r3, IPSR
 8004ac0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ac2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <osDelay+0x1c>
    stat = osErrorISR;
 8004ac8:	f06f 0305 	mvn.w	r3, #5
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e007      	b.n	8004ae0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f001 f994 	bl	8005e08 <vTaskDelay>
    }
  }

  return (stat);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b08a      	sub	sp, #40	@ 0x28
 8004aee:	af02      	add	r7, sp, #8
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004af6:	2300      	movs	r3, #0
 8004af8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004afa:	f3ef 8305 	mrs	r3, IPSR
 8004afe:	613b      	str	r3, [r7, #16]
  return(result);
 8004b00:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d15f      	bne.n	8004bc6 <osMessageQueueNew+0xdc>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d05c      	beq.n	8004bc6 <osMessageQueueNew+0xdc>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d059      	beq.n	8004bc6 <osMessageQueueNew+0xdc>
    mem = -1;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d029      	beq.n	8004b72 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d012      	beq.n	8004b4c <osMessageQueueNew+0x62>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	2b4f      	cmp	r3, #79	@ 0x4f
 8004b2c:	d90e      	bls.n	8004b4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	fb01 f303 	mul.w	r3, r1, r3
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d302      	bcc.n	8004b4c <osMessageQueueNew+0x62>
        mem = 1;
 8004b46:	2301      	movs	r3, #1
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	e014      	b.n	8004b76 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d110      	bne.n	8004b76 <osMessageQueueNew+0x8c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10c      	bne.n	8004b76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d108      	bne.n	8004b76 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d104      	bne.n	8004b76 <osMessageQueueNew+0x8c>
          mem = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
 8004b70:	e001      	b.n	8004b76 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d10b      	bne.n	8004b94 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2100      	movs	r1, #0
 8004b86:	9100      	str	r1, [sp, #0]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fa30 	bl	8004ff0 <xQueueGenericCreateStatic>
 8004b90:	61f8      	str	r0, [r7, #28]
 8004b92:	e008      	b.n	8004ba6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d105      	bne.n	8004ba6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	68b9      	ldr	r1, [r7, #8]
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 faa3 	bl	80050ea <xQueueGenericCreate>
 8004ba4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00c      	beq.n	8004bc6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <osMessageQueueNew+0xd0>
        name = attr->name;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e001      	b.n	8004bbe <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004bbe:	6979      	ldr	r1, [r7, #20]
 8004bc0:	69f8      	ldr	r0, [r7, #28]
 8004bc2:	f000 ff05 	bl	80059d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004bc6:	69fb      	ldr	r3, [r7, #28]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3720      	adds	r7, #32
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004be8:	f3ef 8305 	mrs	r3, IPSR
 8004bec:	617b      	str	r3, [r7, #20]
  return(result);
 8004bee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d028      	beq.n	8004c46 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d005      	beq.n	8004c06 <osMessageQueuePut+0x36>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <osMessageQueuePut+0x36>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004c06:	f06f 0303 	mvn.w	r3, #3
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	e038      	b.n	8004c80 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004c12:	f107 0210 	add.w	r2, r7, #16
 8004c16:	2300      	movs	r3, #0
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	69b8      	ldr	r0, [r7, #24]
 8004c1c:	f000 fbc6 	bl	80053ac <xQueueGenericSendFromISR>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d003      	beq.n	8004c2e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004c26:	f06f 0302 	mvn.w	r3, #2
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	e028      	b.n	8004c80 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d025      	beq.n	8004c80 <osMessageQueuePut+0xb0>
 8004c34:	4b15      	ldr	r3, [pc, #84]	@ (8004c8c <osMessageQueuePut+0xbc>)
 8004c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	e01c      	b.n	8004c80 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <osMessageQueuePut+0x82>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004c52:	f06f 0303 	mvn.w	r3, #3
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	e012      	b.n	8004c80 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	69b8      	ldr	r0, [r7, #24]
 8004c62:	f000 faa1 	bl	80051a8 <xQueueGenericSend>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d009      	beq.n	8004c80 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004c72:	f06f 0301 	mvn.w	r3, #1
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	e002      	b.n	8004c80 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004c7a:	f06f 0302 	mvn.w	r3, #2
 8004c7e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004c80:	69fb      	ldr	r3, [r7, #28]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	e000ed04 	.word	0xe000ed04

08004c90 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ca6:	f3ef 8305 	mrs	r3, IPSR
 8004caa:	617b      	str	r3, [r7, #20]
  return(result);
 8004cac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d028      	beq.n	8004d04 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <osMessageQueueGet+0x34>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <osMessageQueueGet+0x34>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004cc4:	f06f 0303 	mvn.w	r3, #3
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	e037      	b.n	8004d3c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004cd0:	f107 0310 	add.w	r3, r7, #16
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	69b8      	ldr	r0, [r7, #24]
 8004cda:	f000 fce7 	bl	80056ac <xQueueReceiveFromISR>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d003      	beq.n	8004cec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004ce4:	f06f 0302 	mvn.w	r3, #2
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	e027      	b.n	8004d3c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d024      	beq.n	8004d3c <osMessageQueueGet+0xac>
 8004cf2:	4b15      	ldr	r3, [pc, #84]	@ (8004d48 <osMessageQueueGet+0xb8>)
 8004cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	e01b      	b.n	8004d3c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <osMessageQueueGet+0x80>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d103      	bne.n	8004d18 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004d10:	f06f 0303 	mvn.w	r3, #3
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	e011      	b.n	8004d3c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	69b8      	ldr	r0, [r7, #24]
 8004d1e:	f000 fbe3 	bl	80054e8 <xQueueReceive>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d009      	beq.n	8004d3c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004d2e:	f06f 0301 	mvn.w	r3, #1
 8004d32:	61fb      	str	r3, [r7, #28]
 8004d34:	e002      	b.n	8004d3c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004d36:	f06f 0302 	mvn.w	r3, #2
 8004d3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004d3c:	69fb      	ldr	r3, [r7, #28]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a07      	ldr	r2, [pc, #28]	@ (8004d78 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	4a06      	ldr	r2, [pc, #24]	@ (8004d7c <vApplicationGetIdleTaskMemory+0x30>)
 8004d62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2280      	movs	r2, #128	@ 0x80
 8004d68:	601a      	str	r2, [r3, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	200406e8 	.word	0x200406e8
 8004d7c:	20040790 	.word	0x20040790

08004d80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	4a07      	ldr	r2, [pc, #28]	@ (8004dac <vApplicationGetTimerTaskMemory+0x2c>)
 8004d90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4a06      	ldr	r2, [pc, #24]	@ (8004db0 <vApplicationGetTimerTaskMemory+0x30>)
 8004d96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d9e:	601a      	str	r2, [r3, #0]
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	20040990 	.word	0x20040990
 8004db0:	20040a38 	.word	0x20040a38

08004db4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f103 0208 	add.w	r2, r3, #8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f103 0208 	add.w	r2, r3, #8
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f103 0208 	add.w	r2, r3, #8
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	601a      	str	r2, [r3, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e56:	b480      	push	{r7}
 8004e58:	b085      	sub	sp, #20
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6c:	d103      	bne.n	8004e76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	e00c      	b.n	8004e90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	e002      	b.n	8004e84 <vListInsert+0x2e>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d2f6      	bcs.n	8004e7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	601a      	str	r2, [r3, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6892      	ldr	r2, [r2, #8]
 8004ede:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6852      	ldr	r2, [r2, #4]
 8004ee8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d103      	bne.n	8004efc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	1e5a      	subs	r2, r3, #1
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004f48:	f002 f966 	bl	8007218 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f54:	68f9      	ldr	r1, [r7, #12]
 8004f56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	441a      	add	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	68f9      	ldr	r1, [r7, #12]
 8004f7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	441a      	add	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	22ff      	movs	r2, #255	@ 0xff
 8004f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	22ff      	movs	r2, #255	@ 0xff
 8004f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d114      	bne.n	8004fc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01a      	beq.n	8004fdc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3310      	adds	r3, #16
 8004faa:	4618      	mov	r0, r3
 8004fac:	f001 fa00 	bl	80063b0 <xTaskRemoveFromEventList>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d012      	beq.n	8004fdc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004fec <xQueueGenericReset+0xd0>)
 8004fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	e009      	b.n	8004fdc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3310      	adds	r3, #16
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fef1 	bl	8004db4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3324      	adds	r3, #36	@ 0x24
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff feec 	bl	8004db4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004fdc:	f002 f94e 	bl	800727c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004fe0:	2301      	movs	r3, #1
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	e000ed04 	.word	0xe000ed04

08004ff0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08e      	sub	sp, #56	@ 0x38
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10b      	bne.n	800501c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005016:	bf00      	nop
 8005018:	bf00      	nop
 800501a:	e7fd      	b.n	8005018 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10b      	bne.n	800503a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	e7fd      	b.n	8005036 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <xQueueGenericCreateStatic+0x56>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <xQueueGenericCreateStatic+0x5a>
 8005046:	2301      	movs	r3, #1
 8005048:	e000      	b.n	800504c <xQueueGenericCreateStatic+0x5c>
 800504a:	2300      	movs	r3, #0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10b      	bne.n	8005068 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	623b      	str	r3, [r7, #32]
}
 8005062:	bf00      	nop
 8005064:	bf00      	nop
 8005066:	e7fd      	b.n	8005064 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d102      	bne.n	8005074 <xQueueGenericCreateStatic+0x84>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <xQueueGenericCreateStatic+0x88>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <xQueueGenericCreateStatic+0x8a>
 8005078:	2300      	movs	r3, #0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10b      	bne.n	8005096 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	61fb      	str	r3, [r7, #28]
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	e7fd      	b.n	8005092 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005096:	2350      	movs	r3, #80	@ 0x50
 8005098:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b50      	cmp	r3, #80	@ 0x50
 800509e:	d00b      	beq.n	80050b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	61bb      	str	r3, [r7, #24]
}
 80050b2:	bf00      	nop
 80050b4:	bf00      	nop
 80050b6:	e7fd      	b.n	80050b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80050b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80050be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80050c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80050d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	4613      	mov	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	68b9      	ldr	r1, [r7, #8]
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f000 f840 	bl	8005160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3730      	adds	r7, #48	@ 0x30
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b08a      	sub	sp, #40	@ 0x28
 80050ee:	af02      	add	r7, sp, #8
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	4613      	mov	r3, r2
 80050f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10b      	bne.n	8005116 <xQueueGenericCreate+0x2c>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	613b      	str	r3, [r7, #16]
}
 8005110:	bf00      	nop
 8005112:	bf00      	nop
 8005114:	e7fd      	b.n	8005112 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	3350      	adds	r3, #80	@ 0x50
 8005124:	4618      	mov	r0, r3
 8005126:	f002 f999 	bl	800745c <pvPortMalloc>
 800512a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d011      	beq.n	8005156 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	3350      	adds	r3, #80	@ 0x50
 800513a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005144:	79fa      	ldrb	r2, [r7, #7]
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	4613      	mov	r3, r2
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 f805 	bl	8005160 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005156:	69bb      	ldr	r3, [r7, #24]
	}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d103      	bne.n	800517c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	e002      	b.n	8005182 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800518e:	2101      	movs	r1, #1
 8005190:	69b8      	ldr	r0, [r7, #24]
 8005192:	f7ff fec3 	bl	8004f1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	78fa      	ldrb	r2, [r7, #3]
 800519a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08e      	sub	sp, #56	@ 0x38
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051b6:	2300      	movs	r3, #0
 80051b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <xQueueGenericSend+0x34>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d103      	bne.n	80051ea <xQueueGenericSend+0x42>
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <xQueueGenericSend+0x46>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <xQueueGenericSend+0x48>
 80051ee:	2300      	movs	r3, #0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <xQueueGenericSend+0x64>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d103      	bne.n	800521a <xQueueGenericSend+0x72>
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005216:	2b01      	cmp	r3, #1
 8005218:	d101      	bne.n	800521e <xQueueGenericSend+0x76>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <xQueueGenericSend+0x78>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <xQueueGenericSend+0x94>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	623b      	str	r3, [r7, #32]
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	e7fd      	b.n	8005238 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800523c:	f001 fa7e 	bl	800673c <xTaskGetSchedulerState>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d102      	bne.n	800524c <xQueueGenericSend+0xa4>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <xQueueGenericSend+0xa8>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <xQueueGenericSend+0xaa>
 8005250:	2300      	movs	r3, #0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10b      	bne.n	800526e <xQueueGenericSend+0xc6>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	61fb      	str	r3, [r7, #28]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800526e:	f001 ffd3 	bl	8007218 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800527a:	429a      	cmp	r2, r3
 800527c:	d302      	bcc.n	8005284 <xQueueGenericSend+0xdc>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b02      	cmp	r3, #2
 8005282:	d129      	bne.n	80052d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800528a:	f000 fa91 	bl	80057b0 <prvCopyDataToQueue>
 800528e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	2b00      	cmp	r3, #0
 8005296:	d010      	beq.n	80052ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	3324      	adds	r3, #36	@ 0x24
 800529c:	4618      	mov	r0, r3
 800529e:	f001 f887 	bl	80063b0 <xTaskRemoveFromEventList>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d013      	beq.n	80052d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052a8:	4b3f      	ldr	r3, [pc, #252]	@ (80053a8 <xQueueGenericSend+0x200>)
 80052aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	e00a      	b.n	80052d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052c0:	4b39      	ldr	r3, [pc, #228]	@ (80053a8 <xQueueGenericSend+0x200>)
 80052c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c6:	601a      	str	r2, [r3, #0]
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052d0:	f001 ffd4 	bl	800727c <vPortExitCritical>
				return pdPASS;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e063      	b.n	80053a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d103      	bne.n	80052e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052de:	f001 ffcd 	bl	800727c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e05c      	b.n	80053a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052ec:	f107 0314 	add.w	r3, r7, #20
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 f8c1 	bl	8006478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052f6:	2301      	movs	r3, #1
 80052f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052fa:	f001 ffbf 	bl	800727c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052fe:	f000 fe29 	bl	8005f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005302:	f001 ff89 	bl	8007218 <vPortEnterCritical>
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005308:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800530c:	b25b      	sxtb	r3, r3
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d103      	bne.n	800531c <xQueueGenericSend+0x174>
 8005314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005322:	b25b      	sxtb	r3, r3
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d103      	bne.n	8005332 <xQueueGenericSend+0x18a>
 800532a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005332:	f001 ffa3 	bl	800727c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005336:	1d3a      	adds	r2, r7, #4
 8005338:	f107 0314 	add.w	r3, r7, #20
 800533c:	4611      	mov	r1, r2
 800533e:	4618      	mov	r0, r3
 8005340:	f001 f8b0 	bl	80064a4 <xTaskCheckForTimeOut>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d124      	bne.n	8005394 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800534a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800534c:	f000 fb28 	bl	80059a0 <prvIsQueueFull>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d018      	beq.n	8005388 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005358:	3310      	adds	r3, #16
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	4611      	mov	r1, r2
 800535e:	4618      	mov	r0, r3
 8005360:	f000 ffd4 	bl	800630c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005366:	f000 fab3 	bl	80058d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800536a:	f000 fe01 	bl	8005f70 <xTaskResumeAll>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	f47f af7c 	bne.w	800526e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005376:	4b0c      	ldr	r3, [pc, #48]	@ (80053a8 <xQueueGenericSend+0x200>)
 8005378:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	e772      	b.n	800526e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005388:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800538a:	f000 faa1 	bl	80058d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800538e:	f000 fdef 	bl	8005f70 <xTaskResumeAll>
 8005392:	e76c      	b.n	800526e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005394:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005396:	f000 fa9b 	bl	80058d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800539a:	f000 fde9 	bl	8005f70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800539e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3738      	adds	r7, #56	@ 0x38
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	e000ed04 	.word	0xe000ed04

080053ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b090      	sub	sp, #64	@ 0x40
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80053be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	e7fd      	b.n	80053d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <xQueueGenericSendFromISR+0x3e>
 80053e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <xQueueGenericSendFromISR+0x42>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <xQueueGenericSendFromISR+0x44>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005406:	bf00      	nop
 8005408:	bf00      	nop
 800540a:	e7fd      	b.n	8005408 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d103      	bne.n	800541a <xQueueGenericSendFromISR+0x6e>
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <xQueueGenericSendFromISR+0x72>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <xQueueGenericSendFromISR+0x74>
 800541e:	2300      	movs	r3, #0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005428:	f383 8811 	msr	BASEPRI, r3
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f3bf 8f4f 	dsb	sy
 8005434:	623b      	str	r3, [r7, #32]
}
 8005436:	bf00      	nop
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800543c:	f001 ffcc 	bl	80073d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005440:	f3ef 8211 	mrs	r2, BASEPRI
 8005444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	61fa      	str	r2, [r7, #28]
 8005456:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005458:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800545a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800545c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005464:	429a      	cmp	r2, r3
 8005466:	d302      	bcc.n	800546e <xQueueGenericSendFromISR+0xc2>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b02      	cmp	r3, #2
 800546c:	d12f      	bne.n	80054ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800546e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005470:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005474:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005484:	f000 f994 	bl	80057b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005488:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800548c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005490:	d112      	bne.n	80054b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800549a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549c:	3324      	adds	r3, #36	@ 0x24
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 ff86 	bl	80063b0 <xTaskRemoveFromEventList>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00e      	beq.n	80054c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	601a      	str	r2, [r3, #0]
 80054b6:	e007      	b.n	80054c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80054bc:	3301      	adds	r3, #1
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	b25a      	sxtb	r2, r3
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80054c8:	2301      	movs	r3, #1
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80054cc:	e001      	b.n	80054d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3740      	adds	r7, #64	@ 0x40
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08c      	sub	sp, #48	@ 0x30
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <xQueueReceive+0x32>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	623b      	str	r3, [r7, #32]
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d103      	bne.n	8005528 <xQueueReceive+0x40>
 8005520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <xQueueReceive+0x44>
 8005528:	2301      	movs	r3, #1
 800552a:	e000      	b.n	800552e <xQueueReceive+0x46>
 800552c:	2300      	movs	r3, #0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10b      	bne.n	800554a <xQueueReceive+0x62>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	61fb      	str	r3, [r7, #28]
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	e7fd      	b.n	8005546 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800554a:	f001 f8f7 	bl	800673c <xTaskGetSchedulerState>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <xQueueReceive+0x72>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <xQueueReceive+0x76>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <xQueueReceive+0x78>
 800555e:	2300      	movs	r3, #0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10b      	bne.n	800557c <xQueueReceive+0x94>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	61bb      	str	r3, [r7, #24]
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800557c:	f001 fe4c 	bl	8007218 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01f      	beq.n	80055cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005590:	f000 f978 	bl	8005884 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800559c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00f      	beq.n	80055c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	3310      	adds	r3, #16
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 ff01 	bl	80063b0 <xTaskRemoveFromEventList>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055b4:	4b3c      	ldr	r3, [pc, #240]	@ (80056a8 <xQueueReceive+0x1c0>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055c4:	f001 fe5a 	bl	800727c <vPortExitCritical>
				return pdPASS;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e069      	b.n	80056a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055d2:	f001 fe53 	bl	800727c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e062      	b.n	80056a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e0:	f107 0310 	add.w	r3, r7, #16
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 ff47 	bl	8006478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055ee:	f001 fe45 	bl	800727c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f2:	f000 fcaf 	bl	8005f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055f6:	f001 fe0f 	bl	8007218 <vPortEnterCritical>
 80055fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005600:	b25b      	sxtb	r3, r3
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	d103      	bne.n	8005610 <xQueueReceive+0x128>
 8005608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005612:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005616:	b25b      	sxtb	r3, r3
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d103      	bne.n	8005626 <xQueueReceive+0x13e>
 800561e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005626:	f001 fe29 	bl	800727c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800562a:	1d3a      	adds	r2, r7, #4
 800562c:	f107 0310 	add.w	r3, r7, #16
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f000 ff36 	bl	80064a4 <xTaskCheckForTimeOut>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d123      	bne.n	8005686 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800563e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005640:	f000 f998 	bl	8005974 <prvIsQueueEmpty>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d017      	beq.n	800567a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800564a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564c:	3324      	adds	r3, #36	@ 0x24
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4611      	mov	r1, r2
 8005652:	4618      	mov	r0, r3
 8005654:	f000 fe5a 	bl	800630c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005658:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800565a:	f000 f939 	bl	80058d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800565e:	f000 fc87 	bl	8005f70 <xTaskResumeAll>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d189      	bne.n	800557c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005668:	4b0f      	ldr	r3, [pc, #60]	@ (80056a8 <xQueueReceive+0x1c0>)
 800566a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	e780      	b.n	800557c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800567a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800567c:	f000 f928 	bl	80058d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005680:	f000 fc76 	bl	8005f70 <xTaskResumeAll>
 8005684:	e77a      	b.n	800557c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005688:	f000 f922 	bl	80058d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800568c:	f000 fc70 	bl	8005f70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005692:	f000 f96f 	bl	8005974 <prvIsQueueEmpty>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	f43f af6f 	beq.w	800557c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800569e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3730      	adds	r7, #48	@ 0x30
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08e      	sub	sp, #56	@ 0x38
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80056bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80056c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	623b      	str	r3, [r7, #32]
}
 80056d4:	bf00      	nop
 80056d6:	bf00      	nop
 80056d8:	e7fd      	b.n	80056d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d103      	bne.n	80056e8 <xQueueReceiveFromISR+0x3c>
 80056e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <xQueueReceiveFromISR+0x40>
 80056e8:	2301      	movs	r3, #1
 80056ea:	e000      	b.n	80056ee <xQueueReceiveFromISR+0x42>
 80056ec:	2300      	movs	r3, #0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10b      	bne.n	800570a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80056f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f6:	f383 8811 	msr	BASEPRI, r3
 80056fa:	f3bf 8f6f 	isb	sy
 80056fe:	f3bf 8f4f 	dsb	sy
 8005702:	61fb      	str	r3, [r7, #28]
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop
 8005708:	e7fd      	b.n	8005706 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800570a:	f001 fe65 	bl	80073d8 <vPortValidateInterruptPriority>
	__asm volatile
 800570e:	f3ef 8211 	mrs	r2, BASEPRI
 8005712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	61ba      	str	r2, [r7, #24]
 8005724:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005726:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005728:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800572a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005732:	2b00      	cmp	r3, #0
 8005734:	d02f      	beq.n	8005796 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800573c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005744:	f000 f89e 	bl	8005884 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574a:	1e5a      	subs	r2, r3, #1
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005750:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d112      	bne.n	8005780 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800575a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d016      	beq.n	8005790 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	3310      	adds	r3, #16
 8005766:	4618      	mov	r0, r3
 8005768:	f000 fe22 	bl	80063b0 <xTaskRemoveFromEventList>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00e      	beq.n	8005790 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00b      	beq.n	8005790 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	e007      	b.n	8005790 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005784:	3301      	adds	r3, #1
 8005786:	b2db      	uxtb	r3, r3
 8005788:	b25a      	sxtb	r2, r3
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005790:	2301      	movs	r3, #1
 8005792:	637b      	str	r3, [r7, #52]	@ 0x34
 8005794:	e001      	b.n	800579a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005796:	2300      	movs	r3, #0
 8005798:	637b      	str	r3, [r7, #52]	@ 0x34
 800579a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f383 8811 	msr	BASEPRI, r3
}
 80057a4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3738      	adds	r7, #56	@ 0x38
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057bc:	2300      	movs	r3, #0
 80057be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10d      	bne.n	80057ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d14d      	bne.n	8005872 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 ffcc 	bl	8006778 <xTaskPriorityDisinherit>
 80057e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	609a      	str	r2, [r3, #8]
 80057e8:	e043      	b.n	8005872 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d119      	bne.n	8005824 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6858      	ldr	r0, [r3, #4]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f8:	461a      	mov	r2, r3
 80057fa:	68b9      	ldr	r1, [r7, #8]
 80057fc:	f002 f8a0 	bl	8007940 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005808:	441a      	add	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685a      	ldr	r2, [r3, #4]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	429a      	cmp	r2, r3
 8005818:	d32b      	bcc.n	8005872 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	605a      	str	r2, [r3, #4]
 8005822:	e026      	b.n	8005872 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68d8      	ldr	r0, [r3, #12]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582c:	461a      	mov	r2, r3
 800582e:	68b9      	ldr	r1, [r7, #8]
 8005830:	f002 f886 	bl	8007940 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583c:	425b      	negs	r3, r3
 800583e:	441a      	add	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d207      	bcs.n	8005860 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005858:	425b      	negs	r3, r3
 800585a:	441a      	add	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d105      	bne.n	8005872 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	3b01      	subs	r3, #1
 8005870:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800587a:	697b      	ldr	r3, [r7, #20]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d018      	beq.n	80058c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800589e:	441a      	add	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d303      	bcc.n	80058b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68d9      	ldr	r1, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c0:	461a      	mov	r2, r3
 80058c2:	6838      	ldr	r0, [r7, #0]
 80058c4:	f002 f83c 	bl	8007940 <memcpy>
	}
}
 80058c8:	bf00      	nop
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80058d8:	f001 fc9e 	bl	8007218 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058e4:	e011      	b.n	800590a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d012      	beq.n	8005914 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3324      	adds	r3, #36	@ 0x24
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fd5c 	bl	80063b0 <xTaskRemoveFromEventList>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058fe:	f000 fe35 	bl	800656c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	3b01      	subs	r3, #1
 8005906:	b2db      	uxtb	r3, r3
 8005908:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800590a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	dce9      	bgt.n	80058e6 <prvUnlockQueue+0x16>
 8005912:	e000      	b.n	8005916 <prvUnlockQueue+0x46>
					break;
 8005914:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	22ff      	movs	r2, #255	@ 0xff
 800591a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800591e:	f001 fcad 	bl	800727c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005922:	f001 fc79 	bl	8007218 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800592c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800592e:	e011      	b.n	8005954 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d012      	beq.n	800595e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3310      	adds	r3, #16
 800593c:	4618      	mov	r0, r3
 800593e:	f000 fd37 	bl	80063b0 <xTaskRemoveFromEventList>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005948:	f000 fe10 	bl	800656c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	3b01      	subs	r3, #1
 8005950:	b2db      	uxtb	r3, r3
 8005952:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005954:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005958:	2b00      	cmp	r3, #0
 800595a:	dce9      	bgt.n	8005930 <prvUnlockQueue+0x60>
 800595c:	e000      	b.n	8005960 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800595e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	22ff      	movs	r2, #255	@ 0xff
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005968:	f001 fc88 	bl	800727c <vPortExitCritical>
}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800597c:	f001 fc4c 	bl	8007218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005984:	2b00      	cmp	r3, #0
 8005986:	d102      	bne.n	800598e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005988:	2301      	movs	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e001      	b.n	8005992 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005992:	f001 fc73 	bl	800727c <vPortExitCritical>

	return xReturn;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059a8:	f001 fc36 	bl	8007218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d102      	bne.n	80059be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059b8:	2301      	movs	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	e001      	b.n	80059c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059c2:	f001 fc5b 	bl	800727c <vPortExitCritical>

	return xReturn;
 80059c6:	68fb      	ldr	r3, [r7, #12]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3710      	adds	r7, #16
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e014      	b.n	8005a0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005a20 <vQueueAddToRegistry+0x50>)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10b      	bne.n	8005a04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059ec:	490c      	ldr	r1, [pc, #48]	@ (8005a20 <vQueueAddToRegistry+0x50>)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005a20 <vQueueAddToRegistry+0x50>)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	4413      	add	r3, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a02:	e006      	b.n	8005a12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	3301      	adds	r3, #1
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b07      	cmp	r3, #7
 8005a0e:	d9e7      	bls.n	80059e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a10:	bf00      	nop
 8005a12:	bf00      	nop
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20040e38 	.word	0x20040e38

08005a24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a34:	f001 fbf0 	bl	8007218 <vPortEnterCritical>
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a3e:	b25b      	sxtb	r3, r3
 8005a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a44:	d103      	bne.n	8005a4e <vQueueWaitForMessageRestricted+0x2a>
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a54:	b25b      	sxtb	r3, r3
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a5a:	d103      	bne.n	8005a64 <vQueueWaitForMessageRestricted+0x40>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a64:	f001 fc0a 	bl	800727c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	3324      	adds	r3, #36	@ 0x24
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fc6d 	bl	8006358 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a7e:	6978      	ldr	r0, [r7, #20]
 8005a80:	f7ff ff26 	bl	80058d0 <prvUnlockQueue>
	}
 8005a84:	bf00      	nop
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08e      	sub	sp, #56	@ 0x38
 8005a90:	af04      	add	r7, sp, #16
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10b      	bne.n	8005ab8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	623b      	str	r3, [r7, #32]
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	e7fd      	b.n	8005ab4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10b      	bne.n	8005ad6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	61fb      	str	r3, [r7, #28]
}
 8005ad0:	bf00      	nop
 8005ad2:	bf00      	nop
 8005ad4:	e7fd      	b.n	8005ad2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ad6:	23a8      	movs	r3, #168	@ 0xa8
 8005ad8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2ba8      	cmp	r3, #168	@ 0xa8
 8005ade:	d00b      	beq.n	8005af8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	61bb      	str	r3, [r7, #24]
}
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	e7fd      	b.n	8005af4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005af8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01e      	beq.n	8005b3e <xTaskCreateStatic+0xb2>
 8005b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d01b      	beq.n	8005b3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9303      	str	r3, [sp, #12]
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	9302      	str	r3, [sp, #8]
 8005b20:	f107 0314 	add.w	r3, r7, #20
 8005b24:	9301      	str	r3, [sp, #4]
 8005b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f851 	bl	8005bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b38:	f000 f8f6 	bl	8005d28 <prvAddNewTaskToReadyList>
 8005b3c:	e001      	b.n	8005b42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b42:	697b      	ldr	r3, [r7, #20]
	}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3728      	adds	r7, #40	@ 0x28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08c      	sub	sp, #48	@ 0x30
 8005b50:	af04      	add	r7, sp, #16
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 fc7b 	bl	800745c <pvPortMalloc>
 8005b66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00e      	beq.n	8005b8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b6e:	20a8      	movs	r0, #168	@ 0xa8
 8005b70:	f001 fc74 	bl	800745c <pvPortMalloc>
 8005b74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b82:	e005      	b.n	8005b90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b84:	6978      	ldr	r0, [r7, #20]
 8005b86:	f001 fd37 	bl	80075f8 <vPortFree>
 8005b8a:	e001      	b.n	8005b90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d017      	beq.n	8005bc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b9e:	88fa      	ldrh	r2, [r7, #6]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	9303      	str	r3, [sp, #12]
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	9302      	str	r3, [sp, #8]
 8005ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005baa:	9301      	str	r3, [sp, #4]
 8005bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f80f 	bl	8005bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bba:	69f8      	ldr	r0, [r7, #28]
 8005bbc:	f000 f8b4 	bl	8005d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	e002      	b.n	8005bcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bcc:	69bb      	ldr	r3, [r7, #24]
	}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	461a      	mov	r2, r3
 8005bf0:	21a5      	movs	r1, #165	@ 0xa5
 8005bf2:	f001 fe21 	bl	8007838 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c00:	3b01      	subs	r3, #1
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f023 0307 	bic.w	r3, r3, #7
 8005c0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	617b      	str	r3, [r7, #20]
}
 8005c2c:	bf00      	nop
 8005c2e:	bf00      	nop
 8005c30:	e7fd      	b.n	8005c2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d01f      	beq.n	8005c78 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	e012      	b.n	8005c64 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	7819      	ldrb	r1, [r3, #0]
 8005c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3334      	adds	r3, #52	@ 0x34
 8005c4e:	460a      	mov	r2, r1
 8005c50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4413      	add	r3, r2
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d006      	beq.n	8005c6c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3301      	adds	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	2b0f      	cmp	r3, #15
 8005c68:	d9e9      	bls.n	8005c3e <prvInitialiseNewTask+0x66>
 8005c6a:	e000      	b.n	8005c6e <prvInitialiseNewTask+0x96>
			{
				break;
 8005c6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c76:	e003      	b.n	8005c80 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c82:	2b37      	cmp	r3, #55	@ 0x37
 8005c84:	d901      	bls.n	8005c8a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c86:	2337      	movs	r3, #55	@ 0x37
 8005c88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c98:	2200      	movs	r2, #0
 8005c9a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff f8a7 	bl	8004df4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	3318      	adds	r3, #24
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff f8a2 	bl	8004df4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cc4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	3354      	adds	r3, #84	@ 0x54
 8005cda:	224c      	movs	r2, #76	@ 0x4c
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fdaa 	bl	8007838 <memset>
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce6:	4a0d      	ldr	r2, [pc, #52]	@ (8005d1c <prvInitialiseNewTask+0x144>)
 8005ce8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	4a0c      	ldr	r2, [pc, #48]	@ (8005d20 <prvInitialiseNewTask+0x148>)
 8005cee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8005d24 <prvInitialiseNewTask+0x14c>)
 8005cf4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cf6:	683a      	ldr	r2, [r7, #0]
 8005cf8:	68f9      	ldr	r1, [r7, #12]
 8005cfa:	69b8      	ldr	r0, [r7, #24]
 8005cfc:	f001 f95a 	bl	8006fb4 <pxPortInitialiseStack>
 8005d00:	4602      	mov	r2, r0
 8005d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d12:	bf00      	nop
 8005d14:	3720      	adds	r7, #32
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20042084 	.word	0x20042084
 8005d20:	200420ec 	.word	0x200420ec
 8005d24:	20042154 	.word	0x20042154

08005d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d30:	f001 fa72 	bl	8007218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d34:	4b2d      	ldr	r3, [pc, #180]	@ (8005dec <prvAddNewTaskToReadyList+0xc4>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dec <prvAddNewTaskToReadyList+0xc4>)
 8005d3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005df0 <prvAddNewTaskToReadyList+0xc8>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d46:	4a2a      	ldr	r2, [pc, #168]	@ (8005df0 <prvAddNewTaskToReadyList+0xc8>)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d4c:	4b27      	ldr	r3, [pc, #156]	@ (8005dec <prvAddNewTaskToReadyList+0xc4>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d110      	bne.n	8005d76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d54:	f000 fc2e 	bl	80065b4 <prvInitialiseTaskLists>
 8005d58:	e00d      	b.n	8005d76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d5a:	4b26      	ldr	r3, [pc, #152]	@ (8005df4 <prvAddNewTaskToReadyList+0xcc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d62:	4b23      	ldr	r3, [pc, #140]	@ (8005df0 <prvAddNewTaskToReadyList+0xc8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d802      	bhi.n	8005d76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d70:	4a1f      	ldr	r2, [pc, #124]	@ (8005df0 <prvAddNewTaskToReadyList+0xc8>)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d76:	4b20      	ldr	r3, [pc, #128]	@ (8005df8 <prvAddNewTaskToReadyList+0xd0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005df8 <prvAddNewTaskToReadyList+0xd0>)
 8005d7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d80:	4b1d      	ldr	r3, [pc, #116]	@ (8005df8 <prvAddNewTaskToReadyList+0xd0>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dfc <prvAddNewTaskToReadyList+0xd4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d903      	bls.n	8005d9c <prvAddNewTaskToReadyList+0x74>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	4a18      	ldr	r2, [pc, #96]	@ (8005dfc <prvAddNewTaskToReadyList+0xd4>)
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4a15      	ldr	r2, [pc, #84]	@ (8005e00 <prvAddNewTaskToReadyList+0xd8>)
 8005daa:	441a      	add	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4610      	mov	r0, r2
 8005db4:	f7ff f82b 	bl	8004e0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005db8:	f001 fa60 	bl	800727c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8005df4 <prvAddNewTaskToReadyList+0xcc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00e      	beq.n	8005de2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8005df0 <prvAddNewTaskToReadyList+0xc8>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d207      	bcs.n	8005de2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e04 <prvAddNewTaskToReadyList+0xdc>)
 8005dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005de2:	bf00      	nop
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	2004134c 	.word	0x2004134c
 8005df0:	20040e78 	.word	0x20040e78
 8005df4:	20041358 	.word	0x20041358
 8005df8:	20041368 	.word	0x20041368
 8005dfc:	20041354 	.word	0x20041354
 8005e00:	20040e7c 	.word	0x20040e7c
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d018      	beq.n	8005e4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e1a:	4b14      	ldr	r3, [pc, #80]	@ (8005e6c <vTaskDelay+0x64>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <vTaskDelay+0x32>
	__asm volatile
 8005e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e26:	f383 8811 	msr	BASEPRI, r3
 8005e2a:	f3bf 8f6f 	isb	sy
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	60bb      	str	r3, [r7, #8]
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	e7fd      	b.n	8005e36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e3a:	f000 f88b 	bl	8005f54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e3e:	2100      	movs	r1, #0
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fd09 	bl	8006858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e46:	f000 f893 	bl	8005f70 <xTaskResumeAll>
 8005e4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d107      	bne.n	8005e62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e52:	4b07      	ldr	r3, [pc, #28]	@ (8005e70 <vTaskDelay+0x68>)
 8005e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20041374 	.word	0x20041374
 8005e70:	e000ed04 	.word	0xe000ed04

08005e74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08a      	sub	sp, #40	@ 0x28
 8005e78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e82:	463a      	mov	r2, r7
 8005e84:	1d39      	adds	r1, r7, #4
 8005e86:	f107 0308 	add.w	r3, r7, #8
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe ff5e 	bl	8004d4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	9202      	str	r2, [sp, #8]
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	460a      	mov	r2, r1
 8005ea2:	4924      	ldr	r1, [pc, #144]	@ (8005f34 <vTaskStartScheduler+0xc0>)
 8005ea4:	4824      	ldr	r0, [pc, #144]	@ (8005f38 <vTaskStartScheduler+0xc4>)
 8005ea6:	f7ff fdf1 	bl	8005a8c <xTaskCreateStatic>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4a23      	ldr	r2, [pc, #140]	@ (8005f3c <vTaskStartScheduler+0xc8>)
 8005eae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005eb0:	4b22      	ldr	r3, [pc, #136]	@ (8005f3c <vTaskStartScheduler+0xc8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	e001      	b.n	8005ec2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d102      	bne.n	8005ece <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ec8:	f000 fd1a 	bl	8006900 <xTimerCreateTimerTask>
 8005ecc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d11b      	bne.n	8005f0c <vTaskStartScheduler+0x98>
	__asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	613b      	str	r3, [r7, #16]
}
 8005ee6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ee8:	4b15      	ldr	r3, [pc, #84]	@ (8005f40 <vTaskStartScheduler+0xcc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3354      	adds	r3, #84	@ 0x54
 8005eee:	4a15      	ldr	r2, [pc, #84]	@ (8005f44 <vTaskStartScheduler+0xd0>)
 8005ef0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ef2:	4b15      	ldr	r3, [pc, #84]	@ (8005f48 <vTaskStartScheduler+0xd4>)
 8005ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005efa:	4b14      	ldr	r3, [pc, #80]	@ (8005f4c <vTaskStartScheduler+0xd8>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f00:	4b13      	ldr	r3, [pc, #76]	@ (8005f50 <vTaskStartScheduler+0xdc>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f06:	f001 f8e3 	bl	80070d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f0a:	e00f      	b.n	8005f2c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f12:	d10b      	bne.n	8005f2c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	60fb      	str	r3, [r7, #12]
}
 8005f26:	bf00      	nop
 8005f28:	bf00      	nop
 8005f2a:	e7fd      	b.n	8005f28 <vTaskStartScheduler+0xb4>
}
 8005f2c:	bf00      	nop
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	08007a3c 	.word	0x08007a3c
 8005f38:	08006585 	.word	0x08006585
 8005f3c:	20041370 	.word	0x20041370
 8005f40:	20040e78 	.word	0x20040e78
 8005f44:	20040010 	.word	0x20040010
 8005f48:	2004136c 	.word	0x2004136c
 8005f4c:	20041358 	.word	0x20041358
 8005f50:	20041350 	.word	0x20041350

08005f54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f58:	4b04      	ldr	r3, [pc, #16]	@ (8005f6c <vTaskSuspendAll+0x18>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	4a03      	ldr	r2, [pc, #12]	@ (8005f6c <vTaskSuspendAll+0x18>)
 8005f60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f62:	bf00      	nop
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	20041374 	.word	0x20041374

08005f70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f7e:	4b42      	ldr	r3, [pc, #264]	@ (8006088 <xTaskResumeAll+0x118>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10b      	bne.n	8005f9e <xTaskResumeAll+0x2e>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	603b      	str	r3, [r7, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f9e:	f001 f93b 	bl	8007218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fa2:	4b39      	ldr	r3, [pc, #228]	@ (8006088 <xTaskResumeAll+0x118>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	4a37      	ldr	r2, [pc, #220]	@ (8006088 <xTaskResumeAll+0x118>)
 8005faa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fac:	4b36      	ldr	r3, [pc, #216]	@ (8006088 <xTaskResumeAll+0x118>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d162      	bne.n	800607a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fb4:	4b35      	ldr	r3, [pc, #212]	@ (800608c <xTaskResumeAll+0x11c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d05e      	beq.n	800607a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fbc:	e02f      	b.n	800601e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fbe:	4b34      	ldr	r3, [pc, #208]	@ (8006090 <xTaskResumeAll+0x120>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3318      	adds	r3, #24
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe ff7c 	bl	8004ec8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fe ff77 	bl	8004ec8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fde:	4b2d      	ldr	r3, [pc, #180]	@ (8006094 <xTaskResumeAll+0x124>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d903      	bls.n	8005fee <xTaskResumeAll+0x7e>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fea:	4a2a      	ldr	r2, [pc, #168]	@ (8006094 <xTaskResumeAll+0x124>)
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4a27      	ldr	r2, [pc, #156]	@ (8006098 <xTaskResumeAll+0x128>)
 8005ffc:	441a      	add	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3304      	adds	r3, #4
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f7fe ff02 	bl	8004e0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600e:	4b23      	ldr	r3, [pc, #140]	@ (800609c <xTaskResumeAll+0x12c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006014:	429a      	cmp	r2, r3
 8006016:	d302      	bcc.n	800601e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006018:	4b21      	ldr	r3, [pc, #132]	@ (80060a0 <xTaskResumeAll+0x130>)
 800601a:	2201      	movs	r2, #1
 800601c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800601e:	4b1c      	ldr	r3, [pc, #112]	@ (8006090 <xTaskResumeAll+0x120>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1cb      	bne.n	8005fbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800602c:	f000 fb66 	bl	80066fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006030:	4b1c      	ldr	r3, [pc, #112]	@ (80060a4 <xTaskResumeAll+0x134>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d010      	beq.n	800605e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800603c:	f000 f846 	bl	80060cc <xTaskIncrementTick>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006046:	4b16      	ldr	r3, [pc, #88]	@ (80060a0 <xTaskResumeAll+0x130>)
 8006048:	2201      	movs	r2, #1
 800604a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	3b01      	subs	r3, #1
 8006050:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1f1      	bne.n	800603c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006058:	4b12      	ldr	r3, [pc, #72]	@ (80060a4 <xTaskResumeAll+0x134>)
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800605e:	4b10      	ldr	r3, [pc, #64]	@ (80060a0 <xTaskResumeAll+0x130>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006066:	2301      	movs	r3, #1
 8006068:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800606a:	4b0f      	ldr	r3, [pc, #60]	@ (80060a8 <xTaskResumeAll+0x138>)
 800606c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800607a:	f001 f8ff 	bl	800727c <vPortExitCritical>

	return xAlreadyYielded;
 800607e:	68bb      	ldr	r3, [r7, #8]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	20041374 	.word	0x20041374
 800608c:	2004134c 	.word	0x2004134c
 8006090:	2004130c 	.word	0x2004130c
 8006094:	20041354 	.word	0x20041354
 8006098:	20040e7c 	.word	0x20040e7c
 800609c:	20040e78 	.word	0x20040e78
 80060a0:	20041360 	.word	0x20041360
 80060a4:	2004135c 	.word	0x2004135c
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060b2:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <xTaskGetTickCount+0x1c>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060b8:	687b      	ldr	r3, [r7, #4]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	20041350 	.word	0x20041350

080060cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d6:	4b4f      	ldr	r3, [pc, #316]	@ (8006214 <xTaskIncrementTick+0x148>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f040 8090 	bne.w	8006200 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060e0:	4b4d      	ldr	r3, [pc, #308]	@ (8006218 <xTaskIncrementTick+0x14c>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3301      	adds	r3, #1
 80060e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060e8:	4a4b      	ldr	r2, [pc, #300]	@ (8006218 <xTaskIncrementTick+0x14c>)
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d121      	bne.n	8006138 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80060f4:	4b49      	ldr	r3, [pc, #292]	@ (800621c <xTaskIncrementTick+0x150>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <xTaskIncrementTick+0x4a>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	603b      	str	r3, [r7, #0]
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	e7fd      	b.n	8006112 <xTaskIncrementTick+0x46>
 8006116:	4b41      	ldr	r3, [pc, #260]	@ (800621c <xTaskIncrementTick+0x150>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	4b40      	ldr	r3, [pc, #256]	@ (8006220 <xTaskIncrementTick+0x154>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a3e      	ldr	r2, [pc, #248]	@ (800621c <xTaskIncrementTick+0x150>)
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	4a3e      	ldr	r2, [pc, #248]	@ (8006220 <xTaskIncrementTick+0x154>)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	4b3e      	ldr	r3, [pc, #248]	@ (8006224 <xTaskIncrementTick+0x158>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3301      	adds	r3, #1
 8006130:	4a3c      	ldr	r2, [pc, #240]	@ (8006224 <xTaskIncrementTick+0x158>)
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	f000 fae2 	bl	80066fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006138:	4b3b      	ldr	r3, [pc, #236]	@ (8006228 <xTaskIncrementTick+0x15c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	429a      	cmp	r2, r3
 8006140:	d349      	bcc.n	80061d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006142:	4b36      	ldr	r3, [pc, #216]	@ (800621c <xTaskIncrementTick+0x150>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d104      	bne.n	8006156 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800614c:	4b36      	ldr	r3, [pc, #216]	@ (8006228 <xTaskIncrementTick+0x15c>)
 800614e:	f04f 32ff 	mov.w	r2, #4294967295
 8006152:	601a      	str	r2, [r3, #0]
					break;
 8006154:	e03f      	b.n	80061d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006156:	4b31      	ldr	r3, [pc, #196]	@ (800621c <xTaskIncrementTick+0x150>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	429a      	cmp	r2, r3
 800616c:	d203      	bcs.n	8006176 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800616e:	4a2e      	ldr	r2, [pc, #184]	@ (8006228 <xTaskIncrementTick+0x15c>)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006174:	e02f      	b.n	80061d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	3304      	adds	r3, #4
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe fea4 	bl	8004ec8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	3318      	adds	r3, #24
 800618c:	4618      	mov	r0, r3
 800618e:	f7fe fe9b 	bl	8004ec8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006196:	4b25      	ldr	r3, [pc, #148]	@ (800622c <xTaskIncrementTick+0x160>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d903      	bls.n	80061a6 <xTaskIncrementTick+0xda>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a2:	4a22      	ldr	r2, [pc, #136]	@ (800622c <xTaskIncrementTick+0x160>)
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006230 <xTaskIncrementTick+0x164>)
 80061b4:	441a      	add	r2, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	3304      	adds	r3, #4
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f7fe fe26 	bl	8004e0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006234 <xTaskIncrementTick+0x168>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d3b8      	bcc.n	8006142 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061d4:	e7b5      	b.n	8006142 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061d6:	4b17      	ldr	r3, [pc, #92]	@ (8006234 <xTaskIncrementTick+0x168>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061dc:	4914      	ldr	r1, [pc, #80]	@ (8006230 <xTaskIncrementTick+0x164>)
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d901      	bls.n	80061f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80061ee:	2301      	movs	r3, #1
 80061f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061f2:	4b11      	ldr	r3, [pc, #68]	@ (8006238 <xTaskIncrementTick+0x16c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d007      	beq.n	800620a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80061fa:	2301      	movs	r3, #1
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	e004      	b.n	800620a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006200:	4b0e      	ldr	r3, [pc, #56]	@ (800623c <xTaskIncrementTick+0x170>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3301      	adds	r3, #1
 8006206:	4a0d      	ldr	r2, [pc, #52]	@ (800623c <xTaskIncrementTick+0x170>)
 8006208:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800620a:	697b      	ldr	r3, [r7, #20]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20041374 	.word	0x20041374
 8006218:	20041350 	.word	0x20041350
 800621c:	20041304 	.word	0x20041304
 8006220:	20041308 	.word	0x20041308
 8006224:	20041364 	.word	0x20041364
 8006228:	2004136c 	.word	0x2004136c
 800622c:	20041354 	.word	0x20041354
 8006230:	20040e7c 	.word	0x20040e7c
 8006234:	20040e78 	.word	0x20040e78
 8006238:	20041360 	.word	0x20041360
 800623c:	2004135c 	.word	0x2004135c

08006240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006246:	4b2b      	ldr	r3, [pc, #172]	@ (80062f4 <vTaskSwitchContext+0xb4>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d003      	beq.n	8006256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800624e:	4b2a      	ldr	r3, [pc, #168]	@ (80062f8 <vTaskSwitchContext+0xb8>)
 8006250:	2201      	movs	r2, #1
 8006252:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006254:	e047      	b.n	80062e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006256:	4b28      	ldr	r3, [pc, #160]	@ (80062f8 <vTaskSwitchContext+0xb8>)
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800625c:	4b27      	ldr	r3, [pc, #156]	@ (80062fc <vTaskSwitchContext+0xbc>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e011      	b.n	8006288 <vTaskSwitchContext+0x48>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10b      	bne.n	8006282 <vTaskSwitchContext+0x42>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	607b      	str	r3, [r7, #4]
}
 800627c:	bf00      	nop
 800627e:	bf00      	nop
 8006280:	e7fd      	b.n	800627e <vTaskSwitchContext+0x3e>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3b01      	subs	r3, #1
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	491d      	ldr	r1, [pc, #116]	@ (8006300 <vTaskSwitchContext+0xc0>)
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0e3      	beq.n	8006264 <vTaskSwitchContext+0x24>
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4613      	mov	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4a16      	ldr	r2, [pc, #88]	@ (8006300 <vTaskSwitchContext+0xc0>)
 80062a8:	4413      	add	r3, r2
 80062aa:	60bb      	str	r3, [r7, #8]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	605a      	str	r2, [r3, #4]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	3308      	adds	r3, #8
 80062be:	429a      	cmp	r2, r3
 80062c0:	d104      	bne.n	80062cc <vTaskSwitchContext+0x8c>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	605a      	str	r2, [r3, #4]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006304 <vTaskSwitchContext+0xc4>)
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	4a09      	ldr	r2, [pc, #36]	@ (80062fc <vTaskSwitchContext+0xbc>)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062dc:	4b09      	ldr	r3, [pc, #36]	@ (8006304 <vTaskSwitchContext+0xc4>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3354      	adds	r3, #84	@ 0x54
 80062e2:	4a09      	ldr	r2, [pc, #36]	@ (8006308 <vTaskSwitchContext+0xc8>)
 80062e4:	6013      	str	r3, [r2, #0]
}
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20041374 	.word	0x20041374
 80062f8:	20041360 	.word	0x20041360
 80062fc:	20041354 	.word	0x20041354
 8006300:	20040e7c 	.word	0x20040e7c
 8006304:	20040e78 	.word	0x20040e78
 8006308:	20040010 	.word	0x20040010

0800630c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10b      	bne.n	8006334 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	60fb      	str	r3, [r7, #12]
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	e7fd      	b.n	8006330 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006334:	4b07      	ldr	r3, [pc, #28]	@ (8006354 <vTaskPlaceOnEventList+0x48>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3318      	adds	r3, #24
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7fe fd8a 	bl	8004e56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006342:	2101      	movs	r1, #1
 8006344:	6838      	ldr	r0, [r7, #0]
 8006346:	f000 fa87 	bl	8006858 <prvAddCurrentTaskToDelayedList>
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20040e78 	.word	0x20040e78

08006358 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10b      	bne.n	8006382 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	617b      	str	r3, [r7, #20]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006382:	4b0a      	ldr	r3, [pc, #40]	@ (80063ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3318      	adds	r3, #24
 8006388:	4619      	mov	r1, r3
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f7fe fd3f 	bl	8004e0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006396:	f04f 33ff 	mov.w	r3, #4294967295
 800639a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	68b8      	ldr	r0, [r7, #8]
 80063a0:	f000 fa5a 	bl	8006858 <prvAddCurrentTaskToDelayedList>
	}
 80063a4:	bf00      	nop
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	20040e78 	.word	0x20040e78

080063b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	60fb      	str	r3, [r7, #12]
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	e7fd      	b.n	80063da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3318      	adds	r3, #24
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fd70 	bl	8004ec8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006460 <xTaskRemoveFromEventList+0xb0>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d11d      	bne.n	800642c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	3304      	adds	r3, #4
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7fe fd67 	bl	8004ec8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063fe:	4b19      	ldr	r3, [pc, #100]	@ (8006464 <xTaskRemoveFromEventList+0xb4>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d903      	bls.n	800640e <xTaskRemoveFromEventList+0x5e>
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640a:	4a16      	ldr	r2, [pc, #88]	@ (8006464 <xTaskRemoveFromEventList+0xb4>)
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	4a13      	ldr	r2, [pc, #76]	@ (8006468 <xTaskRemoveFromEventList+0xb8>)
 800641c:	441a      	add	r2, r3
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	3304      	adds	r3, #4
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f7fe fcf2 	bl	8004e0e <vListInsertEnd>
 800642a:	e005      	b.n	8006438 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	3318      	adds	r3, #24
 8006430:	4619      	mov	r1, r3
 8006432:	480e      	ldr	r0, [pc, #56]	@ (800646c <xTaskRemoveFromEventList+0xbc>)
 8006434:	f7fe fceb 	bl	8004e0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800643c:	4b0c      	ldr	r3, [pc, #48]	@ (8006470 <xTaskRemoveFromEventList+0xc0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006442:	429a      	cmp	r2, r3
 8006444:	d905      	bls.n	8006452 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006446:	2301      	movs	r3, #1
 8006448:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800644a:	4b0a      	ldr	r3, [pc, #40]	@ (8006474 <xTaskRemoveFromEventList+0xc4>)
 800644c:	2201      	movs	r2, #1
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	e001      	b.n	8006456 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006452:	2300      	movs	r3, #0
 8006454:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006456:	697b      	ldr	r3, [r7, #20]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20041374 	.word	0x20041374
 8006464:	20041354 	.word	0x20041354
 8006468:	20040e7c 	.word	0x20040e7c
 800646c:	2004130c 	.word	0x2004130c
 8006470:	20040e78 	.word	0x20040e78
 8006474:	20041360 	.word	0x20041360

08006478 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006480:	4b06      	ldr	r3, [pc, #24]	@ (800649c <vTaskInternalSetTimeOutState+0x24>)
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006488:	4b05      	ldr	r3, [pc, #20]	@ (80064a0 <vTaskInternalSetTimeOutState+0x28>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	605a      	str	r2, [r3, #4]
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	20041364 	.word	0x20041364
 80064a0:	20041350 	.word	0x20041350

080064a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10b      	bne.n	80064cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	613b      	str	r3, [r7, #16]
}
 80064c6:	bf00      	nop
 80064c8:	bf00      	nop
 80064ca:	e7fd      	b.n	80064c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	60fb      	str	r3, [r7, #12]
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	e7fd      	b.n	80064e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80064ea:	f000 fe95 	bl	8007218 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064ee:	4b1d      	ldr	r3, [pc, #116]	@ (8006564 <xTaskCheckForTimeOut+0xc0>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d102      	bne.n	800650e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006508:	2300      	movs	r3, #0
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	e023      	b.n	8006556 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b15      	ldr	r3, [pc, #84]	@ (8006568 <xTaskCheckForTimeOut+0xc4>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d007      	beq.n	800652a <xTaskCheckForTimeOut+0x86>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	429a      	cmp	r2, r3
 8006522:	d302      	bcc.n	800652a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006524:	2301      	movs	r3, #1
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e015      	b.n	8006556 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	429a      	cmp	r2, r3
 8006532:	d20b      	bcs.n	800654c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff ff99 	bl	8006478 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006546:	2300      	movs	r3, #0
 8006548:	61fb      	str	r3, [r7, #28]
 800654a:	e004      	b.n	8006556 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006552:	2301      	movs	r3, #1
 8006554:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006556:	f000 fe91 	bl	800727c <vPortExitCritical>

	return xReturn;
 800655a:	69fb      	ldr	r3, [r7, #28]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3720      	adds	r7, #32
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20041350 	.word	0x20041350
 8006568:	20041364 	.word	0x20041364

0800656c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006570:	4b03      	ldr	r3, [pc, #12]	@ (8006580 <vTaskMissedYield+0x14>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]
}
 8006576:	bf00      	nop
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	20041360 	.word	0x20041360

08006584 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800658c:	f000 f852 	bl	8006634 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006590:	4b06      	ldr	r3, [pc, #24]	@ (80065ac <prvIdleTask+0x28>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d9f9      	bls.n	800658c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006598:	4b05      	ldr	r3, [pc, #20]	@ (80065b0 <prvIdleTask+0x2c>)
 800659a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065a8:	e7f0      	b.n	800658c <prvIdleTask+0x8>
 80065aa:	bf00      	nop
 80065ac:	20040e7c 	.word	0x20040e7c
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065ba:	2300      	movs	r3, #0
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	e00c      	b.n	80065da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4a12      	ldr	r2, [pc, #72]	@ (8006614 <prvInitialiseTaskLists+0x60>)
 80065cc:	4413      	add	r3, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fbf0 	bl	8004db4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3301      	adds	r3, #1
 80065d8:	607b      	str	r3, [r7, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b37      	cmp	r3, #55	@ 0x37
 80065de:	d9ef      	bls.n	80065c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065e0:	480d      	ldr	r0, [pc, #52]	@ (8006618 <prvInitialiseTaskLists+0x64>)
 80065e2:	f7fe fbe7 	bl	8004db4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065e6:	480d      	ldr	r0, [pc, #52]	@ (800661c <prvInitialiseTaskLists+0x68>)
 80065e8:	f7fe fbe4 	bl	8004db4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065ec:	480c      	ldr	r0, [pc, #48]	@ (8006620 <prvInitialiseTaskLists+0x6c>)
 80065ee:	f7fe fbe1 	bl	8004db4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065f2:	480c      	ldr	r0, [pc, #48]	@ (8006624 <prvInitialiseTaskLists+0x70>)
 80065f4:	f7fe fbde 	bl	8004db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065f8:	480b      	ldr	r0, [pc, #44]	@ (8006628 <prvInitialiseTaskLists+0x74>)
 80065fa:	f7fe fbdb 	bl	8004db4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065fe:	4b0b      	ldr	r3, [pc, #44]	@ (800662c <prvInitialiseTaskLists+0x78>)
 8006600:	4a05      	ldr	r2, [pc, #20]	@ (8006618 <prvInitialiseTaskLists+0x64>)
 8006602:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006604:	4b0a      	ldr	r3, [pc, #40]	@ (8006630 <prvInitialiseTaskLists+0x7c>)
 8006606:	4a05      	ldr	r2, [pc, #20]	@ (800661c <prvInitialiseTaskLists+0x68>)
 8006608:	601a      	str	r2, [r3, #0]
}
 800660a:	bf00      	nop
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20040e7c 	.word	0x20040e7c
 8006618:	200412dc 	.word	0x200412dc
 800661c:	200412f0 	.word	0x200412f0
 8006620:	2004130c 	.word	0x2004130c
 8006624:	20041320 	.word	0x20041320
 8006628:	20041338 	.word	0x20041338
 800662c:	20041304 	.word	0x20041304
 8006630:	20041308 	.word	0x20041308

08006634 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800663a:	e019      	b.n	8006670 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800663c:	f000 fdec 	bl	8007218 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006640:	4b10      	ldr	r3, [pc, #64]	@ (8006684 <prvCheckTasksWaitingTermination+0x50>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3304      	adds	r3, #4
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe fc3b 	bl	8004ec8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006652:	4b0d      	ldr	r3, [pc, #52]	@ (8006688 <prvCheckTasksWaitingTermination+0x54>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3b01      	subs	r3, #1
 8006658:	4a0b      	ldr	r2, [pc, #44]	@ (8006688 <prvCheckTasksWaitingTermination+0x54>)
 800665a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800665c:	4b0b      	ldr	r3, [pc, #44]	@ (800668c <prvCheckTasksWaitingTermination+0x58>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3b01      	subs	r3, #1
 8006662:	4a0a      	ldr	r2, [pc, #40]	@ (800668c <prvCheckTasksWaitingTermination+0x58>)
 8006664:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006666:	f000 fe09 	bl	800727c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f810 	bl	8006690 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006670:	4b06      	ldr	r3, [pc, #24]	@ (800668c <prvCheckTasksWaitingTermination+0x58>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e1      	bne.n	800663c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20041320 	.word	0x20041320
 8006688:	2004134c 	.word	0x2004134c
 800668c:	20041334 	.word	0x20041334

08006690 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3354      	adds	r3, #84	@ 0x54
 800669c:	4618      	mov	r0, r3
 800669e:	f001 f8d3 	bl	8007848 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d108      	bne.n	80066be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 ffa1 	bl	80075f8 <vPortFree>
				vPortFree( pxTCB );
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 ff9e 	bl	80075f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066bc:	e019      	b.n	80066f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d103      	bne.n	80066d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 ff95 	bl	80075f8 <vPortFree>
	}
 80066ce:	e010      	b.n	80066f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d00b      	beq.n	80066f2 <prvDeleteTCB+0x62>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	60fb      	str	r3, [r7, #12]
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <prvDeleteTCB+0x5e>
	}
 80066f2:	bf00      	nop
 80066f4:	3710      	adds	r7, #16
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006702:	4b0c      	ldr	r3, [pc, #48]	@ (8006734 <prvResetNextTaskUnblockTime+0x38>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800670c:	4b0a      	ldr	r3, [pc, #40]	@ (8006738 <prvResetNextTaskUnblockTime+0x3c>)
 800670e:	f04f 32ff 	mov.w	r2, #4294967295
 8006712:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006714:	e008      	b.n	8006728 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006716:	4b07      	ldr	r3, [pc, #28]	@ (8006734 <prvResetNextTaskUnblockTime+0x38>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	4a04      	ldr	r2, [pc, #16]	@ (8006738 <prvResetNextTaskUnblockTime+0x3c>)
 8006726:	6013      	str	r3, [r2, #0]
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	20041304 	.word	0x20041304
 8006738:	2004136c 	.word	0x2004136c

0800673c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006742:	4b0b      	ldr	r3, [pc, #44]	@ (8006770 <xTaskGetSchedulerState+0x34>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800674a:	2301      	movs	r3, #1
 800674c:	607b      	str	r3, [r7, #4]
 800674e:	e008      	b.n	8006762 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006750:	4b08      	ldr	r3, [pc, #32]	@ (8006774 <xTaskGetSchedulerState+0x38>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006758:	2302      	movs	r3, #2
 800675a:	607b      	str	r3, [r7, #4]
 800675c:	e001      	b.n	8006762 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800675e:	2300      	movs	r3, #0
 8006760:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006762:	687b      	ldr	r3, [r7, #4]
	}
 8006764:	4618      	mov	r0, r3
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	20041358 	.word	0x20041358
 8006774:	20041374 	.word	0x20041374

08006778 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006784:	2300      	movs	r3, #0
 8006786:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d058      	beq.n	8006840 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800678e:	4b2f      	ldr	r3, [pc, #188]	@ (800684c <xTaskPriorityDisinherit+0xd4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	d00b      	beq.n	80067b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	60fb      	str	r3, [r7, #12]
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	e7fd      	b.n	80067ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10b      	bne.n	80067d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60bb      	str	r3, [r7, #8]
}
 80067ca:	bf00      	nop
 80067cc:	bf00      	nop
 80067ce:	e7fd      	b.n	80067cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067d4:	1e5a      	subs	r2, r3, #1
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d02c      	beq.n	8006840 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d128      	bne.n	8006840 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	3304      	adds	r3, #4
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fb68 	bl	8004ec8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006804:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006810:	4b0f      	ldr	r3, [pc, #60]	@ (8006850 <xTaskPriorityDisinherit+0xd8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	429a      	cmp	r2, r3
 8006816:	d903      	bls.n	8006820 <xTaskPriorityDisinherit+0xa8>
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681c:	4a0c      	ldr	r2, [pc, #48]	@ (8006850 <xTaskPriorityDisinherit+0xd8>)
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4a09      	ldr	r2, [pc, #36]	@ (8006854 <xTaskPriorityDisinherit+0xdc>)
 800682e:	441a      	add	r2, r3
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	3304      	adds	r3, #4
 8006834:	4619      	mov	r1, r3
 8006836:	4610      	mov	r0, r2
 8006838:	f7fe fae9 	bl	8004e0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800683c:	2301      	movs	r3, #1
 800683e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006840:	697b      	ldr	r3, [r7, #20]
	}
 8006842:	4618      	mov	r0, r3
 8006844:	3718      	adds	r7, #24
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	20040e78 	.word	0x20040e78
 8006850:	20041354 	.word	0x20041354
 8006854:	20040e7c 	.word	0x20040e7c

08006858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006862:	4b21      	ldr	r3, [pc, #132]	@ (80068e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006868:	4b20      	ldr	r3, [pc, #128]	@ (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3304      	adds	r3, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe fb2a 	bl	8004ec8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687a:	d10a      	bne.n	8006892 <prvAddCurrentTaskToDelayedList+0x3a>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006882:	4b1a      	ldr	r3, [pc, #104]	@ (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3304      	adds	r3, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4819      	ldr	r0, [pc, #100]	@ (80068f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800688c:	f7fe fabf 	bl	8004e0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006890:	e026      	b.n	80068e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4413      	add	r3, r2
 8006898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800689a:	4b14      	ldr	r3, [pc, #80]	@ (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d209      	bcs.n	80068be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068aa:	4b12      	ldr	r3, [pc, #72]	@ (80068f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	4b0f      	ldr	r3, [pc, #60]	@ (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	4610      	mov	r0, r2
 80068b8:	f7fe facd 	bl	8004e56 <vListInsert>
}
 80068bc:	e010      	b.n	80068e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068be:	4b0e      	ldr	r3, [pc, #56]	@ (80068f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b0a      	ldr	r3, [pc, #40]	@ (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f7fe fac3 	bl	8004e56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068d0:	4b0a      	ldr	r3, [pc, #40]	@ (80068fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d202      	bcs.n	80068e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068da:	4a08      	ldr	r2, [pc, #32]	@ (80068fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6013      	str	r3, [r2, #0]
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	20041350 	.word	0x20041350
 80068ec:	20040e78 	.word	0x20040e78
 80068f0:	20041338 	.word	0x20041338
 80068f4:	20041308 	.word	0x20041308
 80068f8:	20041304 	.word	0x20041304
 80068fc:	2004136c 	.word	0x2004136c

08006900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	@ 0x28
 8006904:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006906:	2300      	movs	r3, #0
 8006908:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800690a:	f000 fb13 	bl	8006f34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800690e:	4b1d      	ldr	r3, [pc, #116]	@ (8006984 <xTimerCreateTimerTask+0x84>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d021      	beq.n	800695a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800691a:	2300      	movs	r3, #0
 800691c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800691e:	1d3a      	adds	r2, r7, #4
 8006920:	f107 0108 	add.w	r1, r7, #8
 8006924:	f107 030c 	add.w	r3, r7, #12
 8006928:	4618      	mov	r0, r3
 800692a:	f7fe fa29 	bl	8004d80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	9202      	str	r2, [sp, #8]
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	2302      	movs	r3, #2
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	2300      	movs	r3, #0
 800693e:	460a      	mov	r2, r1
 8006940:	4911      	ldr	r1, [pc, #68]	@ (8006988 <xTimerCreateTimerTask+0x88>)
 8006942:	4812      	ldr	r0, [pc, #72]	@ (800698c <xTimerCreateTimerTask+0x8c>)
 8006944:	f7ff f8a2 	bl	8005a8c <xTaskCreateStatic>
 8006948:	4603      	mov	r3, r0
 800694a:	4a11      	ldr	r2, [pc, #68]	@ (8006990 <xTimerCreateTimerTask+0x90>)
 800694c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800694e:	4b10      	ldr	r3, [pc, #64]	@ (8006990 <xTimerCreateTimerTask+0x90>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006956:	2301      	movs	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10b      	bne.n	8006978 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	613b      	str	r3, [r7, #16]
}
 8006972:	bf00      	nop
 8006974:	bf00      	nop
 8006976:	e7fd      	b.n	8006974 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006978:	697b      	ldr	r3, [r7, #20]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	200413a8 	.word	0x200413a8
 8006988:	08007a44 	.word	0x08007a44
 800698c:	08006acd 	.word	0x08006acd
 8006990:	200413ac 	.word	0x200413ac

08006994 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08a      	sub	sp, #40	@ 0x28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10b      	bne.n	80069c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	623b      	str	r3, [r7, #32]
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	e7fd      	b.n	80069c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069c4:	4b19      	ldr	r3, [pc, #100]	@ (8006a2c <xTimerGenericCommand+0x98>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d02a      	beq.n	8006a22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b05      	cmp	r3, #5
 80069dc:	dc18      	bgt.n	8006a10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069de:	f7ff fead 	bl	800673c <xTaskGetSchedulerState>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d109      	bne.n	80069fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069e8:	4b10      	ldr	r3, [pc, #64]	@ (8006a2c <xTimerGenericCommand+0x98>)
 80069ea:	6818      	ldr	r0, [r3, #0]
 80069ec:	f107 0110 	add.w	r1, r7, #16
 80069f0:	2300      	movs	r3, #0
 80069f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069f4:	f7fe fbd8 	bl	80051a8 <xQueueGenericSend>
 80069f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80069fa:	e012      	b.n	8006a22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069fc:	4b0b      	ldr	r3, [pc, #44]	@ (8006a2c <xTimerGenericCommand+0x98>)
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	f107 0110 	add.w	r1, r7, #16
 8006a04:	2300      	movs	r3, #0
 8006a06:	2200      	movs	r2, #0
 8006a08:	f7fe fbce 	bl	80051a8 <xQueueGenericSend>
 8006a0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a0e:	e008      	b.n	8006a22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a10:	4b06      	ldr	r3, [pc, #24]	@ (8006a2c <xTimerGenericCommand+0x98>)
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	f107 0110 	add.w	r1, r7, #16
 8006a18:	2300      	movs	r3, #0
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	f7fe fcc6 	bl	80053ac <xQueueGenericSendFromISR>
 8006a20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3728      	adds	r7, #40	@ 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	200413a8 	.word	0x200413a8

08006a30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a3a:	4b23      	ldr	r3, [pc, #140]	@ (8006ac8 <prvProcessExpiredTimer+0x98>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe fa3d 	bl	8004ec8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d023      	beq.n	8006aa4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	18d1      	adds	r1, r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	f000 f8d5 	bl	8006c18 <prvInsertTimerInActiveList>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d020      	beq.n	8006ab6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a74:	2300      	movs	r3, #0
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	6978      	ldr	r0, [r7, #20]
 8006a80:	f7ff ff88 	bl	8006994 <xTimerGenericCommand>
 8006a84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d114      	bne.n	8006ab6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	60fb      	str	r3, [r7, #12]
}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	e7fd      	b.n	8006aa0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006aaa:	f023 0301 	bic.w	r3, r3, #1
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	6978      	ldr	r0, [r7, #20]
 8006abc:	4798      	blx	r3
}
 8006abe:	bf00      	nop
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200413a0 	.word	0x200413a0

08006acc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ad4:	f107 0308 	add.w	r3, r7, #8
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 f859 	bl	8006b90 <prvGetNextExpireTime>
 8006ade:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f805 	bl	8006af4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006aea:	f000 f8d7 	bl	8006c9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006aee:	bf00      	nop
 8006af0:	e7f0      	b.n	8006ad4 <prvTimerTask+0x8>
	...

08006af4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006afe:	f7ff fa29 	bl	8005f54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f866 	bl	8006bd8 <prvSampleTimeNow>
 8006b0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d130      	bne.n	8006b76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <prvProcessTimerOrBlockTask+0x3c>
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d806      	bhi.n	8006b30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b22:	f7ff fa25 	bl	8005f70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff ff81 	bl	8006a30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b2e:	e024      	b.n	8006b7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d008      	beq.n	8006b48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b36:	4b13      	ldr	r3, [pc, #76]	@ (8006b84 <prvProcessTimerOrBlockTask+0x90>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <prvProcessTimerOrBlockTask+0x50>
 8006b40:	2301      	movs	r3, #1
 8006b42:	e000      	b.n	8006b46 <prvProcessTimerOrBlockTask+0x52>
 8006b44:	2300      	movs	r3, #0
 8006b46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b48:	4b0f      	ldr	r3, [pc, #60]	@ (8006b88 <prvProcessTimerOrBlockTask+0x94>)
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	4619      	mov	r1, r3
 8006b56:	f7fe ff65 	bl	8005a24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b5a:	f7ff fa09 	bl	8005f70 <xTaskResumeAll>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b64:	4b09      	ldr	r3, [pc, #36]	@ (8006b8c <prvProcessTimerOrBlockTask+0x98>)
 8006b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	f3bf 8f6f 	isb	sy
}
 8006b74:	e001      	b.n	8006b7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b76:	f7ff f9fb 	bl	8005f70 <xTaskResumeAll>
}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	200413a4 	.word	0x200413a4
 8006b88:	200413a8 	.word	0x200413a8
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b98:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd4 <prvGetNextExpireTime+0x44>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <prvGetNextExpireTime+0x16>
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	e000      	b.n	8006ba8 <prvGetNextExpireTime+0x18>
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bb4:	4b07      	ldr	r3, [pc, #28]	@ (8006bd4 <prvGetNextExpireTime+0x44>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	e001      	b.n	8006bc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	200413a0 	.word	0x200413a0

08006bd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006be0:	f7ff fa64 	bl	80060ac <xTaskGetTickCount>
 8006be4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006be6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c14 <prvSampleTimeNow+0x3c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d205      	bcs.n	8006bfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006bf0:	f000 f93a 	bl	8006e68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	e002      	b.n	8006c02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c02:	4a04      	ldr	r2, [pc, #16]	@ (8006c14 <prvSampleTimeNow+0x3c>)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c08:	68fb      	ldr	r3, [r7, #12]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	200413b0 	.word	0x200413b0

08006c18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d812      	bhi.n	8006c64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	1ad2      	subs	r2, r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d302      	bcc.n	8006c52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	e01b      	b.n	8006c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c52:	4b10      	ldr	r3, [pc, #64]	@ (8006c94 <prvInsertTimerInActiveList+0x7c>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	f7fe f8fa 	bl	8004e56 <vListInsert>
 8006c62:	e012      	b.n	8006c8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d206      	bcs.n	8006c7a <prvInsertTimerInActiveList+0x62>
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d302      	bcc.n	8006c7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e007      	b.n	8006c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c7a:	4b07      	ldr	r3, [pc, #28]	@ (8006c98 <prvInsertTimerInActiveList+0x80>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f7fe f8e6 	bl	8004e56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c8a:	697b      	ldr	r3, [r7, #20]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	200413a4 	.word	0x200413a4
 8006c98:	200413a0 	.word	0x200413a0

08006c9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08e      	sub	sp, #56	@ 0x38
 8006ca0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ca2:	e0ce      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da19      	bge.n	8006cde <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006caa:	1d3b      	adds	r3, r7, #4
 8006cac:	3304      	adds	r3, #4
 8006cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10b      	bne.n	8006cce <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	61fb      	str	r3, [r7, #28]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd4:	6850      	ldr	r0, [r2, #4]
 8006cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd8:	6892      	ldr	r2, [r2, #8]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f2c0 80ae 	blt.w	8006e42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fe f8e6 	bl	8004ec8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff ff6a 	bl	8006bd8 <prvSampleTimeNow>
 8006d04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b09      	cmp	r3, #9
 8006d0a:	f200 8097 	bhi.w	8006e3c <prvProcessReceivedCommands+0x1a0>
 8006d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d14 <prvProcessReceivedCommands+0x78>)
 8006d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d14:	08006d3d 	.word	0x08006d3d
 8006d18:	08006d3d 	.word	0x08006d3d
 8006d1c:	08006d3d 	.word	0x08006d3d
 8006d20:	08006db3 	.word	0x08006db3
 8006d24:	08006dc7 	.word	0x08006dc7
 8006d28:	08006e13 	.word	0x08006e13
 8006d2c:	08006d3d 	.word	0x08006d3d
 8006d30:	08006d3d 	.word	0x08006d3d
 8006d34:	08006db3 	.word	0x08006db3
 8006d38:	08006dc7 	.word	0x08006dc7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d42:	f043 0301 	orr.w	r3, r3, #1
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	18d1      	adds	r1, r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d5c:	f7ff ff5c 	bl	8006c18 <prvInsertTimerInActiveList>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d06c      	beq.n	8006e40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d061      	beq.n	8006e40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	441a      	add	r2, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d8e:	f7ff fe01 	bl	8006994 <xTimerGenericCommand>
 8006d92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d152      	bne.n	8006e40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	61bb      	str	r3, [r7, #24]
}
 8006dac:	bf00      	nop
 8006dae:	bf00      	nop
 8006db0:	e7fd      	b.n	8006dae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006dc4:	e03d      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dcc:	f043 0301 	orr.w	r3, r3, #1
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ddc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10b      	bne.n	8006dfe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	617b      	str	r3, [r7, #20]
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	e7fd      	b.n	8006dfa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	18d1      	adds	r1, r2, r3
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e0c:	f7ff ff04 	bl	8006c18 <prvInsertTimerInActiveList>
					break;
 8006e10:	e017      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006e20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e22:	f000 fbe9 	bl	80075f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e26:	e00c      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e2e:	f023 0301 	bic.w	r3, r3, #1
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e3a:	e002      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006e3c:	bf00      	nop
 8006e3e:	e000      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>
					break;
 8006e40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e42:	4b08      	ldr	r3, [pc, #32]	@ (8006e64 <prvProcessReceivedCommands+0x1c8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	1d39      	adds	r1, r7, #4
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fb4c 	bl	80054e8 <xQueueReceive>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f47f af26 	bne.w	8006ca4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	3730      	adds	r7, #48	@ 0x30
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	200413a8 	.word	0x200413a8

08006e68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e6e:	e049      	b.n	8006f04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e70:	4b2e      	ldr	r3, [pc, #184]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fe f81d 	bl	8004ec8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d02f      	beq.n	8006f04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4413      	add	r3, r2
 8006eac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d90e      	bls.n	8006ed4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4619      	mov	r1, r3
 8006ecc:	4610      	mov	r0, r2
 8006ece:	f7fd ffc2 	bl	8004e56 <vListInsert>
 8006ed2:	e017      	b.n	8006f04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	2100      	movs	r1, #0
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7ff fd58 	bl	8006994 <xTimerGenericCommand>
 8006ee4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10b      	bne.n	8006f04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	603b      	str	r3, [r7, #0]
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f04:	4b09      	ldr	r3, [pc, #36]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1b0      	bne.n	8006e70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f0e:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f14:	4b06      	ldr	r3, [pc, #24]	@ (8006f30 <prvSwitchTimerLists+0xc8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a04      	ldr	r2, [pc, #16]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006f1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f1c:	4a04      	ldr	r2, [pc, #16]	@ (8006f30 <prvSwitchTimerLists+0xc8>)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	6013      	str	r3, [r2, #0]
}
 8006f22:	bf00      	nop
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	200413a0 	.word	0x200413a0
 8006f30:	200413a4 	.word	0x200413a4

08006f34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f3a:	f000 f96d 	bl	8007218 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f3e:	4b15      	ldr	r3, [pc, #84]	@ (8006f94 <prvCheckForValidListAndQueue+0x60>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d120      	bne.n	8006f88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f46:	4814      	ldr	r0, [pc, #80]	@ (8006f98 <prvCheckForValidListAndQueue+0x64>)
 8006f48:	f7fd ff34 	bl	8004db4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f4c:	4813      	ldr	r0, [pc, #76]	@ (8006f9c <prvCheckForValidListAndQueue+0x68>)
 8006f4e:	f7fd ff31 	bl	8004db4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f52:	4b13      	ldr	r3, [pc, #76]	@ (8006fa0 <prvCheckForValidListAndQueue+0x6c>)
 8006f54:	4a10      	ldr	r2, [pc, #64]	@ (8006f98 <prvCheckForValidListAndQueue+0x64>)
 8006f56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f58:	4b12      	ldr	r3, [pc, #72]	@ (8006fa4 <prvCheckForValidListAndQueue+0x70>)
 8006f5a:	4a10      	ldr	r2, [pc, #64]	@ (8006f9c <prvCheckForValidListAndQueue+0x68>)
 8006f5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	4b11      	ldr	r3, [pc, #68]	@ (8006fa8 <prvCheckForValidListAndQueue+0x74>)
 8006f64:	4a11      	ldr	r2, [pc, #68]	@ (8006fac <prvCheckForValidListAndQueue+0x78>)
 8006f66:	2110      	movs	r1, #16
 8006f68:	200a      	movs	r0, #10
 8006f6a:	f7fe f841 	bl	8004ff0 <xQueueGenericCreateStatic>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4a08      	ldr	r2, [pc, #32]	@ (8006f94 <prvCheckForValidListAndQueue+0x60>)
 8006f72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f74:	4b07      	ldr	r3, [pc, #28]	@ (8006f94 <prvCheckForValidListAndQueue+0x60>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f7c:	4b05      	ldr	r3, [pc, #20]	@ (8006f94 <prvCheckForValidListAndQueue+0x60>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	490b      	ldr	r1, [pc, #44]	@ (8006fb0 <prvCheckForValidListAndQueue+0x7c>)
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fd24 	bl	80059d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f88:	f000 f978 	bl	800727c <vPortExitCritical>
}
 8006f8c:	bf00      	nop
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	200413a8 	.word	0x200413a8
 8006f98:	20041378 	.word	0x20041378
 8006f9c:	2004138c 	.word	0x2004138c
 8006fa0:	200413a0 	.word	0x200413a0
 8006fa4:	200413a4 	.word	0x200413a4
 8006fa8:	20041454 	.word	0x20041454
 8006fac:	200413b4 	.word	0x200413b4
 8006fb0:	08007a4c 	.word	0x08007a4c

08006fb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3b04      	subs	r3, #4
 8006fc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3b04      	subs	r3, #4
 8006fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f023 0201 	bic.w	r2, r3, #1
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3b04      	subs	r3, #4
 8006fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8007018 <pxPortInitialiseStack+0x64>)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3b14      	subs	r3, #20
 8006fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3b04      	subs	r3, #4
 8006ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f06f 0202 	mvn.w	r2, #2
 8007002:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	3b20      	subs	r3, #32
 8007008:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800700a:	68fb      	ldr	r3, [r7, #12]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	0800701d 	.word	0x0800701d

0800701c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007022:	2300      	movs	r3, #0
 8007024:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007026:	4b13      	ldr	r3, [pc, #76]	@ (8007074 <prvTaskExitError+0x58>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702e:	d00b      	beq.n	8007048 <prvTaskExitError+0x2c>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	60fb      	str	r3, [r7, #12]
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <prvTaskExitError+0x28>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	60bb      	str	r3, [r7, #8]
}
 800705a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800705c:	bf00      	nop
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0fc      	beq.n	800705e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	2004000c 	.word	0x2004000c
	...

08007080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007080:	4b07      	ldr	r3, [pc, #28]	@ (80070a0 <pxCurrentTCBConst2>)
 8007082:	6819      	ldr	r1, [r3, #0]
 8007084:	6808      	ldr	r0, [r1, #0]
 8007086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708a:	f380 8809 	msr	PSP, r0
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f380 8811 	msr	BASEPRI, r0
 800709a:	4770      	bx	lr
 800709c:	f3af 8000 	nop.w

080070a0 <pxCurrentTCBConst2>:
 80070a0:	20040e78 	.word	0x20040e78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop

080070a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070a8:	4808      	ldr	r0, [pc, #32]	@ (80070cc <prvPortStartFirstTask+0x24>)
 80070aa:	6800      	ldr	r0, [r0, #0]
 80070ac:	6800      	ldr	r0, [r0, #0]
 80070ae:	f380 8808 	msr	MSP, r0
 80070b2:	f04f 0000 	mov.w	r0, #0
 80070b6:	f380 8814 	msr	CONTROL, r0
 80070ba:	b662      	cpsie	i
 80070bc:	b661      	cpsie	f
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	df00      	svc	0
 80070c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ca:	bf00      	nop
 80070cc:	e000ed08 	.word	0xe000ed08

080070d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070d6:	4b47      	ldr	r3, [pc, #284]	@ (80071f4 <xPortStartScheduler+0x124>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a47      	ldr	r2, [pc, #284]	@ (80071f8 <xPortStartScheduler+0x128>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10b      	bne.n	80070f8 <xPortStartScheduler+0x28>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	613b      	str	r3, [r7, #16]
}
 80070f2:	bf00      	nop
 80070f4:	bf00      	nop
 80070f6:	e7fd      	b.n	80070f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070f8:	4b3e      	ldr	r3, [pc, #248]	@ (80071f4 <xPortStartScheduler+0x124>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a3f      	ldr	r2, [pc, #252]	@ (80071fc <xPortStartScheduler+0x12c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d10b      	bne.n	800711a <xPortStartScheduler+0x4a>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	60fb      	str	r3, [r7, #12]
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	e7fd      	b.n	8007116 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800711a:	4b39      	ldr	r3, [pc, #228]	@ (8007200 <xPortStartScheduler+0x130>)
 800711c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	22ff      	movs	r2, #255	@ 0xff
 800712a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800713c:	b2da      	uxtb	r2, r3
 800713e:	4b31      	ldr	r3, [pc, #196]	@ (8007204 <xPortStartScheduler+0x134>)
 8007140:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007142:	4b31      	ldr	r3, [pc, #196]	@ (8007208 <xPortStartScheduler+0x138>)
 8007144:	2207      	movs	r2, #7
 8007146:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007148:	e009      	b.n	800715e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800714a:	4b2f      	ldr	r3, [pc, #188]	@ (8007208 <xPortStartScheduler+0x138>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3b01      	subs	r3, #1
 8007150:	4a2d      	ldr	r2, [pc, #180]	@ (8007208 <xPortStartScheduler+0x138>)
 8007152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	b2db      	uxtb	r3, r3
 800715c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007166:	2b80      	cmp	r3, #128	@ 0x80
 8007168:	d0ef      	beq.n	800714a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800716a:	4b27      	ldr	r3, [pc, #156]	@ (8007208 <xPortStartScheduler+0x138>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f1c3 0307 	rsb	r3, r3, #7
 8007172:	2b04      	cmp	r3, #4
 8007174:	d00b      	beq.n	800718e <xPortStartScheduler+0xbe>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	60bb      	str	r3, [r7, #8]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800718e:	4b1e      	ldr	r3, [pc, #120]	@ (8007208 <xPortStartScheduler+0x138>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	4a1c      	ldr	r2, [pc, #112]	@ (8007208 <xPortStartScheduler+0x138>)
 8007196:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007198:	4b1b      	ldr	r3, [pc, #108]	@ (8007208 <xPortStartScheduler+0x138>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071a0:	4a19      	ldr	r2, [pc, #100]	@ (8007208 <xPortStartScheduler+0x138>)
 80071a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071ac:	4b17      	ldr	r3, [pc, #92]	@ (800720c <xPortStartScheduler+0x13c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a16      	ldr	r2, [pc, #88]	@ (800720c <xPortStartScheduler+0x13c>)
 80071b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071b8:	4b14      	ldr	r3, [pc, #80]	@ (800720c <xPortStartScheduler+0x13c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a13      	ldr	r2, [pc, #76]	@ (800720c <xPortStartScheduler+0x13c>)
 80071be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80071c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071c4:	f000 f8da 	bl	800737c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071c8:	4b11      	ldr	r3, [pc, #68]	@ (8007210 <xPortStartScheduler+0x140>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071ce:	f000 f8f9 	bl	80073c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071d2:	4b10      	ldr	r3, [pc, #64]	@ (8007214 <xPortStartScheduler+0x144>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007214 <xPortStartScheduler+0x144>)
 80071d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80071dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071de:	f7ff ff63 	bl	80070a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071e2:	f7ff f82d 	bl	8006240 <vTaskSwitchContext>
	prvTaskExitError();
 80071e6:	f7ff ff19 	bl	800701c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	e000ed00 	.word	0xe000ed00
 80071f8:	410fc271 	.word	0x410fc271
 80071fc:	410fc270 	.word	0x410fc270
 8007200:	e000e400 	.word	0xe000e400
 8007204:	200414a4 	.word	0x200414a4
 8007208:	200414a8 	.word	0x200414a8
 800720c:	e000ed20 	.word	0xe000ed20
 8007210:	2004000c 	.word	0x2004000c
 8007214:	e000ef34 	.word	0xe000ef34

08007218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	607b      	str	r3, [r7, #4]
}
 8007230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007232:	4b10      	ldr	r3, [pc, #64]	@ (8007274 <vPortEnterCritical+0x5c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	4a0e      	ldr	r2, [pc, #56]	@ (8007274 <vPortEnterCritical+0x5c>)
 800723a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800723c:	4b0d      	ldr	r3, [pc, #52]	@ (8007274 <vPortEnterCritical+0x5c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d110      	bne.n	8007266 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007244:	4b0c      	ldr	r3, [pc, #48]	@ (8007278 <vPortEnterCritical+0x60>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <vPortEnterCritical+0x4e>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	603b      	str	r3, [r7, #0]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <vPortEnterCritical+0x4a>
	}
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	2004000c 	.word	0x2004000c
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007282:	4b12      	ldr	r3, [pc, #72]	@ (80072cc <vPortExitCritical+0x50>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <vPortExitCritical+0x26>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	607b      	str	r3, [r7, #4]
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	e7fd      	b.n	800729e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072a2:	4b0a      	ldr	r3, [pc, #40]	@ (80072cc <vPortExitCritical+0x50>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	4a08      	ldr	r2, [pc, #32]	@ (80072cc <vPortExitCritical+0x50>)
 80072aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072ac:	4b07      	ldr	r3, [pc, #28]	@ (80072cc <vPortExitCritical+0x50>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d105      	bne.n	80072c0 <vPortExitCritical+0x44>
 80072b4:	2300      	movs	r3, #0
 80072b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f383 8811 	msr	BASEPRI, r3
}
 80072be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	2004000c 	.word	0x2004000c

080072d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072d0:	f3ef 8009 	mrs	r0, PSP
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	4b15      	ldr	r3, [pc, #84]	@ (8007330 <pxCurrentTCBConst>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	f01e 0f10 	tst.w	lr, #16
 80072e0:	bf08      	it	eq
 80072e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ea:	6010      	str	r0, [r2, #0]
 80072ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80072f4:	f380 8811 	msr	BASEPRI, r0
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f7fe ff9e 	bl	8006240 <vTaskSwitchContext>
 8007304:	f04f 0000 	mov.w	r0, #0
 8007308:	f380 8811 	msr	BASEPRI, r0
 800730c:	bc09      	pop	{r0, r3}
 800730e:	6819      	ldr	r1, [r3, #0]
 8007310:	6808      	ldr	r0, [r1, #0]
 8007312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007316:	f01e 0f10 	tst.w	lr, #16
 800731a:	bf08      	it	eq
 800731c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007320:	f380 8809 	msr	PSP, r0
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	f3af 8000 	nop.w

08007330 <pxCurrentTCBConst>:
 8007330:	20040e78 	.word	0x20040e78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop

08007338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	607b      	str	r3, [r7, #4]
}
 8007350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007352:	f7fe febb 	bl	80060cc <xTaskIncrementTick>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800735c:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <xPortSysTickHandler+0x40>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	2300      	movs	r3, #0
 8007366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	f383 8811 	msr	BASEPRI, r3
}
 800736e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	e000ed04 	.word	0xe000ed04

0800737c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007380:	4b0b      	ldr	r3, [pc, #44]	@ (80073b0 <vPortSetupTimerInterrupt+0x34>)
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007386:	4b0b      	ldr	r3, [pc, #44]	@ (80073b4 <vPortSetupTimerInterrupt+0x38>)
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800738c:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <vPortSetupTimerInterrupt+0x3c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a0a      	ldr	r2, [pc, #40]	@ (80073bc <vPortSetupTimerInterrupt+0x40>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	099b      	lsrs	r3, r3, #6
 8007398:	4a09      	ldr	r2, [pc, #36]	@ (80073c0 <vPortSetupTimerInterrupt+0x44>)
 800739a:	3b01      	subs	r3, #1
 800739c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800739e:	4b04      	ldr	r3, [pc, #16]	@ (80073b0 <vPortSetupTimerInterrupt+0x34>)
 80073a0:	2207      	movs	r2, #7
 80073a2:	601a      	str	r2, [r3, #0]
}
 80073a4:	bf00      	nop
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	e000e010 	.word	0xe000e010
 80073b4:	e000e018 	.word	0xe000e018
 80073b8:	20040000 	.word	0x20040000
 80073bc:	10624dd3 	.word	0x10624dd3
 80073c0:	e000e014 	.word	0xe000e014

080073c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80073d4 <vPortEnableVFP+0x10>
 80073c8:	6801      	ldr	r1, [r0, #0]
 80073ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80073ce:	6001      	str	r1, [r0, #0]
 80073d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073d2:	bf00      	nop
 80073d4:	e000ed88 	.word	0xe000ed88

080073d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80073de:	f3ef 8305 	mrs	r3, IPSR
 80073e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2b0f      	cmp	r3, #15
 80073e8:	d915      	bls.n	8007416 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073ea:	4a18      	ldr	r2, [pc, #96]	@ (800744c <vPortValidateInterruptPriority+0x74>)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073f4:	4b16      	ldr	r3, [pc, #88]	@ (8007450 <vPortValidateInterruptPriority+0x78>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	7afa      	ldrb	r2, [r7, #11]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d20b      	bcs.n	8007416 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	607b      	str	r3, [r7, #4]
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	e7fd      	b.n	8007412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007416:	4b0f      	ldr	r3, [pc, #60]	@ (8007454 <vPortValidateInterruptPriority+0x7c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800741e:	4b0e      	ldr	r3, [pc, #56]	@ (8007458 <vPortValidateInterruptPriority+0x80>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d90b      	bls.n	800743e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	603b      	str	r3, [r7, #0]
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	e7fd      	b.n	800743a <vPortValidateInterruptPriority+0x62>
	}
 800743e:	bf00      	nop
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	e000e3f0 	.word	0xe000e3f0
 8007450:	200414a4 	.word	0x200414a4
 8007454:	e000ed0c 	.word	0xe000ed0c
 8007458:	200414a8 	.word	0x200414a8

0800745c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08a      	sub	sp, #40	@ 0x28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007468:	f7fe fd74 	bl	8005f54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800746c:	4b5c      	ldr	r3, [pc, #368]	@ (80075e0 <pvPortMalloc+0x184>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007474:	f000 f924 	bl	80076c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007478:	4b5a      	ldr	r3, [pc, #360]	@ (80075e4 <pvPortMalloc+0x188>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4013      	ands	r3, r2
 8007480:	2b00      	cmp	r3, #0
 8007482:	f040 8095 	bne.w	80075b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01e      	beq.n	80074ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800748c:	2208      	movs	r2, #8
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	2b00      	cmp	r3, #0
 800749c:	d015      	beq.n	80074ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f023 0307 	bic.w	r3, r3, #7
 80074a4:	3308      	adds	r3, #8
 80074a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f003 0307 	and.w	r3, r3, #7
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00b      	beq.n	80074ca <pvPortMalloc+0x6e>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	617b      	str	r3, [r7, #20]
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	e7fd      	b.n	80074c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d06f      	beq.n	80075b0 <pvPortMalloc+0x154>
 80074d0:	4b45      	ldr	r3, [pc, #276]	@ (80075e8 <pvPortMalloc+0x18c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d86a      	bhi.n	80075b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80074da:	4b44      	ldr	r3, [pc, #272]	@ (80075ec <pvPortMalloc+0x190>)
 80074dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80074de:	4b43      	ldr	r3, [pc, #268]	@ (80075ec <pvPortMalloc+0x190>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074e4:	e004      	b.n	80074f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80074ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d903      	bls.n	8007502 <pvPortMalloc+0xa6>
 80074fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1f1      	bne.n	80074e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007502:	4b37      	ldr	r3, [pc, #220]	@ (80075e0 <pvPortMalloc+0x184>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007508:	429a      	cmp	r2, r3
 800750a:	d051      	beq.n	80075b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2208      	movs	r2, #8
 8007512:	4413      	add	r3, r2
 8007514:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	1ad2      	subs	r2, r2, r3
 8007526:	2308      	movs	r3, #8
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	429a      	cmp	r2, r3
 800752c:	d920      	bls.n	8007570 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800752e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4413      	add	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <pvPortMalloc+0xfc>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	613b      	str	r3, [r7, #16]
}
 8007552:	bf00      	nop
 8007554:	bf00      	nop
 8007556:	e7fd      	b.n	8007554 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800756a:	69b8      	ldr	r0, [r7, #24]
 800756c:	f000 f90a 	bl	8007784 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007570:	4b1d      	ldr	r3, [pc, #116]	@ (80075e8 <pvPortMalloc+0x18c>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	4a1b      	ldr	r2, [pc, #108]	@ (80075e8 <pvPortMalloc+0x18c>)
 800757c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800757e:	4b1a      	ldr	r3, [pc, #104]	@ (80075e8 <pvPortMalloc+0x18c>)
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	4b1b      	ldr	r3, [pc, #108]	@ (80075f0 <pvPortMalloc+0x194>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d203      	bcs.n	8007592 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800758a:	4b17      	ldr	r3, [pc, #92]	@ (80075e8 <pvPortMalloc+0x18c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a18      	ldr	r2, [pc, #96]	@ (80075f0 <pvPortMalloc+0x194>)
 8007590:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	4b13      	ldr	r3, [pc, #76]	@ (80075e4 <pvPortMalloc+0x188>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	431a      	orrs	r2, r3
 800759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a2:	2200      	movs	r2, #0
 80075a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80075a6:	4b13      	ldr	r3, [pc, #76]	@ (80075f4 <pvPortMalloc+0x198>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	4a11      	ldr	r2, [pc, #68]	@ (80075f4 <pvPortMalloc+0x198>)
 80075ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075b0:	f7fe fcde 	bl	8005f70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00b      	beq.n	80075d6 <pvPortMalloc+0x17a>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	60fb      	str	r3, [r7, #12]
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	e7fd      	b.n	80075d2 <pvPortMalloc+0x176>
	return pvReturn;
 80075d6:	69fb      	ldr	r3, [r7, #28]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3728      	adds	r7, #40	@ 0x28
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	2004206c 	.word	0x2004206c
 80075e4:	20042080 	.word	0x20042080
 80075e8:	20042070 	.word	0x20042070
 80075ec:	20042064 	.word	0x20042064
 80075f0:	20042074 	.word	0x20042074
 80075f4:	20042078 	.word	0x20042078

080075f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d04f      	beq.n	80076aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800760a:	2308      	movs	r3, #8
 800760c:	425b      	negs	r3, r3
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	4413      	add	r3, r2
 8007612:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	4b25      	ldr	r3, [pc, #148]	@ (80076b4 <vPortFree+0xbc>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4013      	ands	r3, r2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10b      	bne.n	800763e <vPortFree+0x46>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	60fb      	str	r3, [r7, #12]
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	e7fd      	b.n	800763a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00b      	beq.n	800765e <vPortFree+0x66>
	__asm volatile
 8007646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764a:	f383 8811 	msr	BASEPRI, r3
 800764e:	f3bf 8f6f 	isb	sy
 8007652:	f3bf 8f4f 	dsb	sy
 8007656:	60bb      	str	r3, [r7, #8]
}
 8007658:	bf00      	nop
 800765a:	bf00      	nop
 800765c:	e7fd      	b.n	800765a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	4b14      	ldr	r3, [pc, #80]	@ (80076b4 <vPortFree+0xbc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4013      	ands	r3, r2
 8007668:	2b00      	cmp	r3, #0
 800766a:	d01e      	beq.n	80076aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d11a      	bne.n	80076aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	4b0e      	ldr	r3, [pc, #56]	@ (80076b4 <vPortFree+0xbc>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	43db      	mvns	r3, r3
 800767e:	401a      	ands	r2, r3
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007684:	f7fe fc66 	bl	8005f54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	4b0a      	ldr	r3, [pc, #40]	@ (80076b8 <vPortFree+0xc0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4413      	add	r3, r2
 8007692:	4a09      	ldr	r2, [pc, #36]	@ (80076b8 <vPortFree+0xc0>)
 8007694:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007696:	6938      	ldr	r0, [r7, #16]
 8007698:	f000 f874 	bl	8007784 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800769c:	4b07      	ldr	r3, [pc, #28]	@ (80076bc <vPortFree+0xc4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3301      	adds	r3, #1
 80076a2:	4a06      	ldr	r2, [pc, #24]	@ (80076bc <vPortFree+0xc4>)
 80076a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80076a6:	f7fe fc63 	bl	8005f70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076aa:	bf00      	nop
 80076ac:	3718      	adds	r7, #24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20042080 	.word	0x20042080
 80076b8:	20042070 	.word	0x20042070
 80076bc:	2004207c 	.word	0x2004207c

080076c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80076c6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80076ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80076cc:	4b27      	ldr	r3, [pc, #156]	@ (800776c <prvHeapInit+0xac>)
 80076ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00c      	beq.n	80076f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3307      	adds	r3, #7
 80076de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0307 	bic.w	r3, r3, #7
 80076e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80076e8:	68ba      	ldr	r2, [r7, #8]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	4a1f      	ldr	r2, [pc, #124]	@ (800776c <prvHeapInit+0xac>)
 80076f0:	4413      	add	r3, r2
 80076f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80076f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007770 <prvHeapInit+0xb0>)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80076fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007770 <prvHeapInit+0xb0>)
 8007700:	2200      	movs	r2, #0
 8007702:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	4413      	add	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800770c:	2208      	movs	r2, #8
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f023 0307 	bic.w	r3, r3, #7
 800771a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4a15      	ldr	r2, [pc, #84]	@ (8007774 <prvHeapInit+0xb4>)
 8007720:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007722:	4b14      	ldr	r3, [pc, #80]	@ (8007774 <prvHeapInit+0xb4>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2200      	movs	r2, #0
 8007728:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800772a:	4b12      	ldr	r3, [pc, #72]	@ (8007774 <prvHeapInit+0xb4>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	1ad2      	subs	r2, r2, r3
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007740:	4b0c      	ldr	r3, [pc, #48]	@ (8007774 <prvHeapInit+0xb4>)
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	4a0a      	ldr	r2, [pc, #40]	@ (8007778 <prvHeapInit+0xb8>)
 800774e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	4a09      	ldr	r2, [pc, #36]	@ (800777c <prvHeapInit+0xbc>)
 8007756:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007758:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <prvHeapInit+0xc0>)
 800775a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800775e:	601a      	str	r2, [r3, #0]
}
 8007760:	bf00      	nop
 8007762:	3714      	adds	r7, #20
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	200414ac 	.word	0x200414ac
 8007770:	20042064 	.word	0x20042064
 8007774:	2004206c 	.word	0x2004206c
 8007778:	20042074 	.word	0x20042074
 800777c:	20042070 	.word	0x20042070
 8007780:	20042080 	.word	0x20042080

08007784 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800778c:	4b28      	ldr	r3, [pc, #160]	@ (8007830 <prvInsertBlockIntoFreeList+0xac>)
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	e002      	b.n	8007798 <prvInsertBlockIntoFreeList+0x14>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d8f7      	bhi.n	8007792 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	4413      	add	r3, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d108      	bne.n	80077c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	441a      	add	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	441a      	add	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d118      	bne.n	800780c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4b15      	ldr	r3, [pc, #84]	@ (8007834 <prvInsertBlockIntoFreeList+0xb0>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d00d      	beq.n	8007802 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	441a      	add	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	601a      	str	r2, [r3, #0]
 8007800:	e008      	b.n	8007814 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007802:	4b0c      	ldr	r3, [pc, #48]	@ (8007834 <prvInsertBlockIntoFreeList+0xb0>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	e003      	b.n	8007814 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d002      	beq.n	8007822 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007822:	bf00      	nop
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	20042064 	.word	0x20042064
 8007834:	2004206c 	.word	0x2004206c

08007838 <memset>:
 8007838:	4402      	add	r2, r0
 800783a:	4603      	mov	r3, r0
 800783c:	4293      	cmp	r3, r2
 800783e:	d100      	bne.n	8007842 <memset+0xa>
 8007840:	4770      	bx	lr
 8007842:	f803 1b01 	strb.w	r1, [r3], #1
 8007846:	e7f9      	b.n	800783c <memset+0x4>

08007848 <_reclaim_reent>:
 8007848:	4b29      	ldr	r3, [pc, #164]	@ (80078f0 <_reclaim_reent+0xa8>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4283      	cmp	r3, r0
 800784e:	b570      	push	{r4, r5, r6, lr}
 8007850:	4604      	mov	r4, r0
 8007852:	d04b      	beq.n	80078ec <_reclaim_reent+0xa4>
 8007854:	69c3      	ldr	r3, [r0, #28]
 8007856:	b1ab      	cbz	r3, 8007884 <_reclaim_reent+0x3c>
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	b16b      	cbz	r3, 8007878 <_reclaim_reent+0x30>
 800785c:	2500      	movs	r5, #0
 800785e:	69e3      	ldr	r3, [r4, #28]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	5959      	ldr	r1, [r3, r5]
 8007864:	2900      	cmp	r1, #0
 8007866:	d13b      	bne.n	80078e0 <_reclaim_reent+0x98>
 8007868:	3504      	adds	r5, #4
 800786a:	2d80      	cmp	r5, #128	@ 0x80
 800786c:	d1f7      	bne.n	800785e <_reclaim_reent+0x16>
 800786e:	69e3      	ldr	r3, [r4, #28]
 8007870:	4620      	mov	r0, r4
 8007872:	68d9      	ldr	r1, [r3, #12]
 8007874:	f000 f872 	bl	800795c <_free_r>
 8007878:	69e3      	ldr	r3, [r4, #28]
 800787a:	6819      	ldr	r1, [r3, #0]
 800787c:	b111      	cbz	r1, 8007884 <_reclaim_reent+0x3c>
 800787e:	4620      	mov	r0, r4
 8007880:	f000 f86c 	bl	800795c <_free_r>
 8007884:	6961      	ldr	r1, [r4, #20]
 8007886:	b111      	cbz	r1, 800788e <_reclaim_reent+0x46>
 8007888:	4620      	mov	r0, r4
 800788a:	f000 f867 	bl	800795c <_free_r>
 800788e:	69e1      	ldr	r1, [r4, #28]
 8007890:	b111      	cbz	r1, 8007898 <_reclaim_reent+0x50>
 8007892:	4620      	mov	r0, r4
 8007894:	f000 f862 	bl	800795c <_free_r>
 8007898:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800789a:	b111      	cbz	r1, 80078a2 <_reclaim_reent+0x5a>
 800789c:	4620      	mov	r0, r4
 800789e:	f000 f85d 	bl	800795c <_free_r>
 80078a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078a4:	b111      	cbz	r1, 80078ac <_reclaim_reent+0x64>
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 f858 	bl	800795c <_free_r>
 80078ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80078ae:	b111      	cbz	r1, 80078b6 <_reclaim_reent+0x6e>
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 f853 	bl	800795c <_free_r>
 80078b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80078b8:	b111      	cbz	r1, 80078c0 <_reclaim_reent+0x78>
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 f84e 	bl	800795c <_free_r>
 80078c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80078c2:	b111      	cbz	r1, 80078ca <_reclaim_reent+0x82>
 80078c4:	4620      	mov	r0, r4
 80078c6:	f000 f849 	bl	800795c <_free_r>
 80078ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80078cc:	b111      	cbz	r1, 80078d4 <_reclaim_reent+0x8c>
 80078ce:	4620      	mov	r0, r4
 80078d0:	f000 f844 	bl	800795c <_free_r>
 80078d4:	6a23      	ldr	r3, [r4, #32]
 80078d6:	b14b      	cbz	r3, 80078ec <_reclaim_reent+0xa4>
 80078d8:	4620      	mov	r0, r4
 80078da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078de:	4718      	bx	r3
 80078e0:	680e      	ldr	r6, [r1, #0]
 80078e2:	4620      	mov	r0, r4
 80078e4:	f000 f83a 	bl	800795c <_free_r>
 80078e8:	4631      	mov	r1, r6
 80078ea:	e7bb      	b.n	8007864 <_reclaim_reent+0x1c>
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
 80078ee:	bf00      	nop
 80078f0:	20040010 	.word	0x20040010

080078f4 <__libc_init_array>:
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	4d0d      	ldr	r5, [pc, #52]	@ (800792c <__libc_init_array+0x38>)
 80078f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007930 <__libc_init_array+0x3c>)
 80078fa:	1b64      	subs	r4, r4, r5
 80078fc:	10a4      	asrs	r4, r4, #2
 80078fe:	2600      	movs	r6, #0
 8007900:	42a6      	cmp	r6, r4
 8007902:	d109      	bne.n	8007918 <__libc_init_array+0x24>
 8007904:	4d0b      	ldr	r5, [pc, #44]	@ (8007934 <__libc_init_array+0x40>)
 8007906:	4c0c      	ldr	r4, [pc, #48]	@ (8007938 <__libc_init_array+0x44>)
 8007908:	f000 f87e 	bl	8007a08 <_init>
 800790c:	1b64      	subs	r4, r4, r5
 800790e:	10a4      	asrs	r4, r4, #2
 8007910:	2600      	movs	r6, #0
 8007912:	42a6      	cmp	r6, r4
 8007914:	d105      	bne.n	8007922 <__libc_init_array+0x2e>
 8007916:	bd70      	pop	{r4, r5, r6, pc}
 8007918:	f855 3b04 	ldr.w	r3, [r5], #4
 800791c:	4798      	blx	r3
 800791e:	3601      	adds	r6, #1
 8007920:	e7ee      	b.n	8007900 <__libc_init_array+0xc>
 8007922:	f855 3b04 	ldr.w	r3, [r5], #4
 8007926:	4798      	blx	r3
 8007928:	3601      	adds	r6, #1
 800792a:	e7f2      	b.n	8007912 <__libc_init_array+0x1e>
 800792c:	08007b2c 	.word	0x08007b2c
 8007930:	08007b2c 	.word	0x08007b2c
 8007934:	08007b2c 	.word	0x08007b2c
 8007938:	08007b30 	.word	0x08007b30

0800793c <__retarget_lock_acquire_recursive>:
 800793c:	4770      	bx	lr

0800793e <__retarget_lock_release_recursive>:
 800793e:	4770      	bx	lr

08007940 <memcpy>:
 8007940:	440a      	add	r2, r1
 8007942:	4291      	cmp	r1, r2
 8007944:	f100 33ff 	add.w	r3, r0, #4294967295
 8007948:	d100      	bne.n	800794c <memcpy+0xc>
 800794a:	4770      	bx	lr
 800794c:	b510      	push	{r4, lr}
 800794e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007952:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007956:	4291      	cmp	r1, r2
 8007958:	d1f9      	bne.n	800794e <memcpy+0xe>
 800795a:	bd10      	pop	{r4, pc}

0800795c <_free_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4605      	mov	r5, r0
 8007960:	2900      	cmp	r1, #0
 8007962:	d041      	beq.n	80079e8 <_free_r+0x8c>
 8007964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007968:	1f0c      	subs	r4, r1, #4
 800796a:	2b00      	cmp	r3, #0
 800796c:	bfb8      	it	lt
 800796e:	18e4      	addlt	r4, r4, r3
 8007970:	f000 f83e 	bl	80079f0 <__malloc_lock>
 8007974:	4a1d      	ldr	r2, [pc, #116]	@ (80079ec <_free_r+0x90>)
 8007976:	6813      	ldr	r3, [r2, #0]
 8007978:	b933      	cbnz	r3, 8007988 <_free_r+0x2c>
 800797a:	6063      	str	r3, [r4, #4]
 800797c:	6014      	str	r4, [r2, #0]
 800797e:	4628      	mov	r0, r5
 8007980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007984:	f000 b83a 	b.w	80079fc <__malloc_unlock>
 8007988:	42a3      	cmp	r3, r4
 800798a:	d908      	bls.n	800799e <_free_r+0x42>
 800798c:	6820      	ldr	r0, [r4, #0]
 800798e:	1821      	adds	r1, r4, r0
 8007990:	428b      	cmp	r3, r1
 8007992:	bf01      	itttt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	1809      	addeq	r1, r1, r0
 800799a:	6021      	streq	r1, [r4, #0]
 800799c:	e7ed      	b.n	800797a <_free_r+0x1e>
 800799e:	461a      	mov	r2, r3
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	b10b      	cbz	r3, 80079a8 <_free_r+0x4c>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d9fa      	bls.n	800799e <_free_r+0x42>
 80079a8:	6811      	ldr	r1, [r2, #0]
 80079aa:	1850      	adds	r0, r2, r1
 80079ac:	42a0      	cmp	r0, r4
 80079ae:	d10b      	bne.n	80079c8 <_free_r+0x6c>
 80079b0:	6820      	ldr	r0, [r4, #0]
 80079b2:	4401      	add	r1, r0
 80079b4:	1850      	adds	r0, r2, r1
 80079b6:	4283      	cmp	r3, r0
 80079b8:	6011      	str	r1, [r2, #0]
 80079ba:	d1e0      	bne.n	800797e <_free_r+0x22>
 80079bc:	6818      	ldr	r0, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	6053      	str	r3, [r2, #4]
 80079c2:	4408      	add	r0, r1
 80079c4:	6010      	str	r0, [r2, #0]
 80079c6:	e7da      	b.n	800797e <_free_r+0x22>
 80079c8:	d902      	bls.n	80079d0 <_free_r+0x74>
 80079ca:	230c      	movs	r3, #12
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	e7d6      	b.n	800797e <_free_r+0x22>
 80079d0:	6820      	ldr	r0, [r4, #0]
 80079d2:	1821      	adds	r1, r4, r0
 80079d4:	428b      	cmp	r3, r1
 80079d6:	bf04      	itt	eq
 80079d8:	6819      	ldreq	r1, [r3, #0]
 80079da:	685b      	ldreq	r3, [r3, #4]
 80079dc:	6063      	str	r3, [r4, #4]
 80079de:	bf04      	itt	eq
 80079e0:	1809      	addeq	r1, r1, r0
 80079e2:	6021      	streq	r1, [r4, #0]
 80079e4:	6054      	str	r4, [r2, #4]
 80079e6:	e7ca      	b.n	800797e <_free_r+0x22>
 80079e8:	bd38      	pop	{r3, r4, r5, pc}
 80079ea:	bf00      	nop
 80079ec:	200421c0 	.word	0x200421c0

080079f0 <__malloc_lock>:
 80079f0:	4801      	ldr	r0, [pc, #4]	@ (80079f8 <__malloc_lock+0x8>)
 80079f2:	f7ff bfa3 	b.w	800793c <__retarget_lock_acquire_recursive>
 80079f6:	bf00      	nop
 80079f8:	200421bc 	.word	0x200421bc

080079fc <__malloc_unlock>:
 80079fc:	4801      	ldr	r0, [pc, #4]	@ (8007a04 <__malloc_unlock+0x8>)
 80079fe:	f7ff bf9e 	b.w	800793e <__retarget_lock_release_recursive>
 8007a02:	bf00      	nop
 8007a04:	200421bc 	.word	0x200421bc

08007a08 <_init>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr

08007a14 <_fini>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	bf00      	nop
 8007a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1a:	bc08      	pop	{r3}
 8007a1c:	469e      	mov	lr, r3
 8007a1e:	4770      	bx	lr
