
zkouska.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086b0  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08008870  08008870  00009870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089fc  080089fc  0000a064  2**0
                  CONTENTS
  4 .ARM          00000008  080089fc  080089fc  000099fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a04  08008a04  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a04  08008a04  00009a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a08  08008a08  00009a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20040000  08008a0c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002214  20040064  08008a70  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20042278  08008a70  0000a278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000223c6  00000000  00000000  0000a094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041a0  00000000  00000000  0002c45a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b30  00000000  00000000  00030600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001529  00000000  00000000  00032130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003db6  00000000  00000000  00033659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f151  00000000  00000000  0003740f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114294  00000000  00000000  00056560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016a7f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007700  00000000  00000000  0016a838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00171f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20040064 	.word	0x20040064
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008858 	.word	0x08008858

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20040068 	.word	0x20040068
 80001fc:	08008858 	.word	0x08008858

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fea1 	bl	800123a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f880 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fa0a 	bl	8000914 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000500:	f000 f8d0 	bl	80006a4 <MX_LPUART1_UART_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f91c 	bl	8000740 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000508:	f000 f9d6 	bl	80008b8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 800050c:	f000 f964 	bl	80007d8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000510:	f000 f99a 	bl	8000848 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000514:	4825      	ldr	r0, [pc, #148]	@ (80005ac <main+0xbc>)
 8000516:	f003 f83d 	bl	8003594 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 800051a:	4825      	ldr	r0, [pc, #148]	@ (80005b0 <main+0xc0>)
 800051c:	f003 f83a 	bl	8003594 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f004 fc82 	bl	8004e28 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of ButtonSemaphore */
  ButtonSemaphoreHandle = osSemaphoreNew(1, 0, &ButtonSemaphore_attributes);
 8000524:	4a23      	ldr	r2, [pc, #140]	@ (80005b4 <main+0xc4>)
 8000526:	2100      	movs	r1, #0
 8000528:	2001      	movs	r0, #1
 800052a:	f004 fe19 	bl	8005160 <osSemaphoreNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a21      	ldr	r2, [pc, #132]	@ (80005b8 <main+0xc8>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of LD1Semaphore */
  LD1SemaphoreHandle = osSemaphoreNew(1, 0, &LD1Semaphore_attributes);
 8000534:	4a21      	ldr	r2, [pc, #132]	@ (80005bc <main+0xcc>)
 8000536:	2100      	movs	r1, #0
 8000538:	2001      	movs	r0, #1
 800053a:	f004 fe11 	bl	8005160 <osSemaphoreNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a1f      	ldr	r2, [pc, #124]	@ (80005c0 <main+0xd0>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of LD2Semaphore */
  LD2SemaphoreHandle = osSemaphoreNew(1, 0, &LD2Semaphore_attributes);
 8000544:	4a1f      	ldr	r2, [pc, #124]	@ (80005c4 <main+0xd4>)
 8000546:	2100      	movs	r1, #0
 8000548:	2001      	movs	r0, #1
 800054a:	f004 fe09 	bl	8005160 <osSemaphoreNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a1d      	ldr	r2, [pc, #116]	@ (80005c8 <main+0xd8>)
 8000552:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of LD3Timer */
  LD3TimerHandle = osTimerNew(LD3TimerStart, osTimerPeriodic, NULL, &LD3Timer_attributes);
 8000554:	4b1d      	ldr	r3, [pc, #116]	@ (80005cc <main+0xdc>)
 8000556:	2200      	movs	r2, #0
 8000558:	2101      	movs	r1, #1
 800055a:	481d      	ldr	r0, [pc, #116]	@ (80005d0 <main+0xe0>)
 800055c:	f004 fd56 	bl	800500c <osTimerNew>
 8000560:	4603      	mov	r3, r0
 8000562:	4a1c      	ldr	r2, [pc, #112]	@ (80005d4 <main+0xe4>)
 8000564:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(LD3TimerHandle, 1000);
 8000566:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <main+0xe4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800056e:	4618      	mov	r0, r3
 8000570:	f004 fdc8 	bl	8005104 <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LD1Blik */
  LD1BlikHandle = osThreadNew(LD1BlikStart, NULL, &LD1Blik_attributes);
 8000574:	4a18      	ldr	r2, [pc, #96]	@ (80005d8 <main+0xe8>)
 8000576:	2100      	movs	r1, #0
 8000578:	4818      	ldr	r0, [pc, #96]	@ (80005dc <main+0xec>)
 800057a:	f004 fc9f 	bl	8004ebc <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a17      	ldr	r2, [pc, #92]	@ (80005e0 <main+0xf0>)
 8000582:	6013      	str	r3, [r2, #0]

  /* creation of LD2Blik */
  LD2BlikHandle = osThreadNew(LD2BlinkStart, NULL, &LD2Blik_attributes);
 8000584:	4a17      	ldr	r2, [pc, #92]	@ (80005e4 <main+0xf4>)
 8000586:	2100      	movs	r1, #0
 8000588:	4817      	ldr	r0, [pc, #92]	@ (80005e8 <main+0xf8>)
 800058a:	f004 fc97 	bl	8004ebc <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a16      	ldr	r2, [pc, #88]	@ (80005ec <main+0xfc>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of ZmenStav */
  ZmenStavHandle = osThreadNew(ZmenStavStart, NULL, &ZmenStav_attributes);
 8000594:	4a16      	ldr	r2, [pc, #88]	@ (80005f0 <main+0x100>)
 8000596:	2100      	movs	r1, #0
 8000598:	4816      	ldr	r0, [pc, #88]	@ (80005f4 <main+0x104>)
 800059a:	f004 fc8f 	bl	8004ebc <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a15      	ldr	r2, [pc, #84]	@ (80005f8 <main+0x108>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f004 fc64 	bl	8004e70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <main+0xb8>
 80005ac:	200401f4 	.word	0x200401f4
 80005b0:	200401a8 	.word	0x200401a8
 80005b4:	0800895c 	.word	0x0800895c
 80005b8:	20040734 	.word	0x20040734
 80005bc:	0800896c 	.word	0x0800896c
 80005c0:	20040738 	.word	0x20040738
 80005c4:	0800897c 	.word	0x0800897c
 80005c8:	2004073c 	.word	0x2004073c
 80005cc:	0800894c 	.word	0x0800894c
 80005d0:	08000c8d 	.word	0x08000c8d
 80005d4:	20040730 	.word	0x20040730
 80005d8:	080088e0 	.word	0x080088e0
 80005dc:	08000ad5 	.word	0x08000ad5
 80005e0:	20040724 	.word	0x20040724
 80005e4:	08008904 	.word	0x08008904
 80005e8:	08000b61 	.word	0x08000b61
 80005ec:	20040728 	.word	0x20040728
 80005f0:	08008928 	.word	0x08008928
 80005f4:	08000bed 	.word	0x08000bed
 80005f8:	2004072c 	.word	0x2004072c

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	@ 0x58
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2244      	movs	r2, #68	@ 0x44
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f008 f83c 	bl	8008688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800061e:	2000      	movs	r0, #0
 8000620:	f001 fa7a 	bl	8001b18 <HAL_PWREx_ControlVoltageScaling>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800062a:	f000 fb6d 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800062e:	2322      	movs	r3, #34	@ 0x22
 8000630:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2340      	movs	r3, #64	@ 0x40
 800063e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000648:	2302      	movs	r3, #2
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800064c:	231e      	movs	r3, #30
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000658:	2302      	movs	r3, #2
 800065a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fb1d 	bl	8001ca0 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800066c:	f000 fb4c 	bl	8000d08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2303      	movs	r3, #3
 8000676:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	2105      	movs	r1, #5
 800068a:	4618      	mov	r0, r3
 800068c:	f001 ff22 	bl	80024d4 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000696:	f000 fb37 	bl	8000d08 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3758      	adds	r7, #88	@ 0x58
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006a8:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006aa:	4a23      	ldr	r2, [pc, #140]	@ (8000738 <MX_LPUART1_UART_Init+0x94>)
 80006ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006b0:	4a22      	ldr	r2, [pc, #136]	@ (800073c <MX_LPUART1_UART_Init+0x98>)
 80006b2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d4:	4b17      	ldr	r3, [pc, #92]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006da:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b14      	ldr	r3, [pc, #80]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80006e6:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006ec:	4811      	ldr	r0, [pc, #68]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 80006ee:	f003 fa3d 	bl	8003b6c <HAL_UART_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80006f8:	f000 fb06 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006fc:	2100      	movs	r1, #0
 80006fe:	480d      	ldr	r0, [pc, #52]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 8000700:	f003 ffd8 	bl	80046b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800070a:	f000 fafd 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070e:	2100      	movs	r1, #0
 8000710:	4808      	ldr	r0, [pc, #32]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 8000712:	f004 f80d 	bl	8004730 <HAL_UARTEx_SetRxFifoThreshold>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800071c:	f000 faf4 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_LPUART1_UART_Init+0x90>)
 8000722:	f003 ff8e 	bl	8004642 <HAL_UARTEx_DisableFifoMode>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800072c:	f000 faec 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20040080 	.word	0x20040080
 8000738:	40008000 	.word	0x40008000
 800073c:	00033324 	.word	0x00033324

08000740 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000744:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 8000746:	4a23      	ldr	r2, [pc, #140]	@ (80007d4 <MX_USART3_UART_Init+0x94>)
 8000748:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800074a:	4b21      	ldr	r3, [pc, #132]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 800074c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000750:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000752:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000764:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 8000766:	220c      	movs	r2, #12
 8000768:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800076a:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 8000772:	2200      	movs	r2, #0
 8000774:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000788:	4811      	ldr	r0, [pc, #68]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 800078a:	f003 f9ef 	bl	8003b6c <HAL_UART_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000794:	f000 fab8 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 800079c:	f003 ff8a 	bl	80046b4 <HAL_UARTEx_SetTxFifoThreshold>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007a6:	f000 faaf 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007aa:	2100      	movs	r1, #0
 80007ac:	4808      	ldr	r0, [pc, #32]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 80007ae:	f003 ffbf 	bl	8004730 <HAL_UARTEx_SetRxFifoThreshold>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007b8:	f000 faa6 	bl	8000d08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_USART3_UART_Init+0x90>)
 80007be:	f003 ff40 	bl	8004642 <HAL_UARTEx_DisableFifoMode>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007c8:	f000 fa9e 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20040114 	.word	0x20040114
 80007d4:	40004800 	.word	0x40004800

080007d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007e8:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <MX_TIM6_Init+0x68>)
 80007ea:	4a16      	ldr	r2, [pc, #88]	@ (8000844 <MX_TIM6_Init+0x6c>)
 80007ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4800-1;
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <MX_TIM6_Init+0x68>)
 80007f0:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80007f4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <MX_TIM6_Init+0x68>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80007fc:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <MX_TIM6_Init+0x68>)
 80007fe:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000802:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000804:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <MX_TIM6_Init+0x68>)
 8000806:	2280      	movs	r2, #128	@ 0x80
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800080a:	480d      	ldr	r0, [pc, #52]	@ (8000840 <MX_TIM6_Init+0x68>)
 800080c:	f002 fe6a 	bl	80034e4 <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000816:	f000 fa77 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800081a:	2320      	movs	r3, #32
 800081c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	@ (8000840 <MX_TIM6_Init+0x68>)
 8000828:	f003 f8fa 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000832:	f000 fa69 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200401a8 	.word	0x200401a8
 8000844:	40001000 	.word	0x40001000

08000848 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b084      	sub	sp, #16
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_TIM7_Init+0x68>)
 800085a:	4a16      	ldr	r2, [pc, #88]	@ (80008b4 <MX_TIM7_Init+0x6c>)
 800085c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7200-1;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_TIM7_Init+0x68>)
 8000860:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000864:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_TIM7_Init+0x68>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 800086c:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_TIM7_Init+0x68>)
 800086e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000872:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_TIM7_Init+0x68>)
 8000876:	2280      	movs	r2, #128	@ 0x80
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800087a:	480d      	ldr	r0, [pc, #52]	@ (80008b0 <MX_TIM7_Init+0x68>)
 800087c:	f002 fe32 	bl	80034e4 <HAL_TIM_Base_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000886:	f000 fa3f 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800088a:	2320      	movs	r3, #32
 800088c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	4619      	mov	r1, r3
 8000896:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <MX_TIM7_Init+0x68>)
 8000898:	f003 f8c2 	bl	8003a20 <HAL_TIMEx_MasterConfigSynchronization>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80008a2:	f000 fa31 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200401f4 	.word	0x200401f4
 80008b4:	40001400 	.word	0x40001400

080008b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2206      	movs	r2, #6
 80008c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2202      	movs	r2, #2
 80008d4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	2201      	movs	r2, #1
 80008da:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008e8:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	@ (8000910 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	f000 ffb8 	bl	8001870 <HAL_PCD_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000906:	f000 f9ff 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20040240 	.word	0x20040240

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08c      	sub	sp, #48	@ 0x30
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b55      	ldr	r3, [pc, #340]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	4a54      	ldr	r2, [pc, #336]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000936:	4b52      	ldr	r3, [pc, #328]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	61bb      	str	r3, [r7, #24]
 8000940:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	4b4f      	ldr	r3, [pc, #316]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	4a4e      	ldr	r2, [pc, #312]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800094c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800094e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b49      	ldr	r3, [pc, #292]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	4a48      	ldr	r2, [pc, #288]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000966:	4b46      	ldr	r3, [pc, #280]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b43      	ldr	r3, [pc, #268]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000976:	4a42      	ldr	r2, [pc, #264]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800097e:	4b40      	ldr	r3, [pc, #256]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a3c      	ldr	r2, [pc, #240]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b3a      	ldr	r3, [pc, #232]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80009a2:	f001 f96d 	bl	8001c80 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a35      	ldr	r2, [pc, #212]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b33      	ldr	r3, [pc, #204]	@ (8000a80 <MX_GPIO_Init+0x16c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80009c4:	482f      	ldr	r0, [pc, #188]	@ (8000a84 <MX_GPIO_Init+0x170>)
 80009c6:	f000 ff09 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2140      	movs	r1, #64	@ 0x40
 80009ce:	482e      	ldr	r0, [pc, #184]	@ (8000a88 <MX_GPIO_Init+0x174>)
 80009d0:	f000 ff04 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2180      	movs	r1, #128	@ 0x80
 80009d8:	482c      	ldr	r0, [pc, #176]	@ (8000a8c <MX_GPIO_Init+0x178>)
 80009da:	f000 feff 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4825      	ldr	r0, [pc, #148]	@ (8000a8c <MX_GPIO_Init+0x178>)
 80009f6:	f000 fd5f 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80009fa:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	481c      	ldr	r0, [pc, #112]	@ (8000a84 <MX_GPIO_Init+0x170>)
 8000a14:	f000 fd50 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4817      	ldr	r0, [pc, #92]	@ (8000a88 <MX_GPIO_Init+0x174>)
 8000a2c:	f000 fd44 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a30:	2340      	movs	r3, #64	@ 0x40
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4810      	ldr	r0, [pc, #64]	@ (8000a88 <MX_GPIO_Init+0x174>)
 8000a48:	f000 fd36 	bl	80014b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000a4c:	2380      	movs	r3, #128	@ 0x80
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <MX_GPIO_Init+0x178>)
 8000a64:	f000 fd28 	bl	80014b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2105      	movs	r1, #5
 8000a6c:	2028      	movs	r0, #40	@ 0x28
 8000a6e:	f000 fcf9 	bl	8001464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a72:	2028      	movs	r0, #40	@ 0x28
 8000a74:	f000 fd12 	bl	800149c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a78:	bf00      	nop
 8000a7a:	3730      	adds	r7, #48	@ 0x30
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000400 	.word	0x48000400
 8000a88:	48001800 	.word	0x48001800
 8000a8c:	48000800 	.word	0x48000800

08000a90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin){
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aa0:	d10f      	bne.n	8000ac2 <HAL_GPIO_EXTI_Callback+0x32>
		if(Button1==1){
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <HAL_GPIO_EXTI_Callback+0x3c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d103      	bne.n	8000ab2 <HAL_GPIO_EXTI_Callback+0x22>
			Button1=0;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <HAL_GPIO_EXTI_Callback+0x3c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e002      	b.n	8000ab8 <HAL_GPIO_EXTI_Callback+0x28>
		}else{
			Button1=1;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <HAL_GPIO_EXTI_Callback+0x3c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
		}
		osSemaphoreRelease(ButtonSemaphoreHandle);
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f004 fc2b 	bl	8005318 <osSemaphoreRelease>
	}
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20040744 	.word	0x20040744
 8000ad0:	20040734 	.word	0x20040734

08000ad4 <LD1BlikStart>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LD1BlikStart */
void LD1BlikStart(void *argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t counter=0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		osSemaphoreAcquire(LD1SemaphoreHandle, osWaitForever);
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <LD1BlikStart+0x80>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 fbc3 	bl	8005274 <osSemaphoreAcquire>
		switch (Stav){
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <LD1BlikStart+0x84>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d8f3      	bhi.n	8000ae0 <LD1BlikStart+0xc>
 8000af8:	a201      	add	r2, pc, #4	@ (adr r2, 8000b00 <LD1BlikStart+0x2c>)
 8000afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afe:	bf00      	nop
 8000b00:	08000b11 	.word	0x08000b11
 8000b04:	08000b1b 	.word	0x08000b1b
 8000b08:	08000b35 	.word	0x08000b35
 8000b0c:	08000b41 	.word	0x08000b41
		case 1:
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b10:	2180      	movs	r1, #128	@ 0x80
 8000b12:	4812      	ldr	r0, [pc, #72]	@ (8000b5c <LD1BlikStart+0x88>)
 8000b14:	f000 fe7a 	bl	800180c <HAL_GPIO_TogglePin>
			break;
 8000b18:	e01a      	b.n	8000b50 <LD1BlikStart+0x7c>
		case 2:
			counter=counter+1;
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
			if (counter==2){
 8000b20:	7bfb      	ldrb	r3, [r7, #15]
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d112      	bne.n	8000b4c <LD1BlikStart+0x78>
				HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b26:	2180      	movs	r1, #128	@ 0x80
 8000b28:	480c      	ldr	r0, [pc, #48]	@ (8000b5c <LD1BlikStart+0x88>)
 8000b2a:	f000 fe6f 	bl	800180c <HAL_GPIO_TogglePin>
				counter=0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8000b32:	e00b      	b.n	8000b4c <LD1BlikStart+0x78>
		case 3:
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2180      	movs	r1, #128	@ 0x80
 8000b38:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <LD1BlikStart+0x88>)
 8000b3a:	f000 fe4f 	bl	80017dc <HAL_GPIO_WritePin>
			break;
 8000b3e:	e007      	b.n	8000b50 <LD1BlikStart+0x7c>
		case 4:
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2180      	movs	r1, #128	@ 0x80
 8000b44:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <LD1BlikStart+0x88>)
 8000b46:	f000 fe49 	bl	80017dc <HAL_GPIO_WritePin>
			break;
 8000b4a:	e001      	b.n	8000b50 <LD1BlikStart+0x7c>
			break;
 8000b4c:	bf00      	nop
 8000b4e:	e7c7      	b.n	8000ae0 <LD1BlikStart+0xc>
		osSemaphoreAcquire(LD1SemaphoreHandle, osWaitForever);
 8000b50:	e7c6      	b.n	8000ae0 <LD1BlikStart+0xc>
 8000b52:	bf00      	nop
 8000b54:	20040738 	.word	0x20040738
 8000b58:	20040000 	.word	0x20040000
 8000b5c:	48000800 	.word	0x48000800

08000b60 <LD2BlinkStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LD2BlinkStart */
void LD2BlinkStart(void *argument)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LD2BlinkStart */
  /* Infinite loop */
	uint8_t counter=0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
    osSemaphoreAcquire(LD2SemaphoreHandle, osWaitForever);
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <LD2BlinkStart+0x80>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f04f 31ff 	mov.w	r1, #4294967295
 8000b74:	4618      	mov	r0, r3
 8000b76:	f004 fb7d 	bl	8005274 <osSemaphoreAcquire>
    		switch (Stav){
 8000b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <LD2BlinkStart+0x84>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d8f3      	bhi.n	8000b6c <LD2BlinkStart+0xc>
 8000b84:	a201      	add	r2, pc, #4	@ (adr r2, 8000b8c <LD2BlinkStart+0x2c>)
 8000b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8a:	bf00      	nop
 8000b8c:	08000b9d 	.word	0x08000b9d
 8000b90:	08000ba7 	.word	0x08000ba7
 8000b94:	08000bc1 	.word	0x08000bc1
 8000b98:	08000bcd 	.word	0x08000bcd
    		case 1:
    			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b9c:	2180      	movs	r1, #128	@ 0x80
 8000b9e:	4812      	ldr	r0, [pc, #72]	@ (8000be8 <LD2BlinkStart+0x88>)
 8000ba0:	f000 fe34 	bl	800180c <HAL_GPIO_TogglePin>
    			break;
 8000ba4:	e01a      	b.n	8000bdc <LD2BlinkStart+0x7c>
    		case 2:
    			counter=counter+1;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
    			if (counter==2){
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d112      	bne.n	8000bd8 <LD2BlinkStart+0x78>
    				HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bb2:	2180      	movs	r1, #128	@ 0x80
 8000bb4:	480c      	ldr	r0, [pc, #48]	@ (8000be8 <LD2BlinkStart+0x88>)
 8000bb6:	f000 fe29 	bl	800180c <HAL_GPIO_TogglePin>
    				counter=0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73fb      	strb	r3, [r7, #15]
    			}
    			break;
 8000bbe:	e00b      	b.n	8000bd8 <LD2BlinkStart+0x78>
    		case 3:
    			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2180      	movs	r1, #128	@ 0x80
 8000bc4:	4808      	ldr	r0, [pc, #32]	@ (8000be8 <LD2BlinkStart+0x88>)
 8000bc6:	f000 fe09 	bl	80017dc <HAL_GPIO_WritePin>
    			break;
 8000bca:	e007      	b.n	8000bdc <LD2BlinkStart+0x7c>
    		case 4:
    			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2180      	movs	r1, #128	@ 0x80
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <LD2BlinkStart+0x88>)
 8000bd2:	f000 fe03 	bl	80017dc <HAL_GPIO_WritePin>
    			break;
 8000bd6:	e001      	b.n	8000bdc <LD2BlinkStart+0x7c>
    			break;
 8000bd8:	bf00      	nop
 8000bda:	e7c7      	b.n	8000b6c <LD2BlinkStart+0xc>
    osSemaphoreAcquire(LD2SemaphoreHandle, osWaitForever);
 8000bdc:	e7c6      	b.n	8000b6c <LD2BlinkStart+0xc>
 8000bde:	bf00      	nop
 8000be0:	2004073c 	.word	0x2004073c
 8000be4:	20040000 	.word	0x20040000
 8000be8:	48000400 	.word	0x48000400

08000bec <ZmenStavStart>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ZmenStavStart */
void ZmenStavStart(void *argument)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ZmenStavStart */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(ButtonSemaphoreHandle, osWaitForever);
 8000bf4:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <ZmenStavStart+0x90>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f004 fb39 	bl	8005274 <osSemaphoreAcquire>
	  if (Stav==4 && Button1==1){
 8000c02:	4b1f      	ldr	r3, [pc, #124]	@ (8000c80 <ZmenStavStart+0x94>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	d10a      	bne.n	8000c20 <ZmenStavStart+0x34>
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000c84 <ZmenStavStart+0x98>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d106      	bne.n	8000c20 <ZmenStavStart+0x34>
		  Stav=1;
 8000c12:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <ZmenStavStart+0x94>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	601a      	str	r2, [r3, #0]
		  if (Button==0){
 8000c18:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <ZmenStavStart+0x9c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	e02b      	b.n	8000c78 <ZmenStavStart+0x8c>
			  continue;
		  }
	  }else
	  if (Stav==3 && Button1==1){
 8000c20:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <ZmenStavStart+0x94>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d10a      	bne.n	8000c3e <ZmenStavStart+0x52>
 8000c28:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <ZmenStavStart+0x98>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d106      	bne.n	8000c3e <ZmenStavStart+0x52>
		  Stav=4;
 8000c30:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <ZmenStavStart+0x94>)
 8000c32:	2204      	movs	r2, #4
 8000c34:	601a      	str	r2, [r3, #0]
		  if (Button==0){
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <ZmenStavStart+0x9c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	e01c      	b.n	8000c78 <ZmenStavStart+0x8c>
			  continue;
		  		  }
	  }else
	  if (Stav==2 && Button1==1){
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <ZmenStavStart+0x94>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d10a      	bne.n	8000c5c <ZmenStavStart+0x70>
 8000c46:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <ZmenStavStart+0x98>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d106      	bne.n	8000c5c <ZmenStavStart+0x70>
		  Stav=3;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <ZmenStavStart+0x94>)
 8000c50:	2203      	movs	r2, #3
 8000c52:	601a      	str	r2, [r3, #0]
		  if (Button==0){
 8000c54:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <ZmenStavStart+0x9c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	e00d      	b.n	8000c78 <ZmenStavStart+0x8c>
			  continue;
		  		  }
	  }else
	  if (Stav==1 && Button1==1){
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <ZmenStavStart+0x94>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d1c7      	bne.n	8000bf4 <ZmenStavStart+0x8>
 8000c64:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <ZmenStavStart+0x98>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d1c3      	bne.n	8000bf4 <ZmenStavStart+0x8>
		  Stav=2;
 8000c6c:	4b04      	ldr	r3, [pc, #16]	@ (8000c80 <ZmenStavStart+0x94>)
 8000c6e:	2202      	movs	r2, #2
 8000c70:	601a      	str	r2, [r3, #0]
		  if (Button==0){
 8000c72:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <ZmenStavStart+0x9c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
	  osSemaphoreAcquire(ButtonSemaphoreHandle, osWaitForever);
 8000c78:	e7bc      	b.n	8000bf4 <ZmenStavStart+0x8>
 8000c7a:	bf00      	nop
 8000c7c:	20040734 	.word	0x20040734
 8000c80:	20040000 	.word	0x20040000
 8000c84:	20040744 	.word	0x20040744
 8000c88:	20040740 	.word	0x20040740

08000c8c <LD3TimerStart>:
  /* USER CODE END ZmenStavStart */
}

/* LD3TimerStart function */
void LD3TimerStart(void *argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LD3TimerStart */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c98:	4803      	ldr	r0, [pc, #12]	@ (8000ca8 <LD3TimerStart+0x1c>)
 8000c9a:	f000 fdb7 	bl	800180c <HAL_GPIO_TogglePin>
  /* USER CODE END LD3TimerStart */
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	48000400 	.word	0x48000400

08000cac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d101      	bne.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cbe:	f000 fad5 	bl	800126c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d104      	bne.n	8000cd6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  osSemaphoreRelease(LD2SemaphoreHandle);
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f004 fb21 	bl	8005318 <osSemaphoreRelease>
  }
  if (htim->Instance == TIM6) {
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a09      	ldr	r2, [pc, #36]	@ (8000d00 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d104      	bne.n	8000cea <HAL_TIM_PeriodElapsedCallback+0x3e>
	  osSemaphoreRelease(LD1SemaphoreHandle);
 8000ce0:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 fb17 	bl	8005318 <osSemaphoreRelease>
  }
  /* USER CODE END Callback 1 */
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40000400 	.word	0x40000400
 8000cf8:	40001400 	.word	0x40001400
 8000cfc:	2004073c 	.word	0x2004073c
 8000d00:	40001000 	.word	0x40001000
 8000d04:	20040738 	.word	0x20040738

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <Error_Handler+0x8>

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <HAL_MspInit+0x4c>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1e:	4a10      	ldr	r2, [pc, #64]	@ (8000d60 <HAL_MspInit+0x4c>)
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_MspInit+0x4c>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <HAL_MspInit+0x4c>)
 8000d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d36:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <HAL_MspInit+0x4c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3e:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <HAL_MspInit+0x4c>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	210f      	movs	r1, #15
 8000d4e:	f06f 0001 	mvn.w	r0, #1
 8000d52:	f000 fb87 	bl	8001464 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b0b0      	sub	sp, #192	@ 0xc0
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	2294      	movs	r2, #148	@ 0x94
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f007 fc7f 	bl	8008688 <memset>
  if(huart->Instance==LPUART1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a43      	ldr	r2, [pc, #268]	@ (8000e9c <HAL_UART_MspInit+0x138>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d13e      	bne.n	8000e12 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d94:	2320      	movs	r3, #32
 8000d96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0318 	add.w	r3, r7, #24
 8000da0:	4618      	mov	r0, r3
 8000da2:	f001 fe87 	bl	8002ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dac:	f7ff ffac 	bl	8000d08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000db0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000db4:	4a3a      	ldr	r2, [pc, #232]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000dbc:	4b38      	ldr	r3, [pc, #224]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc8:	4b35      	ldr	r3, [pc, #212]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dcc:	4a34      	ldr	r2, [pc, #208]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000dce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd4:	4b32      	ldr	r3, [pc, #200]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000de0:	f000 ff4e 	bl	8001c80 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000de4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000de8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e04:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4826      	ldr	r0, [pc, #152]	@ (8000ea4 <HAL_UART_MspInit+0x140>)
 8000e0c:	f000 fb54 	bl	80014b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e10:	e040      	b.n	8000e94 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==USART3)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a24      	ldr	r2, [pc, #144]	@ (8000ea8 <HAL_UART_MspInit+0x144>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d13b      	bne.n	8000e94 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e20:	2300      	movs	r3, #0
 8000e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 fe43 	bl	8002ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000e34:	f7ff ff68 	bl	8000d08 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e38:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3c:	4a18      	ldr	r2, [pc, #96]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000e3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e44:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e50:	4b13      	ldr	r3, [pc, #76]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e54:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <HAL_UART_MspInit+0x13c>)
 8000e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e82:	2307      	movs	r3, #7
 8000e84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e88:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4807      	ldr	r0, [pc, #28]	@ (8000eac <HAL_UART_MspInit+0x148>)
 8000e90:	f000 fb12 	bl	80014b8 <HAL_GPIO_Init>
}
 8000e94:	bf00      	nop
 8000e96:	37c0      	adds	r7, #192	@ 0xc0
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40008000 	.word	0x40008000
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48001800 	.word	0x48001800
 8000ea8:	40004800 	.word	0x40004800
 8000eac:	48000c00 	.word	0x48000c00

08000eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8000f28 <HAL_TIM_Base_MspInit+0x78>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d114      	bne.n	8000eec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f2c <HAL_TIM_Base_MspInit+0x7c>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec6:	4a19      	ldr	r2, [pc, #100]	@ (8000f2c <HAL_TIM_Base_MspInit+0x7c>)
 8000ec8:	f043 0310 	orr.w	r3, r3, #16
 8000ecc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ece:	4b17      	ldr	r3, [pc, #92]	@ (8000f2c <HAL_TIM_Base_MspInit+0x7c>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2105      	movs	r1, #5
 8000ede:	2036      	movs	r0, #54	@ 0x36
 8000ee0:	f000 fac0 	bl	8001464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ee4:	2036      	movs	r0, #54	@ 0x36
 8000ee6:	f000 fad9 	bl	800149c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000eea:	e018      	b.n	8000f1e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	@ (8000f30 <HAL_TIM_Base_MspInit+0x80>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d113      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f2c <HAL_TIM_Base_MspInit+0x7c>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efa:	4a0c      	ldr	r2, [pc, #48]	@ (8000f2c <HAL_TIM_Base_MspInit+0x7c>)
 8000efc:	f043 0320 	orr.w	r3, r3, #32
 8000f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <HAL_TIM_Base_MspInit+0x7c>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f06:	f003 0320 	and.w	r3, r3, #32
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2105      	movs	r1, #5
 8000f12:	2037      	movs	r0, #55	@ 0x37
 8000f14:	f000 faa6 	bl	8001464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f18:	2037      	movs	r0, #55	@ 0x37
 8000f1a:	f000 fabf 	bl	800149c <HAL_NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40001000 	.word	0x40001000
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40001400 	.word	0x40001400

08000f34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0b0      	sub	sp, #192	@ 0xc0
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f4c:	f107 0318 	add.w	r3, r7, #24
 8000f50:	2294      	movs	r2, #148	@ 0x94
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f007 fb97 	bl	8008688 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f62:	d16c      	bne.n	800103e <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f68:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f70:	f107 0318 	add.w	r3, r7, #24
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fd9d 	bl	8002ab4 <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f80:	f7ff fec2 	bl	8000d08 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b30      	ldr	r3, [pc, #192]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f88:	4a2f      	ldr	r2, [pc, #188]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f90:	4b2d      	ldr	r3, [pc, #180]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f9c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc6:	f000 fa77 	bl	80014b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe8:	f000 fa66 	bl	80014b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fec:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff0:	4a15      	ldr	r2, [pc, #84]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 8000ff2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ff6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d114      	bne.n	800103a <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001014:	4a0c      	ldr	r2, [pc, #48]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101a:	6593      	str	r3, [r2, #88]	@ 0x58
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001028:	f000 fe1a 	bl	8001c60 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 800102e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001030:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <HAL_PCD_MspInit+0x114>)
 8001032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001036:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001038:	e001      	b.n	800103e <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 800103a:	f000 fe11 	bl	8001c60 <HAL_PWREx_EnableVddUSB>
}
 800103e:	bf00      	nop
 8001040:	37c0      	adds	r7, #192	@ 0xc0
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	@ 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800105a:	4b34      	ldr	r3, [pc, #208]	@ (800112c <HAL_InitTick+0xe0>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800105e:	4a33      	ldr	r2, [pc, #204]	@ (800112c <HAL_InitTick+0xe0>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6593      	str	r3, [r2, #88]	@ 0x58
 8001066:	4b31      	ldr	r3, [pc, #196]	@ (800112c <HAL_InitTick+0xe0>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001072:	f107 0210 	add.w	r2, r7, #16
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fc27 	bl	80028d0 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800108c:	f001 fbf4 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8001090:	6378      	str	r0, [r7, #52]	@ 0x34
 8001092:	e004      	b.n	800109e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001094:	f001 fbf0 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8001098:	4603      	mov	r3, r0
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800109e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010a0:	4a23      	ldr	r2, [pc, #140]	@ (8001130 <HAL_InitTick+0xe4>)
 80010a2:	fba2 2303 	umull	r2, r3, r2, r3
 80010a6:	0c9b      	lsrs	r3, r3, #18
 80010a8:	3b01      	subs	r3, #1
 80010aa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <HAL_InitTick+0xe8>)
 80010ae:	4a22      	ldr	r2, [pc, #136]	@ (8001138 <HAL_InitTick+0xec>)
 80010b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <HAL_InitTick+0xe8>)
 80010b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010b8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80010ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001134 <HAL_InitTick+0xe8>)
 80010bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010be:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001134 <HAL_InitTick+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <HAL_InitTick+0xe8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_InitTick+0xe8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80010d2:	4818      	ldr	r0, [pc, #96]	@ (8001134 <HAL_InitTick+0xe8>)
 80010d4:	f002 fa06 	bl	80034e4 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80010de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d11b      	bne.n	800111e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80010e6:	4813      	ldr	r0, [pc, #76]	@ (8001134 <HAL_InitTick+0xe8>)
 80010e8:	f002 fa54 	bl	8003594 <HAL_TIM_Base_Start_IT>
 80010ec:	4603      	mov	r3, r0
 80010ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010f2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d111      	bne.n	800111e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010fa:	201d      	movs	r0, #29
 80010fc:	f000 f9ce 	bl	800149c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d808      	bhi.n	8001118 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001106:	2200      	movs	r2, #0
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	201d      	movs	r0, #29
 800110c:	f000 f9aa 	bl	8001464 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001110:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <HAL_InitTick+0xf0>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e002      	b.n	800111e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800111e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001122:	4618      	mov	r0, r3
 8001124:	3738      	adds	r7, #56	@ 0x38
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	431bde83 	.word	0x431bde83
 8001134:	20040748 	.word	0x20040748
 8001138:	40000400 	.word	0x40000400
 800113c:	20040008 	.word	0x20040008

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <NMI_Handler+0x4>

08001148 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <MemManage_Handler+0x4>

08001158 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <BusFault_Handler+0x4>

08001160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <UsageFault_Handler+0x4>

08001168 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800117c:	4802      	ldr	r0, [pc, #8]	@ (8001188 <TIM3_IRQHandler+0x10>)
 800117e:	f002 fa79 	bl	8003674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20040748 	.word	0x20040748

0800118c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001190:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001194:	f000 fb54 	bl	8001840 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}

0800119c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <TIM6_DAC_IRQHandler+0x10>)
 80011a2:	f002 fa67 	bl	8003674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200401a8 	.word	0x200401a8

080011b0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011b4:	4802      	ldr	r0, [pc, #8]	@ (80011c0 <TIM7_IRQHandler+0x10>)
 80011b6:	f002 fa5d 	bl	8003674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200401f4 	.word	0x200401f4

080011c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <SystemInit+0x20>)
 80011ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <SystemInit+0x20>)
 80011d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001220 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ec:	f7ff ffea 	bl	80011c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	@ (8001228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <LoopForever+0xe>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	@ (8001234 <LoopForever+0x16>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f007 fa95 	bl	8008744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121a:	f7ff f969 	bl	80004f0 <main>

0800121e <LoopForever>:

LoopForever:
    b LoopForever
 800121e:	e7fe      	b.n	800121e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001220:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001224:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8001228:	20040064 	.word	0x20040064
  ldr r2, =_sidata
 800122c:	08008a0c 	.word	0x08008a0c
  ldr r2, =_sbss
 8001230:	20040064 	.word	0x20040064
  ldr r4, =_ebss
 8001234:	20042278 	.word	0x20042278

08001238 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_IRQHandler>

0800123a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f902 	bl	800144e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124a:	200f      	movs	r0, #15
 800124c:	f7ff fefe 	bl	800104c <HAL_InitTick>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	e001      	b.n	8001260 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800125c:	f7ff fd5a 	bl	8000d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001260:	79fb      	ldrb	r3, [r7, #7]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	2004000c 	.word	0x2004000c
 8001290:	20040794 	.word	0x20040794

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	20040794 	.word	0x20040794

080012ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff ffee 	bl	8001294 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d005      	beq.n	80012d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <HAL_Delay+0x44>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4413      	add	r3, r2
 80012d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d2:	bf00      	nop
 80012d4:	f7ff ffde 	bl	8001294 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d8f7      	bhi.n	80012d4 <HAL_Delay+0x28>
  {
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2004000c 	.word	0x2004000c

080012f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001310:	4013      	ands	r3, r2
 8001312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800131c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <__NVIC_SetPriorityGrouping+0x44>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <__NVIC_GetPriorityGrouping+0x18>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	f003 0307 	and.w	r3, r3, #7
}
 800134a:	4618      	mov	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	2b00      	cmp	r3, #0
 8001368:	db0b      	blt.n	8001382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	f003 021f 	and.w	r2, r3, #31
 8001370:	4907      	ldr	r1, [pc, #28]	@ (8001390 <__NVIC_EnableIRQ+0x38>)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	2001      	movs	r0, #1
 800137a:	fa00 f202 	lsl.w	r2, r0, r2
 800137e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000e100 	.word	0xe000e100

08001394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	6039      	str	r1, [r7, #0]
 800139e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	db0a      	blt.n	80013be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	490c      	ldr	r1, [pc, #48]	@ (80013e0 <__NVIC_SetPriority+0x4c>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	440b      	add	r3, r1
 80013b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013bc:	e00a      	b.n	80013d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4908      	ldr	r1, [pc, #32]	@ (80013e4 <__NVIC_SetPriority+0x50>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	3b04      	subs	r3, #4
 80013cc:	0112      	lsls	r2, r2, #4
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	440b      	add	r3, r1
 80013d2:	761a      	strb	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000e100 	.word	0xe000e100
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b089      	sub	sp, #36	@ 0x24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f1c3 0307 	rsb	r3, r3, #7
 8001402:	2b04      	cmp	r3, #4
 8001404:	bf28      	it	cs
 8001406:	2304      	movcs	r3, #4
 8001408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	2b06      	cmp	r3, #6
 8001410:	d902      	bls.n	8001418 <NVIC_EncodePriority+0x30>
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3b03      	subs	r3, #3
 8001416:	e000      	b.n	800141a <NVIC_EncodePriority+0x32>
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800141c:	f04f 32ff 	mov.w	r2, #4294967295
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43da      	mvns	r2, r3
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	401a      	ands	r2, r3
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	fa01 f303 	lsl.w	r3, r1, r3
 800143a:	43d9      	mvns	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	4313      	orrs	r3, r2
         );
}
 8001442:	4618      	mov	r0, r3
 8001444:	3724      	adds	r7, #36	@ 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ff4c 	bl	80012f4 <__NVIC_SetPriorityGrouping>
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001476:	f7ff ff61 	bl	800133c <__NVIC_GetPriorityGrouping>
 800147a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	6978      	ldr	r0, [r7, #20]
 8001482:	f7ff ffb1 	bl	80013e8 <NVIC_EncodePriority>
 8001486:	4602      	mov	r2, r0
 8001488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148c:	4611      	mov	r1, r2
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff80 	bl	8001394 <__NVIC_SetPriority>
}
 8001494:	bf00      	nop
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff54 	bl	8001358 <__NVIC_EnableIRQ>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c6:	e166      	b.n	8001796 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa01 f303 	lsl.w	r3, r1, r3
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 8158 	beq.w	8001790 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d005      	beq.n	80014f8 <HAL_GPIO_Init+0x40>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d130      	bne.n	800155a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800152e:	2201      	movs	r2, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	091b      	lsrs	r3, r3, #4
 8001544:	f003 0201 	and.w	r2, r3, #1
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	2b03      	cmp	r3, #3
 8001564:	d017      	beq.n	8001596 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d123      	bne.n	80015ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	08da      	lsrs	r2, r3, #3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	3208      	adds	r2, #8
 80015aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	220f      	movs	r2, #15
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	691a      	ldr	r2, [r3, #16]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	08da      	lsrs	r2, r3, #3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3208      	adds	r2, #8
 80015e4:	6939      	ldr	r1, [r7, #16]
 80015e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	2203      	movs	r2, #3
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0203 	and.w	r2, r3, #3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 80b2 	beq.w	8001790 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162c:	4b61      	ldr	r3, [pc, #388]	@ (80017b4 <HAL_GPIO_Init+0x2fc>)
 800162e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001630:	4a60      	ldr	r2, [pc, #384]	@ (80017b4 <HAL_GPIO_Init+0x2fc>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	6613      	str	r3, [r2, #96]	@ 0x60
 8001638:	4b5e      	ldr	r3, [pc, #376]	@ (80017b4 <HAL_GPIO_Init+0x2fc>)
 800163a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001644:	4a5c      	ldr	r2, [pc, #368]	@ (80017b8 <HAL_GPIO_Init+0x300>)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	220f      	movs	r2, #15
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800166e:	d02b      	beq.n	80016c8 <HAL_GPIO_Init+0x210>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a52      	ldr	r2, [pc, #328]	@ (80017bc <HAL_GPIO_Init+0x304>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d025      	beq.n	80016c4 <HAL_GPIO_Init+0x20c>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a51      	ldr	r2, [pc, #324]	@ (80017c0 <HAL_GPIO_Init+0x308>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d01f      	beq.n	80016c0 <HAL_GPIO_Init+0x208>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a50      	ldr	r2, [pc, #320]	@ (80017c4 <HAL_GPIO_Init+0x30c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d019      	beq.n	80016bc <HAL_GPIO_Init+0x204>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a4f      	ldr	r2, [pc, #316]	@ (80017c8 <HAL_GPIO_Init+0x310>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d013      	beq.n	80016b8 <HAL_GPIO_Init+0x200>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	4a4e      	ldr	r2, [pc, #312]	@ (80017cc <HAL_GPIO_Init+0x314>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00d      	beq.n	80016b4 <HAL_GPIO_Init+0x1fc>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a4d      	ldr	r2, [pc, #308]	@ (80017d0 <HAL_GPIO_Init+0x318>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d007      	beq.n	80016b0 <HAL_GPIO_Init+0x1f8>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a4c      	ldr	r2, [pc, #304]	@ (80017d4 <HAL_GPIO_Init+0x31c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_GPIO_Init+0x1f4>
 80016a8:	2307      	movs	r3, #7
 80016aa:	e00e      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016ac:	2308      	movs	r3, #8
 80016ae:	e00c      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016b0:	2306      	movs	r3, #6
 80016b2:	e00a      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016b4:	2305      	movs	r3, #5
 80016b6:	e008      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016b8:	2304      	movs	r3, #4
 80016ba:	e006      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016bc:	2303      	movs	r3, #3
 80016be:	e004      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_GPIO_Init+0x212>
 80016c8:	2300      	movs	r3, #0
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016da:	4937      	ldr	r1, [pc, #220]	@ (80017b8 <HAL_GPIO_Init+0x300>)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e8:	4b3b      	ldr	r3, [pc, #236]	@ (80017d8 <HAL_GPIO_Init+0x320>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800170c:	4a32      	ldr	r2, [pc, #200]	@ (80017d8 <HAL_GPIO_Init+0x320>)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001712:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_GPIO_Init+0x320>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001736:	4a28      	ldr	r2, [pc, #160]	@ (80017d8 <HAL_GPIO_Init+0x320>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800173c:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <HAL_GPIO_Init+0x320>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001760:	4a1d      	ldr	r2, [pc, #116]	@ (80017d8 <HAL_GPIO_Init+0x320>)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001766:	4b1c      	ldr	r3, [pc, #112]	@ (80017d8 <HAL_GPIO_Init+0x320>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800178a:	4a13      	ldr	r2, [pc, #76]	@ (80017d8 <HAL_GPIO_Init+0x320>)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f47f ae91 	bne.w	80014c8 <HAL_GPIO_Init+0x10>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000c00 	.word	0x48000c00
 80017c8:	48001000 	.word	0x48001000
 80017cc:	48001400 	.word	0x48001400
 80017d0:	48001800 	.word	0x48001800
 80017d4:	48001c00 	.word	0x48001c00
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4013      	ands	r3, r2
 8001824:	041a      	lsls	r2, r3, #16
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43d9      	mvns	r1, r3
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	400b      	ands	r3, r1
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800184a:	4b08      	ldr	r3, [pc, #32]	@ (800186c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4013      	ands	r3, r2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800185c:	88fb      	ldrh	r3, [r7, #6]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f916 	bl	8000a90 <HAL_GPIO_EXTI_Callback>
  }
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40010400 	.word	0x40010400

08001870 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af02      	add	r7, sp, #8
 8001876:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e101      	b.n	8001a86 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d106      	bne.n	800189c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fb4c 	bl	8000f34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 fff7 	bl	80048a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	7c1a      	ldrb	r2, [r3, #16]
 80018bc:	f88d 2000 	strb.w	r2, [sp]
 80018c0:	3304      	adds	r3, #4
 80018c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018c4:	f002 ffc0 	bl	8004848 <USB_CoreInit>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d005      	beq.n	80018da <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2202      	movs	r2, #2
 80018d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e0d5      	b.n	8001a86 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f002 ffef 	bl	80048c4 <USB_SetCurrentMode>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0c6      	b.n	8001a86 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e04a      	b.n	8001994 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	3315      	adds	r3, #21
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	4413      	add	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	3314      	adds	r3, #20
 8001922:	7bfa      	ldrb	r2, [r7, #15]
 8001924:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001926:	7bfa      	ldrb	r2, [r7, #15]
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	b298      	uxth	r0, r3
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	332e      	adds	r3, #46	@ 0x2e
 800193a:	4602      	mov	r2, r0
 800193c:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800193e:	7bfa      	ldrb	r2, [r7, #15]
 8001940:	6879      	ldr	r1, [r7, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	4413      	add	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	3318      	adds	r3, #24
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	440b      	add	r3, r1
 8001960:	331c      	adds	r3, #28
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001966:	7bfa      	ldrb	r2, [r7, #15]
 8001968:	6879      	ldr	r1, [r7, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	3320      	adds	r3, #32
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800197a:	7bfa      	ldrb	r2, [r7, #15]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	3324      	adds	r3, #36	@ 0x24
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	3301      	adds	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	791b      	ldrb	r3, [r3, #4]
 8001998:	7bfa      	ldrb	r2, [r7, #15]
 800199a:	429a      	cmp	r2, r3
 800199c:	d3af      	bcc.n	80018fe <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	e044      	b.n	8001a2e <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019a4:	7bfa      	ldrb	r2, [r7, #15]
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	4613      	mov	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	440b      	add	r3, r1
 80019b2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	791b      	ldrb	r3, [r3, #4]
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3b5      	bcc.n	80019a4 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7c1a      	ldrb	r2, [r3, #16]
 8001a40:	f88d 2000 	strb.w	r2, [sp]
 8001a44:	3304      	adds	r3, #4
 8001a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a48:	f002 ff88 	bl	800495c <USB_DevInit>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2202      	movs	r2, #2
 8001a56:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e013      	b.n	8001a86 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7b1b      	ldrb	r3, [r3, #12]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d102      	bne.n	8001a7a <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 f80a 	bl	8001a8e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f003 f92d 	bl	8004cde <USB_DevDisconnect>

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	f043 0303 	orr.w	r3, r3, #3
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001adc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ae8:	d102      	bne.n	8001af0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001aea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aee:	e00b      	b.n	8001b08 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001af0:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001afe:	d102      	bne.n	8001b06 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b04:	e000      	b.n	8001b08 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001b06:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40007000 	.word	0x40007000

08001b18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d141      	bne.n	8001baa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b26:	4b4b      	ldr	r3, [pc, #300]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b32:	d131      	bne.n	8001b98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b34:	4b47      	ldr	r3, [pc, #284]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b3a:	4a46      	ldr	r2, [pc, #280]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b44:	4b43      	ldr	r3, [pc, #268]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b4c:	4a41      	ldr	r2, [pc, #260]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b54:	4b40      	ldr	r3, [pc, #256]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2232      	movs	r2, #50	@ 0x32
 8001b5a:	fb02 f303 	mul.w	r3, r2, r3
 8001b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	0c9b      	lsrs	r3, r3, #18
 8001b66:	3301      	adds	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6a:	e002      	b.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b72:	4b38      	ldr	r3, [pc, #224]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b7e:	d102      	bne.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f2      	bne.n	8001b6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b86:	4b33      	ldr	r3, [pc, #204]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b92:	d158      	bne.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e057      	b.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b98:	4b2e      	ldr	r3, [pc, #184]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ba4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ba8:	e04d      	b.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bb0:	d141      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bb2:	4b28      	ldr	r3, [pc, #160]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bbe:	d131      	bne.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc0:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bc6:	4a23      	ldr	r2, [pc, #140]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bcc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd0:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2232      	movs	r2, #50	@ 0x32
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	4a1c      	ldr	r2, [pc, #112]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	0c9b      	lsrs	r3, r3, #18
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf6:	e002      	b.n	8001bfe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0a:	d102      	bne.n	8001c12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f2      	bne.n	8001bf8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1e:	d112      	bne.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e011      	b.n	8001c48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c34:	e007      	b.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c3e:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c44:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40007000 	.word	0x40007000
 8001c58:	20040004 	.word	0x20040004
 8001c5c:	431bde83 	.word	0x431bde83

08001c60 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <HAL_PWREx_EnableVddUSB+0x1c>)
 8001c6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c6e:	6053      	str	r3, [r2, #4]
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	40007000 	.word	0x40007000

08001c80 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001c84:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c8e:	6053      	str	r3, [r2, #4]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40007000 	.word	0x40007000

08001ca0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d102      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f000 bc08 	b.w	80024c4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb4:	4b96      	ldr	r3, [pc, #600]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cbe:	4b94      	ldr	r3, [pc, #592]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80e4 	beq.w	8001e9e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_RCC_OscConfig+0x4c>
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b0c      	cmp	r3, #12
 8001ce0:	f040 808b 	bne.w	8001dfa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	f040 8087 	bne.w	8001dfa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cec:	4b88      	ldr	r3, [pc, #544]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_OscConfig+0x64>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e3df      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	4b81      	ldr	r3, [pc, #516]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <HAL_RCC_OscConfig+0x7e>
 8001d14:	4b7e      	ldr	r3, [pc, #504]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d1c:	e005      	b.n	8001d2a <HAL_RCC_OscConfig+0x8a>
 8001d1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d223      	bcs.n	8001d76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fdfe 	bl	8002934 <RCC_SetFlashLatencyFromMSIRange>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e3c0      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d42:	4b73      	ldr	r3, [pc, #460]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a72      	ldr	r2, [pc, #456]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b70      	ldr	r3, [pc, #448]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	496d      	ldr	r1, [pc, #436]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d60:	4b6b      	ldr	r3, [pc, #428]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	021b      	lsls	r3, r3, #8
 8001d6e:	4968      	ldr	r1, [pc, #416]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
 8001d74:	e025      	b.n	8001dc2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d76:	4b66      	ldr	r3, [pc, #408]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a65      	ldr	r2, [pc, #404]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	f043 0308 	orr.w	r3, r3, #8
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b63      	ldr	r3, [pc, #396]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4960      	ldr	r1, [pc, #384]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d94:	4b5e      	ldr	r3, [pc, #376]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	495b      	ldr	r1, [pc, #364]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 fdbe 	bl	8002934 <RCC_SetFlashLatencyFromMSIRange>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e380      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dc2:	f000 fcc1 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b51      	ldr	r3, [pc, #324]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	4950      	ldr	r1, [pc, #320]	@ (8001f14 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	5ccb      	ldrb	r3, [r1, r3]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	4a4e      	ldr	r2, [pc, #312]	@ (8001f18 <HAL_RCC_OscConfig+0x278>)
 8001de0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001de2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f1c <HAL_RCC_OscConfig+0x27c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f930 	bl	800104c <HAL_InitTick>
 8001dec:	4603      	mov	r3, r0
 8001dee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d052      	beq.n	8001e9c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	e364      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d032      	beq.n	8001e68 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e02:	4b43      	ldr	r3, [pc, #268]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a42      	ldr	r2, [pc, #264]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff fa41 	bl	8001294 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e16:	f7ff fa3d 	bl	8001294 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e34d      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e28:	4b39      	ldr	r3, [pc, #228]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e34:	4b36      	ldr	r3, [pc, #216]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a35      	ldr	r2, [pc, #212]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b33      	ldr	r3, [pc, #204]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	4930      	ldr	r1, [pc, #192]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e52:	4b2f      	ldr	r3, [pc, #188]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	492b      	ldr	r1, [pc, #172]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
 8001e66:	e01a      	b.n	8001e9e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a28      	ldr	r2, [pc, #160]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fa0e 	bl	8001294 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fa0a 	bl	8001294 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e31a      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x1dc>
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d073      	beq.n	8001f92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_OscConfig+0x21c>
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d10b      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	4b14      	ldr	r3, [pc, #80]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d063      	beq.n	8001f90 <HAL_RCC_OscConfig+0x2f0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d15f      	bne.n	8001f90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e2f7      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001edc:	d106      	bne.n	8001eec <HAL_RCC_OscConfig+0x24c>
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	e025      	b.n	8001f38 <HAL_RCC_OscConfig+0x298>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ef4:	d114      	bne.n	8001f20 <HAL_RCC_OscConfig+0x280>
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a02      	ldr	r2, [pc, #8]	@ (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e013      	b.n	8001f38 <HAL_RCC_OscConfig+0x298>
 8001f10:	40021000 	.word	0x40021000
 8001f14:	0800898c 	.word	0x0800898c
 8001f18:	20040004 	.word	0x20040004
 8001f1c:	20040008 	.word	0x20040008
 8001f20:	4ba0      	ldr	r3, [pc, #640]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a9f      	ldr	r2, [pc, #636]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b9d      	ldr	r3, [pc, #628]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a9c      	ldr	r2, [pc, #624]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f9a8 	bl	8001294 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff f9a4 	bl	8001294 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	@ 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e2b4      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f5a:	4b92      	ldr	r3, [pc, #584]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x2a8>
 8001f66:	e014      	b.n	8001f92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff f994 	bl	8001294 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f70:	f7ff f990 	bl	8001294 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	@ 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e2a0      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f82:	4b88      	ldr	r3, [pc, #544]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x2d0>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d060      	beq.n	8002060 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x310>
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d119      	bne.n	8001fde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d116      	bne.n	8001fde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fb0:	4b7c      	ldr	r3, [pc, #496]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d005      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x328>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e27d      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc8:	4b76      	ldr	r3, [pc, #472]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	4973      	ldr	r1, [pc, #460]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fdc:	e040      	b.n	8002060 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d023      	beq.n	800202e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe6:	4b6f      	ldr	r3, [pc, #444]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6e      	ldr	r2, [pc, #440]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7ff f94f 	bl	8001294 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7ff f94b 	bl	8001294 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e25b      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800200c:	4b65      	ldr	r3, [pc, #404]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b62      	ldr	r3, [pc, #392]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	061b      	lsls	r3, r3, #24
 8002026:	495f      	ldr	r1, [pc, #380]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]
 800202c:	e018      	b.n	8002060 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b5d      	ldr	r3, [pc, #372]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a5c      	ldr	r2, [pc, #368]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203a:	f7ff f92b 	bl	8001294 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002042:	f7ff f927 	bl	8001294 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e237      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002054:	4b53      	ldr	r3, [pc, #332]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f0      	bne.n	8002042 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b00      	cmp	r3, #0
 800206a:	d03c      	beq.n	80020e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d01c      	beq.n	80020ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002074:	4b4b      	ldr	r3, [pc, #300]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800207a:	4a4a      	ldr	r2, [pc, #296]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff f906 	bl	8001294 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208c:	f7ff f902 	bl	8001294 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e212      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800209e:	4b41      	ldr	r3, [pc, #260]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 80020a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0ef      	beq.n	800208c <HAL_RCC_OscConfig+0x3ec>
 80020ac:	e01b      	b.n	80020e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ae:	4b3d      	ldr	r3, [pc, #244]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 80020b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020b4:	4a3b      	ldr	r2, [pc, #236]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 80020b6:	f023 0301 	bic.w	r3, r3, #1
 80020ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020be:	f7ff f8e9 	bl	8001294 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c6:	f7ff f8e5 	bl	8001294 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e1f5      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d8:	4b32      	ldr	r3, [pc, #200]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 80020da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1ef      	bne.n	80020c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80a6 	beq.w	8002240 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f4:	2300      	movs	r3, #0
 80020f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020f8:	4b2a      	ldr	r3, [pc, #168]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10d      	bne.n	8002120 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002104:	4b27      	ldr	r3, [pc, #156]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002108:	4a26      	ldr	r2, [pc, #152]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 800210a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800210e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002110:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211c:	2301      	movs	r3, #1
 800211e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002120:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <HAL_RCC_OscConfig+0x508>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d118      	bne.n	800215e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800212c:	4b1e      	ldr	r3, [pc, #120]	@ (80021a8 <HAL_RCC_OscConfig+0x508>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1d      	ldr	r2, [pc, #116]	@ (80021a8 <HAL_RCC_OscConfig+0x508>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002136:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002138:	f7ff f8ac 	bl	8001294 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002140:	f7ff f8a8 	bl	8001294 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e1b8      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002152:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <HAL_RCC_OscConfig+0x508>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d108      	bne.n	8002178 <HAL_RCC_OscConfig+0x4d8>
 8002166:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216c:	4a0d      	ldr	r2, [pc, #52]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002176:	e029      	b.n	80021cc <HAL_RCC_OscConfig+0x52c>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b05      	cmp	r3, #5
 800217e:	d115      	bne.n	80021ac <HAL_RCC_OscConfig+0x50c>
 8002180:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002186:	4a07      	ldr	r2, [pc, #28]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002188:	f043 0304 	orr.w	r3, r3, #4
 800218c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002190:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002196:	4a03      	ldr	r2, [pc, #12]	@ (80021a4 <HAL_RCC_OscConfig+0x504>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021a0:	e014      	b.n	80021cc <HAL_RCC_OscConfig+0x52c>
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40007000 	.word	0x40007000
 80021ac:	4b9d      	ldr	r3, [pc, #628]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b2:	4a9c      	ldr	r2, [pc, #624]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021bc:	4b99      	ldr	r3, [pc, #612]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c2:	4a98      	ldr	r2, [pc, #608]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80021c4:	f023 0304 	bic.w	r3, r3, #4
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d016      	beq.n	8002202 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7ff f85e 	bl	8001294 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7ff f85a 	bl	8001294 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e168      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021f2:	4b8c      	ldr	r3, [pc, #560]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0ed      	beq.n	80021dc <HAL_RCC_OscConfig+0x53c>
 8002200:	e015      	b.n	800222e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7ff f847 	bl	8001294 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7ff f843 	bl	8001294 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e151      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002220:	4b80      	ldr	r3, [pc, #512]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ed      	bne.n	800220a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222e:	7ffb      	ldrb	r3, [r7, #31]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d105      	bne.n	8002240 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002234:	4b7b      	ldr	r3, [pc, #492]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002238:	4a7a      	ldr	r2, [pc, #488]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 800223a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800223e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0320 	and.w	r3, r3, #32
 8002248:	2b00      	cmp	r3, #0
 800224a:	d03c      	beq.n	80022c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	2b00      	cmp	r3, #0
 8002252:	d01c      	beq.n	800228e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002254:	4b73      	ldr	r3, [pc, #460]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002256:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800225a:	4a72      	ldr	r2, [pc, #456]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7ff f816 	bl	8001294 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800226c:	f7ff f812 	bl	8001294 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e122      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800227e:	4b69      	ldr	r3, [pc, #420]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002280:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0ef      	beq.n	800226c <HAL_RCC_OscConfig+0x5cc>
 800228c:	e01b      	b.n	80022c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800228e:	4b65      	ldr	r3, [pc, #404]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002290:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002294:	4a63      	ldr	r2, [pc, #396]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229e:	f7fe fff9 	bl	8001294 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a6:	f7fe fff5 	bl	8001294 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e105      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80022ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1ef      	bne.n	80022a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80f9 	beq.w	80024c2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	f040 80cf 	bne.w	8002478 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022da:	4b52      	ldr	r3, [pc, #328]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 0203 	and.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d12c      	bne.n	8002348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f8:	3b01      	subs	r3, #1
 80022fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d123      	bne.n	8002348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800230a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d11b      	bne.n	8002348 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d113      	bne.n	8002348 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	3b01      	subs	r3, #1
 800232e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d109      	bne.n	8002348 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	085b      	lsrs	r3, r3, #1
 8002340:	3b01      	subs	r3, #1
 8002342:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d071      	beq.n	800242c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d068      	beq.n	8002420 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800234e:	4b35      	ldr	r3, [pc, #212]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800235a:	4b32      	ldr	r3, [pc, #200]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0ac      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800236a:	4b2e      	ldr	r3, [pc, #184]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2d      	ldr	r2, [pc, #180]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002370:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002374:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002376:	f7fe ff8d 	bl	8001294 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7fe ff89 	bl	8001294 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e099      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002390:	4b24      	ldr	r3, [pc, #144]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800239c:	4b21      	ldr	r3, [pc, #132]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	4b21      	ldr	r3, [pc, #132]	@ (8002428 <HAL_RCC_OscConfig+0x788>)
 80023a2:	4013      	ands	r3, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023ac:	3a01      	subs	r2, #1
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	4311      	orrs	r1, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023b6:	0212      	lsls	r2, r2, #8
 80023b8:	4311      	orrs	r1, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023be:	0852      	lsrs	r2, r2, #1
 80023c0:	3a01      	subs	r2, #1
 80023c2:	0552      	lsls	r2, r2, #21
 80023c4:	4311      	orrs	r1, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023ca:	0852      	lsrs	r2, r2, #1
 80023cc:	3a01      	subs	r2, #1
 80023ce:	0652      	lsls	r2, r2, #25
 80023d0:	4311      	orrs	r1, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023d6:	06d2      	lsls	r2, r2, #27
 80023d8:	430a      	orrs	r2, r1
 80023da:	4912      	ldr	r1, [pc, #72]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023e0:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80023e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 80023f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023f8:	f7fe ff4c 	bl	8001294 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe ff48 	bl	8001294 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e058      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	4b04      	ldr	r3, [pc, #16]	@ (8002424 <HAL_RCC_OscConfig+0x784>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800241e:	e050      	b.n	80024c2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e04f      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
 8002424:	40021000 	.word	0x40021000
 8002428:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242c:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d144      	bne.n	80024c2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002438:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a23      	ldr	r2, [pc, #140]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002442:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002444:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	4a20      	ldr	r2, [pc, #128]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 800244a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800244e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002450:	f7fe ff20 	bl	8001294 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7fe ff1c 	bl	8001294 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e02c      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246a:	4b18      	ldr	r3, [pc, #96]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x7b8>
 8002476:	e024      	b.n	80024c2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d01f      	beq.n	80024be <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247e:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a12      	ldr	r2, [pc, #72]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 8002484:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f7fe ff03 	bl	8001294 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002492:	f7fe feff 	bl	8001294 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e00f      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a4:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1f0      	bne.n	8002492 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	4905      	ldr	r1, [pc, #20]	@ (80024cc <HAL_RCC_OscConfig+0x82c>)
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_RCC_OscConfig+0x830>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	60cb      	str	r3, [r1, #12]
 80024bc:	e001      	b.n	80024c2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	feeefffc 	.word	0xfeeefffc

080024d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e11d      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b90      	ldr	r3, [pc, #576]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d910      	bls.n	800251c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b8d      	ldr	r3, [pc, #564]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 020f 	bic.w	r2, r3, #15
 8002502:	498b      	ldr	r1, [pc, #556]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b89      	ldr	r3, [pc, #548]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e105      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d010      	beq.n	800254a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b81      	ldr	r3, [pc, #516]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002534:	429a      	cmp	r2, r3
 8002536:	d908      	bls.n	800254a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002538:	4b7e      	ldr	r3, [pc, #504]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	497b      	ldr	r1, [pc, #492]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d079      	beq.n	800264a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d11e      	bne.n	800259c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	4b75      	ldr	r3, [pc, #468]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e0dc      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800256e:	f000 fa3b 	bl	80029e8 <RCC_GetSysClockFreqFromPLLSource>
 8002572:	4603      	mov	r3, r0
 8002574:	4a70      	ldr	r2, [pc, #448]	@ (8002738 <HAL_RCC_ClockConfig+0x264>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d946      	bls.n	8002608 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800257a:	4b6e      	ldr	r3, [pc, #440]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d140      	bne.n	8002608 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002586:	4b6b      	ldr	r3, [pc, #428]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800258e:	4a69      	ldr	r2, [pc, #420]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002590:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002594:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002596:	2380      	movs	r3, #128	@ 0x80
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	e035      	b.n	8002608 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a4:	4b63      	ldr	r3, [pc, #396]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d115      	bne.n	80025dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0b9      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025bc:	4b5d      	ldr	r3, [pc, #372]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0ad      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025cc:	4b59      	ldr	r3, [pc, #356]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0a5      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80025dc:	f000 f8b4 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a55      	ldr	r2, [pc, #340]	@ (8002738 <HAL_RCC_ClockConfig+0x264>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d90f      	bls.n	8002608 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80025e8:	4b52      	ldr	r3, [pc, #328]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002602:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002608:	4b4a      	ldr	r3, [pc, #296]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 0203 	bic.w	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4947      	ldr	r1, [pc, #284]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800261a:	f7fe fe3b 	bl	8001294 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002620:	e00a      	b.n	8002638 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002622:	f7fe fe37 	bl	8001294 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002630:	4293      	cmp	r3, r2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e077      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002638:	4b3e      	ldr	r3, [pc, #248]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 020c 	and.w	r2, r3, #12
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	429a      	cmp	r2, r3
 8002648:	d1eb      	bne.n	8002622 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b80      	cmp	r3, #128	@ 0x80
 800264e:	d105      	bne.n	800265c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002650:	4b38      	ldr	r3, [pc, #224]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	4a37      	ldr	r2, [pc, #220]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002656:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800265a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d010      	beq.n	800268a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	4b31      	ldr	r3, [pc, #196]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002674:	429a      	cmp	r2, r3
 8002676:	d208      	bcs.n	800268a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002678:	4b2e      	ldr	r3, [pc, #184]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	492b      	ldr	r1, [pc, #172]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800268a:	4b29      	ldr	r3, [pc, #164]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d210      	bcs.n	80026ba <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002698:	4b25      	ldr	r3, [pc, #148]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 020f 	bic.w	r2, r3, #15
 80026a0:	4923      	ldr	r1, [pc, #140]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a8:	4b21      	ldr	r3, [pc, #132]	@ (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 030f 	and.w	r3, r3, #15
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e036      	b.n	8002728 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4918      	ldr	r1, [pc, #96]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e4:	4b13      	ldr	r3, [pc, #76]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4910      	ldr	r1, [pc, #64]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f8:	f000 f826 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	490c      	ldr	r1, [pc, #48]	@ (800273c <HAL_RCC_ClockConfig+0x268>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
 8002714:	4a0a      	ldr	r2, [pc, #40]	@ (8002740 <HAL_RCC_ClockConfig+0x26c>)
 8002716:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002718:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <HAL_RCC_ClockConfig+0x270>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fc95 	bl	800104c <HAL_InitTick>
 8002722:	4603      	mov	r3, r0
 8002724:	73fb      	strb	r3, [r7, #15]

  return status;
 8002726:	7bfb      	ldrb	r3, [r7, #15]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40022000 	.word	0x40022000
 8002734:	40021000 	.word	0x40021000
 8002738:	04c4b400 	.word	0x04c4b400
 800273c:	0800898c 	.word	0x0800898c
 8002740:	20040004 	.word	0x20040004
 8002744:	20040008 	.word	0x20040008

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b480      	push	{r7}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	2300      	movs	r3, #0
 8002754:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002756:	4b3e      	ldr	r3, [pc, #248]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002760:	4b3b      	ldr	r3, [pc, #236]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x34>
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d121      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d11e      	bne.n	80027ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800277c:	4b34      	ldr	r3, [pc, #208]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002788:	4b31      	ldr	r3, [pc, #196]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800278a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800278e:	0a1b      	lsrs	r3, r3, #8
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	61fb      	str	r3, [r7, #28]
 8002796:	e005      	b.n	80027a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002798:	4b2d      	ldr	r3, [pc, #180]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002854 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d102      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027c0:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x110>)
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	e004      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027cc:	4b23      	ldr	r3, [pc, #140]	@ (800285c <HAL_RCC_GetSysClockFreq+0x114>)
 80027ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d134      	bne.n	8002840 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d003      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0xa6>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d003      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0xac>
 80027ec:	e005      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x110>)
 80027f0:	617b      	str	r3, [r7, #20]
      break;
 80027f2:	e005      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027f4:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_RCC_GetSysClockFreq+0x114>)
 80027f6:	617b      	str	r3, [r7, #20]
      break;
 80027f8:	e002      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	617b      	str	r3, [r7, #20]
      break;
 80027fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002800:	4b13      	ldr	r3, [pc, #76]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3301      	adds	r3, #1
 800280c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	fb03 f202 	mul.w	r2, r3, r2
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	fbb2 f3f3 	udiv	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <HAL_RCC_GetSysClockFreq+0x108>)
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	0e5b      	lsrs	r3, r3, #25
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	3301      	adds	r3, #1
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	fbb2 f3f3 	udiv	r3, r2, r3
 800283e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002840:	69bb      	ldr	r3, [r7, #24]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	@ 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	080089a4 	.word	0x080089a4
 8002858:	00f42400 	.word	0x00f42400
 800285c:	007a1200 	.word	0x007a1200

08002860 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002864:	4b03      	ldr	r3, [pc, #12]	@ (8002874 <HAL_RCC_GetHCLKFreq+0x14>)
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20040004 	.word	0x20040004

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800287c:	f7ff fff0 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4904      	ldr	r1, [pc, #16]	@ (80028a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40021000 	.word	0x40021000
 80028a0:	0800899c 	.word	0x0800899c

080028a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028a8:	f7ff ffda 	bl	8002860 <HAL_RCC_GetHCLKFreq>
 80028ac:	4602      	mov	r2, r0
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0adb      	lsrs	r3, r3, #11
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4904      	ldr	r1, [pc, #16]	@ (80028cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	0800899c 	.word	0x0800899c

080028d0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	220f      	movs	r2, #15
 80028de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80028e0:	4b12      	ldr	r3, [pc, #72]	@ (800292c <HAL_RCC_GetClockConfig+0x5c>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0203 	and.w	r2, r3, #3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80028ec:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <HAL_RCC_GetClockConfig+0x5c>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80028f8:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <HAL_RCC_GetClockConfig+0x5c>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <HAL_RCC_GetClockConfig+0x5c>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	08db      	lsrs	r3, r3, #3
 800290a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002912:	4b07      	ldr	r3, [pc, #28]	@ (8002930 <HAL_RCC_GetClockConfig+0x60>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 020f 	and.w	r2, r3, #15
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	601a      	str	r2, [r3, #0]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000
 8002930:	40022000 	.word	0x40022000

08002934 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800293c:	2300      	movs	r3, #0
 800293e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002940:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800294c:	f7ff f8c4 	bl	8001ad8 <HAL_PWREx_GetVoltageRange>
 8002950:	6178      	str	r0, [r7, #20]
 8002952:	e014      	b.n	800297e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002954:	4b22      	ldr	r3, [pc, #136]	@ (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002958:	4a21      	ldr	r2, [pc, #132]	@ (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800295a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800295e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002960:	4b1f      	ldr	r3, [pc, #124]	@ (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002964:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800296c:	f7ff f8b4 	bl	8001ad8 <HAL_PWREx_GetVoltageRange>
 8002970:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002976:	4a1a      	ldr	r2, [pc, #104]	@ (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002978:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800297c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002984:	d10b      	bne.n	800299e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b80      	cmp	r3, #128	@ 0x80
 800298a:	d913      	bls.n	80029b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002990:	d902      	bls.n	8002998 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002992:	2302      	movs	r3, #2
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	e00d      	b.n	80029b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002998:	2301      	movs	r3, #1
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	e00a      	b.n	80029b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80029a2:	d902      	bls.n	80029aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80029a4:	2302      	movs	r3, #2
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	e004      	b.n	80029b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b70      	cmp	r3, #112	@ 0x70
 80029ae:	d101      	bne.n	80029b4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029b0:	2301      	movs	r3, #1
 80029b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029b4:	4b0b      	ldr	r3, [pc, #44]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 020f 	bic.w	r2, r3, #15
 80029bc:	4909      	ldr	r1, [pc, #36]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029c4:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d001      	beq.n	80029d6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40022000 	.word	0x40022000

080029e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ee:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d00b      	beq.n	8002a16 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d825      	bhi.n	8002a50 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d008      	beq.n	8002a1c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d11f      	bne.n	8002a50 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002a10:	4b25      	ldr	r3, [pc, #148]	@ (8002aa8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002a12:	613b      	str	r3, [r7, #16]
    break;
 8002a14:	e01f      	b.n	8002a56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002a16:	4b25      	ldr	r3, [pc, #148]	@ (8002aac <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002a18:	613b      	str	r3, [r7, #16]
    break;
 8002a1a:	e01c      	b.n	8002a56 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a1c:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d107      	bne.n	8002a38 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a28:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	e005      	b.n	8002a44 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a38:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002a44:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	613b      	str	r3, [r7, #16]
    break;
 8002a4e:	e002      	b.n	8002a56 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	613b      	str	r3, [r7, #16]
    break;
 8002a54:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a56:	4b13      	ldr	r3, [pc, #76]	@ (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	091b      	lsrs	r3, r3, #4
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	3301      	adds	r3, #1
 8002a62:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	fb03 f202 	mul.w	r2, r3, r2
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	@ (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0e5b      	lsrs	r3, r3, #25
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	3301      	adds	r3, #1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002a96:	683b      	ldr	r3, [r7, #0]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	007a1200 	.word	0x007a1200
 8002ab0:	080089a4 	.word	0x080089a4

08002ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002abc:	2300      	movs	r3, #0
 8002abe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d040      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ad4:	2b80      	cmp	r3, #128	@ 0x80
 8002ad6:	d02a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ad8:	2b80      	cmp	r3, #128	@ 0x80
 8002ada:	d825      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002adc:	2b60      	cmp	r3, #96	@ 0x60
 8002ade:	d026      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002ae0:	2b60      	cmp	r3, #96	@ 0x60
 8002ae2:	d821      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ae4:	2b40      	cmp	r3, #64	@ 0x40
 8002ae6:	d006      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002ae8:	2b40      	cmp	r3, #64	@ 0x40
 8002aea:	d81d      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d010      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002af4:	e018      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002af6:	4b89      	ldr	r3, [pc, #548]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	4a88      	ldr	r2, [pc, #544]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b00:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b02:	e015      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fb02 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b14:	e00c      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3320      	adds	r3, #32
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fbed 	bl	80032fc <RCCEx_PLLSAI2_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b26:	e003      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	74fb      	strb	r3, [r7, #19]
      break;
 8002b2c:	e000      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002b2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b30:	7cfb      	ldrb	r3, [r7, #19]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10b      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b36:	4b79      	ldr	r3, [pc, #484]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b38:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002b3c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b44:	4975      	ldr	r1, [pc, #468]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002b4c:	e001      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d047      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b66:	d030      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002b68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b6c:	d82a      	bhi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002b6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b72:	d02a      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002b74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b78:	d824      	bhi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002b7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002b80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b84:	d81e      	bhi.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002b8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b8e:	d010      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002b90:	e018      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b92:	4b62      	ldr	r3, [pc, #392]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	4a61      	ldr	r2, [pc, #388]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b9e:	e015      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fab4 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8002bac:	4603      	mov	r3, r0
 8002bae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bb0:	e00c      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3320      	adds	r3, #32
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fb9f 	bl	80032fc <RCCEx_PLLSAI2_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bc2:	e003      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	74fb      	strb	r3, [r7, #19]
      break;
 8002bc8:	e000      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10b      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bd2:	4b52      	ldr	r3, [pc, #328]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002bd8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be0:	494e      	ldr	r1, [pc, #312]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002be8:	e001      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 809f 	beq.w	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c00:	4b46      	ldr	r3, [pc, #280]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002c10:	2300      	movs	r3, #0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00d      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c16:	4b41      	ldr	r3, [pc, #260]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1a:	4a40      	ldr	r2, [pc, #256]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c22:	4b3e      	ldr	r3, [pc, #248]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	60bb      	str	r3, [r7, #8]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c32:	4b3b      	ldr	r3, [pc, #236]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a3a      	ldr	r2, [pc, #232]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c3e:	f7fe fb29 	bl	8001294 <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c44:	e009      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c46:	f7fe fb25 	bl	8001294 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d902      	bls.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	74fb      	strb	r3, [r7, #19]
        break;
 8002c58:	e005      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c5a:	4b31      	ldr	r3, [pc, #196]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0ef      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002c66:	7cfb      	ldrb	r3, [r7, #19]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d15b      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c76:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d01f      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d019      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c8a:	4b24      	ldr	r3, [pc, #144]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c94:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c96:	4b21      	ldr	r3, [pc, #132]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cac:	4a1b      	ldr	r2, [pc, #108]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cb6:	4a19      	ldr	r2, [pc, #100]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d016      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fae4 	bl	8001294 <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cce:	e00b      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd0:	f7fe fae0 	bl	8001294 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d902      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	74fb      	strb	r3, [r7, #19]
            break;
 8002ce6:	e006      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0ec      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002cf6:	7cfb      	ldrb	r3, [r7, #19]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cfc:	4b07      	ldr	r3, [pc, #28]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d02:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0c:	4903      	ldr	r1, [pc, #12]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d14:	e008      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	74bb      	strb	r3, [r7, #18]
 8002d1a:	e005      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d28:	7c7b      	ldrb	r3, [r7, #17]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2e:	4ba0      	ldr	r3, [pc, #640]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d32:	4a9f      	ldr	r2, [pc, #636]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d34:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d38:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d46:	4b9a      	ldr	r3, [pc, #616]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4c:	f023 0203 	bic.w	r2, r3, #3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d54:	4996      	ldr	r1, [pc, #600]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d68:	4b91      	ldr	r3, [pc, #580]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f023 020c 	bic.w	r2, r3, #12
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	498e      	ldr	r1, [pc, #568]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d8a:	4b89      	ldr	r3, [pc, #548]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d90:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d98:	4985      	ldr	r1, [pc, #532]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dac:	4b80      	ldr	r3, [pc, #512]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002db2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dba:	497d      	ldr	r1, [pc, #500]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00a      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dce:	4b78      	ldr	r3, [pc, #480]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ddc:	4974      	ldr	r1, [pc, #464]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002df0:	4b6f      	ldr	r3, [pc, #444]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dfe:	496c      	ldr	r1, [pc, #432]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e12:	4b67      	ldr	r3, [pc, #412]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e18:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e20:	4963      	ldr	r1, [pc, #396]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e34:	4b5e      	ldr	r3, [pc, #376]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e42:	495b      	ldr	r1, [pc, #364]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e56:	4b56      	ldr	r3, [pc, #344]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e64:	4952      	ldr	r1, [pc, #328]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e78:	4b4d      	ldr	r3, [pc, #308]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	494a      	ldr	r1, [pc, #296]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e9a:	4b45      	ldr	r3, [pc, #276]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea8:	4941      	ldr	r1, [pc, #260]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ebc:	4b3c      	ldr	r3, [pc, #240]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ec2:	f023 0203 	bic.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eca:	4939      	ldr	r1, [pc, #228]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d028      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ede:	4b34      	ldr	r3, [pc, #208]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eec:	4930      	ldr	r1, [pc, #192]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002efc:	d106      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002efe:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f08:	60d3      	str	r3, [r2, #12]
 8002f0a:	e011      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 f8f9 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f26:	7cfb      	ldrb	r3, [r7, #19]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d04d      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f44:	d108      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002f46:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f4c:	4a18      	ldr	r2, [pc, #96]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f52:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002f56:	e012      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002f58:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f5e:	4a14      	ldr	r2, [pc, #80]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f64:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f76:	490e      	ldr	r1, [pc, #56]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f86:	d106      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f88:	4b09      	ldr	r3, [pc, #36]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4a08      	ldr	r2, [pc, #32]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f92:	60d3      	str	r3, [r2, #12]
 8002f94:	e020      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f9e:	d109      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fa0:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a02      	ldr	r2, [pc, #8]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002faa:	60d3      	str	r3, [r2, #12]
 8002fac:	e014      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fb8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 f8a5 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002fd4:	7cfb      	ldrb	r3, [r7, #19]
 8002fd6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d028      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fe4:	4b4a      	ldr	r3, [pc, #296]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ff2:	4947      	ldr	r1, [pc, #284]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003002:	d106      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003004:	4b42      	ldr	r3, [pc, #264]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a41      	ldr	r2, [pc, #260]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800300a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800300e:	60d3      	str	r3, [r2, #12]
 8003010:	e011      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003016:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800301a:	d10c      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	2101      	movs	r1, #1
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f876 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800302c:	7cfb      	ldrb	r3, [r7, #19]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003032:	7cfb      	ldrb	r3, [r7, #19]
 8003034:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01e      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003042:	4b33      	ldr	r3, [pc, #204]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003048:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003052:	492f      	ldr	r1, [pc, #188]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003064:	d10c      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3304      	adds	r3, #4
 800306a:	2102      	movs	r1, #2
 800306c:	4618      	mov	r0, r3
 800306e:	f000 f851 	bl	8003114 <RCCEx_PLLSAI1_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800307c:	7cfb      	ldrb	r3, [r7, #19]
 800307e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00b      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800308c:	4b20      	ldr	r3, [pc, #128]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800308e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003092:	f023 0204 	bic.w	r2, r3, #4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800309c:	491c      	ldr	r1, [pc, #112]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00b      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030b0:	4b17      	ldr	r3, [pc, #92]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030b6:	f023 0218 	bic.w	r2, r3, #24
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c0:	4913      	ldr	r1, [pc, #76]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d017      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80030d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030e4:	490a      	ldr	r1, [pc, #40]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030f6:	d105      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f8:	4b05      	ldr	r3, [pc, #20]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a04      	ldr	r2, [pc, #16]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003102:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003104:	7cbb      	ldrb	r3, [r7, #18]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000

08003114 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003122:	4b72      	ldr	r3, [pc, #456]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00e      	beq.n	800314c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800312e:	4b6f      	ldr	r3, [pc, #444]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0203 	and.w	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d103      	bne.n	8003146 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
       ||
 8003142:	2b00      	cmp	r3, #0
 8003144:	d142      	bne.n	80031cc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	e03f      	b.n	80031cc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d018      	beq.n	8003186 <RCCEx_PLLSAI1_Config+0x72>
 8003154:	2b03      	cmp	r3, #3
 8003156:	d825      	bhi.n	80031a4 <RCCEx_PLLSAI1_Config+0x90>
 8003158:	2b01      	cmp	r3, #1
 800315a:	d002      	beq.n	8003162 <RCCEx_PLLSAI1_Config+0x4e>
 800315c:	2b02      	cmp	r3, #2
 800315e:	d009      	beq.n	8003174 <RCCEx_PLLSAI1_Config+0x60>
 8003160:	e020      	b.n	80031a4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003162:	4b62      	ldr	r3, [pc, #392]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d11d      	bne.n	80031aa <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003172:	e01a      	b.n	80031aa <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003174:	4b5d      	ldr	r3, [pc, #372]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800317c:	2b00      	cmp	r3, #0
 800317e:	d116      	bne.n	80031ae <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003184:	e013      	b.n	80031ae <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003186:	4b59      	ldr	r3, [pc, #356]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10f      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003192:	4b56      	ldr	r3, [pc, #344]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031a2:	e006      	b.n	80031b2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
      break;
 80031a8:	e004      	b.n	80031b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80031aa:	bf00      	nop
 80031ac:	e002      	b.n	80031b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80031ae:	bf00      	nop
 80031b0:	e000      	b.n	80031b4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80031b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d108      	bne.n	80031cc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80031ba:	4b4c      	ldr	r3, [pc, #304]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 0203 	bic.w	r2, r3, #3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4949      	ldr	r1, [pc, #292]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 8086 	bne.w	80032e0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031d4:	4b45      	ldr	r3, [pc, #276]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a44      	ldr	r2, [pc, #272]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80031da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e0:	f7fe f858 	bl	8001294 <HAL_GetTick>
 80031e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031e6:	e009      	b.n	80031fc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031e8:	f7fe f854 	bl	8001294 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d902      	bls.n	80031fc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	73fb      	strb	r3, [r7, #15]
        break;
 80031fa:	e005      	b.n	8003208 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031fc:	4b3b      	ldr	r3, [pc, #236]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1ef      	bne.n	80031e8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d168      	bne.n	80032e0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d113      	bne.n	800323c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003214:	4b35      	ldr	r3, [pc, #212]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	4b35      	ldr	r3, [pc, #212]	@ (80032f0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800321a:	4013      	ands	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6892      	ldr	r2, [r2, #8]
 8003220:	0211      	lsls	r1, r2, #8
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68d2      	ldr	r2, [r2, #12]
 8003226:	06d2      	lsls	r2, r2, #27
 8003228:	4311      	orrs	r1, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6852      	ldr	r2, [r2, #4]
 800322e:	3a01      	subs	r2, #1
 8003230:	0112      	lsls	r2, r2, #4
 8003232:	430a      	orrs	r2, r1
 8003234:	492d      	ldr	r1, [pc, #180]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003236:	4313      	orrs	r3, r2
 8003238:	610b      	str	r3, [r1, #16]
 800323a:	e02d      	b.n	8003298 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d115      	bne.n	800326e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003242:	4b2a      	ldr	r3, [pc, #168]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	4b2b      	ldr	r3, [pc, #172]	@ (80032f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003248:	4013      	ands	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6892      	ldr	r2, [r2, #8]
 800324e:	0211      	lsls	r1, r2, #8
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6912      	ldr	r2, [r2, #16]
 8003254:	0852      	lsrs	r2, r2, #1
 8003256:	3a01      	subs	r2, #1
 8003258:	0552      	lsls	r2, r2, #21
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6852      	ldr	r2, [r2, #4]
 8003260:	3a01      	subs	r2, #1
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	430a      	orrs	r2, r1
 8003266:	4921      	ldr	r1, [pc, #132]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003268:	4313      	orrs	r3, r2
 800326a:	610b      	str	r3, [r1, #16]
 800326c:	e014      	b.n	8003298 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800326e:	4b1f      	ldr	r3, [pc, #124]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	4b21      	ldr	r3, [pc, #132]	@ (80032f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003274:	4013      	ands	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6892      	ldr	r2, [r2, #8]
 800327a:	0211      	lsls	r1, r2, #8
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6952      	ldr	r2, [r2, #20]
 8003280:	0852      	lsrs	r2, r2, #1
 8003282:	3a01      	subs	r2, #1
 8003284:	0652      	lsls	r2, r2, #25
 8003286:	4311      	orrs	r1, r2
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6852      	ldr	r2, [r2, #4]
 800328c:	3a01      	subs	r2, #1
 800328e:	0112      	lsls	r2, r2, #4
 8003290:	430a      	orrs	r2, r1
 8003292:	4916      	ldr	r1, [pc, #88]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 8003294:	4313      	orrs	r3, r2
 8003296:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003298:	4b14      	ldr	r3, [pc, #80]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a13      	ldr	r2, [pc, #76]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 800329e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a4:	f7fd fff6 	bl	8001294 <HAL_GetTick>
 80032a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032aa:	e009      	b.n	80032c0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ac:	f7fd fff2 	bl	8001294 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d902      	bls.n	80032c0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	73fb      	strb	r3, [r7, #15]
          break;
 80032be:	e005      	b.n	80032cc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032c0:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ef      	beq.n	80032ac <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	4904      	ldr	r1, [pc, #16]	@ (80032ec <RCCEx_PLLSAI1_Config+0x1d8>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	07ff800f 	.word	0x07ff800f
 80032f4:	ff9f800f 	.word	0xff9f800f
 80032f8:	f9ff800f 	.word	0xf9ff800f

080032fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800330a:	4b72      	ldr	r3, [pc, #456]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00e      	beq.n	8003334 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003316:	4b6f      	ldr	r3, [pc, #444]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0203 	and.w	r2, r3, #3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d103      	bne.n	800332e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
       ||
 800332a:	2b00      	cmp	r3, #0
 800332c:	d142      	bne.n	80033b4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
 8003332:	e03f      	b.n	80033b4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d018      	beq.n	800336e <RCCEx_PLLSAI2_Config+0x72>
 800333c:	2b03      	cmp	r3, #3
 800333e:	d825      	bhi.n	800338c <RCCEx_PLLSAI2_Config+0x90>
 8003340:	2b01      	cmp	r3, #1
 8003342:	d002      	beq.n	800334a <RCCEx_PLLSAI2_Config+0x4e>
 8003344:	2b02      	cmp	r3, #2
 8003346:	d009      	beq.n	800335c <RCCEx_PLLSAI2_Config+0x60>
 8003348:	e020      	b.n	800338c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800334a:	4b62      	ldr	r3, [pc, #392]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d11d      	bne.n	8003392 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800335a:	e01a      	b.n	8003392 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800335c:	4b5d      	ldr	r3, [pc, #372]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003364:	2b00      	cmp	r3, #0
 8003366:	d116      	bne.n	8003396 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336c:	e013      	b.n	8003396 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800336e:	4b59      	ldr	r3, [pc, #356]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10f      	bne.n	800339a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800337a:	4b56      	ldr	r3, [pc, #344]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d109      	bne.n	800339a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800338a:	e006      	b.n	800339a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      break;
 8003390:	e004      	b.n	800339c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003392:	bf00      	nop
 8003394:	e002      	b.n	800339c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003396:	bf00      	nop
 8003398:	e000      	b.n	800339c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800339a:	bf00      	nop
    }

    if(status == HAL_OK)
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d108      	bne.n	80033b4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80033a2:	4b4c      	ldr	r3, [pc, #304]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f023 0203 	bic.w	r2, r3, #3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4949      	ldr	r1, [pc, #292]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 8086 	bne.w	80034c8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033bc:	4b45      	ldr	r3, [pc, #276]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a44      	ldr	r2, [pc, #272]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c8:	f7fd ff64 	bl	8001294 <HAL_GetTick>
 80033cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033ce:	e009      	b.n	80033e4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033d0:	f7fd ff60 	bl	8001294 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d902      	bls.n	80033e4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	73fb      	strb	r3, [r7, #15]
        break;
 80033e2:	e005      	b.n	80033f0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033e4:	4b3b      	ldr	r3, [pc, #236]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ef      	bne.n	80033d0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d168      	bne.n	80034c8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d113      	bne.n	8003424 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033fc:	4b35      	ldr	r3, [pc, #212]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033fe:	695a      	ldr	r2, [r3, #20]
 8003400:	4b35      	ldr	r3, [pc, #212]	@ (80034d8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003402:	4013      	ands	r3, r2
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6892      	ldr	r2, [r2, #8]
 8003408:	0211      	lsls	r1, r2, #8
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68d2      	ldr	r2, [r2, #12]
 800340e:	06d2      	lsls	r2, r2, #27
 8003410:	4311      	orrs	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6852      	ldr	r2, [r2, #4]
 8003416:	3a01      	subs	r2, #1
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	430a      	orrs	r2, r1
 800341c:	492d      	ldr	r1, [pc, #180]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	614b      	str	r3, [r1, #20]
 8003422:	e02d      	b.n	8003480 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d115      	bne.n	8003456 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800342a:	4b2a      	ldr	r3, [pc, #168]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	4b2b      	ldr	r3, [pc, #172]	@ (80034dc <RCCEx_PLLSAI2_Config+0x1e0>)
 8003430:	4013      	ands	r3, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6892      	ldr	r2, [r2, #8]
 8003436:	0211      	lsls	r1, r2, #8
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	6912      	ldr	r2, [r2, #16]
 800343c:	0852      	lsrs	r2, r2, #1
 800343e:	3a01      	subs	r2, #1
 8003440:	0552      	lsls	r2, r2, #21
 8003442:	4311      	orrs	r1, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6852      	ldr	r2, [r2, #4]
 8003448:	3a01      	subs	r2, #1
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	430a      	orrs	r2, r1
 800344e:	4921      	ldr	r1, [pc, #132]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003450:	4313      	orrs	r3, r2
 8003452:	614b      	str	r3, [r1, #20]
 8003454:	e014      	b.n	8003480 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003456:	4b1f      	ldr	r3, [pc, #124]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	4b21      	ldr	r3, [pc, #132]	@ (80034e0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800345c:	4013      	ands	r3, r2
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6892      	ldr	r2, [r2, #8]
 8003462:	0211      	lsls	r1, r2, #8
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6952      	ldr	r2, [r2, #20]
 8003468:	0852      	lsrs	r2, r2, #1
 800346a:	3a01      	subs	r2, #1
 800346c:	0652      	lsls	r2, r2, #25
 800346e:	4311      	orrs	r1, r2
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6852      	ldr	r2, [r2, #4]
 8003474:	3a01      	subs	r2, #1
 8003476:	0112      	lsls	r2, r2, #4
 8003478:	430a      	orrs	r2, r1
 800347a:	4916      	ldr	r1, [pc, #88]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800347c:	4313      	orrs	r3, r2
 800347e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003480:	4b14      	ldr	r3, [pc, #80]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a13      	ldr	r2, [pc, #76]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800348a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7fd ff02 	bl	8001294 <HAL_GetTick>
 8003490:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003492:	e009      	b.n	80034a8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003494:	f7fd fefe 	bl	8001294 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d902      	bls.n	80034a8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	73fb      	strb	r3, [r7, #15]
          break;
 80034a6:	e005      	b.n	80034b4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034a8:	4b0a      	ldr	r3, [pc, #40]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ef      	beq.n	8003494 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034ba:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	4904      	ldr	r1, [pc, #16]	@ (80034d4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	07ff800f 	.word	0x07ff800f
 80034dc:	ff9f800f 	.word	0xff9f800f
 80034e0:	f9ff800f 	.word	0xf9ff800f

080034e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e049      	b.n	800358a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d106      	bne.n	8003510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7fd fcd0 	bl	8000eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3304      	adds	r3, #4
 8003520:	4619      	mov	r1, r3
 8003522:	4610      	mov	r0, r2
 8003524:	f000 f9d6 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d001      	beq.n	80035ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e04f      	b.n	800364c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a23      	ldr	r2, [pc, #140]	@ (8003658 <HAL_TIM_Base_Start_IT+0xc4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01d      	beq.n	800360a <HAL_TIM_Base_Start_IT+0x76>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d6:	d018      	beq.n	800360a <HAL_TIM_Base_Start_IT+0x76>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1f      	ldr	r2, [pc, #124]	@ (800365c <HAL_TIM_Base_Start_IT+0xc8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d013      	beq.n	800360a <HAL_TIM_Base_Start_IT+0x76>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003660 <HAL_TIM_Base_Start_IT+0xcc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d00e      	beq.n	800360a <HAL_TIM_Base_Start_IT+0x76>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003664 <HAL_TIM_Base_Start_IT+0xd0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_TIM_Base_Start_IT+0x76>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003668 <HAL_TIM_Base_Start_IT+0xd4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d004      	beq.n	800360a <HAL_TIM_Base_Start_IT+0x76>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a19      	ldr	r2, [pc, #100]	@ (800366c <HAL_TIM_Base_Start_IT+0xd8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d115      	bne.n	8003636 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	4b17      	ldr	r3, [pc, #92]	@ (8003670 <HAL_TIM_Base_Start_IT+0xdc>)
 8003612:	4013      	ands	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b06      	cmp	r3, #6
 800361a:	d015      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0xb4>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003622:	d011      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003634:	e008      	b.n	8003648 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e000      	b.n	800364a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003648:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40012c00 	.word	0x40012c00
 800365c:	40000400 	.word	0x40000400
 8003660:	40000800 	.word	0x40000800
 8003664:	40000c00 	.word	0x40000c00
 8003668:	40013400 	.word	0x40013400
 800366c:	40014000 	.word	0x40014000
 8003670:	00010007 	.word	0x00010007

08003674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d020      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0202 	mvn.w	r2, #2
 80036a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f8e9 	bl	8003896 <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f8db 	bl	8003882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f8ec 	bl	80038aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d020      	beq.n	8003724 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0204 	mvn.w	r2, #4
 80036f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2202      	movs	r2, #2
 80036fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8c3 	bl	8003896 <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8b5 	bl	8003882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f8c6 	bl	80038aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d020      	beq.n	8003770 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01b      	beq.n	8003770 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0208 	mvn.w	r2, #8
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2204      	movs	r2, #4
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f89d 	bl	8003896 <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f88f 	bl	8003882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8a0 	bl	80038aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	d020      	beq.n	80037bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01b      	beq.n	80037bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0210 	mvn.w	r2, #16
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2208      	movs	r2, #8
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f877 	bl	8003896 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f869 	bl	8003882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f87a 	bl	80038aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00c      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0201 	mvn.w	r2, #1
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd fa66 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d104      	bne.n	80037f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00c      	beq.n	800380e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f99b 	bl	8003b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00c      	beq.n	8003832 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800382a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f993 	bl	8003b58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00c      	beq.n	8003856 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800384e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f834 	bl	80038be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00c      	beq.n	800387a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f003 0320 	and.w	r3, r3, #32
 8003866:	2b00      	cmp	r3, #0
 8003868:	d007      	beq.n	800387a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f06f 0220 	mvn.w	r2, #32
 8003872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f95b 	bl	8003b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
	...

080038d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a46      	ldr	r2, [pc, #280]	@ (8003a00 <TIM_Base_SetConfig+0x12c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d013      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f2:	d00f      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a43      	ldr	r2, [pc, #268]	@ (8003a04 <TIM_Base_SetConfig+0x130>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00b      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a42      	ldr	r2, [pc, #264]	@ (8003a08 <TIM_Base_SetConfig+0x134>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a41      	ldr	r2, [pc, #260]	@ (8003a0c <TIM_Base_SetConfig+0x138>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a40      	ldr	r2, [pc, #256]	@ (8003a10 <TIM_Base_SetConfig+0x13c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d108      	bne.n	8003926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a35      	ldr	r2, [pc, #212]	@ (8003a00 <TIM_Base_SetConfig+0x12c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01f      	beq.n	800396e <TIM_Base_SetConfig+0x9a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003934:	d01b      	beq.n	800396e <TIM_Base_SetConfig+0x9a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a32      	ldr	r2, [pc, #200]	@ (8003a04 <TIM_Base_SetConfig+0x130>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d017      	beq.n	800396e <TIM_Base_SetConfig+0x9a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a31      	ldr	r2, [pc, #196]	@ (8003a08 <TIM_Base_SetConfig+0x134>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d013      	beq.n	800396e <TIM_Base_SetConfig+0x9a>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a30      	ldr	r2, [pc, #192]	@ (8003a0c <TIM_Base_SetConfig+0x138>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00f      	beq.n	800396e <TIM_Base_SetConfig+0x9a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2f      	ldr	r2, [pc, #188]	@ (8003a10 <TIM_Base_SetConfig+0x13c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <TIM_Base_SetConfig+0x9a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a2e      	ldr	r2, [pc, #184]	@ (8003a14 <TIM_Base_SetConfig+0x140>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <TIM_Base_SetConfig+0x9a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2d      	ldr	r2, [pc, #180]	@ (8003a18 <TIM_Base_SetConfig+0x144>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_Base_SetConfig+0x9a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2c      	ldr	r2, [pc, #176]	@ (8003a1c <TIM_Base_SetConfig+0x148>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d108      	bne.n	8003980 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a16      	ldr	r2, [pc, #88]	@ (8003a00 <TIM_Base_SetConfig+0x12c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00f      	beq.n	80039cc <TIM_Base_SetConfig+0xf8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a18      	ldr	r2, [pc, #96]	@ (8003a10 <TIM_Base_SetConfig+0x13c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00b      	beq.n	80039cc <TIM_Base_SetConfig+0xf8>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a17      	ldr	r2, [pc, #92]	@ (8003a14 <TIM_Base_SetConfig+0x140>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d007      	beq.n	80039cc <TIM_Base_SetConfig+0xf8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a16      	ldr	r2, [pc, #88]	@ (8003a18 <TIM_Base_SetConfig+0x144>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0xf8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a15      	ldr	r2, [pc, #84]	@ (8003a1c <TIM_Base_SetConfig+0x148>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d103      	bne.n	80039d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d105      	bne.n	80039f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f023 0201 	bic.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	611a      	str	r2, [r3, #16]
  }
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40012c00 	.word	0x40012c00
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40000800 	.word	0x40000800
 8003a0c:	40000c00 	.word	0x40000c00
 8003a10:	40013400 	.word	0x40013400
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40014400 	.word	0x40014400
 8003a1c:	40014800 	.word	0x40014800

08003a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e068      	b.n	8003b0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a2d      	ldr	r2, [pc, #180]	@ (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d01d      	beq.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aaa:	d018      	beq.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a1a      	ldr	r2, [pc, #104]	@ (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d00e      	beq.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a18      	ldr	r2, [pc, #96]	@ (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d009      	beq.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a13      	ldr	r2, [pc, #76]	@ (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d004      	beq.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a14      	ldr	r2, [pc, #80]	@ (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10c      	bne.n	8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40013400 	.word	0x40013400
 8003b20:	40000400 	.word	0x40000400
 8003b24:	40000800 	.word	0x40000800
 8003b28:	40000c00 	.word	0x40000c00
 8003b2c:	40014000 	.word	0x40014000

08003b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e042      	b.n	8003c04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7fd f8e7 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2224      	movs	r2, #36	@ 0x24
 8003b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fb24 	bl	8004204 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f825 	bl	8003c0c <UART_SetConfig>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e01b      	b.n	8003c04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fba3 	bl	8004348 <UART_CheckIdleState>
 8003c02:	4603      	mov	r3, r0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c10:	b08c      	sub	sp, #48	@ 0x30
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	4baa      	ldr	r3, [pc, #680]	@ (8003ee4 <UART_SetConfig+0x2d8>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a9f      	ldr	r2, [pc, #636]	@ (8003ee8 <UART_SetConfig+0x2dc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d004      	beq.n	8003c78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c74:	4313      	orrs	r3, r2
 8003c76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003c82:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	6812      	ldr	r2, [r2, #0]
 8003c8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c96:	f023 010f 	bic.w	r1, r3, #15
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a90      	ldr	r2, [pc, #576]	@ (8003eec <UART_SetConfig+0x2e0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d125      	bne.n	8003cfc <UART_SetConfig+0xf0>
 8003cb0:	4b8f      	ldr	r3, [pc, #572]	@ (8003ef0 <UART_SetConfig+0x2e4>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d81a      	bhi.n	8003cf4 <UART_SetConfig+0xe8>
 8003cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc4 <UART_SetConfig+0xb8>)
 8003cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003ce5 	.word	0x08003ce5
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ced 	.word	0x08003ced
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cda:	e116      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ce2:	e112      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cea:	e10e      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003cec:	2308      	movs	r3, #8
 8003cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cf2:	e10a      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cfa:	e106      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a7c      	ldr	r2, [pc, #496]	@ (8003ef4 <UART_SetConfig+0x2e8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d138      	bne.n	8003d78 <UART_SetConfig+0x16c>
 8003d06:	4b7a      	ldr	r3, [pc, #488]	@ (8003ef0 <UART_SetConfig+0x2e4>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	d82d      	bhi.n	8003d70 <UART_SetConfig+0x164>
 8003d14:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <UART_SetConfig+0x110>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08003d71 	.word	0x08003d71
 8003d24:	08003d71 	.word	0x08003d71
 8003d28:	08003d71 	.word	0x08003d71
 8003d2c:	08003d61 	.word	0x08003d61
 8003d30:	08003d71 	.word	0x08003d71
 8003d34:	08003d71 	.word	0x08003d71
 8003d38:	08003d71 	.word	0x08003d71
 8003d3c:	08003d59 	.word	0x08003d59
 8003d40:	08003d71 	.word	0x08003d71
 8003d44:	08003d71 	.word	0x08003d71
 8003d48:	08003d71 	.word	0x08003d71
 8003d4c:	08003d69 	.word	0x08003d69
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d56:	e0d8      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d5e:	e0d4      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d66:	e0d0      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d6e:	e0cc      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d76:	e0c8      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ef8 <UART_SetConfig+0x2ec>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d125      	bne.n	8003dce <UART_SetConfig+0x1c2>
 8003d82:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef0 <UART_SetConfig+0x2e4>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d8c:	2b30      	cmp	r3, #48	@ 0x30
 8003d8e:	d016      	beq.n	8003dbe <UART_SetConfig+0x1b2>
 8003d90:	2b30      	cmp	r3, #48	@ 0x30
 8003d92:	d818      	bhi.n	8003dc6 <UART_SetConfig+0x1ba>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d00a      	beq.n	8003dae <UART_SetConfig+0x1a2>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d814      	bhi.n	8003dc6 <UART_SetConfig+0x1ba>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <UART_SetConfig+0x19a>
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d008      	beq.n	8003db6 <UART_SetConfig+0x1aa>
 8003da4:	e00f      	b.n	8003dc6 <UART_SetConfig+0x1ba>
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dac:	e0ad      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003dae:	2302      	movs	r3, #2
 8003db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003db4:	e0a9      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003db6:	2304      	movs	r3, #4
 8003db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dbc:	e0a5      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dc4:	e0a1      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003dcc:	e09d      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a4a      	ldr	r2, [pc, #296]	@ (8003efc <UART_SetConfig+0x2f0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d125      	bne.n	8003e24 <UART_SetConfig+0x218>
 8003dd8:	4b45      	ldr	r3, [pc, #276]	@ (8003ef0 <UART_SetConfig+0x2e4>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dde:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003de4:	d016      	beq.n	8003e14 <UART_SetConfig+0x208>
 8003de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003de8:	d818      	bhi.n	8003e1c <UART_SetConfig+0x210>
 8003dea:	2b80      	cmp	r3, #128	@ 0x80
 8003dec:	d00a      	beq.n	8003e04 <UART_SetConfig+0x1f8>
 8003dee:	2b80      	cmp	r3, #128	@ 0x80
 8003df0:	d814      	bhi.n	8003e1c <UART_SetConfig+0x210>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <UART_SetConfig+0x1f0>
 8003df6:	2b40      	cmp	r3, #64	@ 0x40
 8003df8:	d008      	beq.n	8003e0c <UART_SetConfig+0x200>
 8003dfa:	e00f      	b.n	8003e1c <UART_SetConfig+0x210>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e02:	e082      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003e04:	2302      	movs	r3, #2
 8003e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e0a:	e07e      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e12:	e07a      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003e14:	2308      	movs	r3, #8
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e1a:	e076      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e22:	e072      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a35      	ldr	r2, [pc, #212]	@ (8003f00 <UART_SetConfig+0x2f4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d12a      	bne.n	8003e84 <UART_SetConfig+0x278>
 8003e2e:	4b30      	ldr	r3, [pc, #192]	@ (8003ef0 <UART_SetConfig+0x2e4>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e3c:	d01a      	beq.n	8003e74 <UART_SetConfig+0x268>
 8003e3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e42:	d81b      	bhi.n	8003e7c <UART_SetConfig+0x270>
 8003e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e48:	d00c      	beq.n	8003e64 <UART_SetConfig+0x258>
 8003e4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e4e:	d815      	bhi.n	8003e7c <UART_SetConfig+0x270>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <UART_SetConfig+0x250>
 8003e54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e58:	d008      	beq.n	8003e6c <UART_SetConfig+0x260>
 8003e5a:	e00f      	b.n	8003e7c <UART_SetConfig+0x270>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e62:	e052      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003e64:	2302      	movs	r3, #2
 8003e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e6a:	e04e      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e72:	e04a      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003e74:	2308      	movs	r3, #8
 8003e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e7a:	e046      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003e82:	e042      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a17      	ldr	r2, [pc, #92]	@ (8003ee8 <UART_SetConfig+0x2dc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d13a      	bne.n	8003f04 <UART_SetConfig+0x2f8>
 8003e8e:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <UART_SetConfig+0x2e4>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003e98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e9c:	d01a      	beq.n	8003ed4 <UART_SetConfig+0x2c8>
 8003e9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ea2:	d81b      	bhi.n	8003edc <UART_SetConfig+0x2d0>
 8003ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ea8:	d00c      	beq.n	8003ec4 <UART_SetConfig+0x2b8>
 8003eaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eae:	d815      	bhi.n	8003edc <UART_SetConfig+0x2d0>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <UART_SetConfig+0x2b0>
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb8:	d008      	beq.n	8003ecc <UART_SetConfig+0x2c0>
 8003eba:	e00f      	b.n	8003edc <UART_SetConfig+0x2d0>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ec2:	e022      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eca:	e01e      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ed2:	e01a      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003ed4:	2308      	movs	r3, #8
 8003ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003eda:	e016      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003edc:	2310      	movs	r3, #16
 8003ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ee2:	e012      	b.n	8003f0a <UART_SetConfig+0x2fe>
 8003ee4:	cfff69f3 	.word	0xcfff69f3
 8003ee8:	40008000 	.word	0x40008000
 8003eec:	40013800 	.word	0x40013800
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40004400 	.word	0x40004400
 8003ef8:	40004800 	.word	0x40004800
 8003efc:	40004c00 	.word	0x40004c00
 8003f00:	40005000 	.word	0x40005000
 8003f04:	2310      	movs	r3, #16
 8003f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4aae      	ldr	r2, [pc, #696]	@ (80041c8 <UART_SetConfig+0x5bc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	f040 8097 	bne.w	8004044 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d823      	bhi.n	8003f66 <UART_SetConfig+0x35a>
 8003f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <UART_SetConfig+0x318>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f67 	.word	0x08003f67
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f67 	.word	0x08003f67
 8003f34:	08003f57 	.word	0x08003f57
 8003f38:	08003f67 	.word	0x08003f67
 8003f3c:	08003f67 	.word	0x08003f67
 8003f40:	08003f67 	.word	0x08003f67
 8003f44:	08003f5f 	.word	0x08003f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f48:	f7fe fc96 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8003f4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f4e:	e010      	b.n	8003f72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f50:	4b9e      	ldr	r3, [pc, #632]	@ (80041cc <UART_SetConfig+0x5c0>)
 8003f52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f54:	e00d      	b.n	8003f72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f56:	f7fe fbf7 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8003f5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f5c:	e009      	b.n	8003f72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f64:	e005      	b.n	8003f72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 8130 	beq.w	80041da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	4a94      	ldr	r2, [pc, #592]	@ (80041d0 <UART_SetConfig+0x5c4>)
 8003f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f84:	461a      	mov	r2, r3
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	4413      	add	r3, r2
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d305      	bcc.n	8003faa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d903      	bls.n	8003fb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003fb0:	e113      	b.n	80041da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	60fa      	str	r2, [r7, #12]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	4a84      	ldr	r2, [pc, #528]	@ (80041d0 <UART_SetConfig+0x5c4>)
 8003fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003fd4:	f7fc f914 	bl	8000200 <__aeabi_uldivmod>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4610      	mov	r0, r2
 8003fde:	4619      	mov	r1, r3
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	020b      	lsls	r3, r1, #8
 8003fea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fee:	0202      	lsls	r2, r0, #8
 8003ff0:	6979      	ldr	r1, [r7, #20]
 8003ff2:	6849      	ldr	r1, [r1, #4]
 8003ff4:	0849      	lsrs	r1, r1, #1
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	460c      	mov	r4, r1
 8003ffa:	4605      	mov	r5, r0
 8003ffc:	eb12 0804 	adds.w	r8, r2, r4
 8004000:	eb43 0905 	adc.w	r9, r3, r5
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	469a      	mov	sl, r3
 800400c:	4693      	mov	fp, r2
 800400e:	4652      	mov	r2, sl
 8004010:	465b      	mov	r3, fp
 8004012:	4640      	mov	r0, r8
 8004014:	4649      	mov	r1, r9
 8004016:	f7fc f8f3 	bl	8000200 <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4613      	mov	r3, r2
 8004020:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004028:	d308      	bcc.n	800403c <UART_SetConfig+0x430>
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004030:	d204      	bcs.n	800403c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a3a      	ldr	r2, [r7, #32]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	e0ce      	b.n	80041da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004042:	e0ca      	b.n	80041da <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800404c:	d166      	bne.n	800411c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800404e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004052:	2b08      	cmp	r3, #8
 8004054:	d827      	bhi.n	80040a6 <UART_SetConfig+0x49a>
 8004056:	a201      	add	r2, pc, #4	@ (adr r2, 800405c <UART_SetConfig+0x450>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	08004081 	.word	0x08004081
 8004060:	08004089 	.word	0x08004089
 8004064:	08004091 	.word	0x08004091
 8004068:	080040a7 	.word	0x080040a7
 800406c:	08004097 	.word	0x08004097
 8004070:	080040a7 	.word	0x080040a7
 8004074:	080040a7 	.word	0x080040a7
 8004078:	080040a7 	.word	0x080040a7
 800407c:	0800409f 	.word	0x0800409f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7fe fbfa 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8004084:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004086:	e014      	b.n	80040b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004088:	f7fe fc0c 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 800408c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800408e:	e010      	b.n	80040b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004090:	4b4e      	ldr	r3, [pc, #312]	@ (80041cc <UART_SetConfig+0x5c0>)
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004094:	e00d      	b.n	80040b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004096:	f7fe fb57 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 800409a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800409c:	e009      	b.n	80040b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80040a4:	e005      	b.n	80040b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80040b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 8090 	beq.w	80041da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	4a44      	ldr	r2, [pc, #272]	@ (80041d0 <UART_SetConfig+0x5c4>)
 80040c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80040cc:	005a      	lsls	r2, r3, #1
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	441a      	add	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	2b0f      	cmp	r3, #15
 80040e4:	d916      	bls.n	8004114 <UART_SetConfig+0x508>
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ec:	d212      	bcs.n	8004114 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f023 030f 	bic.w	r3, r3, #15
 80040f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	085b      	lsrs	r3, r3, #1
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	b29a      	uxth	r2, r3
 8004104:	8bfb      	ldrh	r3, [r7, #30]
 8004106:	4313      	orrs	r3, r2
 8004108:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	8bfa      	ldrh	r2, [r7, #30]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	e062      	b.n	80041da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800411a:	e05e      	b.n	80041da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800411c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004120:	2b08      	cmp	r3, #8
 8004122:	d828      	bhi.n	8004176 <UART_SetConfig+0x56a>
 8004124:	a201      	add	r2, pc, #4	@ (adr r2, 800412c <UART_SetConfig+0x520>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	08004151 	.word	0x08004151
 8004130:	08004159 	.word	0x08004159
 8004134:	08004161 	.word	0x08004161
 8004138:	08004177 	.word	0x08004177
 800413c:	08004167 	.word	0x08004167
 8004140:	08004177 	.word	0x08004177
 8004144:	08004177 	.word	0x08004177
 8004148:	08004177 	.word	0x08004177
 800414c:	0800416f 	.word	0x0800416f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004150:	f7fe fb92 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8004154:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004156:	e014      	b.n	8004182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004158:	f7fe fba4 	bl	80028a4 <HAL_RCC_GetPCLK2Freq>
 800415c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800415e:	e010      	b.n	8004182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004160:	4b1a      	ldr	r3, [pc, #104]	@ (80041cc <UART_SetConfig+0x5c0>)
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004164:	e00d      	b.n	8004182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004166:	f7fe faef 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 800416a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800416c:	e009      	b.n	8004182 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004174:	e005      	b.n	8004182 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004180:	bf00      	nop
    }

    if (pclk != 0U)
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d028      	beq.n	80041da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	4a10      	ldr	r2, [pc, #64]	@ (80041d0 <UART_SetConfig+0x5c4>)
 800418e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004192:	461a      	mov	r2, r3
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	fbb3 f2f2 	udiv	r2, r3, r2
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	441a      	add	r2, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	2b0f      	cmp	r3, #15
 80041b0:	d910      	bls.n	80041d4 <UART_SetConfig+0x5c8>
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041b8:	d20c      	bcs.n	80041d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	60da      	str	r2, [r3, #12]
 80041c4:	e009      	b.n	80041da <UART_SetConfig+0x5ce>
 80041c6:	bf00      	nop
 80041c8:	40008000 	.word	0x40008000
 80041cc:	00f42400 	.word	0x00f42400
 80041d0:	080089d4 	.word	0x080089d4
      }
      else
      {
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2201      	movs	r2, #1
 80041de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2200      	movs	r2, #0
 80041ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2200      	movs	r2, #0
 80041f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80041f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3730      	adds	r7, #48	@ 0x30
 80041fe:	46bd      	mov	sp, r7
 8004200:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00a      	beq.n	8004294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	f003 0310 	and.w	r3, r3, #16
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00a      	beq.n	80042d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01a      	beq.n	800431a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004302:	d10a      	bne.n	800431a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800431e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	605a      	str	r2, [r3, #4]
  }
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b098      	sub	sp, #96	@ 0x60
 800434c:	af02      	add	r7, sp, #8
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004358:	f7fc ff9c 	bl	8001294 <HAL_GetTick>
 800435c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b08      	cmp	r3, #8
 800436a:	d12f      	bne.n	80043cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800436c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004374:	2200      	movs	r2, #0
 8004376:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f88e 	bl	800449c <UART_WaitOnFlagUntilTimeout>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d022      	beq.n	80043cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004396:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800439a:	653b      	str	r3, [r7, #80]	@ 0x50
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043a6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e6      	bne.n	8004386 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e063      	b.n	8004494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d149      	bne.n	800446e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e2:	2200      	movs	r2, #0
 80043e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f857 	bl	800449c <UART_WaitOnFlagUntilTimeout>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d03c      	beq.n	800446e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	623b      	str	r3, [r7, #32]
   return(result);
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004408:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004412:	633b      	str	r3, [r7, #48]	@ 0x30
 8004414:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1e6      	bne.n	80043f4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	60fb      	str	r3, [r7, #12]
   return(result);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f023 0301 	bic.w	r3, r3, #1
 800443c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3308      	adds	r3, #8
 8004444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004446:	61fa      	str	r2, [r7, #28]
 8004448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	69b9      	ldr	r1, [r7, #24]
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	617b      	str	r3, [r7, #20]
   return(result);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e5      	bne.n	8004426 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e012      	b.n	8004494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2220      	movs	r2, #32
 800447a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3758      	adds	r7, #88	@ 0x58
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	4613      	mov	r3, r2
 80044aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ac:	e04f      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d04b      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b6:	f7fc feed 	bl	8001294 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d302      	bcc.n	80044cc <UART_WaitOnFlagUntilTimeout+0x30>
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e04e      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0304 	and.w	r3, r3, #4
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d037      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0xb2>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b80      	cmp	r3, #128	@ 0x80
 80044e2:	d034      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0xb2>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b40      	cmp	r3, #64	@ 0x40
 80044e8:	d031      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d110      	bne.n	800451a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2208      	movs	r2, #8
 80044fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f838 	bl	8004576 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2208      	movs	r2, #8
 800450a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e029      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004528:	d111      	bne.n	800454e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f81e 	bl	8004576 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e00f      	b.n	800456e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4013      	ands	r3, r2
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	429a      	cmp	r2, r3
 800455c:	bf0c      	ite	eq
 800455e:	2301      	moveq	r3, #1
 8004560:	2300      	movne	r3, #0
 8004562:	b2db      	uxtb	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	429a      	cmp	r2, r3
 800456a:	d0a0      	beq.n	80044ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004576:	b480      	push	{r7}
 8004578:	b095      	sub	sp, #84	@ 0x54
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800458c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004592:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800459c:	643b      	str	r3, [r7, #64]	@ 0x40
 800459e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e6      	bne.n	800457e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3308      	adds	r3, #8
 80045b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3308      	adds	r3, #8
 80045d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045dc:	e841 2300 	strex	r3, r2, [r1]
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1e3      	bne.n	80045b0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d118      	bne.n	8004622 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f023 0310 	bic.w	r3, r3, #16
 8004604:	647b      	str	r3, [r7, #68]	@ 0x44
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	6979      	ldr	r1, [r7, #20]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	613b      	str	r3, [r7, #16]
   return(result);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e6      	bne.n	80045f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2220      	movs	r2, #32
 8004626:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004636:	bf00      	nop
 8004638:	3754      	adds	r7, #84	@ 0x54
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_UARTEx_DisableFifoMode+0x16>
 8004654:	2302      	movs	r3, #2
 8004656:	e027      	b.n	80046a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2224      	movs	r2, #36	@ 0x24
 8004664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0201 	bic.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004686:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e02d      	b.n	8004728 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	@ 0x24
 80046d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f84f 	bl	80047ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004744:	2302      	movs	r3, #2
 8004746:	e02d      	b.n	80047a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2224      	movs	r2, #36	@ 0x24
 8004754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f811 	bl	80047ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d108      	bne.n	80047ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047cc:	e031      	b.n	8004832 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047ce:	2308      	movs	r3, #8
 80047d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047d2:	2308      	movs	r3, #8
 80047d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	0e5b      	lsrs	r3, r3, #25
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	0f5b      	lsrs	r3, r3, #29
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047f6:	7bbb      	ldrb	r3, [r7, #14]
 80047f8:	7b3a      	ldrb	r2, [r7, #12]
 80047fa:	4911      	ldr	r1, [pc, #68]	@ (8004840 <UARTEx_SetNbDataToProcess+0x94>)
 80047fc:	5c8a      	ldrb	r2, [r1, r2]
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004802:	7b3a      	ldrb	r2, [r7, #12]
 8004804:	490f      	ldr	r1, [pc, #60]	@ (8004844 <UARTEx_SetNbDataToProcess+0x98>)
 8004806:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004808:	fb93 f3f2 	sdiv	r3, r3, r2
 800480c:	b29a      	uxth	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	7b7a      	ldrb	r2, [r7, #13]
 8004818:	4909      	ldr	r1, [pc, #36]	@ (8004840 <UARTEx_SetNbDataToProcess+0x94>)
 800481a:	5c8a      	ldrb	r2, [r1, r2]
 800481c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004820:	7b7a      	ldrb	r2, [r7, #13]
 8004822:	4908      	ldr	r1, [pc, #32]	@ (8004844 <UARTEx_SetNbDataToProcess+0x98>)
 8004824:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004826:	fb93 f3f2 	sdiv	r3, r3, r2
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004832:	bf00      	nop
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	080089ec 	.word	0x080089ec
 8004844:	080089f4 	.word	0x080089f4

08004848 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004848:	b084      	sub	sp, #16
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	f107 001c 	add.w	r0, r7, #28
 8004856:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa68 	bl	8004d3c <USB_CoreReset>
 800486c:	4603      	mov	r3, r0
 800486e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004870:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	639a      	str	r2, [r3, #56]	@ 0x38
 8004884:	e005      	b.n	8004892 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8004892:	7bfb      	ldrb	r3, [r7, #15]
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800489e:	b004      	add	sp, #16
 80048a0:	4770      	bx	lr

080048a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f023 0201 	bic.w	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d115      	bne.n	8004912 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80048f2:	200a      	movs	r0, #10
 80048f4:	f7fc fcda 	bl	80012ac <HAL_Delay>
      ms += 10U;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	330a      	adds	r3, #10
 80048fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa0e 	bl	8004d20 <USB_GetMode>
 8004904:	4603      	mov	r3, r0
 8004906:	2b01      	cmp	r3, #1
 8004908:	d01e      	beq.n	8004948 <USB_SetCurrentMode+0x84>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2bc7      	cmp	r3, #199	@ 0xc7
 800490e:	d9f0      	bls.n	80048f2 <USB_SetCurrentMode+0x2e>
 8004910:	e01a      	b.n	8004948 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d115      	bne.n	8004944 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004924:	200a      	movs	r0, #10
 8004926:	f7fc fcc1 	bl	80012ac <HAL_Delay>
      ms += 10U;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	330a      	adds	r3, #10
 800492e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f9f5 	bl	8004d20 <USB_GetMode>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <USB_SetCurrentMode+0x84>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004940:	d9f0      	bls.n	8004924 <USB_SetCurrentMode+0x60>
 8004942:	e001      	b.n	8004948 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e005      	b.n	8004954 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2bc8      	cmp	r3, #200	@ 0xc8
 800494c:	d101      	bne.n	8004952 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3710      	adds	r7, #16
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800495c:	b084      	sub	sp, #16
 800495e:	b580      	push	{r7, lr}
 8004960:	b086      	sub	sp, #24
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800496a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004976:	2300      	movs	r3, #0
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	e009      	b.n	8004990 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	3340      	adds	r3, #64	@ 0x40
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	2200      	movs	r2, #0
 8004988:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	3301      	adds	r3, #1
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b0e      	cmp	r3, #14
 8004994:	d9f2      	bls.n	800497c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004996:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800499a:	2b00      	cmp	r3, #0
 800499c:	d11c      	bne.n	80049d8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e005      	b.n	80049e4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80049ea:	461a      	mov	r2, r3
 80049ec:	2300      	movs	r3, #0
 80049ee:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049f0:	2103      	movs	r1, #3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f95a 	bl	8004cac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049f8:	2110      	movs	r1, #16
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f8f6 	bl	8004bec <USB_FlushTxFifo>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f920 	bl	8004c50 <USB_FlushRxFifo>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a20:	461a      	mov	r2, r3
 8004a22:	2300      	movs	r3, #0
 8004a24:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2300      	movs	r3, #0
 8004a30:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a3e:	2300      	movs	r3, #0
 8004a40:	613b      	str	r3, [r7, #16]
 8004a42:	e043      	b.n	8004acc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a5a:	d118      	bne.n	8004a8e <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	e013      	b.n	8004aa0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a84:	461a      	mov	r2, r3
 8004a86:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	e008      	b.n	8004aa0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aac:	461a      	mov	r2, r3
 8004aae:	2300      	movs	r3, #0
 8004ab0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ac4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
 8004acc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d3b5      	bcc.n	8004a44 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad8:	2300      	movs	r3, #0
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	e043      	b.n	8004b66 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004af0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004af4:	d118      	bne.n	8004b28 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	e013      	b.n	8004b3a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	e008      	b.n	8004b3a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b34:	461a      	mov	r2, r3
 8004b36:	2300      	movs	r3, #0
 8004b38:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b46:	461a      	mov	r2, r3
 8004b48:	2300      	movs	r3, #0
 8004b4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b58:	461a      	mov	r2, r3
 8004b5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	3301      	adds	r3, #1
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d3b5      	bcc.n	8004ade <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b84:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004b92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f043 0210 	orr.w	r2, r3, #16
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	4b10      	ldr	r3, [pc, #64]	@ (8004be8 <USB_DevInit+0x28c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f043 0208 	orr.w	r2, r3, #8
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bc0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d107      	bne.n	8004bd8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bd0:	f043 0304 	orr.w	r3, r3, #4
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004be4:	b004      	add	sp, #16
 8004be6:	4770      	bx	lr
 8004be8:	803c3800 	.word	0x803c3800

08004bec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c06:	d901      	bls.n	8004c0c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e01b      	b.n	8004c44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	daf2      	bge.n	8004bfa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	019b      	lsls	r3, r3, #6
 8004c1c:	f043 0220 	orr.w	r2, r3, #32
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c30:	d901      	bls.n	8004c36 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e006      	b.n	8004c44 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d0f0      	beq.n	8004c24 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c68:	d901      	bls.n	8004c6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e018      	b.n	8004ca0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	daf2      	bge.n	8004c5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2210      	movs	r2, #16
 8004c7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3301      	adds	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c8c:	d901      	bls.n	8004c92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e006      	b.n	8004ca0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d0f0      	beq.n	8004c80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	68f9      	ldr	r1, [r7, #12]
 8004cc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004cf8:	f023 0303 	bic.w	r3, r3, #3
 8004cfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d0c:	f043 0302 	orr.w	r3, r3, #2
 8004d10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d54:	d901      	bls.n	8004d5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e01b      	b.n	8004d92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	daf2      	bge.n	8004d48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f043 0201 	orr.w	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	3301      	adds	r3, #1
 8004d76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d7e:	d901      	bls.n	8004d84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e006      	b.n	8004d92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d0f0      	beq.n	8004d72 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <__NVIC_SetPriority>:
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	6039      	str	r1, [r7, #0]
 8004daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	db0a      	blt.n	8004dca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	490c      	ldr	r1, [pc, #48]	@ (8004dec <__NVIC_SetPriority+0x4c>)
 8004dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbe:	0112      	lsls	r2, r2, #4
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004dc8:	e00a      	b.n	8004de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	4908      	ldr	r1, [pc, #32]	@ (8004df0 <__NVIC_SetPriority+0x50>)
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	3b04      	subs	r3, #4
 8004dd8:	0112      	lsls	r2, r2, #4
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	440b      	add	r3, r1
 8004dde:	761a      	strb	r2, [r3, #24]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	e000e100 	.word	0xe000e100
 8004df0:	e000ed00 	.word	0xe000ed00

08004df4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <SysTick_Handler+0x1c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004dfc:	f002 fa06 	bl	800720c <xTaskGetSchedulerState>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d001      	beq.n	8004e0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e06:	f003 f9bf 	bl	8008188 <xPortSysTickHandler>
  }
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	e000e010 	.word	0xe000e010

08004e14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e18:	2100      	movs	r1, #0
 8004e1a:	f06f 0004 	mvn.w	r0, #4
 8004e1e:	f7ff ffbf 	bl	8004da0 <__NVIC_SetPriority>
#endif
}
 8004e22:	bf00      	nop
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e2e:	f3ef 8305 	mrs	r3, IPSR
 8004e32:	603b      	str	r3, [r7, #0]
  return(result);
 8004e34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e3a:	f06f 0305 	mvn.w	r3, #5
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	e00c      	b.n	8004e5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e42:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <osKernelInitialize+0x44>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d105      	bne.n	8004e56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e4a:	4b08      	ldr	r3, [pc, #32]	@ (8004e6c <osKernelInitialize+0x44>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	e002      	b.n	8004e5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004e56:	f04f 33ff 	mov.w	r3, #4294967295
 8004e5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e5c:	687b      	ldr	r3, [r7, #4]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20040798 	.word	0x20040798

08004e70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e76:	f3ef 8305 	mrs	r3, IPSR
 8004e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004e82:	f06f 0305 	mvn.w	r3, #5
 8004e86:	607b      	str	r3, [r7, #4]
 8004e88:	e010      	b.n	8004eac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <osKernelStart+0x48>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d109      	bne.n	8004ea6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e92:	f7ff ffbf 	bl	8004e14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e96:	4b08      	ldr	r3, [pc, #32]	@ (8004eb8 <osKernelStart+0x48>)
 8004e98:	2202      	movs	r2, #2
 8004e9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e9c:	f001 fd52 	bl	8006944 <vTaskStartScheduler>
      stat = osOK;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	607b      	str	r3, [r7, #4]
 8004ea4:	e002      	b.n	8004eac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004eac:	687b      	ldr	r3, [r7, #4]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20040798 	.word	0x20040798

08004ebc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08e      	sub	sp, #56	@ 0x38
 8004ec0:	af04      	add	r7, sp, #16
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ecc:	f3ef 8305 	mrs	r3, IPSR
 8004ed0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ed2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d17e      	bne.n	8004fd6 <osThreadNew+0x11a>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d07b      	beq.n	8004fd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004ede:	2380      	movs	r3, #128	@ 0x80
 8004ee0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004ee2:	2318      	movs	r3, #24
 8004ee4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004eea:	f04f 33ff 	mov.w	r3, #4294967295
 8004eee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d045      	beq.n	8004f82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <osThreadNew+0x48>
        name = attr->name;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <osThreadNew+0x6e>
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	2b38      	cmp	r3, #56	@ 0x38
 8004f1c:	d805      	bhi.n	8004f2a <osThreadNew+0x6e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <osThreadNew+0x72>
        return (NULL);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e054      	b.n	8004fd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	089b      	lsrs	r3, r3, #2
 8004f3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00e      	beq.n	8004f64 <osThreadNew+0xa8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	2ba7      	cmp	r3, #167	@ 0xa7
 8004f4c:	d90a      	bls.n	8004f64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d006      	beq.n	8004f64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <osThreadNew+0xa8>
        mem = 1;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	61bb      	str	r3, [r7, #24]
 8004f62:	e010      	b.n	8004f86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10c      	bne.n	8004f86 <osThreadNew+0xca>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d108      	bne.n	8004f86 <osThreadNew+0xca>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <osThreadNew+0xca>
          mem = 0;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
 8004f80:	e001      	b.n	8004f86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d110      	bne.n	8004fae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f94:	9202      	str	r2, [sp, #8]
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	6a3a      	ldr	r2, [r7, #32]
 8004fa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f001 fb10 	bl	80065c8 <xTaskCreateStatic>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	e013      	b.n	8004fd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d110      	bne.n	8004fd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	f107 0310 	add.w	r3, r7, #16
 8004fbc:	9301      	str	r3, [sp, #4]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f001 fb5e 	bl	8006688 <xTaskCreate>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d001      	beq.n	8004fd6 <osThreadNew+0x11a>
            hTask = NULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004fd6:	693b      	ldr	r3, [r7, #16]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3728      	adds	r7, #40	@ 0x28
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f002 fee9 	bl	8007dc0 <pvTimerGetTimerID>
 8004fee:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	6852      	ldr	r2, [r2, #4]
 8004ffe:	4610      	mov	r0, r2
 8005000:	4798      	blx	r3
  }
}
 8005002:	bf00      	nop
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800500c:	b580      	push	{r7, lr}
 800500e:	b08c      	sub	sp, #48	@ 0x30
 8005010:	af02      	add	r7, sp, #8
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	460b      	mov	r3, r1
 800501a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800501c:	2300      	movs	r3, #0
 800501e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005020:	f3ef 8305 	mrs	r3, IPSR
 8005024:	613b      	str	r3, [r7, #16]
  return(result);
 8005026:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005028:	2b00      	cmp	r3, #0
 800502a:	d163      	bne.n	80050f4 <osTimerNew+0xe8>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d060      	beq.n	80050f4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005032:	2008      	movs	r0, #8
 8005034:	f003 f93a 	bl	80082ac <pvPortMalloc>
 8005038:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d059      	beq.n	80050f4 <osTimerNew+0xe8>
      callb->func = func;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800504c:	7afb      	ldrb	r3, [r7, #11]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <osTimerNew+0x4c>
        reload = pdFALSE;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	e001      	b.n	800505c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005058:	2301      	movs	r3, #1
 800505a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800505c:	f04f 33ff 	mov.w	r3, #4294967295
 8005060:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8005062:	2300      	movs	r3, #0
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01c      	beq.n	80050a6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <osTimerNew+0x6e>
          name = attr->name;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d006      	beq.n	8005090 <osTimerNew+0x84>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	2b2b      	cmp	r3, #43	@ 0x2b
 8005088:	d902      	bls.n	8005090 <osTimerNew+0x84>
          mem = 1;
 800508a:	2301      	movs	r3, #1
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	e00c      	b.n	80050aa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d108      	bne.n	80050aa <osTimerNew+0x9e>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d104      	bne.n	80050aa <osTimerNew+0x9e>
            mem = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	e001      	b.n	80050aa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d10c      	bne.n	80050ca <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	9301      	str	r3, [sp, #4]
 80050b6:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <osTimerNew+0xf4>)
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	2101      	movs	r1, #1
 80050c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050c2:	f002 faf0 	bl	80076a6 <xTimerCreateStatic>
 80050c6:	6238      	str	r0, [r7, #32]
 80050c8:	e00b      	b.n	80050e2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d108      	bne.n	80050e2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80050d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <osTimerNew+0xf4>)
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	2101      	movs	r1, #1
 80050da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050dc:	f002 fac2 	bl	8007664 <xTimerCreate>
 80050e0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <osTimerNew+0xe8>
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <osTimerNew+0xe8>
        vPortFree (callb);
 80050ee:	6978      	ldr	r0, [r7, #20]
 80050f0:	f003 f9aa 	bl	8008448 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80050f4:	6a3b      	ldr	r3, [r7, #32]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3728      	adds	r7, #40	@ 0x28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	08004fe1 	.word	0x08004fe1

08005104 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af02      	add	r7, sp, #8
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005112:	f3ef 8305 	mrs	r3, IPSR
 8005116:	60fb      	str	r3, [r7, #12]
  return(result);
 8005118:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <osTimerStart+0x22>
    stat = osErrorISR;
 800511e:	f06f 0305 	mvn.w	r3, #5
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	e017      	b.n	8005156 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d103      	bne.n	8005134 <osTimerStart+0x30>
    stat = osErrorParameter;
 800512c:	f06f 0303 	mvn.w	r3, #3
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	e010      	b.n	8005156 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005134:	2300      	movs	r3, #0
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	2300      	movs	r3, #0
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	2104      	movs	r1, #4
 800513e:	6938      	ldr	r0, [r7, #16]
 8005140:	f002 fb2e 	bl	80077a0 <xTimerGenericCommand>
 8005144:	4603      	mov	r3, r0
 8005146:	2b01      	cmp	r3, #1
 8005148:	d102      	bne.n	8005150 <osTimerStart+0x4c>
      stat = osOK;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	e002      	b.n	8005156 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005150:	f06f 0302 	mvn.w	r3, #2
 8005154:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005156:	697b      	ldr	r3, [r7, #20]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b08a      	sub	sp, #40	@ 0x28
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800516c:	2300      	movs	r3, #0
 800516e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005170:	f3ef 8305 	mrs	r3, IPSR
 8005174:	613b      	str	r3, [r7, #16]
  return(result);
 8005176:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005178:	2b00      	cmp	r3, #0
 800517a:	d175      	bne.n	8005268 <osSemaphoreNew+0x108>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d072      	beq.n	8005268 <osSemaphoreNew+0x108>
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	429a      	cmp	r2, r3
 8005188:	d86e      	bhi.n	8005268 <osSemaphoreNew+0x108>
    mem = -1;
 800518a:	f04f 33ff 	mov.w	r3, #4294967295
 800518e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d015      	beq.n	80051c2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d006      	beq.n	80051ac <osSemaphoreNew+0x4c>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2b4f      	cmp	r3, #79	@ 0x4f
 80051a4:	d902      	bls.n	80051ac <osSemaphoreNew+0x4c>
        mem = 1;
 80051a6:	2301      	movs	r3, #1
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e00c      	b.n	80051c6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d108      	bne.n	80051c6 <osSemaphoreNew+0x66>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <osSemaphoreNew+0x66>
          mem = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	e001      	b.n	80051c6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80051c2:	2300      	movs	r3, #0
 80051c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d04c      	beq.n	8005268 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d128      	bne.n	8005226 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d10a      	bne.n	80051f0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2203      	movs	r2, #3
 80051e0:	9200      	str	r2, [sp, #0]
 80051e2:	2200      	movs	r2, #0
 80051e4:	2100      	movs	r1, #0
 80051e6:	2001      	movs	r0, #1
 80051e8:	f000 fa2c 	bl	8005644 <xQueueGenericCreateStatic>
 80051ec:	61f8      	str	r0, [r7, #28]
 80051ee:	e005      	b.n	80051fc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80051f0:	2203      	movs	r2, #3
 80051f2:	2100      	movs	r1, #0
 80051f4:	2001      	movs	r0, #1
 80051f6:	f000 faa2 	bl	800573e <xQueueGenericCreate>
 80051fa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d022      	beq.n	8005248 <osSemaphoreNew+0xe8>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01f      	beq.n	8005248 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005208:	2300      	movs	r3, #0
 800520a:	2200      	movs	r2, #0
 800520c:	2100      	movs	r1, #0
 800520e:	69f8      	ldr	r0, [r7, #28]
 8005210:	f000 fb62 	bl	80058d8 <xQueueGenericSend>
 8005214:	4603      	mov	r3, r0
 8005216:	2b01      	cmp	r3, #1
 8005218:	d016      	beq.n	8005248 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800521a:	69f8      	ldr	r0, [r7, #28]
 800521c:	f001 f800 	bl	8006220 <vQueueDelete>
            hSemaphore = NULL;
 8005220:	2300      	movs	r3, #0
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	e010      	b.n	8005248 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d108      	bne.n	800523e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	461a      	mov	r2, r3
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	68f8      	ldr	r0, [r7, #12]
 8005236:	f000 fae0 	bl	80057fa <xQueueCreateCountingSemaphoreStatic>
 800523a:	61f8      	str	r0, [r7, #28]
 800523c:	e004      	b.n	8005248 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 fb13 	bl	800586c <xQueueCreateCountingSemaphore>
 8005246:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00c      	beq.n	8005268 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <osSemaphoreNew+0xfc>
          name = attr->name;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e001      	b.n	8005260 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005260:	6979      	ldr	r1, [r7, #20]
 8005262:	69f8      	ldr	r0, [r7, #28]
 8005264:	f001 f928 	bl	80064b8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005268:	69fb      	ldr	r3, [r7, #28]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005282:	2300      	movs	r3, #0
 8005284:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800528c:	f06f 0303 	mvn.w	r3, #3
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	e039      	b.n	8005308 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005294:	f3ef 8305 	mrs	r3, IPSR
 8005298:	60fb      	str	r3, [r7, #12]
  return(result);
 800529a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800529c:	2b00      	cmp	r3, #0
 800529e:	d022      	beq.n	80052e6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80052a6:	f06f 0303 	mvn.w	r3, #3
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e02c      	b.n	8005308 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80052b2:	f107 0308 	add.w	r3, r7, #8
 80052b6:	461a      	mov	r2, r3
 80052b8:	2100      	movs	r1, #0
 80052ba:	6938      	ldr	r0, [r7, #16]
 80052bc:	f000 ff2e 	bl	800611c <xQueueReceiveFromISR>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d003      	beq.n	80052ce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80052c6:	f06f 0302 	mvn.w	r3, #2
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	e01c      	b.n	8005308 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d019      	beq.n	8005308 <osSemaphoreAcquire+0x94>
 80052d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005314 <osSemaphoreAcquire+0xa0>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	e010      	b.n	8005308 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	6938      	ldr	r0, [r7, #16]
 80052ea:	f000 fe07 	bl	8005efc <xQueueSemaphoreTake>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d009      	beq.n	8005308 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80052fa:	f06f 0301 	mvn.w	r3, #1
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e002      	b.n	8005308 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005302:	f06f 0302 	mvn.w	r3, #2
 8005306:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005308:	697b      	ldr	r3, [r7, #20]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	e000ed04 	.word	0xe000ed04

08005318 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d103      	bne.n	8005336 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800532e:	f06f 0303 	mvn.w	r3, #3
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e02c      	b.n	8005390 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005336:	f3ef 8305 	mrs	r3, IPSR
 800533a:	60fb      	str	r3, [r7, #12]
  return(result);
 800533c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01a      	beq.n	8005378 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005342:	2300      	movs	r3, #0
 8005344:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005346:	f107 0308 	add.w	r3, r7, #8
 800534a:	4619      	mov	r1, r3
 800534c:	6938      	ldr	r0, [r7, #16]
 800534e:	f000 fc63 	bl	8005c18 <xQueueGiveFromISR>
 8005352:	4603      	mov	r3, r0
 8005354:	2b01      	cmp	r3, #1
 8005356:	d003      	beq.n	8005360 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005358:	f06f 0302 	mvn.w	r3, #2
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e017      	b.n	8005390 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d014      	beq.n	8005390 <osSemaphoreRelease+0x78>
 8005366:	4b0d      	ldr	r3, [pc, #52]	@ (800539c <osSemaphoreRelease+0x84>)
 8005368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	e00b      	b.n	8005390 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005378:	2300      	movs	r3, #0
 800537a:	2200      	movs	r2, #0
 800537c:	2100      	movs	r1, #0
 800537e:	6938      	ldr	r0, [r7, #16]
 8005380:	f000 faaa 	bl	80058d8 <xQueueGenericSend>
 8005384:	4603      	mov	r3, r0
 8005386:	2b01      	cmp	r3, #1
 8005388:	d002      	beq.n	8005390 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800538a:	f06f 0302 	mvn.w	r3, #2
 800538e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005390:	697b      	ldr	r3, [r7, #20]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	e000ed04 	.word	0xe000ed04

080053a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	4a07      	ldr	r2, [pc, #28]	@ (80053cc <vApplicationGetIdleTaskMemory+0x2c>)
 80053b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	4a06      	ldr	r2, [pc, #24]	@ (80053d0 <vApplicationGetIdleTaskMemory+0x30>)
 80053b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2280      	movs	r2, #128	@ 0x80
 80053bc:	601a      	str	r2, [r3, #0]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	2004079c 	.word	0x2004079c
 80053d0:	20040844 	.word	0x20040844

080053d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a07      	ldr	r2, [pc, #28]	@ (8005400 <vApplicationGetTimerTaskMemory+0x2c>)
 80053e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	4a06      	ldr	r2, [pc, #24]	@ (8005404 <vApplicationGetTimerTaskMemory+0x30>)
 80053ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	3714      	adds	r7, #20
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	20040a44 	.word	0x20040a44
 8005404:	20040aec 	.word	0x20040aec

08005408 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f103 0208 	add.w	r2, r3, #8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f04f 32ff 	mov.w	r2, #4294967295
 8005420:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f103 0208 	add.w	r2, r3, #8
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f103 0208 	add.w	r2, r3, #8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005462:	b480      	push	{r7}
 8005464:	b085      	sub	sp, #20
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	601a      	str	r2, [r3, #0]
}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr

080054aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054aa:	b480      	push	{r7}
 80054ac:	b085      	sub	sp, #20
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d103      	bne.n	80054ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	e00c      	b.n	80054e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3308      	adds	r3, #8
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	e002      	b.n	80054d8 <vListInsert+0x2e>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d2f6      	bcs.n	80054d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6892      	ldr	r2, [r2, #8]
 8005532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6852      	ldr	r2, [r2, #4]
 800553c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d103      	bne.n	8005550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	1e5a      	subs	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800559c:	f002 fd64 	bl	8008068 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a8:	68f9      	ldr	r1, [r7, #12]
 80055aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055ac:	fb01 f303 	mul.w	r3, r1, r3
 80055b0:	441a      	add	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055cc:	3b01      	subs	r3, #1
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	441a      	add	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	22ff      	movs	r2, #255	@ 0xff
 80055e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	22ff      	movs	r2, #255	@ 0xff
 80055e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d114      	bne.n	800561c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d01a      	beq.n	8005630 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3310      	adds	r3, #16
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 fc3e 	bl	8006e80 <xTaskRemoveFromEventList>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d012      	beq.n	8005630 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800560a:	4b0d      	ldr	r3, [pc, #52]	@ (8005640 <xQueueGenericReset+0xd0>)
 800560c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	e009      	b.n	8005630 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3310      	adds	r3, #16
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff fef1 	bl	8005408 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3324      	adds	r3, #36	@ 0x24
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff feec 	bl	8005408 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005630:	f002 fd4c 	bl	80080cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005634:	2301      	movs	r3, #1
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	e000ed04 	.word	0xe000ed04

08005644 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08e      	sub	sp, #56	@ 0x38
 8005648:	af02      	add	r7, sp, #8
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	e7fd      	b.n	800566c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10b      	bne.n	800568e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	e7fd      	b.n	800568a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <xQueueGenericCreateStatic+0x56>
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <xQueueGenericCreateStatic+0x5a>
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <xQueueGenericCreateStatic+0x5c>
 800569e:	2300      	movs	r3, #0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80056a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a8:	f383 8811 	msr	BASEPRI, r3
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f3bf 8f4f 	dsb	sy
 80056b4:	623b      	str	r3, [r7, #32]
}
 80056b6:	bf00      	nop
 80056b8:	bf00      	nop
 80056ba:	e7fd      	b.n	80056b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d102      	bne.n	80056c8 <xQueueGenericCreateStatic+0x84>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <xQueueGenericCreateStatic+0x88>
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <xQueueGenericCreateStatic+0x8a>
 80056cc:	2300      	movs	r3, #0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	61fb      	str	r3, [r7, #28]
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	e7fd      	b.n	80056e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056ea:	2350      	movs	r3, #80	@ 0x50
 80056ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b50      	cmp	r3, #80	@ 0x50
 80056f2:	d00b      	beq.n	800570c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	61bb      	str	r3, [r7, #24]
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800570c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00d      	beq.n	8005734 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571a:	2201      	movs	r2, #1
 800571c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005720:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f840 	bl	80057b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005736:	4618      	mov	r0, r3
 8005738:	3730      	adds	r7, #48	@ 0x30
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800573e:	b580      	push	{r7, lr}
 8005740:	b08a      	sub	sp, #40	@ 0x28
 8005742:	af02      	add	r7, sp, #8
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	4613      	mov	r3, r2
 800574a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	613b      	str	r3, [r7, #16]
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	e7fd      	b.n	8005766 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	3350      	adds	r3, #80	@ 0x50
 8005778:	4618      	mov	r0, r3
 800577a:	f002 fd97 	bl	80082ac <pvPortMalloc>
 800577e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d011      	beq.n	80057aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	3350      	adds	r3, #80	@ 0x50
 800578e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005798:	79fa      	ldrb	r2, [r7, #7]
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	4613      	mov	r3, r2
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f805 	bl	80057b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057aa:	69bb      	ldr	r3, [r7, #24]
	}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3720      	adds	r7, #32
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d103      	bne.n	80057d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e002      	b.n	80057d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057e2:	2101      	movs	r1, #1
 80057e4:	69b8      	ldr	r0, [r7, #24]
 80057e6:	f7ff fec3 	bl	8005570 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	78fa      	ldrb	r2, [r7, #3]
 80057ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b08a      	sub	sp, #40	@ 0x28
 80057fe:	af02      	add	r7, sp, #8
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d10b      	bne.n	8005824 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	61bb      	str	r3, [r7, #24]
}
 800581e:	bf00      	nop
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	429a      	cmp	r2, r3
 800582a:	d90b      	bls.n	8005844 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	617b      	str	r3, [r7, #20]
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005844:	2302      	movs	r3, #2
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	2100      	movs	r1, #0
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7ff fef8 	bl	8005644 <xQueueGenericCreateStatic>
 8005854:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005862:	69fb      	ldr	r3, [r7, #28]
	}
 8005864:	4618      	mov	r0, r3
 8005866:	3720      	adds	r7, #32
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10b      	bne.n	8005894 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	613b      	str	r3, [r7, #16]
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	e7fd      	b.n	8005890 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d90b      	bls.n	80058b4 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	60fb      	str	r3, [r7, #12]
}
 80058ae:	bf00      	nop
 80058b0:	bf00      	nop
 80058b2:	e7fd      	b.n	80058b0 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80058b4:	2202      	movs	r2, #2
 80058b6:	2100      	movs	r1, #0
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff ff40 	bl	800573e <xQueueGenericCreate>
 80058be:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80058cc:	697b      	ldr	r3, [r7, #20]
	}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08e      	sub	sp, #56	@ 0x38
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058e6:	2300      	movs	r3, #0
 80058e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10b      	bne.n	800590c <xQueueGenericSend+0x34>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	e7fd      	b.n	8005908 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d103      	bne.n	800591a <xQueueGenericSend+0x42>
 8005912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <xQueueGenericSend+0x46>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <xQueueGenericSend+0x48>
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10b      	bne.n	800593c <xQueueGenericSend+0x64>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005936:	bf00      	nop
 8005938:	bf00      	nop
 800593a:	e7fd      	b.n	8005938 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d103      	bne.n	800594a <xQueueGenericSend+0x72>
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <xQueueGenericSend+0x76>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <xQueueGenericSend+0x78>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10b      	bne.n	800596c <xQueueGenericSend+0x94>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	623b      	str	r3, [r7, #32]
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	e7fd      	b.n	8005968 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800596c:	f001 fc4e 	bl	800720c <xTaskGetSchedulerState>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d102      	bne.n	800597c <xQueueGenericSend+0xa4>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <xQueueGenericSend+0xa8>
 800597c:	2301      	movs	r3, #1
 800597e:	e000      	b.n	8005982 <xQueueGenericSend+0xaa>
 8005980:	2300      	movs	r3, #0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10b      	bne.n	800599e <xQueueGenericSend+0xc6>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	61fb      	str	r3, [r7, #28]
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	e7fd      	b.n	800599a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800599e:	f002 fb63 	bl	8008068 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d302      	bcc.n	80059b4 <xQueueGenericSend+0xdc>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d129      	bne.n	8005a08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	68b9      	ldr	r1, [r7, #8]
 80059b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059ba:	f000 fc6d 	bl	8006298 <prvCopyDataToQueue>
 80059be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d010      	beq.n	80059ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ca:	3324      	adds	r3, #36	@ 0x24
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 fa57 	bl	8006e80 <xTaskRemoveFromEventList>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059d8:	4b3f      	ldr	r3, [pc, #252]	@ (8005ad8 <xQueueGenericSend+0x200>)
 80059da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059de:	601a      	str	r2, [r3, #0]
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	e00a      	b.n	8005a00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059f0:	4b39      	ldr	r3, [pc, #228]	@ (8005ad8 <xQueueGenericSend+0x200>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a00:	f002 fb64 	bl	80080cc <vPortExitCritical>
				return pdPASS;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e063      	b.n	8005ad0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a0e:	f002 fb5d 	bl	80080cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e05c      	b.n	8005ad0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a1c:	f107 0314 	add.w	r3, r7, #20
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 fa91 	bl	8006f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a2a:	f002 fb4f 	bl	80080cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a2e:	f000 fff9 	bl	8006a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a32:	f002 fb19 	bl	8008068 <vPortEnterCritical>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d103      	bne.n	8005a4c <xQueueGenericSend+0x174>
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a52:	b25b      	sxtb	r3, r3
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d103      	bne.n	8005a62 <xQueueGenericSend+0x18a>
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a62:	f002 fb33 	bl	80080cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a66:	1d3a      	adds	r2, r7, #4
 8005a68:	f107 0314 	add.w	r3, r7, #20
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 fa80 	bl	8006f74 <xTaskCheckForTimeOut>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d124      	bne.n	8005ac4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a7c:	f000 fd04 	bl	8006488 <prvIsQueueFull>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d018      	beq.n	8005ab8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a88:	3310      	adds	r3, #16
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 f9a4 	bl	8006ddc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a96:	f000 fc8f 	bl	80063b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a9a:	f000 ffd1 	bl	8006a40 <xTaskResumeAll>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f47f af7c 	bne.w	800599e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <xQueueGenericSend+0x200>)
 8005aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	e772      	b.n	800599e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ab8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aba:	f000 fc7d 	bl	80063b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005abe:	f000 ffbf 	bl	8006a40 <xTaskResumeAll>
 8005ac2:	e76c      	b.n	800599e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ac4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ac6:	f000 fc77 	bl	80063b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005aca:	f000 ffb9 	bl	8006a40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ace:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3738      	adds	r7, #56	@ 0x38
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	e000ed04 	.word	0xe000ed04

08005adc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b090      	sub	sp, #64	@ 0x40
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d103      	bne.n	8005b1a <xQueueGenericSendFromISR+0x3e>
 8005b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d101      	bne.n	8005b1e <xQueueGenericSendFromISR+0x42>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <xQueueGenericSendFromISR+0x44>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d103      	bne.n	8005b4a <xQueueGenericSendFromISR+0x6e>
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <xQueueGenericSendFromISR+0x72>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <xQueueGenericSendFromISR+0x74>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10b      	bne.n	8005b6c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b58:	f383 8811 	msr	BASEPRI, r3
 8005b5c:	f3bf 8f6f 	isb	sy
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	623b      	str	r3, [r7, #32]
}
 8005b66:	bf00      	nop
 8005b68:	bf00      	nop
 8005b6a:	e7fd      	b.n	8005b68 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b6c:	f002 fb5c 	bl	8008228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b70:	f3ef 8211 	mrs	r2, BASEPRI
 8005b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b78:	f383 8811 	msr	BASEPRI, r3
 8005b7c:	f3bf 8f6f 	isb	sy
 8005b80:	f3bf 8f4f 	dsb	sy
 8005b84:	61fa      	str	r2, [r7, #28]
 8005b86:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b88:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b8a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d302      	bcc.n	8005b9e <xQueueGenericSendFromISR+0xc2>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d12f      	bne.n	8005bfe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ba4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005bb4:	f000 fb70 	bl	8006298 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bb8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d112      	bne.n	8005be8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d016      	beq.n	8005bf8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	3324      	adds	r3, #36	@ 0x24
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f956 	bl	8006e80 <xTaskRemoveFromEventList>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00e      	beq.n	8005bf8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00b      	beq.n	8005bf8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e007      	b.n	8005bf8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005be8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005bec:	3301      	adds	r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	b25a      	sxtb	r2, r3
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005bfc:	e001      	b.n	8005c02 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c04:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3740      	adds	r7, #64	@ 0x40
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08e      	sub	sp, #56	@ 0x38
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10b      	bne.n	8005c44 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	623b      	str	r3, [r7, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	bf00      	nop
 8005c42:	e7fd      	b.n	8005c40 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00b      	beq.n	8005c64 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	61fb      	str	r3, [r7, #28]
}
 8005c5e:	bf00      	nop
 8005c60:	bf00      	nop
 8005c62:	e7fd      	b.n	8005c60 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d103      	bne.n	8005c74 <xQueueGiveFromISR+0x5c>
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d101      	bne.n	8005c78 <xQueueGiveFromISR+0x60>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <xQueueGiveFromISR+0x62>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10b      	bne.n	8005c96 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	61bb      	str	r3, [r7, #24]
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	e7fd      	b.n	8005c92 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c96:	f002 fac7 	bl	8008228 <vPortValidateInterruptPriority>
	__asm volatile
 8005c9a:	f3ef 8211 	mrs	r2, BASEPRI
 8005c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	617a      	str	r2, [r7, #20]
 8005cb0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005cb2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d22b      	bcs.n	8005d1e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ccc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d112      	bne.n	8005d08 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d016      	beq.n	8005d18 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	3324      	adds	r3, #36	@ 0x24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 f8c6 	bl	8006e80 <xTaskRemoveFromEventList>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00e      	beq.n	8005d18 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2201      	movs	r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	e007      	b.n	8005d18 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	b25a      	sxtb	r2, r3
 8005d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d1c:	e001      	b.n	8005d22 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d24:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f383 8811 	msr	BASEPRI, r3
}
 8005d2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3738      	adds	r7, #56	@ 0x38
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08c      	sub	sp, #48	@ 0x30
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d44:	2300      	movs	r3, #0
 8005d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10b      	bne.n	8005d6a <xQueueReceive+0x32>
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	623b      	str	r3, [r7, #32]
}
 8005d64:	bf00      	nop
 8005d66:	bf00      	nop
 8005d68:	e7fd      	b.n	8005d66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d103      	bne.n	8005d78 <xQueueReceive+0x40>
 8005d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <xQueueReceive+0x44>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <xQueueReceive+0x46>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10b      	bne.n	8005d9a <xQueueReceive+0x62>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	61fb      	str	r3, [r7, #28]
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	e7fd      	b.n	8005d96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d9a:	f001 fa37 	bl	800720c <xTaskGetSchedulerState>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d102      	bne.n	8005daa <xQueueReceive+0x72>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <xQueueReceive+0x76>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <xQueueReceive+0x78>
 8005dae:	2300      	movs	r3, #0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10b      	bne.n	8005dcc <xQueueReceive+0x94>
	__asm volatile
 8005db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	61bb      	str	r3, [r7, #24]
}
 8005dc6:	bf00      	nop
 8005dc8:	bf00      	nop
 8005dca:	e7fd      	b.n	8005dc8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dcc:	f002 f94c 	bl	8008068 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d01f      	beq.n	8005e1c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005de0:	f000 fac4 	bl	800636c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	1e5a      	subs	r2, r3, #1
 8005de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00f      	beq.n	8005e14 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	3310      	adds	r3, #16
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 f841 	bl	8006e80 <xTaskRemoveFromEventList>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e04:	4b3c      	ldr	r3, [pc, #240]	@ (8005ef8 <xQueueReceive+0x1c0>)
 8005e06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e14:	f002 f95a 	bl	80080cc <vPortExitCritical>
				return pdPASS;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e069      	b.n	8005ef0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d103      	bne.n	8005e2a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e22:	f002 f953 	bl	80080cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e26:	2300      	movs	r3, #0
 8005e28:	e062      	b.n	8005ef0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d106      	bne.n	8005e3e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e30:	f107 0310 	add.w	r3, r7, #16
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 f887 	bl	8006f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e3e:	f002 f945 	bl	80080cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e42:	f000 fdef 	bl	8006a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e46:	f002 f90f 	bl	8008068 <vPortEnterCritical>
 8005e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e50:	b25b      	sxtb	r3, r3
 8005e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e56:	d103      	bne.n	8005e60 <xQueueReceive+0x128>
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d103      	bne.n	8005e76 <xQueueReceive+0x13e>
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e76:	f002 f929 	bl	80080cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e7a:	1d3a      	adds	r2, r7, #4
 8005e7c:	f107 0310 	add.w	r3, r7, #16
 8005e80:	4611      	mov	r1, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f876 	bl	8006f74 <xTaskCheckForTimeOut>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d123      	bne.n	8005ed6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e90:	f000 fae4 	bl	800645c <prvIsQueueEmpty>
 8005e94:	4603      	mov	r3, r0
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d017      	beq.n	8005eca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9c:	3324      	adds	r3, #36	@ 0x24
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 ff9a 	bl	8006ddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ea8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eaa:	f000 fa85 	bl	80063b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005eae:	f000 fdc7 	bl	8006a40 <xTaskResumeAll>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d189      	bne.n	8005dcc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef8 <xQueueReceive+0x1c0>)
 8005eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	e780      	b.n	8005dcc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005eca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ecc:	f000 fa74 	bl	80063b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ed0:	f000 fdb6 	bl	8006a40 <xTaskResumeAll>
 8005ed4:	e77a      	b.n	8005dcc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ed6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ed8:	f000 fa6e 	bl	80063b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005edc:	f000 fdb0 	bl	8006a40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ee2:	f000 fabb 	bl	800645c <prvIsQueueEmpty>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f43f af6f 	beq.w	8005dcc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005eee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3730      	adds	r7, #48	@ 0x30
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	e000ed04 	.word	0xe000ed04

08005efc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08e      	sub	sp, #56	@ 0x38
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f06:	2300      	movs	r3, #0
 8005f08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10b      	bne.n	8005f30 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1c:	f383 8811 	msr	BASEPRI, r3
 8005f20:	f3bf 8f6f 	isb	sy
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	623b      	str	r3, [r7, #32]
}
 8005f2a:	bf00      	nop
 8005f2c:	bf00      	nop
 8005f2e:	e7fd      	b.n	8005f2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	61fb      	str	r3, [r7, #28]
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	e7fd      	b.n	8005f4c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f50:	f001 f95c 	bl	800720c <xTaskGetSchedulerState>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d102      	bne.n	8005f60 <xQueueSemaphoreTake+0x64>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <xQueueSemaphoreTake+0x68>
 8005f60:	2301      	movs	r3, #1
 8005f62:	e000      	b.n	8005f66 <xQueueSemaphoreTake+0x6a>
 8005f64:	2300      	movs	r3, #0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	61bb      	str	r3, [r7, #24]
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f82:	f002 f871 	bl	8008068 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d024      	beq.n	8005fdc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f94:	1e5a      	subs	r2, r3, #1
 8005f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f98:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005fa2:	f001 faad 	bl	8007500 <pvTaskIncrementMutexHeldCount>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005faa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00f      	beq.n	8005fd4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fb6:	3310      	adds	r3, #16
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 ff61 	bl	8006e80 <xTaskRemoveFromEventList>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d007      	beq.n	8005fd4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fc4:	4b54      	ldr	r3, [pc, #336]	@ (8006118 <xQueueSemaphoreTake+0x21c>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fd4:	f002 f87a 	bl	80080cc <vPortExitCritical>
				return pdPASS;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e098      	b.n	800610e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d112      	bne.n	8006008 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	617b      	str	r3, [r7, #20]
}
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	e7fd      	b.n	8005ffc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006000:	f002 f864 	bl	80080cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006004:	2300      	movs	r3, #0
 8006006:	e082      	b.n	800610e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800600e:	f107 030c 	add.w	r3, r7, #12
 8006012:	4618      	mov	r0, r3
 8006014:	f000 ff98 	bl	8006f48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800601c:	f002 f856 	bl	80080cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006020:	f000 fd00 	bl	8006a24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006024:	f002 f820 	bl	8008068 <vPortEnterCritical>
 8006028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800602e:	b25b      	sxtb	r3, r3
 8006030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006034:	d103      	bne.n	800603e <xQueueSemaphoreTake+0x142>
 8006036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006040:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006044:	b25b      	sxtb	r3, r3
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d103      	bne.n	8006054 <xQueueSemaphoreTake+0x158>
 800604c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006054:	f002 f83a 	bl	80080cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006058:	463a      	mov	r2, r7
 800605a:	f107 030c 	add.w	r3, r7, #12
 800605e:	4611      	mov	r1, r2
 8006060:	4618      	mov	r0, r3
 8006062:	f000 ff87 	bl	8006f74 <xTaskCheckForTimeOut>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d132      	bne.n	80060d2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800606c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800606e:	f000 f9f5 	bl	800645c <prvIsQueueEmpty>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d026      	beq.n	80060c6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006080:	f001 fff2 	bl	8008068 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	4618      	mov	r0, r3
 800608a:	f001 f8dd 	bl	8007248 <xTaskPriorityInherit>
 800608e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006090:	f002 f81c 	bl	80080cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006096:	3324      	adds	r3, #36	@ 0x24
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	4611      	mov	r1, r2
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fe9d 	bl	8006ddc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060a4:	f000 f988 	bl	80063b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060a8:	f000 fcca 	bl	8006a40 <xTaskResumeAll>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f47f af67 	bne.w	8005f82 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80060b4:	4b18      	ldr	r3, [pc, #96]	@ (8006118 <xQueueSemaphoreTake+0x21c>)
 80060b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	e75d      	b.n	8005f82 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80060c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060c8:	f000 f976 	bl	80063b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060cc:	f000 fcb8 	bl	8006a40 <xTaskResumeAll>
 80060d0:	e757      	b.n	8005f82 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80060d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060d4:	f000 f970 	bl	80063b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060d8:	f000 fcb2 	bl	8006a40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060de:	f000 f9bd 	bl	800645c <prvIsQueueEmpty>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f43f af4c 	beq.w	8005f82 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80060ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00d      	beq.n	800610c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80060f0:	f001 ffba 	bl	8008068 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80060f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80060f6:	f000 f8b7 	bl	8006268 <prvGetDisinheritPriorityAfterTimeout>
 80060fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80060fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006102:	4618      	mov	r0, r3
 8006104:	f001 f978 	bl	80073f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006108:	f001 ffe0 	bl	80080cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800610c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800610e:	4618      	mov	r0, r3
 8006110:	3738      	adds	r7, #56	@ 0x38
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	e000ed04 	.word	0xe000ed04

0800611c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08e      	sub	sp, #56	@ 0x38
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800612c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10b      	bne.n	800614a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	623b      	str	r3, [r7, #32]
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop
 8006148:	e7fd      	b.n	8006146 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d103      	bne.n	8006158 <xQueueReceiveFromISR+0x3c>
 8006150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <xQueueReceiveFromISR+0x40>
 8006158:	2301      	movs	r3, #1
 800615a:	e000      	b.n	800615e <xQueueReceiveFromISR+0x42>
 800615c:	2300      	movs	r3, #0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10b      	bne.n	800617a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	61fb      	str	r3, [r7, #28]
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	e7fd      	b.n	8006176 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800617a:	f002 f855 	bl	8008228 <vPortValidateInterruptPriority>
	__asm volatile
 800617e:	f3ef 8211 	mrs	r2, BASEPRI
 8006182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	61ba      	str	r2, [r7, #24]
 8006194:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006196:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006198:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d02f      	beq.n	8006206 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80061a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061b4:	f000 f8da 	bl	800636c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ba:	1e5a      	subs	r2, r3, #1
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80061c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c8:	d112      	bne.n	80061f0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d016      	beq.n	8006200 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	3310      	adds	r3, #16
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fe52 	bl	8006e80 <xTaskRemoveFromEventList>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00e      	beq.n	8006200 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00b      	beq.n	8006200 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	e007      	b.n	8006200 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80061f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061f4:	3301      	adds	r3, #1
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	b25a      	sxtb	r2, r3
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006200:	2301      	movs	r3, #1
 8006202:	637b      	str	r3, [r7, #52]	@ 0x34
 8006204:	e001      	b.n	800620a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8006206:	2300      	movs	r3, #0
 8006208:	637b      	str	r3, [r7, #52]	@ 0x34
 800620a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f383 8811 	msr	BASEPRI, r3
}
 8006214:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006218:	4618      	mov	r0, r3
 800621a:	3738      	adds	r7, #56	@ 0x38
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10b      	bne.n	800624a <vQueueDelete+0x2a>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	60bb      	str	r3, [r7, #8]
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	e7fd      	b.n	8006246 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f95e 	bl	800650c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006256:	2b00      	cmp	r3, #0
 8006258:	d102      	bne.n	8006260 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f002 f8f4 	bl	8008448 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006274:	2b00      	cmp	r3, #0
 8006276:	d006      	beq.n	8006286 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e001      	b.n	800628a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800628a:	68fb      	ldr	r3, [r7, #12]
	}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062a4:	2300      	movs	r3, #0
 80062a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10d      	bne.n	80062d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d14d      	bne.n	800635a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 f828 	bl	8007318 <xTaskPriorityDisinherit>
 80062c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	609a      	str	r2, [r3, #8]
 80062d0:	e043      	b.n	800635a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d119      	bne.n	800630c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6858      	ldr	r0, [r3, #4]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e0:	461a      	mov	r2, r3
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	f002 fa54 	bl	8008790 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	441a      	add	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d32b      	bcc.n	800635a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	605a      	str	r2, [r3, #4]
 800630a:	e026      	b.n	800635a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	68d8      	ldr	r0, [r3, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006314:	461a      	mov	r2, r3
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	f002 fa3a 	bl	8008790 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006324:	425b      	negs	r3, r3
 8006326:	441a      	add	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d207      	bcs.n	8006348 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006340:	425b      	negs	r3, r3
 8006342:	441a      	add	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d105      	bne.n	800635a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	3b01      	subs	r3, #1
 8006358:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006362:	697b      	ldr	r3, [r7, #20]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d018      	beq.n	80063b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006386:	441a      	add	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	429a      	cmp	r2, r3
 8006396:	d303      	bcc.n	80063a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68d9      	ldr	r1, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a8:	461a      	mov	r2, r3
 80063aa:	6838      	ldr	r0, [r7, #0]
 80063ac:	f002 f9f0 	bl	8008790 <memcpy>
	}
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063c0:	f001 fe52 	bl	8008068 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063cc:	e011      	b.n	80063f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d012      	beq.n	80063fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3324      	adds	r3, #36	@ 0x24
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fd50 	bl	8006e80 <xTaskRemoveFromEventList>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d001      	beq.n	80063ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063e6:	f000 fe29 	bl	800703c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	dce9      	bgt.n	80063ce <prvUnlockQueue+0x16>
 80063fa:	e000      	b.n	80063fe <prvUnlockQueue+0x46>
					break;
 80063fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	22ff      	movs	r2, #255	@ 0xff
 8006402:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006406:	f001 fe61 	bl	80080cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800640a:	f001 fe2d 	bl	8008068 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006414:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006416:	e011      	b.n	800643c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d012      	beq.n	8006446 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3310      	adds	r3, #16
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fd2b 	bl	8006e80 <xTaskRemoveFromEventList>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006430:	f000 fe04 	bl	800703c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	3b01      	subs	r3, #1
 8006438:	b2db      	uxtb	r3, r3
 800643a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800643c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006440:	2b00      	cmp	r3, #0
 8006442:	dce9      	bgt.n	8006418 <prvUnlockQueue+0x60>
 8006444:	e000      	b.n	8006448 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006446:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	22ff      	movs	r2, #255	@ 0xff
 800644c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006450:	f001 fe3c 	bl	80080cc <vPortExitCritical>
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006464:	f001 fe00 	bl	8008068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006470:	2301      	movs	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]
 8006474:	e001      	b.n	800647a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800647a:	f001 fe27 	bl	80080cc <vPortExitCritical>

	return xReturn;
 800647e:	68fb      	ldr	r3, [r7, #12]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006490:	f001 fdea 	bl	8008068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649c:	429a      	cmp	r2, r3
 800649e:	d102      	bne.n	80064a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064a0:	2301      	movs	r3, #1
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	e001      	b.n	80064aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064aa:	f001 fe0f 	bl	80080cc <vPortExitCritical>

	return xReturn;
 80064ae:	68fb      	ldr	r3, [r7, #12]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	e014      	b.n	80064f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80064c8:	4a0f      	ldr	r2, [pc, #60]	@ (8006508 <vQueueAddToRegistry+0x50>)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10b      	bne.n	80064ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80064d4:	490c      	ldr	r1, [pc, #48]	@ (8006508 <vQueueAddToRegistry+0x50>)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80064de:	4a0a      	ldr	r2, [pc, #40]	@ (8006508 <vQueueAddToRegistry+0x50>)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	4413      	add	r3, r2
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80064ea:	e006      	b.n	80064fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b07      	cmp	r3, #7
 80064f6:	d9e7      	bls.n	80064c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80064f8:	bf00      	nop
 80064fa:	bf00      	nop
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20040eec 	.word	0x20040eec

0800650c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	e016      	b.n	8006548 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800651a:	4a10      	ldr	r2, [pc, #64]	@ (800655c <vQueueUnregisterQueue+0x50>)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	4413      	add	r3, r2
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	429a      	cmp	r2, r3
 8006528:	d10b      	bne.n	8006542 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800652a:	4a0c      	ldr	r2, [pc, #48]	@ (800655c <vQueueUnregisterQueue+0x50>)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2100      	movs	r1, #0
 8006530:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006534:	4a09      	ldr	r2, [pc, #36]	@ (800655c <vQueueUnregisterQueue+0x50>)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	4413      	add	r3, r2
 800653c:	2200      	movs	r2, #0
 800653e:	605a      	str	r2, [r3, #4]
				break;
 8006540:	e006      	b.n	8006550 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b07      	cmp	r3, #7
 800654c:	d9e5      	bls.n	800651a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	20040eec 	.word	0x20040eec

08006560 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006570:	f001 fd7a 	bl	8008068 <vPortEnterCritical>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800657a:	b25b      	sxtb	r3, r3
 800657c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006580:	d103      	bne.n	800658a <vQueueWaitForMessageRestricted+0x2a>
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006590:	b25b      	sxtb	r3, r3
 8006592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006596:	d103      	bne.n	80065a0 <vQueueWaitForMessageRestricted+0x40>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065a0:	f001 fd94 	bl	80080cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d106      	bne.n	80065ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	3324      	adds	r3, #36	@ 0x24
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f000 fc37 	bl	8006e28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065ba:	6978      	ldr	r0, [r7, #20]
 80065bc:	f7ff fefc 	bl	80063b8 <prvUnlockQueue>
	}
 80065c0:	bf00      	nop
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08e      	sub	sp, #56	@ 0x38
 80065cc:	af04      	add	r7, sp, #16
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10b      	bne.n	80065f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	623b      	str	r3, [r7, #32]
}
 80065ee:	bf00      	nop
 80065f0:	bf00      	nop
 80065f2:	e7fd      	b.n	80065f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10b      	bne.n	8006612 <xTaskCreateStatic+0x4a>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	61fb      	str	r3, [r7, #28]
}
 800660c:	bf00      	nop
 800660e:	bf00      	nop
 8006610:	e7fd      	b.n	800660e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006612:	23a8      	movs	r3, #168	@ 0xa8
 8006614:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2ba8      	cmp	r3, #168	@ 0xa8
 800661a:	d00b      	beq.n	8006634 <xTaskCreateStatic+0x6c>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	61bb      	str	r3, [r7, #24]
}
 800662e:	bf00      	nop
 8006630:	bf00      	nop
 8006632:	e7fd      	b.n	8006630 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006634:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01e      	beq.n	800667a <xTaskCreateStatic+0xb2>
 800663c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800663e:	2b00      	cmp	r3, #0
 8006640:	d01b      	beq.n	800667a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006644:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800664a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	2202      	movs	r2, #2
 8006650:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006654:	2300      	movs	r3, #0
 8006656:	9303      	str	r3, [sp, #12]
 8006658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665a:	9302      	str	r3, [sp, #8]
 800665c:	f107 0314 	add.w	r3, r7, #20
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	68b9      	ldr	r1, [r7, #8]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f851 	bl	8006714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006672:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006674:	f000 f8f6 	bl	8006864 <prvAddNewTaskToReadyList>
 8006678:	e001      	b.n	800667e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800667a:	2300      	movs	r3, #0
 800667c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800667e:	697b      	ldr	r3, [r7, #20]
	}
 8006680:	4618      	mov	r0, r3
 8006682:	3728      	adds	r7, #40	@ 0x28
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08c      	sub	sp, #48	@ 0x30
 800668c:	af04      	add	r7, sp, #16
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	4613      	mov	r3, r2
 8006696:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006698:	88fb      	ldrh	r3, [r7, #6]
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4618      	mov	r0, r3
 800669e:	f001 fe05 	bl	80082ac <pvPortMalloc>
 80066a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00e      	beq.n	80066c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066aa:	20a8      	movs	r0, #168	@ 0xa8
 80066ac:	f001 fdfe 	bl	80082ac <pvPortMalloc>
 80066b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80066be:	e005      	b.n	80066cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066c0:	6978      	ldr	r0, [r7, #20]
 80066c2:	f001 fec1 	bl	8008448 <vPortFree>
 80066c6:	e001      	b.n	80066cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d017      	beq.n	8006702 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066da:	88fa      	ldrh	r2, [r7, #6]
 80066dc:	2300      	movs	r3, #0
 80066de:	9303      	str	r3, [sp, #12]
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	9302      	str	r3, [sp, #8]
 80066e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f80f 	bl	8006714 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066f6:	69f8      	ldr	r0, [r7, #28]
 80066f8:	f000 f8b4 	bl	8006864 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066fc:	2301      	movs	r3, #1
 80066fe:	61bb      	str	r3, [r7, #24]
 8006700:	e002      	b.n	8006708 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006702:	f04f 33ff 	mov.w	r3, #4294967295
 8006706:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006708:	69bb      	ldr	r3, [r7, #24]
	}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
	...

08006714 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006724:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	461a      	mov	r2, r3
 800672c:	21a5      	movs	r1, #165	@ 0xa5
 800672e:	f001 ffab 	bl	8008688 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800673c:	3b01      	subs	r3, #1
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f023 0307 	bic.w	r3, r3, #7
 800674a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f003 0307 	and.w	r3, r3, #7
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00b      	beq.n	800676e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	617b      	str	r3, [r7, #20]
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	e7fd      	b.n	800676a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01f      	beq.n	80067b4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
 8006778:	e012      	b.n	80067a0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	4413      	add	r3, r2
 8006780:	7819      	ldrb	r1, [r3, #0]
 8006782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	4413      	add	r3, r2
 8006788:	3334      	adds	r3, #52	@ 0x34
 800678a:	460a      	mov	r2, r1
 800678c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d006      	beq.n	80067a8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	3301      	adds	r3, #1
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	2b0f      	cmp	r3, #15
 80067a4:	d9e9      	bls.n	800677a <prvInitialiseNewTask+0x66>
 80067a6:	e000      	b.n	80067aa <prvInitialiseNewTask+0x96>
			{
				break;
 80067a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067b2:	e003      	b.n	80067bc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067be:	2b37      	cmp	r3, #55	@ 0x37
 80067c0:	d901      	bls.n	80067c6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067c2:	2337      	movs	r3, #55	@ 0x37
 80067c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d4:	2200      	movs	r2, #0
 80067d6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067da:	3304      	adds	r3, #4
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe fe33 	bl	8005448 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e4:	3318      	adds	r3, #24
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fe2e 	bl	8005448 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006800:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006804:	2200      	movs	r2, #0
 8006806:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680c:	2200      	movs	r2, #0
 800680e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	3354      	adds	r3, #84	@ 0x54
 8006816:	224c      	movs	r2, #76	@ 0x4c
 8006818:	2100      	movs	r1, #0
 800681a:	4618      	mov	r0, r3
 800681c:	f001 ff34 	bl	8008688 <memset>
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	4a0d      	ldr	r2, [pc, #52]	@ (8006858 <prvInitialiseNewTask+0x144>)
 8006824:	659a      	str	r2, [r3, #88]	@ 0x58
 8006826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006828:	4a0c      	ldr	r2, [pc, #48]	@ (800685c <prvInitialiseNewTask+0x148>)
 800682a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682e:	4a0c      	ldr	r2, [pc, #48]	@ (8006860 <prvInitialiseNewTask+0x14c>)
 8006830:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	68f9      	ldr	r1, [r7, #12]
 8006836:	69b8      	ldr	r0, [r7, #24]
 8006838:	f001 fae4 	bl	8007e04 <pxPortInitialiseStack>
 800683c:	4602      	mov	r2, r0
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800684a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800684c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800684e:	bf00      	nop
 8006850:	3720      	adds	r7, #32
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20042138 	.word	0x20042138
 800685c:	200421a0 	.word	0x200421a0
 8006860:	20042208 	.word	0x20042208

08006864 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800686c:	f001 fbfc 	bl	8008068 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006870:	4b2d      	ldr	r3, [pc, #180]	@ (8006928 <prvAddNewTaskToReadyList+0xc4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3301      	adds	r3, #1
 8006876:	4a2c      	ldr	r2, [pc, #176]	@ (8006928 <prvAddNewTaskToReadyList+0xc4>)
 8006878:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800687a:	4b2c      	ldr	r3, [pc, #176]	@ (800692c <prvAddNewTaskToReadyList+0xc8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d109      	bne.n	8006896 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006882:	4a2a      	ldr	r2, [pc, #168]	@ (800692c <prvAddNewTaskToReadyList+0xc8>)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006888:	4b27      	ldr	r3, [pc, #156]	@ (8006928 <prvAddNewTaskToReadyList+0xc4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d110      	bne.n	80068b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006890:	f000 fbf8 	bl	8007084 <prvInitialiseTaskLists>
 8006894:	e00d      	b.n	80068b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006896:	4b26      	ldr	r3, [pc, #152]	@ (8006930 <prvAddNewTaskToReadyList+0xcc>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800689e:	4b23      	ldr	r3, [pc, #140]	@ (800692c <prvAddNewTaskToReadyList+0xc8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d802      	bhi.n	80068b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068ac:	4a1f      	ldr	r2, [pc, #124]	@ (800692c <prvAddNewTaskToReadyList+0xc8>)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068b2:	4b20      	ldr	r3, [pc, #128]	@ (8006934 <prvAddNewTaskToReadyList+0xd0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3301      	adds	r3, #1
 80068b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006934 <prvAddNewTaskToReadyList+0xd0>)
 80068ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006934 <prvAddNewTaskToReadyList+0xd0>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006938 <prvAddNewTaskToReadyList+0xd4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d903      	bls.n	80068d8 <prvAddNewTaskToReadyList+0x74>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d4:	4a18      	ldr	r2, [pc, #96]	@ (8006938 <prvAddNewTaskToReadyList+0xd4>)
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4a15      	ldr	r2, [pc, #84]	@ (800693c <prvAddNewTaskToReadyList+0xd8>)
 80068e6:	441a      	add	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4619      	mov	r1, r3
 80068ee:	4610      	mov	r0, r2
 80068f0:	f7fe fdb7 	bl	8005462 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068f4:	f001 fbea 	bl	80080cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006930 <prvAddNewTaskToReadyList+0xcc>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00e      	beq.n	800691e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006900:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <prvAddNewTaskToReadyList+0xc8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800690a:	429a      	cmp	r2, r3
 800690c:	d207      	bcs.n	800691e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800690e:	4b0c      	ldr	r3, [pc, #48]	@ (8006940 <prvAddNewTaskToReadyList+0xdc>)
 8006910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800691e:	bf00      	nop
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20041400 	.word	0x20041400
 800692c:	20040f2c 	.word	0x20040f2c
 8006930:	2004140c 	.word	0x2004140c
 8006934:	2004141c 	.word	0x2004141c
 8006938:	20041408 	.word	0x20041408
 800693c:	20040f30 	.word	0x20040f30
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08a      	sub	sp, #40	@ 0x28
 8006948:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800694e:	2300      	movs	r3, #0
 8006950:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006952:	463a      	mov	r2, r7
 8006954:	1d39      	adds	r1, r7, #4
 8006956:	f107 0308 	add.w	r3, r7, #8
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe fd20 	bl	80053a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	9202      	str	r2, [sp, #8]
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	2300      	movs	r3, #0
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	2300      	movs	r3, #0
 8006970:	460a      	mov	r2, r1
 8006972:	4924      	ldr	r1, [pc, #144]	@ (8006a04 <vTaskStartScheduler+0xc0>)
 8006974:	4824      	ldr	r0, [pc, #144]	@ (8006a08 <vTaskStartScheduler+0xc4>)
 8006976:	f7ff fe27 	bl	80065c8 <xTaskCreateStatic>
 800697a:	4603      	mov	r3, r0
 800697c:	4a23      	ldr	r2, [pc, #140]	@ (8006a0c <vTaskStartScheduler+0xc8>)
 800697e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006980:	4b22      	ldr	r3, [pc, #136]	@ (8006a0c <vTaskStartScheduler+0xc8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006988:	2301      	movs	r3, #1
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e001      	b.n	8006992 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d102      	bne.n	800699e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006998:	f000 fe1a 	bl	80075d0 <xTimerCreateTimerTask>
 800699c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d11b      	bne.n	80069dc <vTaskStartScheduler+0x98>
	__asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	613b      	str	r3, [r7, #16]
}
 80069b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069b8:	4b15      	ldr	r3, [pc, #84]	@ (8006a10 <vTaskStartScheduler+0xcc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3354      	adds	r3, #84	@ 0x54
 80069be:	4a15      	ldr	r2, [pc, #84]	@ (8006a14 <vTaskStartScheduler+0xd0>)
 80069c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069c2:	4b15      	ldr	r3, [pc, #84]	@ (8006a18 <vTaskStartScheduler+0xd4>)
 80069c4:	f04f 32ff 	mov.w	r2, #4294967295
 80069c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069ca:	4b14      	ldr	r3, [pc, #80]	@ (8006a1c <vTaskStartScheduler+0xd8>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069d0:	4b13      	ldr	r3, [pc, #76]	@ (8006a20 <vTaskStartScheduler+0xdc>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069d6:	f001 faa3 	bl	8007f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069da:	e00f      	b.n	80069fc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e2:	d10b      	bne.n	80069fc <vTaskStartScheduler+0xb8>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60fb      	str	r3, [r7, #12]
}
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	e7fd      	b.n	80069f8 <vTaskStartScheduler+0xb4>
}
 80069fc:	bf00      	nop
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	080088c8 	.word	0x080088c8
 8006a08:	08007055 	.word	0x08007055
 8006a0c:	20041424 	.word	0x20041424
 8006a10:	20040f2c 	.word	0x20040f2c
 8006a14:	20040014 	.word	0x20040014
 8006a18:	20041420 	.word	0x20041420
 8006a1c:	2004140c 	.word	0x2004140c
 8006a20:	20041404 	.word	0x20041404

08006a24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a28:	4b04      	ldr	r3, [pc, #16]	@ (8006a3c <vTaskSuspendAll+0x18>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	4a03      	ldr	r2, [pc, #12]	@ (8006a3c <vTaskSuspendAll+0x18>)
 8006a30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a32:	bf00      	nop
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	20041428 	.word	0x20041428

08006a40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a4e:	4b42      	ldr	r3, [pc, #264]	@ (8006b58 <xTaskResumeAll+0x118>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10b      	bne.n	8006a6e <xTaskResumeAll+0x2e>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	603b      	str	r3, [r7, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	e7fd      	b.n	8006a6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a6e:	f001 fafb 	bl	8008068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a72:	4b39      	ldr	r3, [pc, #228]	@ (8006b58 <xTaskResumeAll+0x118>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	4a37      	ldr	r2, [pc, #220]	@ (8006b58 <xTaskResumeAll+0x118>)
 8006a7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a7c:	4b36      	ldr	r3, [pc, #216]	@ (8006b58 <xTaskResumeAll+0x118>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d162      	bne.n	8006b4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a84:	4b35      	ldr	r3, [pc, #212]	@ (8006b5c <xTaskResumeAll+0x11c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d05e      	beq.n	8006b4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a8c:	e02f      	b.n	8006aee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a8e:	4b34      	ldr	r3, [pc, #208]	@ (8006b60 <xTaskResumeAll+0x120>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	3318      	adds	r3, #24
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fd3e 	bl	800551c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fe fd39 	bl	800551c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aae:	4b2d      	ldr	r3, [pc, #180]	@ (8006b64 <xTaskResumeAll+0x124>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d903      	bls.n	8006abe <xTaskResumeAll+0x7e>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aba:	4a2a      	ldr	r2, [pc, #168]	@ (8006b64 <xTaskResumeAll+0x124>)
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac2:	4613      	mov	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	4a27      	ldr	r2, [pc, #156]	@ (8006b68 <xTaskResumeAll+0x128>)
 8006acc:	441a      	add	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	f7fe fcc4 	bl	8005462 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ade:	4b23      	ldr	r3, [pc, #140]	@ (8006b6c <xTaskResumeAll+0x12c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d302      	bcc.n	8006aee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006ae8:	4b21      	ldr	r3, [pc, #132]	@ (8006b70 <xTaskResumeAll+0x130>)
 8006aea:	2201      	movs	r2, #1
 8006aec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006aee:	4b1c      	ldr	r3, [pc, #112]	@ (8006b60 <xTaskResumeAll+0x120>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1cb      	bne.n	8006a8e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006afc:	f000 fb66 	bl	80071cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b00:	4b1c      	ldr	r3, [pc, #112]	@ (8006b74 <xTaskResumeAll+0x134>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d010      	beq.n	8006b2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b0c:	f000 f846 	bl	8006b9c <xTaskIncrementTick>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006b16:	4b16      	ldr	r3, [pc, #88]	@ (8006b70 <xTaskResumeAll+0x130>)
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1f1      	bne.n	8006b0c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006b28:	4b12      	ldr	r3, [pc, #72]	@ (8006b74 <xTaskResumeAll+0x134>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b2e:	4b10      	ldr	r3, [pc, #64]	@ (8006b70 <xTaskResumeAll+0x130>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b36:	2301      	movs	r3, #1
 8006b38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b78 <xTaskResumeAll+0x138>)
 8006b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b4a:	f001 fabf 	bl	80080cc <vPortExitCritical>

	return xAlreadyYielded;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	20041428 	.word	0x20041428
 8006b5c:	20041400 	.word	0x20041400
 8006b60:	200413c0 	.word	0x200413c0
 8006b64:	20041408 	.word	0x20041408
 8006b68:	20040f30 	.word	0x20040f30
 8006b6c:	20040f2c 	.word	0x20040f2c
 8006b70:	20041414 	.word	0x20041414
 8006b74:	20041410 	.word	0x20041410
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b82:	4b05      	ldr	r3, [pc, #20]	@ (8006b98 <xTaskGetTickCount+0x1c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b88:	687b      	ldr	r3, [r7, #4]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	20041404 	.word	0x20041404

08006b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8006ce4 <xTaskIncrementTick+0x148>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f040 8090 	bne.w	8006cd0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ce8 <xTaskIncrementTick+0x14c>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8006ce8 <xTaskIncrementTick+0x14c>)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d121      	bne.n	8006c08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bc4:	4b49      	ldr	r3, [pc, #292]	@ (8006cec <xTaskIncrementTick+0x150>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	603b      	str	r3, [r7, #0]
}
 8006be0:	bf00      	nop
 8006be2:	bf00      	nop
 8006be4:	e7fd      	b.n	8006be2 <xTaskIncrementTick+0x46>
 8006be6:	4b41      	ldr	r3, [pc, #260]	@ (8006cec <xTaskIncrementTick+0x150>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	4b40      	ldr	r3, [pc, #256]	@ (8006cf0 <xTaskIncrementTick+0x154>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a3e      	ldr	r2, [pc, #248]	@ (8006cec <xTaskIncrementTick+0x150>)
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	4a3e      	ldr	r2, [pc, #248]	@ (8006cf0 <xTaskIncrementTick+0x154>)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8006cf4 <xTaskIncrementTick+0x158>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	4a3c      	ldr	r2, [pc, #240]	@ (8006cf4 <xTaskIncrementTick+0x158>)
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	f000 fae2 	bl	80071cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c08:	4b3b      	ldr	r3, [pc, #236]	@ (8006cf8 <xTaskIncrementTick+0x15c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d349      	bcc.n	8006ca6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c12:	4b36      	ldr	r3, [pc, #216]	@ (8006cec <xTaskIncrementTick+0x150>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c1c:	4b36      	ldr	r3, [pc, #216]	@ (8006cf8 <xTaskIncrementTick+0x15c>)
 8006c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c22:	601a      	str	r2, [r3, #0]
					break;
 8006c24:	e03f      	b.n	8006ca6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c26:	4b31      	ldr	r3, [pc, #196]	@ (8006cec <xTaskIncrementTick+0x150>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d203      	bcs.n	8006c46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8006cf8 <xTaskIncrementTick+0x15c>)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c44:	e02f      	b.n	8006ca6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	3304      	adds	r3, #4
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe fc66 	bl	800551c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	3318      	adds	r3, #24
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fc5d 	bl	800551c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c66:	4b25      	ldr	r3, [pc, #148]	@ (8006cfc <xTaskIncrementTick+0x160>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d903      	bls.n	8006c76 <xTaskIncrementTick+0xda>
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c72:	4a22      	ldr	r2, [pc, #136]	@ (8006cfc <xTaskIncrementTick+0x160>)
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4a1f      	ldr	r2, [pc, #124]	@ (8006d00 <xTaskIncrementTick+0x164>)
 8006c84:	441a      	add	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f7fe fbe8 	bl	8005462 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c96:	4b1b      	ldr	r3, [pc, #108]	@ (8006d04 <xTaskIncrementTick+0x168>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d3b8      	bcc.n	8006c12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ca4:	e7b5      	b.n	8006c12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ca6:	4b17      	ldr	r3, [pc, #92]	@ (8006d04 <xTaskIncrementTick+0x168>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cac:	4914      	ldr	r1, [pc, #80]	@ (8006d00 <xTaskIncrementTick+0x164>)
 8006cae:	4613      	mov	r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	440b      	add	r3, r1
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d901      	bls.n	8006cc2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cc2:	4b11      	ldr	r3, [pc, #68]	@ (8006d08 <xTaskIncrementTick+0x16c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d007      	beq.n	8006cda <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e004      	b.n	8006cda <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8006d0c <xTaskIncrementTick+0x170>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8006d0c <xTaskIncrementTick+0x170>)
 8006cd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cda:	697b      	ldr	r3, [r7, #20]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20041428 	.word	0x20041428
 8006ce8:	20041404 	.word	0x20041404
 8006cec:	200413b8 	.word	0x200413b8
 8006cf0:	200413bc 	.word	0x200413bc
 8006cf4:	20041418 	.word	0x20041418
 8006cf8:	20041420 	.word	0x20041420
 8006cfc:	20041408 	.word	0x20041408
 8006d00:	20040f30 	.word	0x20040f30
 8006d04:	20040f2c 	.word	0x20040f2c
 8006d08:	20041414 	.word	0x20041414
 8006d0c:	20041410 	.word	0x20041410

08006d10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d16:	4b2b      	ldr	r3, [pc, #172]	@ (8006dc4 <vTaskSwitchContext+0xb4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8006dc8 <vTaskSwitchContext+0xb8>)
 8006d20:	2201      	movs	r2, #1
 8006d22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d24:	e047      	b.n	8006db6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006d26:	4b28      	ldr	r3, [pc, #160]	@ (8006dc8 <vTaskSwitchContext+0xb8>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d2c:	4b27      	ldr	r3, [pc, #156]	@ (8006dcc <vTaskSwitchContext+0xbc>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60fb      	str	r3, [r7, #12]
 8006d32:	e011      	b.n	8006d58 <vTaskSwitchContext+0x48>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10b      	bne.n	8006d52 <vTaskSwitchContext+0x42>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	607b      	str	r3, [r7, #4]
}
 8006d4c:	bf00      	nop
 8006d4e:	bf00      	nop
 8006d50:	e7fd      	b.n	8006d4e <vTaskSwitchContext+0x3e>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3b01      	subs	r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	491d      	ldr	r1, [pc, #116]	@ (8006dd0 <vTaskSwitchContext+0xc0>)
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	440b      	add	r3, r1
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0e3      	beq.n	8006d34 <vTaskSwitchContext+0x24>
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4a16      	ldr	r2, [pc, #88]	@ (8006dd0 <vTaskSwitchContext+0xc0>)
 8006d78:	4413      	add	r3, r2
 8006d7a:	60bb      	str	r3, [r7, #8]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	605a      	str	r2, [r3, #4]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d104      	bne.n	8006d9c <vTaskSwitchContext+0x8c>
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	605a      	str	r2, [r3, #4]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	4a0c      	ldr	r2, [pc, #48]	@ (8006dd4 <vTaskSwitchContext+0xc4>)
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	4a09      	ldr	r2, [pc, #36]	@ (8006dcc <vTaskSwitchContext+0xbc>)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dac:	4b09      	ldr	r3, [pc, #36]	@ (8006dd4 <vTaskSwitchContext+0xc4>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3354      	adds	r3, #84	@ 0x54
 8006db2:	4a09      	ldr	r2, [pc, #36]	@ (8006dd8 <vTaskSwitchContext+0xc8>)
 8006db4:	6013      	str	r3, [r2, #0]
}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20041428 	.word	0x20041428
 8006dc8:	20041414 	.word	0x20041414
 8006dcc:	20041408 	.word	0x20041408
 8006dd0:	20040f30 	.word	0x20040f30
 8006dd4:	20040f2c 	.word	0x20040f2c
 8006dd8:	20040014 	.word	0x20040014

08006ddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	60fb      	str	r3, [r7, #12]
}
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
 8006e02:	e7fd      	b.n	8006e00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e04:	4b07      	ldr	r3, [pc, #28]	@ (8006e24 <vTaskPlaceOnEventList+0x48>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3318      	adds	r3, #24
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7fe fb4c 	bl	80054aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e12:	2101      	movs	r1, #1
 8006e14:	6838      	ldr	r0, [r7, #0]
 8006e16:	f000 fb87 	bl	8007528 <prvAddCurrentTaskToDelayedList>
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	20040f2c 	.word	0x20040f2c

08006e28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10b      	bne.n	8006e52 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	617b      	str	r3, [r7, #20]
}
 8006e4c:	bf00      	nop
 8006e4e:	bf00      	nop
 8006e50:	e7fd      	b.n	8006e4e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e52:	4b0a      	ldr	r3, [pc, #40]	@ (8006e7c <vTaskPlaceOnEventListRestricted+0x54>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3318      	adds	r3, #24
 8006e58:	4619      	mov	r1, r3
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7fe fb01 	bl	8005462 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006e66:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006e6c:	6879      	ldr	r1, [r7, #4]
 8006e6e:	68b8      	ldr	r0, [r7, #8]
 8006e70:	f000 fb5a 	bl	8007528 <prvAddCurrentTaskToDelayedList>
	}
 8006e74:	bf00      	nop
 8006e76:	3718      	adds	r7, #24
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}
 8006e7c:	20040f2c 	.word	0x20040f2c

08006e80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10b      	bne.n	8006eae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	60fb      	str	r3, [r7, #12]
}
 8006ea8:	bf00      	nop
 8006eaa:	bf00      	nop
 8006eac:	e7fd      	b.n	8006eaa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	3318      	adds	r3, #24
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fb32 	bl	800551c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f30 <xTaskRemoveFromEventList+0xb0>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d11d      	bne.n	8006efc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fe fb29 	bl	800551c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ece:	4b19      	ldr	r3, [pc, #100]	@ (8006f34 <xTaskRemoveFromEventList+0xb4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d903      	bls.n	8006ede <xTaskRemoveFromEventList+0x5e>
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eda:	4a16      	ldr	r2, [pc, #88]	@ (8006f34 <xTaskRemoveFromEventList+0xb4>)
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4413      	add	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4a13      	ldr	r2, [pc, #76]	@ (8006f38 <xTaskRemoveFromEventList+0xb8>)
 8006eec:	441a      	add	r2, r3
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	f7fe fab4 	bl	8005462 <vListInsertEnd>
 8006efa:	e005      	b.n	8006f08 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	3318      	adds	r3, #24
 8006f00:	4619      	mov	r1, r3
 8006f02:	480e      	ldr	r0, [pc, #56]	@ (8006f3c <xTaskRemoveFromEventList+0xbc>)
 8006f04:	f7fe faad 	bl	8005462 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f40 <xTaskRemoveFromEventList+0xc0>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d905      	bls.n	8006f22 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f16:	2301      	movs	r3, #1
 8006f18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f44 <xTaskRemoveFromEventList+0xc4>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
 8006f20:	e001      	b.n	8006f26 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f26:	697b      	ldr	r3, [r7, #20]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}
 8006f30:	20041428 	.word	0x20041428
 8006f34:	20041408 	.word	0x20041408
 8006f38:	20040f30 	.word	0x20040f30
 8006f3c:	200413c0 	.word	0x200413c0
 8006f40:	20040f2c 	.word	0x20040f2c
 8006f44:	20041414 	.word	0x20041414

08006f48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f50:	4b06      	ldr	r3, [pc, #24]	@ (8006f6c <vTaskInternalSetTimeOutState+0x24>)
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f58:	4b05      	ldr	r3, [pc, #20]	@ (8006f70 <vTaskInternalSetTimeOutState+0x28>)
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	605a      	str	r2, [r3, #4]
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr
 8006f6c:	20041418 	.word	0x20041418
 8006f70:	20041404 	.word	0x20041404

08006f74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10b      	bne.n	8006f9c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	613b      	str	r3, [r7, #16]
}
 8006f96:	bf00      	nop
 8006f98:	bf00      	nop
 8006f9a:	e7fd      	b.n	8006f98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	60fb      	str	r3, [r7, #12]
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop
 8006fb8:	e7fd      	b.n	8006fb6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006fba:	f001 f855 	bl	8008068 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8007034 <xTaskCheckForTimeOut+0xc0>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d102      	bne.n	8006fde <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	e023      	b.n	8007026 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b15      	ldr	r3, [pc, #84]	@ (8007038 <xTaskCheckForTimeOut+0xc4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d007      	beq.n	8006ffa <xTaskCheckForTimeOut+0x86>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d302      	bcc.n	8006ffa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	61fb      	str	r3, [r7, #28]
 8006ff8:	e015      	b.n	8007026 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	429a      	cmp	r2, r3
 8007002:	d20b      	bcs.n	800701c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	1ad2      	subs	r2, r2, r3
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff ff99 	bl	8006f48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007016:	2300      	movs	r3, #0
 8007018:	61fb      	str	r3, [r7, #28]
 800701a:	e004      	b.n	8007026 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2200      	movs	r2, #0
 8007020:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007022:	2301      	movs	r3, #1
 8007024:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007026:	f001 f851 	bl	80080cc <vPortExitCritical>

	return xReturn;
 800702a:	69fb      	ldr	r3, [r7, #28]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	20041404 	.word	0x20041404
 8007038:	20041418 	.word	0x20041418

0800703c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007040:	4b03      	ldr	r3, [pc, #12]	@ (8007050 <vTaskMissedYield+0x14>)
 8007042:	2201      	movs	r2, #1
 8007044:	601a      	str	r2, [r3, #0]
}
 8007046:	bf00      	nop
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	20041414 	.word	0x20041414

08007054 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800705c:	f000 f852 	bl	8007104 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007060:	4b06      	ldr	r3, [pc, #24]	@ (800707c <prvIdleTask+0x28>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d9f9      	bls.n	800705c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007068:	4b05      	ldr	r3, [pc, #20]	@ (8007080 <prvIdleTask+0x2c>)
 800706a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007078:	e7f0      	b.n	800705c <prvIdleTask+0x8>
 800707a:	bf00      	nop
 800707c:	20040f30 	.word	0x20040f30
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800708a:	2300      	movs	r3, #0
 800708c:	607b      	str	r3, [r7, #4]
 800708e:	e00c      	b.n	80070aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4a12      	ldr	r2, [pc, #72]	@ (80070e4 <prvInitialiseTaskLists+0x60>)
 800709c:	4413      	add	r3, r2
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe f9b2 	bl	8005408 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3301      	adds	r3, #1
 80070a8:	607b      	str	r3, [r7, #4]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b37      	cmp	r3, #55	@ 0x37
 80070ae:	d9ef      	bls.n	8007090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80070b0:	480d      	ldr	r0, [pc, #52]	@ (80070e8 <prvInitialiseTaskLists+0x64>)
 80070b2:	f7fe f9a9 	bl	8005408 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80070b6:	480d      	ldr	r0, [pc, #52]	@ (80070ec <prvInitialiseTaskLists+0x68>)
 80070b8:	f7fe f9a6 	bl	8005408 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80070bc:	480c      	ldr	r0, [pc, #48]	@ (80070f0 <prvInitialiseTaskLists+0x6c>)
 80070be:	f7fe f9a3 	bl	8005408 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80070c2:	480c      	ldr	r0, [pc, #48]	@ (80070f4 <prvInitialiseTaskLists+0x70>)
 80070c4:	f7fe f9a0 	bl	8005408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80070c8:	480b      	ldr	r0, [pc, #44]	@ (80070f8 <prvInitialiseTaskLists+0x74>)
 80070ca:	f7fe f99d 	bl	8005408 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80070ce:	4b0b      	ldr	r3, [pc, #44]	@ (80070fc <prvInitialiseTaskLists+0x78>)
 80070d0:	4a05      	ldr	r2, [pc, #20]	@ (80070e8 <prvInitialiseTaskLists+0x64>)
 80070d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80070d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007100 <prvInitialiseTaskLists+0x7c>)
 80070d6:	4a05      	ldr	r2, [pc, #20]	@ (80070ec <prvInitialiseTaskLists+0x68>)
 80070d8:	601a      	str	r2, [r3, #0]
}
 80070da:	bf00      	nop
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20040f30 	.word	0x20040f30
 80070e8:	20041390 	.word	0x20041390
 80070ec:	200413a4 	.word	0x200413a4
 80070f0:	200413c0 	.word	0x200413c0
 80070f4:	200413d4 	.word	0x200413d4
 80070f8:	200413ec 	.word	0x200413ec
 80070fc:	200413b8 	.word	0x200413b8
 8007100:	200413bc 	.word	0x200413bc

08007104 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800710a:	e019      	b.n	8007140 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800710c:	f000 ffac 	bl	8008068 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007110:	4b10      	ldr	r3, [pc, #64]	@ (8007154 <prvCheckTasksWaitingTermination+0x50>)
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	4618      	mov	r0, r3
 800711e:	f7fe f9fd 	bl	800551c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007122:	4b0d      	ldr	r3, [pc, #52]	@ (8007158 <prvCheckTasksWaitingTermination+0x54>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3b01      	subs	r3, #1
 8007128:	4a0b      	ldr	r2, [pc, #44]	@ (8007158 <prvCheckTasksWaitingTermination+0x54>)
 800712a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800712c:	4b0b      	ldr	r3, [pc, #44]	@ (800715c <prvCheckTasksWaitingTermination+0x58>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3b01      	subs	r3, #1
 8007132:	4a0a      	ldr	r2, [pc, #40]	@ (800715c <prvCheckTasksWaitingTermination+0x58>)
 8007134:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007136:	f000 ffc9 	bl	80080cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f810 	bl	8007160 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007140:	4b06      	ldr	r3, [pc, #24]	@ (800715c <prvCheckTasksWaitingTermination+0x58>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e1      	bne.n	800710c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	200413d4 	.word	0x200413d4
 8007158:	20041400 	.word	0x20041400
 800715c:	200413e8 	.word	0x200413e8

08007160 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3354      	adds	r3, #84	@ 0x54
 800716c:	4618      	mov	r0, r3
 800716e:	f001 fa93 	bl	8008698 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007178:	2b00      	cmp	r3, #0
 800717a:	d108      	bne.n	800718e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007180:	4618      	mov	r0, r3
 8007182:	f001 f961 	bl	8008448 <vPortFree>
				vPortFree( pxTCB );
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f001 f95e 	bl	8008448 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800718c:	e019      	b.n	80071c2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007194:	2b01      	cmp	r3, #1
 8007196:	d103      	bne.n	80071a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 f955 	bl	8008448 <vPortFree>
	}
 800719e:	e010      	b.n	80071c2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d00b      	beq.n	80071c2 <prvDeleteTCB+0x62>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	60fb      	str	r3, [r7, #12]
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	e7fd      	b.n	80071be <prvDeleteTCB+0x5e>
	}
 80071c2:	bf00      	nop
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007204 <prvResetNextTaskUnblockTime+0x38>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d104      	bne.n	80071e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007208 <prvResetNextTaskUnblockTime+0x3c>)
 80071de:	f04f 32ff 	mov.w	r2, #4294967295
 80071e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071e4:	e008      	b.n	80071f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e6:	4b07      	ldr	r3, [pc, #28]	@ (8007204 <prvResetNextTaskUnblockTime+0x38>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	4a04      	ldr	r2, [pc, #16]	@ (8007208 <prvResetNextTaskUnblockTime+0x3c>)
 80071f6:	6013      	str	r3, [r2, #0]
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	200413b8 	.word	0x200413b8
 8007208:	20041420 	.word	0x20041420

0800720c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007212:	4b0b      	ldr	r3, [pc, #44]	@ (8007240 <xTaskGetSchedulerState+0x34>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d102      	bne.n	8007220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800721a:	2301      	movs	r3, #1
 800721c:	607b      	str	r3, [r7, #4]
 800721e:	e008      	b.n	8007232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007220:	4b08      	ldr	r3, [pc, #32]	@ (8007244 <xTaskGetSchedulerState+0x38>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007228:	2302      	movs	r3, #2
 800722a:	607b      	str	r3, [r7, #4]
 800722c:	e001      	b.n	8007232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800722e:	2300      	movs	r3, #0
 8007230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007232:	687b      	ldr	r3, [r7, #4]
	}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	2004140c 	.word	0x2004140c
 8007244:	20041428 	.word	0x20041428

08007248 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007254:	2300      	movs	r3, #0
 8007256:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d051      	beq.n	8007302 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007262:	4b2a      	ldr	r3, [pc, #168]	@ (800730c <xTaskPriorityInherit+0xc4>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007268:	429a      	cmp	r2, r3
 800726a:	d241      	bcs.n	80072f0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	2b00      	cmp	r3, #0
 8007272:	db06      	blt.n	8007282 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007274:	4b25      	ldr	r3, [pc, #148]	@ (800730c <xTaskPriorityInherit+0xc4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800727a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	6959      	ldr	r1, [r3, #20]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800728a:	4613      	mov	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	4413      	add	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4a1f      	ldr	r2, [pc, #124]	@ (8007310 <xTaskPriorityInherit+0xc8>)
 8007294:	4413      	add	r3, r2
 8007296:	4299      	cmp	r1, r3
 8007298:	d122      	bne.n	80072e0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	3304      	adds	r3, #4
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe f93c 	bl	800551c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072a4:	4b19      	ldr	r3, [pc, #100]	@ (800730c <xTaskPriorityInherit+0xc4>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b2:	4b18      	ldr	r3, [pc, #96]	@ (8007314 <xTaskPriorityInherit+0xcc>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d903      	bls.n	80072c2 <xTaskPriorityInherit+0x7a>
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	4a15      	ldr	r2, [pc, #84]	@ (8007314 <xTaskPriorityInherit+0xcc>)
 80072c0:	6013      	str	r3, [r2, #0]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4a10      	ldr	r2, [pc, #64]	@ (8007310 <xTaskPriorityInherit+0xc8>)
 80072d0:	441a      	add	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	3304      	adds	r3, #4
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f7fe f8c2 	bl	8005462 <vListInsertEnd>
 80072de:	e004      	b.n	80072ea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80072e0:	4b0a      	ldr	r3, [pc, #40]	@ (800730c <xTaskPriorityInherit+0xc4>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80072ea:	2301      	movs	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	e008      	b.n	8007302 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80072f4:	4b05      	ldr	r3, [pc, #20]	@ (800730c <xTaskPriorityInherit+0xc4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d201      	bcs.n	8007302 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80072fe:	2301      	movs	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007302:	68fb      	ldr	r3, [r7, #12]
	}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	20040f2c 	.word	0x20040f2c
 8007310:	20040f30 	.word	0x20040f30
 8007314:	20041408 	.word	0x20041408

08007318 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007324:	2300      	movs	r3, #0
 8007326:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d058      	beq.n	80073e0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800732e:	4b2f      	ldr	r3, [pc, #188]	@ (80073ec <xTaskPriorityDisinherit+0xd4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	429a      	cmp	r2, r3
 8007336:	d00b      	beq.n	8007350 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	60fb      	str	r3, [r7, #12]
}
 800734a:	bf00      	nop
 800734c:	bf00      	nop
 800734e:	e7fd      	b.n	800734c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10b      	bne.n	8007370 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	60bb      	str	r3, [r7, #8]
}
 800736a:	bf00      	nop
 800736c:	bf00      	nop
 800736e:	e7fd      	b.n	800736c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007374:	1e5a      	subs	r2, r3, #1
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007382:	429a      	cmp	r2, r3
 8007384:	d02c      	beq.n	80073e0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800738a:	2b00      	cmp	r3, #0
 800738c:	d128      	bne.n	80073e0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3304      	adds	r3, #4
 8007392:	4618      	mov	r0, r3
 8007394:	f7fe f8c2 	bl	800551c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b0:	4b0f      	ldr	r3, [pc, #60]	@ (80073f0 <xTaskPriorityDisinherit+0xd8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d903      	bls.n	80073c0 <xTaskPriorityDisinherit+0xa8>
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073bc:	4a0c      	ldr	r2, [pc, #48]	@ (80073f0 <xTaskPriorityDisinherit+0xd8>)
 80073be:	6013      	str	r3, [r2, #0]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4a09      	ldr	r2, [pc, #36]	@ (80073f4 <xTaskPriorityDisinherit+0xdc>)
 80073ce:	441a      	add	r2, r3
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	3304      	adds	r3, #4
 80073d4:	4619      	mov	r1, r3
 80073d6:	4610      	mov	r0, r2
 80073d8:	f7fe f843 	bl	8005462 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073dc:	2301      	movs	r3, #1
 80073de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073e0:	697b      	ldr	r3, [r7, #20]
	}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20040f2c 	.word	0x20040f2c
 80073f0:	20041408 	.word	0x20041408
 80073f4:	20040f30 	.word	0x20040f30

080073f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007406:	2301      	movs	r3, #1
 8007408:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d06c      	beq.n	80074ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10b      	bne.n	8007430 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741c:	f383 8811 	msr	BASEPRI, r3
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	60fb      	str	r3, [r7, #12]
}
 800742a:	bf00      	nop
 800742c:	bf00      	nop
 800742e:	e7fd      	b.n	800742c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	429a      	cmp	r2, r3
 8007438:	d902      	bls.n	8007440 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	61fb      	str	r3, [r7, #28]
 800743e:	e002      	b.n	8007446 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007444:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	429a      	cmp	r2, r3
 800744e:	d04c      	beq.n	80074ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	429a      	cmp	r2, r3
 8007458:	d147      	bne.n	80074ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800745a:	4b26      	ldr	r3, [pc, #152]	@ (80074f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	429a      	cmp	r2, r3
 8007462:	d10b      	bne.n	800747c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	60bb      	str	r3, [r7, #8]
}
 8007476:	bf00      	nop
 8007478:	bf00      	nop
 800747a:	e7fd      	b.n	8007478 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007480:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	69fa      	ldr	r2, [r7, #28]
 8007486:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	db04      	blt.n	800749a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	6959      	ldr	r1, [r3, #20]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	4613      	mov	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4a13      	ldr	r2, [pc, #76]	@ (80074f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80074aa:	4413      	add	r3, r2
 80074ac:	4299      	cmp	r1, r3
 80074ae:	d11c      	bne.n	80074ea <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	3304      	adds	r3, #4
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7fe f831 	bl	800551c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074be:	4b0f      	ldr	r3, [pc, #60]	@ (80074fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d903      	bls.n	80074ce <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ca:	4a0c      	ldr	r2, [pc, #48]	@ (80074fc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4a07      	ldr	r2, [pc, #28]	@ (80074f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80074dc:	441a      	add	r2, r3
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	3304      	adds	r3, #4
 80074e2:	4619      	mov	r1, r3
 80074e4:	4610      	mov	r0, r2
 80074e6:	f7fd ffbc 	bl	8005462 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074ea:	bf00      	nop
 80074ec:	3720      	adds	r7, #32
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20040f2c 	.word	0x20040f2c
 80074f8:	20040f30 	.word	0x20040f30
 80074fc:	20041408 	.word	0x20041408

08007500 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007504:	4b07      	ldr	r3, [pc, #28]	@ (8007524 <pvTaskIncrementMutexHeldCount+0x24>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800750c:	4b05      	ldr	r3, [pc, #20]	@ (8007524 <pvTaskIncrementMutexHeldCount+0x24>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007512:	3201      	adds	r2, #1
 8007514:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007516:	4b03      	ldr	r3, [pc, #12]	@ (8007524 <pvTaskIncrementMutexHeldCount+0x24>)
 8007518:	681b      	ldr	r3, [r3, #0]
	}
 800751a:	4618      	mov	r0, r3
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	20040f2c 	.word	0x20040f2c

08007528 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007532:	4b21      	ldr	r3, [pc, #132]	@ (80075b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007538:	4b20      	ldr	r3, [pc, #128]	@ (80075bc <prvAddCurrentTaskToDelayedList+0x94>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3304      	adds	r3, #4
 800753e:	4618      	mov	r0, r3
 8007540:	f7fd ffec 	bl	800551c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754a:	d10a      	bne.n	8007562 <prvAddCurrentTaskToDelayedList+0x3a>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007552:	4b1a      	ldr	r3, [pc, #104]	@ (80075bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3304      	adds	r3, #4
 8007558:	4619      	mov	r1, r3
 800755a:	4819      	ldr	r0, [pc, #100]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800755c:	f7fd ff81 	bl	8005462 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007560:	e026      	b.n	80075b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4413      	add	r3, r2
 8007568:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800756a:	4b14      	ldr	r3, [pc, #80]	@ (80075bc <prvAddCurrentTaskToDelayedList+0x94>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	429a      	cmp	r2, r3
 8007578:	d209      	bcs.n	800758e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800757a:	4b12      	ldr	r3, [pc, #72]	@ (80075c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	4b0f      	ldr	r3, [pc, #60]	@ (80075bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3304      	adds	r3, #4
 8007584:	4619      	mov	r1, r3
 8007586:	4610      	mov	r0, r2
 8007588:	f7fd ff8f 	bl	80054aa <vListInsert>
}
 800758c:	e010      	b.n	80075b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800758e:	4b0e      	ldr	r3, [pc, #56]	@ (80075c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <prvAddCurrentTaskToDelayedList+0x94>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3304      	adds	r3, #4
 8007598:	4619      	mov	r1, r3
 800759a:	4610      	mov	r0, r2
 800759c:	f7fd ff85 	bl	80054aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075a0:	4b0a      	ldr	r3, [pc, #40]	@ (80075cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d202      	bcs.n	80075b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80075aa:	4a08      	ldr	r2, [pc, #32]	@ (80075cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	6013      	str	r3, [r2, #0]
}
 80075b0:	bf00      	nop
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20041404 	.word	0x20041404
 80075bc:	20040f2c 	.word	0x20040f2c
 80075c0:	200413ec 	.word	0x200413ec
 80075c4:	200413bc 	.word	0x200413bc
 80075c8:	200413b8 	.word	0x200413b8
 80075cc:	20041420 	.word	0x20041420

080075d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	@ 0x28
 80075d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075d6:	2300      	movs	r3, #0
 80075d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075da:	f000 fbb1 	bl	8007d40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075de:	4b1d      	ldr	r3, [pc, #116]	@ (8007654 <xTimerCreateTimerTask+0x84>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d021      	beq.n	800762a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80075ee:	1d3a      	adds	r2, r7, #4
 80075f0:	f107 0108 	add.w	r1, r7, #8
 80075f4:	f107 030c 	add.w	r3, r7, #12
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fd feeb 	bl	80053d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80075fe:	6879      	ldr	r1, [r7, #4]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	9202      	str	r2, [sp, #8]
 8007606:	9301      	str	r3, [sp, #4]
 8007608:	2302      	movs	r3, #2
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	2300      	movs	r3, #0
 800760e:	460a      	mov	r2, r1
 8007610:	4911      	ldr	r1, [pc, #68]	@ (8007658 <xTimerCreateTimerTask+0x88>)
 8007612:	4812      	ldr	r0, [pc, #72]	@ (800765c <xTimerCreateTimerTask+0x8c>)
 8007614:	f7fe ffd8 	bl	80065c8 <xTaskCreateStatic>
 8007618:	4603      	mov	r3, r0
 800761a:	4a11      	ldr	r2, [pc, #68]	@ (8007660 <xTimerCreateTimerTask+0x90>)
 800761c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800761e:	4b10      	ldr	r3, [pc, #64]	@ (8007660 <xTimerCreateTimerTask+0x90>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007626:	2301      	movs	r3, #1
 8007628:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10b      	bne.n	8007648 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	613b      	str	r3, [r7, #16]
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	e7fd      	b.n	8007644 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007648:	697b      	ldr	r3, [r7, #20]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	2004145c 	.word	0x2004145c
 8007658:	080088d0 	.word	0x080088d0
 800765c:	080078d9 	.word	0x080078d9
 8007660:	20041460 	.word	0x20041460

08007664 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007672:	202c      	movs	r0, #44	@ 0x2c
 8007674:	f000 fe1a 	bl	80082ac <pvPortMalloc>
 8007678:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00d      	beq.n	800769c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	6a3b      	ldr	r3, [r7, #32]
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 f845 	bl	8007726 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800769c:	697b      	ldr	r3, [r7, #20]
	}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b08a      	sub	sp, #40	@ 0x28
 80076aa:	af02      	add	r7, sp, #8
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	607a      	str	r2, [r7, #4]
 80076b2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80076b4:	232c      	movs	r3, #44	@ 0x2c
 80076b6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2b2c      	cmp	r3, #44	@ 0x2c
 80076bc:	d00b      	beq.n	80076d6 <xTimerCreateStatic+0x30>
	__asm volatile
 80076be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	61bb      	str	r3, [r7, #24]
}
 80076d0:	bf00      	nop
 80076d2:	bf00      	nop
 80076d4:	e7fd      	b.n	80076d2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80076d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10b      	bne.n	80076f6 <xTimerCreateStatic+0x50>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	617b      	str	r3, [r7, #20]
}
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	e7fd      	b.n	80076f2 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80076f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00d      	beq.n	800771c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	68b9      	ldr	r1, [r7, #8]
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f805 	bl	8007726 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800771c:	69fb      	ldr	r3, [r7, #28]
	}
 800771e:	4618      	mov	r0, r3
 8007720:	3720      	adds	r7, #32
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
 8007732:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10b      	bne.n	8007752 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	617b      	str	r3, [r7, #20]
}
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	e7fd      	b.n	800774e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01e      	beq.n	8007796 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007758:	f000 faf2 	bl	8007d40 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800776e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007770:	6a3a      	ldr	r2, [r7, #32]
 8007772:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007776:	3304      	adds	r3, #4
 8007778:	4618      	mov	r0, r3
 800777a:	f7fd fe65 	bl	8005448 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800778a:	f043 0304 	orr.w	r3, r3, #4
 800778e:	b2da      	uxtb	r2, r3
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007796:	bf00      	nop
 8007798:	3718      	adds	r7, #24
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b08a      	sub	sp, #40	@ 0x28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077ae:	2300      	movs	r3, #0
 80077b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10b      	bne.n	80077d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	623b      	str	r3, [r7, #32]
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	e7fd      	b.n	80077cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80077d0:	4b19      	ldr	r3, [pc, #100]	@ (8007838 <xTimerGenericCommand+0x98>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d02a      	beq.n	800782e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2b05      	cmp	r3, #5
 80077e8:	dc18      	bgt.n	800781c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80077ea:	f7ff fd0f 	bl	800720c <xTaskGetSchedulerState>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d109      	bne.n	8007808 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077f4:	4b10      	ldr	r3, [pc, #64]	@ (8007838 <xTimerGenericCommand+0x98>)
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	f107 0110 	add.w	r1, r7, #16
 80077fc:	2300      	movs	r3, #0
 80077fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007800:	f7fe f86a 	bl	80058d8 <xQueueGenericSend>
 8007804:	6278      	str	r0, [r7, #36]	@ 0x24
 8007806:	e012      	b.n	800782e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007808:	4b0b      	ldr	r3, [pc, #44]	@ (8007838 <xTimerGenericCommand+0x98>)
 800780a:	6818      	ldr	r0, [r3, #0]
 800780c:	f107 0110 	add.w	r1, r7, #16
 8007810:	2300      	movs	r3, #0
 8007812:	2200      	movs	r2, #0
 8007814:	f7fe f860 	bl	80058d8 <xQueueGenericSend>
 8007818:	6278      	str	r0, [r7, #36]	@ 0x24
 800781a:	e008      	b.n	800782e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800781c:	4b06      	ldr	r3, [pc, #24]	@ (8007838 <xTimerGenericCommand+0x98>)
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	f107 0110 	add.w	r1, r7, #16
 8007824:	2300      	movs	r3, #0
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	f7fe f958 	bl	8005adc <xQueueGenericSendFromISR>
 800782c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007830:	4618      	mov	r0, r3
 8007832:	3728      	adds	r7, #40	@ 0x28
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	2004145c 	.word	0x2004145c

0800783c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af02      	add	r7, sp, #8
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007846:	4b23      	ldr	r3, [pc, #140]	@ (80078d4 <prvProcessExpiredTimer+0x98>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	3304      	adds	r3, #4
 8007854:	4618      	mov	r0, r3
 8007856:	f7fd fe61 	bl	800551c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d023      	beq.n	80078b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	699a      	ldr	r2, [r3, #24]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	18d1      	adds	r1, r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	6978      	ldr	r0, [r7, #20]
 8007876:	f000 f8d5 	bl	8007a24 <prvInsertTimerInActiveList>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d020      	beq.n	80078c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007880:	2300      	movs	r3, #0
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	2300      	movs	r3, #0
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	2100      	movs	r1, #0
 800788a:	6978      	ldr	r0, [r7, #20]
 800788c:	f7ff ff88 	bl	80077a0 <xTimerGenericCommand>
 8007890:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d114      	bne.n	80078c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	60fb      	str	r3, [r7, #12]
}
 80078aa:	bf00      	nop
 80078ac:	bf00      	nop
 80078ae:	e7fd      	b.n	80078ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078b6:	f023 0301 	bic.w	r3, r3, #1
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	6978      	ldr	r0, [r7, #20]
 80078c8:	4798      	blx	r3
}
 80078ca:	bf00      	nop
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20041454 	.word	0x20041454

080078d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078e0:	f107 0308 	add.w	r3, r7, #8
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 f859 	bl	800799c <prvGetNextExpireTime>
 80078ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4619      	mov	r1, r3
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f000 f805 	bl	8007900 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078f6:	f000 f8d7 	bl	8007aa8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078fa:	bf00      	nop
 80078fc:	e7f0      	b.n	80078e0 <prvTimerTask+0x8>
	...

08007900 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800790a:	f7ff f88b 	bl	8006a24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800790e:	f107 0308 	add.w	r3, r7, #8
 8007912:	4618      	mov	r0, r3
 8007914:	f000 f866 	bl	80079e4 <prvSampleTimeNow>
 8007918:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d130      	bne.n	8007982 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <prvProcessTimerOrBlockTask+0x3c>
 8007926:	687a      	ldr	r2, [r7, #4]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	429a      	cmp	r2, r3
 800792c:	d806      	bhi.n	800793c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800792e:	f7ff f887 	bl	8006a40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007932:	68f9      	ldr	r1, [r7, #12]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff ff81 	bl	800783c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800793a:	e024      	b.n	8007986 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d008      	beq.n	8007954 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007942:	4b13      	ldr	r3, [pc, #76]	@ (8007990 <prvProcessTimerOrBlockTask+0x90>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <prvProcessTimerOrBlockTask+0x50>
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <prvProcessTimerOrBlockTask+0x52>
 8007950:	2300      	movs	r3, #0
 8007952:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007954:	4b0f      	ldr	r3, [pc, #60]	@ (8007994 <prvProcessTimerOrBlockTask+0x94>)
 8007956:	6818      	ldr	r0, [r3, #0]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	4619      	mov	r1, r3
 8007962:	f7fe fdfd 	bl	8006560 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007966:	f7ff f86b 	bl	8006a40 <xTaskResumeAll>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007970:	4b09      	ldr	r3, [pc, #36]	@ (8007998 <prvProcessTimerOrBlockTask+0x98>)
 8007972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	f3bf 8f6f 	isb	sy
}
 8007980:	e001      	b.n	8007986 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007982:	f7ff f85d 	bl	8006a40 <xTaskResumeAll>
}
 8007986:	bf00      	nop
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20041458 	.word	0x20041458
 8007994:	2004145c 	.word	0x2004145c
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079a4:	4b0e      	ldr	r3, [pc, #56]	@ (80079e0 <prvGetNextExpireTime+0x44>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <prvGetNextExpireTime+0x16>
 80079ae:	2201      	movs	r2, #1
 80079b0:	e000      	b.n	80079b4 <prvGetNextExpireTime+0x18>
 80079b2:	2200      	movs	r2, #0
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d105      	bne.n	80079cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079c0:	4b07      	ldr	r3, [pc, #28]	@ (80079e0 <prvGetNextExpireTime+0x44>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60fb      	str	r3, [r7, #12]
 80079ca:	e001      	b.n	80079d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80079d0:	68fb      	ldr	r3, [r7, #12]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	20041454 	.word	0x20041454

080079e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80079ec:	f7ff f8c6 	bl	8006b7c <xTaskGetTickCount>
 80079f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80079f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007a20 <prvSampleTimeNow+0x3c>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d205      	bcs.n	8007a08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079fc:	f000 f93a 	bl	8007c74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	e002      	b.n	8007a0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a0e:	4a04      	ldr	r2, [pc, #16]	@ (8007a20 <prvSampleTimeNow+0x3c>)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a14:	68fb      	ldr	r3, [r7, #12]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20041464 	.word	0x20041464

08007a24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d812      	bhi.n	8007a70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	1ad2      	subs	r2, r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d302      	bcc.n	8007a5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	e01b      	b.n	8007a96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a5e:	4b10      	ldr	r3, [pc, #64]	@ (8007aa0 <prvInsertTimerInActiveList+0x7c>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4619      	mov	r1, r3
 8007a68:	4610      	mov	r0, r2
 8007a6a:	f7fd fd1e 	bl	80054aa <vListInsert>
 8007a6e:	e012      	b.n	8007a96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d206      	bcs.n	8007a86 <prvInsertTimerInActiveList+0x62>
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d302      	bcc.n	8007a86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a80:	2301      	movs	r3, #1
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e007      	b.n	8007a96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a86:	4b07      	ldr	r3, [pc, #28]	@ (8007aa4 <prvInsertTimerInActiveList+0x80>)
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4619      	mov	r1, r3
 8007a90:	4610      	mov	r0, r2
 8007a92:	f7fd fd0a 	bl	80054aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a96:	697b      	ldr	r3, [r7, #20]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	20041458 	.word	0x20041458
 8007aa4:	20041454 	.word	0x20041454

08007aa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08e      	sub	sp, #56	@ 0x38
 8007aac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007aae:	e0ce      	b.n	8007c4e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	da19      	bge.n	8007aea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ab6:	1d3b      	adds	r3, r7, #4
 8007ab8:	3304      	adds	r3, #4
 8007aba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10b      	bne.n	8007ada <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	61fb      	str	r3, [r7, #28]
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	e7fd      	b.n	8007ad6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ae0:	6850      	ldr	r0, [r2, #4]
 8007ae2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ae4:	6892      	ldr	r2, [r2, #8]
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f2c0 80ae 	blt.w	8007c4e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d004      	beq.n	8007b08 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b00:	3304      	adds	r3, #4
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fd fd0a 	bl	800551c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b08:	463b      	mov	r3, r7
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff ff6a 	bl	80079e4 <prvSampleTimeNow>
 8007b10:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2b09      	cmp	r3, #9
 8007b16:	f200 8097 	bhi.w	8007c48 <prvProcessReceivedCommands+0x1a0>
 8007b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b20 <prvProcessReceivedCommands+0x78>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007b49 	.word	0x08007b49
 8007b24:	08007b49 	.word	0x08007b49
 8007b28:	08007b49 	.word	0x08007b49
 8007b2c:	08007bbf 	.word	0x08007bbf
 8007b30:	08007bd3 	.word	0x08007bd3
 8007b34:	08007c1f 	.word	0x08007c1f
 8007b38:	08007b49 	.word	0x08007b49
 8007b3c:	08007b49 	.word	0x08007b49
 8007b40:	08007bbf 	.word	0x08007bbf
 8007b44:	08007bd3 	.word	0x08007bd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b5a:	68ba      	ldr	r2, [r7, #8]
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	18d1      	adds	r1, r2, r3
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b68:	f7ff ff5c 	bl	8007a24 <prvInsertTimerInActiveList>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d06c      	beq.n	8007c4c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d061      	beq.n	8007c4c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	441a      	add	r2, r3
 8007b90:	2300      	movs	r3, #0
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	2300      	movs	r3, #0
 8007b96:	2100      	movs	r1, #0
 8007b98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b9a:	f7ff fe01 	bl	80077a0 <xTimerGenericCommand>
 8007b9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d152      	bne.n	8007c4c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	61bb      	str	r3, [r7, #24]
}
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bc4:	f023 0301 	bic.w	r3, r3, #1
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007bd0:	e03d      	b.n	8007c4e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bd8:	f043 0301 	orr.w	r3, r3, #1
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	617b      	str	r3, [r7, #20]
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	e7fd      	b.n	8007c06 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0c:	699a      	ldr	r2, [r3, #24]
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c10:	18d1      	adds	r1, r2, r3
 8007c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c18:	f7ff ff04 	bl	8007a24 <prvInsertTimerInActiveList>
					break;
 8007c1c:	e017      	b.n	8007c4e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c24:	f003 0302 	and.w	r3, r3, #2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d103      	bne.n	8007c34 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007c2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c2e:	f000 fc0b 	bl	8008448 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c32:	e00c      	b.n	8007c4e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c3a:	f023 0301 	bic.w	r3, r3, #1
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c46:	e002      	b.n	8007c4e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007c48:	bf00      	nop
 8007c4a:	e000      	b.n	8007c4e <prvProcessReceivedCommands+0x1a6>
					break;
 8007c4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c4e:	4b08      	ldr	r3, [pc, #32]	@ (8007c70 <prvProcessReceivedCommands+0x1c8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	1d39      	adds	r1, r7, #4
 8007c54:	2200      	movs	r2, #0
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe f86e 	bl	8005d38 <xQueueReceive>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f47f af26 	bne.w	8007ab0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c64:	bf00      	nop
 8007c66:	bf00      	nop
 8007c68:	3730      	adds	r7, #48	@ 0x30
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	2004145c 	.word	0x2004145c

08007c74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c7a:	e049      	b.n	8007d10 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8007d38 <prvSwitchTimerLists+0xc4>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c86:	4b2c      	ldr	r3, [pc, #176]	@ (8007d38 <prvSwitchTimerLists+0xc4>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	3304      	adds	r3, #4
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fd fc41 	bl	800551c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ca8:	f003 0304 	and.w	r3, r3, #4
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d02f      	beq.n	8007d10 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d90e      	bls.n	8007ce0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cce:	4b1a      	ldr	r3, [pc, #104]	@ (8007d38 <prvSwitchTimerLists+0xc4>)
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f7fd fbe6 	bl	80054aa <vListInsert>
 8007cde:	e017      	b.n	8007d10 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	2100      	movs	r1, #0
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff fd58 	bl	80077a0 <xTimerGenericCommand>
 8007cf0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10b      	bne.n	8007d10 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	603b      	str	r3, [r7, #0]
}
 8007d0a:	bf00      	nop
 8007d0c:	bf00      	nop
 8007d0e:	e7fd      	b.n	8007d0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d10:	4b09      	ldr	r3, [pc, #36]	@ (8007d38 <prvSwitchTimerLists+0xc4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1b0      	bne.n	8007c7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d1a:	4b07      	ldr	r3, [pc, #28]	@ (8007d38 <prvSwitchTimerLists+0xc4>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d20:	4b06      	ldr	r3, [pc, #24]	@ (8007d3c <prvSwitchTimerLists+0xc8>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a04      	ldr	r2, [pc, #16]	@ (8007d38 <prvSwitchTimerLists+0xc4>)
 8007d26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d28:	4a04      	ldr	r2, [pc, #16]	@ (8007d3c <prvSwitchTimerLists+0xc8>)
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	6013      	str	r3, [r2, #0]
}
 8007d2e:	bf00      	nop
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	20041454 	.word	0x20041454
 8007d3c:	20041458 	.word	0x20041458

08007d40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d46:	f000 f98f 	bl	8008068 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d4a:	4b15      	ldr	r3, [pc, #84]	@ (8007da0 <prvCheckForValidListAndQueue+0x60>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d120      	bne.n	8007d94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d52:	4814      	ldr	r0, [pc, #80]	@ (8007da4 <prvCheckForValidListAndQueue+0x64>)
 8007d54:	f7fd fb58 	bl	8005408 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d58:	4813      	ldr	r0, [pc, #76]	@ (8007da8 <prvCheckForValidListAndQueue+0x68>)
 8007d5a:	f7fd fb55 	bl	8005408 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d5e:	4b13      	ldr	r3, [pc, #76]	@ (8007dac <prvCheckForValidListAndQueue+0x6c>)
 8007d60:	4a10      	ldr	r2, [pc, #64]	@ (8007da4 <prvCheckForValidListAndQueue+0x64>)
 8007d62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d64:	4b12      	ldr	r3, [pc, #72]	@ (8007db0 <prvCheckForValidListAndQueue+0x70>)
 8007d66:	4a10      	ldr	r2, [pc, #64]	@ (8007da8 <prvCheckForValidListAndQueue+0x68>)
 8007d68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4b11      	ldr	r3, [pc, #68]	@ (8007db4 <prvCheckForValidListAndQueue+0x74>)
 8007d70:	4a11      	ldr	r2, [pc, #68]	@ (8007db8 <prvCheckForValidListAndQueue+0x78>)
 8007d72:	2110      	movs	r1, #16
 8007d74:	200a      	movs	r0, #10
 8007d76:	f7fd fc65 	bl	8005644 <xQueueGenericCreateStatic>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	4a08      	ldr	r2, [pc, #32]	@ (8007da0 <prvCheckForValidListAndQueue+0x60>)
 8007d7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d80:	4b07      	ldr	r3, [pc, #28]	@ (8007da0 <prvCheckForValidListAndQueue+0x60>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d005      	beq.n	8007d94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d88:	4b05      	ldr	r3, [pc, #20]	@ (8007da0 <prvCheckForValidListAndQueue+0x60>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	490b      	ldr	r1, [pc, #44]	@ (8007dbc <prvCheckForValidListAndQueue+0x7c>)
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7fe fb92 	bl	80064b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d94:	f000 f99a 	bl	80080cc <vPortExitCritical>
}
 8007d98:	bf00      	nop
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	2004145c 	.word	0x2004145c
 8007da4:	2004142c 	.word	0x2004142c
 8007da8:	20041440 	.word	0x20041440
 8007dac:	20041454 	.word	0x20041454
 8007db0:	20041458 	.word	0x20041458
 8007db4:	20041508 	.word	0x20041508
 8007db8:	20041468 	.word	0x20041468
 8007dbc:	080088d8 	.word	0x080088d8

08007dc0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <pvTimerGetTimerID+0x2a>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	60fb      	str	r3, [r7, #12]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007dea:	f000 f93d 	bl	8008068 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007df4:	f000 f96a 	bl	80080cc <vPortExitCritical>

	return pvReturn;
 8007df8:	693b      	ldr	r3, [r7, #16]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3b04      	subs	r3, #4
 8007e14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3b04      	subs	r3, #4
 8007e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	f023 0201 	bic.w	r2, r3, #1
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3b04      	subs	r3, #4
 8007e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e34:	4a0c      	ldr	r2, [pc, #48]	@ (8007e68 <pxPortInitialiseStack+0x64>)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3b14      	subs	r3, #20
 8007e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3b04      	subs	r3, #4
 8007e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f06f 0202 	mvn.w	r2, #2
 8007e52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	3b20      	subs	r3, #32
 8007e58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	08007e6d 	.word	0x08007e6d

08007e6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b085      	sub	sp, #20
 8007e70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e76:	4b13      	ldr	r3, [pc, #76]	@ (8007ec4 <prvTaskExitError+0x58>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7e:	d00b      	beq.n	8007e98 <prvTaskExitError+0x2c>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	60fb      	str	r3, [r7, #12]
}
 8007e92:	bf00      	nop
 8007e94:	bf00      	nop
 8007e96:	e7fd      	b.n	8007e94 <prvTaskExitError+0x28>
	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	60bb      	str	r3, [r7, #8]
}
 8007eaa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007eac:	bf00      	nop
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d0fc      	beq.n	8007eae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	20040010 	.word	0x20040010
	...

08007ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ed0:	4b07      	ldr	r3, [pc, #28]	@ (8007ef0 <pxCurrentTCBConst2>)
 8007ed2:	6819      	ldr	r1, [r3, #0]
 8007ed4:	6808      	ldr	r0, [r1, #0]
 8007ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eda:	f380 8809 	msr	PSP, r0
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f04f 0000 	mov.w	r0, #0
 8007ee6:	f380 8811 	msr	BASEPRI, r0
 8007eea:	4770      	bx	lr
 8007eec:	f3af 8000 	nop.w

08007ef0 <pxCurrentTCBConst2>:
 8007ef0:	20040f2c 	.word	0x20040f2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop

08007ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ef8:	4808      	ldr	r0, [pc, #32]	@ (8007f1c <prvPortStartFirstTask+0x24>)
 8007efa:	6800      	ldr	r0, [r0, #0]
 8007efc:	6800      	ldr	r0, [r0, #0]
 8007efe:	f380 8808 	msr	MSP, r0
 8007f02:	f04f 0000 	mov.w	r0, #0
 8007f06:	f380 8814 	msr	CONTROL, r0
 8007f0a:	b662      	cpsie	i
 8007f0c:	b661      	cpsie	f
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	df00      	svc	0
 8007f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f1a:	bf00      	nop
 8007f1c:	e000ed08 	.word	0xe000ed08

08007f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f26:	4b47      	ldr	r3, [pc, #284]	@ (8008044 <xPortStartScheduler+0x124>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a47      	ldr	r2, [pc, #284]	@ (8008048 <xPortStartScheduler+0x128>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d10b      	bne.n	8007f48 <xPortStartScheduler+0x28>
	__asm volatile
 8007f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f34:	f383 8811 	msr	BASEPRI, r3
 8007f38:	f3bf 8f6f 	isb	sy
 8007f3c:	f3bf 8f4f 	dsb	sy
 8007f40:	613b      	str	r3, [r7, #16]
}
 8007f42:	bf00      	nop
 8007f44:	bf00      	nop
 8007f46:	e7fd      	b.n	8007f44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f48:	4b3e      	ldr	r3, [pc, #248]	@ (8008044 <xPortStartScheduler+0x124>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a3f      	ldr	r2, [pc, #252]	@ (800804c <xPortStartScheduler+0x12c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d10b      	bne.n	8007f6a <xPortStartScheduler+0x4a>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	60fb      	str	r3, [r7, #12]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f6a:	4b39      	ldr	r3, [pc, #228]	@ (8008050 <xPortStartScheduler+0x130>)
 8007f6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	22ff      	movs	r2, #255	@ 0xff
 8007f7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f84:	78fb      	ldrb	r3, [r7, #3]
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	4b31      	ldr	r3, [pc, #196]	@ (8008054 <xPortStartScheduler+0x134>)
 8007f90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f92:	4b31      	ldr	r3, [pc, #196]	@ (8008058 <xPortStartScheduler+0x138>)
 8007f94:	2207      	movs	r2, #7
 8007f96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f98:	e009      	b.n	8007fae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008058 <xPortStartScheduler+0x138>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8008058 <xPortStartScheduler+0x138>)
 8007fa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fae:	78fb      	ldrb	r3, [r7, #3]
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fb6:	2b80      	cmp	r3, #128	@ 0x80
 8007fb8:	d0ef      	beq.n	8007f9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fba:	4b27      	ldr	r3, [pc, #156]	@ (8008058 <xPortStartScheduler+0x138>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f1c3 0307 	rsb	r3, r3, #7
 8007fc2:	2b04      	cmp	r3, #4
 8007fc4:	d00b      	beq.n	8007fde <xPortStartScheduler+0xbe>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	60bb      	str	r3, [r7, #8]
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	e7fd      	b.n	8007fda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fde:	4b1e      	ldr	r3, [pc, #120]	@ (8008058 <xPortStartScheduler+0x138>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	021b      	lsls	r3, r3, #8
 8007fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8008058 <xPortStartScheduler+0x138>)
 8007fe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8008058 <xPortStartScheduler+0x138>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ff0:	4a19      	ldr	r2, [pc, #100]	@ (8008058 <xPortStartScheduler+0x138>)
 8007ff2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ffc:	4b17      	ldr	r3, [pc, #92]	@ (800805c <xPortStartScheduler+0x13c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a16      	ldr	r2, [pc, #88]	@ (800805c <xPortStartScheduler+0x13c>)
 8008002:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008008:	4b14      	ldr	r3, [pc, #80]	@ (800805c <xPortStartScheduler+0x13c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a13      	ldr	r2, [pc, #76]	@ (800805c <xPortStartScheduler+0x13c>)
 800800e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008012:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008014:	f000 f8da 	bl	80081cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008018:	4b11      	ldr	r3, [pc, #68]	@ (8008060 <xPortStartScheduler+0x140>)
 800801a:	2200      	movs	r2, #0
 800801c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800801e:	f000 f8f9 	bl	8008214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008022:	4b10      	ldr	r3, [pc, #64]	@ (8008064 <xPortStartScheduler+0x144>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a0f      	ldr	r2, [pc, #60]	@ (8008064 <xPortStartScheduler+0x144>)
 8008028:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800802c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800802e:	f7ff ff63 	bl	8007ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008032:	f7fe fe6d 	bl	8006d10 <vTaskSwitchContext>
	prvTaskExitError();
 8008036:	f7ff ff19 	bl	8007e6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3718      	adds	r7, #24
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	e000ed00 	.word	0xe000ed00
 8008048:	410fc271 	.word	0x410fc271
 800804c:	410fc270 	.word	0x410fc270
 8008050:	e000e400 	.word	0xe000e400
 8008054:	20041558 	.word	0x20041558
 8008058:	2004155c 	.word	0x2004155c
 800805c:	e000ed20 	.word	0xe000ed20
 8008060:	20040010 	.word	0x20040010
 8008064:	e000ef34 	.word	0xe000ef34

08008068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
	__asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	607b      	str	r3, [r7, #4]
}
 8008080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008082:	4b10      	ldr	r3, [pc, #64]	@ (80080c4 <vPortEnterCritical+0x5c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3301      	adds	r3, #1
 8008088:	4a0e      	ldr	r2, [pc, #56]	@ (80080c4 <vPortEnterCritical+0x5c>)
 800808a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800808c:	4b0d      	ldr	r3, [pc, #52]	@ (80080c4 <vPortEnterCritical+0x5c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d110      	bne.n	80080b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008094:	4b0c      	ldr	r3, [pc, #48]	@ (80080c8 <vPortEnterCritical+0x60>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00b      	beq.n	80080b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800809e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a2:	f383 8811 	msr	BASEPRI, r3
 80080a6:	f3bf 8f6f 	isb	sy
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	603b      	str	r3, [r7, #0]
}
 80080b0:	bf00      	nop
 80080b2:	bf00      	nop
 80080b4:	e7fd      	b.n	80080b2 <vPortEnterCritical+0x4a>
	}
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20040010 	.word	0x20040010
 80080c8:	e000ed04 	.word	0xe000ed04

080080cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080d2:	4b12      	ldr	r3, [pc, #72]	@ (800811c <vPortExitCritical+0x50>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10b      	bne.n	80080f2 <vPortExitCritical+0x26>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	607b      	str	r3, [r7, #4]
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	e7fd      	b.n	80080ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80080f2:	4b0a      	ldr	r3, [pc, #40]	@ (800811c <vPortExitCritical+0x50>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3b01      	subs	r3, #1
 80080f8:	4a08      	ldr	r2, [pc, #32]	@ (800811c <vPortExitCritical+0x50>)
 80080fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080fc:	4b07      	ldr	r3, [pc, #28]	@ (800811c <vPortExitCritical+0x50>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d105      	bne.n	8008110 <vPortExitCritical+0x44>
 8008104:	2300      	movs	r3, #0
 8008106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	f383 8811 	msr	BASEPRI, r3
}
 800810e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008110:	bf00      	nop
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr
 800811c:	20040010 	.word	0x20040010

08008120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008120:	f3ef 8009 	mrs	r0, PSP
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	4b15      	ldr	r3, [pc, #84]	@ (8008180 <pxCurrentTCBConst>)
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	f01e 0f10 	tst.w	lr, #16
 8008130:	bf08      	it	eq
 8008132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813a:	6010      	str	r0, [r2, #0]
 800813c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008140:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008144:	f380 8811 	msr	BASEPRI, r0
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f7fe fdde 	bl	8006d10 <vTaskSwitchContext>
 8008154:	f04f 0000 	mov.w	r0, #0
 8008158:	f380 8811 	msr	BASEPRI, r0
 800815c:	bc09      	pop	{r0, r3}
 800815e:	6819      	ldr	r1, [r3, #0]
 8008160:	6808      	ldr	r0, [r1, #0]
 8008162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008166:	f01e 0f10 	tst.w	lr, #16
 800816a:	bf08      	it	eq
 800816c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008170:	f380 8809 	msr	PSP, r0
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	f3af 8000 	nop.w

08008180 <pxCurrentTCBConst>:
 8008180:	20040f2c 	.word	0x20040f2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008184:	bf00      	nop
 8008186:	bf00      	nop

08008188 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	607b      	str	r3, [r7, #4]
}
 80081a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081a2:	f7fe fcfb 	bl	8006b9c <xTaskIncrementTick>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ac:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <xPortSysTickHandler+0x40>)
 80081ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081b2:	601a      	str	r2, [r3, #0]
 80081b4:	2300      	movs	r3, #0
 80081b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f383 8811 	msr	BASEPRI, r3
}
 80081be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	e000ed04 	.word	0xe000ed04

080081cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081cc:	b480      	push	{r7}
 80081ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081d0:	4b0b      	ldr	r3, [pc, #44]	@ (8008200 <vPortSetupTimerInterrupt+0x34>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008204 <vPortSetupTimerInterrupt+0x38>)
 80081d8:	2200      	movs	r2, #0
 80081da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008208 <vPortSetupTimerInterrupt+0x3c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a0a      	ldr	r2, [pc, #40]	@ (800820c <vPortSetupTimerInterrupt+0x40>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	099b      	lsrs	r3, r3, #6
 80081e8:	4a09      	ldr	r2, [pc, #36]	@ (8008210 <vPortSetupTimerInterrupt+0x44>)
 80081ea:	3b01      	subs	r3, #1
 80081ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081ee:	4b04      	ldr	r3, [pc, #16]	@ (8008200 <vPortSetupTimerInterrupt+0x34>)
 80081f0:	2207      	movs	r2, #7
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	e000e010 	.word	0xe000e010
 8008204:	e000e018 	.word	0xe000e018
 8008208:	20040004 	.word	0x20040004
 800820c:	10624dd3 	.word	0x10624dd3
 8008210:	e000e014 	.word	0xe000e014

08008214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008214:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008224 <vPortEnableVFP+0x10>
 8008218:	6801      	ldr	r1, [r0, #0]
 800821a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800821e:	6001      	str	r1, [r0, #0]
 8008220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008222:	bf00      	nop
 8008224:	e000ed88 	.word	0xe000ed88

08008228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800822e:	f3ef 8305 	mrs	r3, IPSR
 8008232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b0f      	cmp	r3, #15
 8008238:	d915      	bls.n	8008266 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800823a:	4a18      	ldr	r2, [pc, #96]	@ (800829c <vPortValidateInterruptPriority+0x74>)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	4413      	add	r3, r2
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008244:	4b16      	ldr	r3, [pc, #88]	@ (80082a0 <vPortValidateInterruptPriority+0x78>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	7afa      	ldrb	r2, [r7, #11]
 800824a:	429a      	cmp	r2, r3
 800824c:	d20b      	bcs.n	8008266 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	607b      	str	r3, [r7, #4]
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	e7fd      	b.n	8008262 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008266:	4b0f      	ldr	r3, [pc, #60]	@ (80082a4 <vPortValidateInterruptPriority+0x7c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800826e:	4b0e      	ldr	r3, [pc, #56]	@ (80082a8 <vPortValidateInterruptPriority+0x80>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	429a      	cmp	r2, r3
 8008274:	d90b      	bls.n	800828e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	603b      	str	r3, [r7, #0]
}
 8008288:	bf00      	nop
 800828a:	bf00      	nop
 800828c:	e7fd      	b.n	800828a <vPortValidateInterruptPriority+0x62>
	}
 800828e:	bf00      	nop
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	e000e3f0 	.word	0xe000e3f0
 80082a0:	20041558 	.word	0x20041558
 80082a4:	e000ed0c 	.word	0xe000ed0c
 80082a8:	2004155c 	.word	0x2004155c

080082ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08a      	sub	sp, #40	@ 0x28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082b8:	f7fe fbb4 	bl	8006a24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082bc:	4b5c      	ldr	r3, [pc, #368]	@ (8008430 <pvPortMalloc+0x184>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082c4:	f000 f924 	bl	8008510 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082c8:	4b5a      	ldr	r3, [pc, #360]	@ (8008434 <pvPortMalloc+0x188>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4013      	ands	r3, r2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f040 8095 	bne.w	8008400 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d01e      	beq.n	800831a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80082dc:	2208      	movs	r2, #8
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4413      	add	r3, r2
 80082e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d015      	beq.n	800831a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f023 0307 	bic.w	r3, r3, #7
 80082f4:	3308      	adds	r3, #8
 80082f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <pvPortMalloc+0x6e>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	617b      	str	r3, [r7, #20]
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop
 8008318:	e7fd      	b.n	8008316 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d06f      	beq.n	8008400 <pvPortMalloc+0x154>
 8008320:	4b45      	ldr	r3, [pc, #276]	@ (8008438 <pvPortMalloc+0x18c>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	429a      	cmp	r2, r3
 8008328:	d86a      	bhi.n	8008400 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800832a:	4b44      	ldr	r3, [pc, #272]	@ (800843c <pvPortMalloc+0x190>)
 800832c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800832e:	4b43      	ldr	r3, [pc, #268]	@ (800843c <pvPortMalloc+0x190>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008334:	e004      	b.n	8008340 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008338:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800833a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	429a      	cmp	r2, r3
 8008348:	d903      	bls.n	8008352 <pvPortMalloc+0xa6>
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1f1      	bne.n	8008336 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008352:	4b37      	ldr	r3, [pc, #220]	@ (8008430 <pvPortMalloc+0x184>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008358:	429a      	cmp	r2, r3
 800835a:	d051      	beq.n	8008400 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2208      	movs	r2, #8
 8008362:	4413      	add	r3, r2
 8008364:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800836e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	1ad2      	subs	r2, r2, r3
 8008376:	2308      	movs	r3, #8
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	429a      	cmp	r2, r3
 800837c:	d920      	bls.n	80083c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800837e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4413      	add	r3, r2
 8008384:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	f003 0307 	and.w	r3, r3, #7
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <pvPortMalloc+0xfc>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	613b      	str	r3, [r7, #16]
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	e7fd      	b.n	80083a4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083aa:	685a      	ldr	r2, [r3, #4]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	1ad2      	subs	r2, r2, r3
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083ba:	69b8      	ldr	r0, [r7, #24]
 80083bc:	f000 f90a 	bl	80085d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083c0:	4b1d      	ldr	r3, [pc, #116]	@ (8008438 <pvPortMalloc+0x18c>)
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	4a1b      	ldr	r2, [pc, #108]	@ (8008438 <pvPortMalloc+0x18c>)
 80083cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008438 <pvPortMalloc+0x18c>)
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008440 <pvPortMalloc+0x194>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d203      	bcs.n	80083e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083da:	4b17      	ldr	r3, [pc, #92]	@ (8008438 <pvPortMalloc+0x18c>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a18      	ldr	r2, [pc, #96]	@ (8008440 <pvPortMalloc+0x194>)
 80083e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	4b13      	ldr	r3, [pc, #76]	@ (8008434 <pvPortMalloc+0x188>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	431a      	orrs	r2, r3
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083f6:	4b13      	ldr	r3, [pc, #76]	@ (8008444 <pvPortMalloc+0x198>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3301      	adds	r3, #1
 80083fc:	4a11      	ldr	r2, [pc, #68]	@ (8008444 <pvPortMalloc+0x198>)
 80083fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008400:	f7fe fb1e 	bl	8006a40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f003 0307 	and.w	r3, r3, #7
 800840a:	2b00      	cmp	r3, #0
 800840c:	d00b      	beq.n	8008426 <pvPortMalloc+0x17a>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	60fb      	str	r3, [r7, #12]
}
 8008420:	bf00      	nop
 8008422:	bf00      	nop
 8008424:	e7fd      	b.n	8008422 <pvPortMalloc+0x176>
	return pvReturn;
 8008426:	69fb      	ldr	r3, [r7, #28]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3728      	adds	r7, #40	@ 0x28
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	20042120 	.word	0x20042120
 8008434:	20042134 	.word	0x20042134
 8008438:	20042124 	.word	0x20042124
 800843c:	20042118 	.word	0x20042118
 8008440:	20042128 	.word	0x20042128
 8008444:	2004212c 	.word	0x2004212c

08008448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d04f      	beq.n	80084fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800845a:	2308      	movs	r3, #8
 800845c:	425b      	negs	r3, r3
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	4413      	add	r3, r2
 8008462:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	4b25      	ldr	r3, [pc, #148]	@ (8008504 <vPortFree+0xbc>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4013      	ands	r3, r2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <vPortFree+0x46>
	__asm volatile
 8008476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847a:	f383 8811 	msr	BASEPRI, r3
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f3bf 8f4f 	dsb	sy
 8008486:	60fb      	str	r3, [r7, #12]
}
 8008488:	bf00      	nop
 800848a:	bf00      	nop
 800848c:	e7fd      	b.n	800848a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00b      	beq.n	80084ae <vPortFree+0x66>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	60bb      	str	r3, [r7, #8]
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	e7fd      	b.n	80084aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	4b14      	ldr	r3, [pc, #80]	@ (8008504 <vPortFree+0xbc>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4013      	ands	r3, r2
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d01e      	beq.n	80084fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d11a      	bne.n	80084fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008504 <vPortFree+0xbc>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	43db      	mvns	r3, r3
 80084ce:	401a      	ands	r2, r3
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084d4:	f7fe faa6 	bl	8006a24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008508 <vPortFree+0xc0>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4413      	add	r3, r2
 80084e2:	4a09      	ldr	r2, [pc, #36]	@ (8008508 <vPortFree+0xc0>)
 80084e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084e6:	6938      	ldr	r0, [r7, #16]
 80084e8:	f000 f874 	bl	80085d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084ec:	4b07      	ldr	r3, [pc, #28]	@ (800850c <vPortFree+0xc4>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3301      	adds	r3, #1
 80084f2:	4a06      	ldr	r2, [pc, #24]	@ (800850c <vPortFree+0xc4>)
 80084f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084f6:	f7fe faa3 	bl	8006a40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084fa:	bf00      	nop
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20042134 	.word	0x20042134
 8008508:	20042124 	.word	0x20042124
 800850c:	20042130 	.word	0x20042130

08008510 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008516:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800851a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800851c:	4b27      	ldr	r3, [pc, #156]	@ (80085bc <prvHeapInit+0xac>)
 800851e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00c      	beq.n	8008544 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	3307      	adds	r3, #7
 800852e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f023 0307 	bic.w	r3, r3, #7
 8008536:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	4a1f      	ldr	r2, [pc, #124]	@ (80085bc <prvHeapInit+0xac>)
 8008540:	4413      	add	r3, r2
 8008542:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008548:	4a1d      	ldr	r2, [pc, #116]	@ (80085c0 <prvHeapInit+0xb0>)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800854e:	4b1c      	ldr	r3, [pc, #112]	@ (80085c0 <prvHeapInit+0xb0>)
 8008550:	2200      	movs	r2, #0
 8008552:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	4413      	add	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800855c:	2208      	movs	r2, #8
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f023 0307 	bic.w	r3, r3, #7
 800856a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4a15      	ldr	r2, [pc, #84]	@ (80085c4 <prvHeapInit+0xb4>)
 8008570:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008572:	4b14      	ldr	r3, [pc, #80]	@ (80085c4 <prvHeapInit+0xb4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2200      	movs	r2, #0
 8008578:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800857a:	4b12      	ldr	r3, [pc, #72]	@ (80085c4 <prvHeapInit+0xb4>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2200      	movs	r2, #0
 8008580:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	1ad2      	subs	r2, r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008590:	4b0c      	ldr	r3, [pc, #48]	@ (80085c4 <prvHeapInit+0xb4>)
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	4a0a      	ldr	r2, [pc, #40]	@ (80085c8 <prvHeapInit+0xb8>)
 800859e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	4a09      	ldr	r2, [pc, #36]	@ (80085cc <prvHeapInit+0xbc>)
 80085a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085a8:	4b09      	ldr	r3, [pc, #36]	@ (80085d0 <prvHeapInit+0xc0>)
 80085aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80085ae:	601a      	str	r2, [r3, #0]
}
 80085b0:	bf00      	nop
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	20041560 	.word	0x20041560
 80085c0:	20042118 	.word	0x20042118
 80085c4:	20042120 	.word	0x20042120
 80085c8:	20042128 	.word	0x20042128
 80085cc:	20042124 	.word	0x20042124
 80085d0:	20042134 	.word	0x20042134

080085d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085dc:	4b28      	ldr	r3, [pc, #160]	@ (8008680 <prvInsertBlockIntoFreeList+0xac>)
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	e002      	b.n	80085e8 <prvInsertBlockIntoFreeList+0x14>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d8f7      	bhi.n	80085e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	4413      	add	r3, r2
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d108      	bne.n	8008616 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	441a      	add	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	441a      	add	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d118      	bne.n	800865c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	4b15      	ldr	r3, [pc, #84]	@ (8008684 <prvInsertBlockIntoFreeList+0xb0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	429a      	cmp	r2, r3
 8008634:	d00d      	beq.n	8008652 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	441a      	add	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	e008      	b.n	8008664 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008652:	4b0c      	ldr	r3, [pc, #48]	@ (8008684 <prvInsertBlockIntoFreeList+0xb0>)
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	601a      	str	r2, [r3, #0]
 800865a:	e003      	b.n	8008664 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	429a      	cmp	r2, r3
 800866a:	d002      	beq.n	8008672 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008672:	bf00      	nop
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	20042118 	.word	0x20042118
 8008684:	20042120 	.word	0x20042120

08008688 <memset>:
 8008688:	4402      	add	r2, r0
 800868a:	4603      	mov	r3, r0
 800868c:	4293      	cmp	r3, r2
 800868e:	d100      	bne.n	8008692 <memset+0xa>
 8008690:	4770      	bx	lr
 8008692:	f803 1b01 	strb.w	r1, [r3], #1
 8008696:	e7f9      	b.n	800868c <memset+0x4>

08008698 <_reclaim_reent>:
 8008698:	4b29      	ldr	r3, [pc, #164]	@ (8008740 <_reclaim_reent+0xa8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4283      	cmp	r3, r0
 800869e:	b570      	push	{r4, r5, r6, lr}
 80086a0:	4604      	mov	r4, r0
 80086a2:	d04b      	beq.n	800873c <_reclaim_reent+0xa4>
 80086a4:	69c3      	ldr	r3, [r0, #28]
 80086a6:	b1ab      	cbz	r3, 80086d4 <_reclaim_reent+0x3c>
 80086a8:	68db      	ldr	r3, [r3, #12]
 80086aa:	b16b      	cbz	r3, 80086c8 <_reclaim_reent+0x30>
 80086ac:	2500      	movs	r5, #0
 80086ae:	69e3      	ldr	r3, [r4, #28]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	5959      	ldr	r1, [r3, r5]
 80086b4:	2900      	cmp	r1, #0
 80086b6:	d13b      	bne.n	8008730 <_reclaim_reent+0x98>
 80086b8:	3504      	adds	r5, #4
 80086ba:	2d80      	cmp	r5, #128	@ 0x80
 80086bc:	d1f7      	bne.n	80086ae <_reclaim_reent+0x16>
 80086be:	69e3      	ldr	r3, [r4, #28]
 80086c0:	4620      	mov	r0, r4
 80086c2:	68d9      	ldr	r1, [r3, #12]
 80086c4:	f000 f872 	bl	80087ac <_free_r>
 80086c8:	69e3      	ldr	r3, [r4, #28]
 80086ca:	6819      	ldr	r1, [r3, #0]
 80086cc:	b111      	cbz	r1, 80086d4 <_reclaim_reent+0x3c>
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 f86c 	bl	80087ac <_free_r>
 80086d4:	6961      	ldr	r1, [r4, #20]
 80086d6:	b111      	cbz	r1, 80086de <_reclaim_reent+0x46>
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 f867 	bl	80087ac <_free_r>
 80086de:	69e1      	ldr	r1, [r4, #28]
 80086e0:	b111      	cbz	r1, 80086e8 <_reclaim_reent+0x50>
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 f862 	bl	80087ac <_free_r>
 80086e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80086ea:	b111      	cbz	r1, 80086f2 <_reclaim_reent+0x5a>
 80086ec:	4620      	mov	r0, r4
 80086ee:	f000 f85d 	bl	80087ac <_free_r>
 80086f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086f4:	b111      	cbz	r1, 80086fc <_reclaim_reent+0x64>
 80086f6:	4620      	mov	r0, r4
 80086f8:	f000 f858 	bl	80087ac <_free_r>
 80086fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80086fe:	b111      	cbz	r1, 8008706 <_reclaim_reent+0x6e>
 8008700:	4620      	mov	r0, r4
 8008702:	f000 f853 	bl	80087ac <_free_r>
 8008706:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008708:	b111      	cbz	r1, 8008710 <_reclaim_reent+0x78>
 800870a:	4620      	mov	r0, r4
 800870c:	f000 f84e 	bl	80087ac <_free_r>
 8008710:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008712:	b111      	cbz	r1, 800871a <_reclaim_reent+0x82>
 8008714:	4620      	mov	r0, r4
 8008716:	f000 f849 	bl	80087ac <_free_r>
 800871a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800871c:	b111      	cbz	r1, 8008724 <_reclaim_reent+0x8c>
 800871e:	4620      	mov	r0, r4
 8008720:	f000 f844 	bl	80087ac <_free_r>
 8008724:	6a23      	ldr	r3, [r4, #32]
 8008726:	b14b      	cbz	r3, 800873c <_reclaim_reent+0xa4>
 8008728:	4620      	mov	r0, r4
 800872a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800872e:	4718      	bx	r3
 8008730:	680e      	ldr	r6, [r1, #0]
 8008732:	4620      	mov	r0, r4
 8008734:	f000 f83a 	bl	80087ac <_free_r>
 8008738:	4631      	mov	r1, r6
 800873a:	e7bb      	b.n	80086b4 <_reclaim_reent+0x1c>
 800873c:	bd70      	pop	{r4, r5, r6, pc}
 800873e:	bf00      	nop
 8008740:	20040014 	.word	0x20040014

08008744 <__libc_init_array>:
 8008744:	b570      	push	{r4, r5, r6, lr}
 8008746:	4d0d      	ldr	r5, [pc, #52]	@ (800877c <__libc_init_array+0x38>)
 8008748:	4c0d      	ldr	r4, [pc, #52]	@ (8008780 <__libc_init_array+0x3c>)
 800874a:	1b64      	subs	r4, r4, r5
 800874c:	10a4      	asrs	r4, r4, #2
 800874e:	2600      	movs	r6, #0
 8008750:	42a6      	cmp	r6, r4
 8008752:	d109      	bne.n	8008768 <__libc_init_array+0x24>
 8008754:	4d0b      	ldr	r5, [pc, #44]	@ (8008784 <__libc_init_array+0x40>)
 8008756:	4c0c      	ldr	r4, [pc, #48]	@ (8008788 <__libc_init_array+0x44>)
 8008758:	f000 f87e 	bl	8008858 <_init>
 800875c:	1b64      	subs	r4, r4, r5
 800875e:	10a4      	asrs	r4, r4, #2
 8008760:	2600      	movs	r6, #0
 8008762:	42a6      	cmp	r6, r4
 8008764:	d105      	bne.n	8008772 <__libc_init_array+0x2e>
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	f855 3b04 	ldr.w	r3, [r5], #4
 800876c:	4798      	blx	r3
 800876e:	3601      	adds	r6, #1
 8008770:	e7ee      	b.n	8008750 <__libc_init_array+0xc>
 8008772:	f855 3b04 	ldr.w	r3, [r5], #4
 8008776:	4798      	blx	r3
 8008778:	3601      	adds	r6, #1
 800877a:	e7f2      	b.n	8008762 <__libc_init_array+0x1e>
 800877c:	08008a04 	.word	0x08008a04
 8008780:	08008a04 	.word	0x08008a04
 8008784:	08008a04 	.word	0x08008a04
 8008788:	08008a08 	.word	0x08008a08

0800878c <__retarget_lock_acquire_recursive>:
 800878c:	4770      	bx	lr

0800878e <__retarget_lock_release_recursive>:
 800878e:	4770      	bx	lr

08008790 <memcpy>:
 8008790:	440a      	add	r2, r1
 8008792:	4291      	cmp	r1, r2
 8008794:	f100 33ff 	add.w	r3, r0, #4294967295
 8008798:	d100      	bne.n	800879c <memcpy+0xc>
 800879a:	4770      	bx	lr
 800879c:	b510      	push	{r4, lr}
 800879e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087a6:	4291      	cmp	r1, r2
 80087a8:	d1f9      	bne.n	800879e <memcpy+0xe>
 80087aa:	bd10      	pop	{r4, pc}

080087ac <_free_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4605      	mov	r5, r0
 80087b0:	2900      	cmp	r1, #0
 80087b2:	d041      	beq.n	8008838 <_free_r+0x8c>
 80087b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087b8:	1f0c      	subs	r4, r1, #4
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	bfb8      	it	lt
 80087be:	18e4      	addlt	r4, r4, r3
 80087c0:	f000 f83e 	bl	8008840 <__malloc_lock>
 80087c4:	4a1d      	ldr	r2, [pc, #116]	@ (800883c <_free_r+0x90>)
 80087c6:	6813      	ldr	r3, [r2, #0]
 80087c8:	b933      	cbnz	r3, 80087d8 <_free_r+0x2c>
 80087ca:	6063      	str	r3, [r4, #4]
 80087cc:	6014      	str	r4, [r2, #0]
 80087ce:	4628      	mov	r0, r5
 80087d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087d4:	f000 b83a 	b.w	800884c <__malloc_unlock>
 80087d8:	42a3      	cmp	r3, r4
 80087da:	d908      	bls.n	80087ee <_free_r+0x42>
 80087dc:	6820      	ldr	r0, [r4, #0]
 80087de:	1821      	adds	r1, r4, r0
 80087e0:	428b      	cmp	r3, r1
 80087e2:	bf01      	itttt	eq
 80087e4:	6819      	ldreq	r1, [r3, #0]
 80087e6:	685b      	ldreq	r3, [r3, #4]
 80087e8:	1809      	addeq	r1, r1, r0
 80087ea:	6021      	streq	r1, [r4, #0]
 80087ec:	e7ed      	b.n	80087ca <_free_r+0x1e>
 80087ee:	461a      	mov	r2, r3
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	b10b      	cbz	r3, 80087f8 <_free_r+0x4c>
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	d9fa      	bls.n	80087ee <_free_r+0x42>
 80087f8:	6811      	ldr	r1, [r2, #0]
 80087fa:	1850      	adds	r0, r2, r1
 80087fc:	42a0      	cmp	r0, r4
 80087fe:	d10b      	bne.n	8008818 <_free_r+0x6c>
 8008800:	6820      	ldr	r0, [r4, #0]
 8008802:	4401      	add	r1, r0
 8008804:	1850      	adds	r0, r2, r1
 8008806:	4283      	cmp	r3, r0
 8008808:	6011      	str	r1, [r2, #0]
 800880a:	d1e0      	bne.n	80087ce <_free_r+0x22>
 800880c:	6818      	ldr	r0, [r3, #0]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	6053      	str	r3, [r2, #4]
 8008812:	4408      	add	r0, r1
 8008814:	6010      	str	r0, [r2, #0]
 8008816:	e7da      	b.n	80087ce <_free_r+0x22>
 8008818:	d902      	bls.n	8008820 <_free_r+0x74>
 800881a:	230c      	movs	r3, #12
 800881c:	602b      	str	r3, [r5, #0]
 800881e:	e7d6      	b.n	80087ce <_free_r+0x22>
 8008820:	6820      	ldr	r0, [r4, #0]
 8008822:	1821      	adds	r1, r4, r0
 8008824:	428b      	cmp	r3, r1
 8008826:	bf04      	itt	eq
 8008828:	6819      	ldreq	r1, [r3, #0]
 800882a:	685b      	ldreq	r3, [r3, #4]
 800882c:	6063      	str	r3, [r4, #4]
 800882e:	bf04      	itt	eq
 8008830:	1809      	addeq	r1, r1, r0
 8008832:	6021      	streq	r1, [r4, #0]
 8008834:	6054      	str	r4, [r2, #4]
 8008836:	e7ca      	b.n	80087ce <_free_r+0x22>
 8008838:	bd38      	pop	{r3, r4, r5, pc}
 800883a:	bf00      	nop
 800883c:	20042274 	.word	0x20042274

08008840 <__malloc_lock>:
 8008840:	4801      	ldr	r0, [pc, #4]	@ (8008848 <__malloc_lock+0x8>)
 8008842:	f7ff bfa3 	b.w	800878c <__retarget_lock_acquire_recursive>
 8008846:	bf00      	nop
 8008848:	20042270 	.word	0x20042270

0800884c <__malloc_unlock>:
 800884c:	4801      	ldr	r0, [pc, #4]	@ (8008854 <__malloc_unlock+0x8>)
 800884e:	f7ff bf9e 	b.w	800878e <__retarget_lock_release_recursive>
 8008852:	bf00      	nop
 8008854:	20042270 	.word	0x20042270

08008858 <_init>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	bf00      	nop
 800885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885e:	bc08      	pop	{r3}
 8008860:	469e      	mov	lr, r3
 8008862:	4770      	bx	lr

08008864 <_fini>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	bf00      	nop
 8008868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886a:	bc08      	pop	{r3}
 800886c:	469e      	mov	lr, r3
 800886e:	4770      	bx	lr
